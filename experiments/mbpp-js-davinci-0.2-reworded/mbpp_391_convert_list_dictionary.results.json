{
  "name": "mbpp_391_convert_list_dictionary",
  "language": "js",
  "prompt": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_391_convert_list_dictionary.py",
  "prompt_terminology": "reworded",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "results": [
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for(var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpvmuyc11g.js:15:10)\n    at Object.<anonymous> (/tmp/tmpvmuyc11g.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpjvqnvn5f.js:14:10)\n    at Object.<anonymous> (/tmp/tmpjvqnvn5f.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\n\nvar keys = ['name', 'age', 'gender'];\nvar values = ['John', '20', 'male'];\nvar values2 = ['Mary', '30', 'female'];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpawgy85c7.js:18:10)\n    at Object.<anonymous> (/tmp/tmpawgy85c7.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++) {\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpnppu20ze.js:14:10)\n    at Object.<anonymous> (/tmp/tmpnppu20ze.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\n\nvar l1 = [\"name\", \"age\", \"sex\"];\nvar l2 = [\"Tom\", \"18\", \"male\"];\nvar l3 = [\"Mary\", \"20\", \"female\"];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpx6_3364p.js:17:10)\n    at Object.<anonymous> (/tmp/tmpx6_3364p.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpjvqnvn5f.js:14:10)\n    at Object.<anonymous> (/tmp/tmpjvqnvn5f.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpjvqnvn5f.js:14:10)\n    at Object.<anonymous> (/tmp/tmpjvqnvn5f.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpjvqnvn5f.js:14:10)\n    at Object.<anonymous> (/tmp/tmpjvqnvn5f.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var obj = {};\n    for (var i = 0; i < l1.length; i++){\n        obj[l1[i]] = [l2[i], l3[i]];\n    }\n    return obj;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpstea2odo.js:15:10)\n    at Object.<anonymous> (/tmp/tmpstea2odo.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpjvqnvn5f.js:14:10)\n    at Object.<anonymous> (/tmp/tmpjvqnvn5f.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i=0; i<l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpa7mvy390.js:15:10)\n    at Object.<anonymous> (/tmp/tmpa7mvy390.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var obj = {};\n    for (var i = 0; i < l1.length; i++){\n        obj[l1[i]] = [l2[i], l3[i]];\n    }\n    return obj;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpyvpuxbw1.js:14:10)\n    at Object.<anonymous> (/tmp/tmpyvpuxbw1.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp_89f3dvj.js:15:10)\n    at Object.<anonymous> (/tmp/tmp_89f3dvj.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp_89f3dvj.js:15:10)\n    at Object.<anonymous> (/tmp/tmp_89f3dvj.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp_89f3dvj.js:15:10)\n    at Object.<anonymous> (/tmp/tmp_89f3dvj.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++) {\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpxb8ylk8d.js:15:10)\n    at Object.<anonymous> (/tmp/tmpxb8ylk8d.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var obj = {};\n    for(var i = 0; i < l1.length; i++){\n        obj[l1[i]] = [l2[i], l3[i]];\n    }\n    return obj;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpgl2b7u8g.js:15:10)\n    at Object.<anonymous> (/tmp/tmpgl2b7u8g.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpjvqnvn5f.js:14:10)\n    at Object.<anonymous> (/tmp/tmpjvqnvn5f.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpjvqnvn5f.js:14:10)\n    at Object.<anonymous> (/tmp/tmpjvqnvn5f.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var obj = {};\n    for(var i = 0; i < l1.length; i++){\n        obj[l1[i]] = [l2[i], l3[i]];\n    }\n    return obj;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpgl2b7u8g.js:15:10)\n    at Object.<anonymous> (/tmp/tmpgl2b7u8g.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp_89f3dvj.js:15:10)\n    at Object.<anonymous> (/tmp/tmp_89f3dvj.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpn5vzqa9w.js:13:10)\n    at Object.<anonymous> (/tmp/tmpn5vzqa9w.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++) {\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpnppu20ze.js:14:10)\n    at Object.<anonymous> (/tmp/tmpnppu20ze.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpvjm7cn4x.js:14:10)\n    at Object.<anonymous> (/tmp/tmpvjm7cn4x.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpn5vzqa9w.js:13:10)\n    at Object.<anonymous> (/tmp/tmpn5vzqa9w.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpvjm7cn4x.js:14:10)\n    at Object.<anonymous> (/tmp/tmpvjm7cn4x.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpn5vzqa9w.js:13:10)\n    at Object.<anonymous> (/tmp/tmpn5vzqa9w.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp_89f3dvj.js:15:10)\n    at Object.<anonymous> (/tmp/tmp_89f3dvj.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++) {\n        result[l1[i]] = {};\n        result[l1[i]][l2[i]] = l3[i];\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: {\n    'Adina Park': 85\n  },\n  S002: {\n    'Leyton Marsh': 98\n  },\n  S003: {\n    'Duncan Boyle': 89\n  },\n  S004: {\n    'Saim Richards': 92\n  }\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpyi7724lj.js:15:10)\n    at Object.<anonymous> (/tmp/tmpyi7724lj.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: { 'Adina Park': 85 },\n    S002: { 'Leyton Marsh': 98 },\n    S003: { 'Duncan Boyle': 89 },\n    S004: { 'Saim Richards': 92 }\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp_89f3dvj.js:15:10)\n    at Object.<anonymous> (/tmp/tmp_89f3dvj.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++) {\n        result[l1[i]] = {};\n        result[l1[i]][l2[i]] = l3[i];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: {\n    'Adina Park': 85\n  },\n  S002: {\n    'Leyton Marsh': 98\n  },\n  S003: {\n    'Duncan Boyle': 89\n  },\n  S004: {\n    'Saim Richards': 92\n  }\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp0vu6u0tt.js:16:10)\n    at Object.<anonymous> (/tmp/tmp0vu6u0tt.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: { 'Adina Park': 85 },\n    S002: { 'Leyton Marsh': 98 },\n    S003: { 'Duncan Boyle': 89 },\n    S004: { 'Saim Richards': 92 }\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpjvqnvn5f.js:14:10)\n    at Object.<anonymous> (/tmp/tmpjvqnvn5f.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp_89f3dvj.js:15:10)\n    at Object.<anonymous> (/tmp/tmp_89f3dvj.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\n\nvar l1 = [\"a\", \"b\", \"c\"];\nvar l2 = [1, 2, 3];\nvar l3 = [true, false, true];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp3h2q8zee.js:17:10)\n    at Object.<anonymous> (/tmp/tmp3h2q8zee.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp_89f3dvj.js:15:10)\n    at Object.<anonymous> (/tmp/tmp_89f3dvj.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpn5vzqa9w.js:13:10)\n    at Object.<anonymous> (/tmp/tmpn5vzqa9w.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpn5vzqa9w.js:13:10)\n    at Object.<anonymous> (/tmp/tmpn5vzqa9w.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpn5vzqa9w.js:13:10)\n    at Object.<anonymous> (/tmp/tmpn5vzqa9w.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var obj = {};\n    for (var i = 0; i < l1.length; i++) {\n        obj[l1[i]] = {};\n        obj[l1[i]][l2[i]] = l3[i];\n    }\n    return obj;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: {\n    'Adina Park': 85\n  },\n  S002: {\n    'Leyton Marsh': 98\n  },\n  S003: {\n    'Duncan Boyle': 89\n  },\n  S004: {\n    'Saim Richards': 92\n  }\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp5x11nazq.js:16:10)\n    at Object.<anonymous> (/tmp/tmp5x11nazq.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: { 'Adina Park': 85 },\n    S002: { 'Leyton Marsh': 98 },\n    S003: { 'Duncan Boyle': 89 },\n    S004: { 'Saim Richards': 92 }\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp_89f3dvj.js:15:10)\n    at Object.<anonymous> (/tmp/tmp_89f3dvj.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++) {\n        result[l1[i]] = {};\n        result[l1[i]][l2[i]] = l3[i];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: {\n    'Adina Park': 85\n  },\n  S002: {\n    'Leyton Marsh': 98\n  },\n  S003: {\n    'Duncan Boyle': 89\n  },\n  S004: {\n    'Saim Richards': 92\n  }\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp0vu6u0tt.js:16:10)\n    at Object.<anonymous> (/tmp/tmp0vu6u0tt.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: { 'Adina Park': 85 },\n    S002: { 'Leyton Marsh': 98 },\n    S003: { 'Duncan Boyle': 89 },\n    S004: { 'Saim Richards': 92 }\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp_89f3dvj.js:15:10)\n    at Object.<anonymous> (/tmp/tmp_89f3dvj.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpn5vzqa9w.js:13:10)\n    at Object.<anonymous> (/tmp/tmpn5vzqa9w.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpjvqnvn5f.js:14:10)\n    at Object.<anonymous> (/tmp/tmpjvqnvn5f.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpjvqnvn5f.js:14:10)\n    at Object.<anonymous> (/tmp/tmpjvqnvn5f.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++) {\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpxb8ylk8d.js:15:10)\n    at Object.<anonymous> (/tmp/tmpxb8ylk8d.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpn5vzqa9w.js:13:10)\n    at Object.<anonymous> (/tmp/tmpn5vzqa9w.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpjvqnvn5f.js:14:10)\n    at Object.<anonymous> (/tmp/tmpjvqnvn5f.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpjvqnvn5f.js:14:10)\n    at Object.<anonymous> (/tmp/tmpjvqnvn5f.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp_89f3dvj.js:15:10)\n    at Object.<anonymous> (/tmp/tmp_89f3dvj.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\n\nvar l1 = [\"name\", \"age\", \"sex\"];\nvar l2 = [\"John\", \"20\", \"male\"];\nvar l3 = [\"Mary\", \"18\", \"female\"];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp77vd2sga.js:17:10)\n    at Object.<anonymous> (/tmp/tmp77vd2sga.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpjvqnvn5f.js:14:10)\n    at Object.<anonymous> (/tmp/tmpjvqnvn5f.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\nvar l1 = ['a', 'b', 'c'];\nvar l2 = [1, 2, 3];\nvar l3 = [true, false, true];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp2fiwhne8.js:17:10)\n    at Object.<anonymous> (/tmp/tmp2fiwhne8.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpn5vzqa9w.js:13:10)\n    at Object.<anonymous> (/tmp/tmpn5vzqa9w.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++) {\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpnppu20ze.js:14:10)\n    at Object.<anonymous> (/tmp/tmpnppu20ze.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpn5vzqa9w.js:13:10)\n    at Object.<anonymous> (/tmp/tmpn5vzqa9w.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpn5vzqa9w.js:13:10)\n    at Object.<anonymous> (/tmp/tmpn5vzqa9w.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpvjm7cn4x.js:14:10)\n    at Object.<anonymous> (/tmp/tmpvjm7cn4x.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++) {\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpxb8ylk8d.js:15:10)\n    at Object.<anonymous> (/tmp/tmpxb8ylk8d.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpn5vzqa9w.js:13:10)\n    at Object.<anonymous> (/tmp/tmpn5vzqa9w.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpn5vzqa9w.js:13:10)\n    at Object.<anonymous> (/tmp/tmpn5vzqa9w.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpn5vzqa9w.js:13:10)\n    at Object.<anonymous> (/tmp/tmpn5vzqa9w.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpn5vzqa9w.js:13:10)\n    at Object.<anonymous> (/tmp/tmpn5vzqa9w.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = {};\n        result[l1[i]][l2[i]] = l3[i];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: {\n    'Adina Park': 85\n  },\n  S002: {\n    'Leyton Marsh': 98\n  },\n  S003: {\n    'Duncan Boyle': 89\n  },\n  S004: {\n    'Saim Richards': 92\n  }\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp75r124zb.js:16:10)\n    at Object.<anonymous> (/tmp/tmp75r124zb.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: { 'Adina Park': 85 },\n    S002: { 'Leyton Marsh': 98 },\n    S003: { 'Duncan Boyle': 89 },\n    S004: { 'Saim Richards': 92 }\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp_89f3dvj.js:15:10)\n    at Object.<anonymous> (/tmp/tmp_89f3dvj.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp_89f3dvj.js:15:10)\n    at Object.<anonymous> (/tmp/tmp_89f3dvj.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpn5vzqa9w.js:13:10)\n    at Object.<anonymous> (/tmp/tmpn5vzqa9w.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp_89f3dvj.js:15:10)\n    at Object.<anonymous> (/tmp/tmp_89f3dvj.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++) {\n        result[l1[i]] = {};\n        result[l1[i]][l2[i]] = l3[i];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: {\n    'Adina Park': 85\n  },\n  S002: {\n    'Leyton Marsh': 98\n  },\n  S003: {\n    'Duncan Boyle': 89\n  },\n  S004: {\n    'Saim Richards': 92\n  }\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp0vu6u0tt.js:16:10)\n    at Object.<anonymous> (/tmp/tmp0vu6u0tt.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: { 'Adina Park': 85 },\n    S002: { 'Leyton Marsh': 98 },\n    S003: { 'Duncan Boyle': 89 },\n    S004: { 'Saim Richards': 92 }\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpn5vzqa9w.js:13:10)\n    at Object.<anonymous> (/tmp/tmpn5vzqa9w.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var obj = {};\n    for (var i = 0; i < l1.length; i++) {\n        obj[l1[i]] = [l2[i], l3[i]];\n    }\n    return obj;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp740ky31i.js:14:10)\n    at Object.<anonymous> (/tmp/tmp740ky31i.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpn5vzqa9w.js:13:10)\n    at Object.<anonymous> (/tmp/tmpn5vzqa9w.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpn5vzqa9w.js:13:10)\n    at Object.<anonymous> (/tmp/tmpn5vzqa9w.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpvjm7cn4x.js:14:10)\n    at Object.<anonymous> (/tmp/tmpvjm7cn4x.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp_89f3dvj.js:15:10)\n    at Object.<anonymous> (/tmp/tmp_89f3dvj.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpn5vzqa9w.js:13:10)\n    at Object.<anonymous> (/tmp/tmpn5vzqa9w.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp_89f3dvj.js:15:10)\n    at Object.<anonymous> (/tmp/tmp_89f3dvj.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpvjm7cn4x.js:14:10)\n    at Object.<anonymous> (/tmp/tmpvjm7cn4x.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpn5vzqa9w.js:13:10)\n    at Object.<anonymous> (/tmp/tmpn5vzqa9w.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\n\nvar list1 = [\"key1\", \"key2\", \"key3\"];\nvar list2 = [\"value1\", \"value2\", \"value3\"];\nvar list3 = [\"value4\", \"value5\", \"value6\"];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp8htdmxmn.js:17:10)\n    at Object.<anonymous> (/tmp/tmp8htdmxmn.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for(var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpnyhnkniu.js:14:10)\n    at Object.<anonymous> (/tmp/tmpnyhnkniu.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\n\nvar l1 = [\"name\", \"age\", \"sex\"];\nvar l2 = [\"John\", \"20\", \"male\"];\nvar l3 = [\"Mary\", \"21\", \"female\"];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp4ini7t8u.js:17:10)\n    at Object.<anonymous> (/tmp/tmp4ini7t8u.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpn5vzqa9w.js:13:10)\n    at Object.<anonymous> (/tmp/tmpn5vzqa9w.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var obj = {};\n    for (var i = 0; i < l1.length; i++) {\n        obj[l1[i]] = {};\n        obj[l1[i]][l2[i]] = l3[i];\n    }\n    return obj;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: {\n    'Adina Park': 85\n  },\n  S002: {\n    'Leyton Marsh': 98\n  },\n  S003: {\n    'Duncan Boyle': 89\n  },\n  S004: {\n    'Saim Richards': 92\n  }\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp5x11nazq.js:16:10)\n    at Object.<anonymous> (/tmp/tmp5x11nazq.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: { 'Adina Park': 85 },\n    S002: { 'Leyton Marsh': 98 },\n    S003: { 'Duncan Boyle': 89 },\n    S004: { 'Saim Richards': 92 }\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpn5vzqa9w.js:13:10)\n    at Object.<anonymous> (/tmp/tmpn5vzqa9w.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\n\nvar l1 = ['a', 'b', 'c'];\nvar l2 = [1, 2, 3];\nvar l3 = [true, false, true];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp_p3klomj.js:18:10)\n    at Object.<anonymous> (/tmp/tmp_p3klomj.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpjvqnvn5f.js:14:10)\n    at Object.<anonymous> (/tmp/tmpjvqnvn5f.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for(var i = 0; i < l1.length; i++){\n        result[l1[i]] = {};\n        result[l1[i]][l2[i]] = l3[i];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: {\n    'Adina Park': 85\n  },\n  S002: {\n    'Leyton Marsh': 98\n  },\n  S003: {\n    'Duncan Boyle': 89\n  },\n  S004: {\n    'Saim Richards': 92\n  }\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpropf9_tr.js:16:10)\n    at Object.<anonymous> (/tmp/tmpropf9_tr.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: { 'Adina Park': 85 },\n    S002: { 'Leyton Marsh': 98 },\n    S003: { 'Duncan Boyle': 89 },\n    S004: { 'Saim Richards': 92 }\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp_89f3dvj.js:15:10)\n    at Object.<anonymous> (/tmp/tmp_89f3dvj.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp_89f3dvj.js:15:10)\n    at Object.<anonymous> (/tmp/tmp_89f3dvj.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpn5vzqa9w.js:13:10)\n    at Object.<anonymous> (/tmp/tmpn5vzqa9w.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp_89f3dvj.js:15:10)\n    at Object.<anonymous> (/tmp/tmp_89f3dvj.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpn5vzqa9w.js:13:10)\n    at Object.<anonymous> (/tmp/tmpn5vzqa9w.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpn5vzqa9w.js:13:10)\n    at Object.<anonymous> (/tmp/tmpn5vzqa9w.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp_89f3dvj.js:15:10)\n    at Object.<anonymous> (/tmp/tmp_89f3dvj.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var obj = {};\n    for(var i = 0; i < l1.length; i++){\n        obj[l1[i]] = [l2[i], l3[i]];\n    }\n    return obj;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpgl2b7u8g.js:15:10)\n    at Object.<anonymous> (/tmp/tmpgl2b7u8g.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpvjm7cn4x.js:14:10)\n    at Object.<anonymous> (/tmp/tmpvjm7cn4x.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp_89f3dvj.js:15:10)\n    at Object.<anonymous> (/tmp/tmp_89f3dvj.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpvjm7cn4x.js:14:10)\n    at Object.<anonymous> (/tmp/tmpvjm7cn4x.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpn5vzqa9w.js:13:10)\n    at Object.<anonymous> (/tmp/tmpn5vzqa9w.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpn5vzqa9w.js:13:10)\n    at Object.<anonymous> (/tmp/tmpn5vzqa9w.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var l1_key = l1[0];\n    var l2_key = l2[0];\n    var l3_key = l3[0];\n    var l1_value = l1[1];\n    var l2_value = l2[1];\n    var l3_value = l3[1];\n    var l1_dict = {};\n    var l2_dict = {};\n    var l3_dict = {};\n    l1_dict[l1_key] = l1_value;\n    l2_dict[l2_key] = l2_value;\n    l3_dict[l3_key] = l3_value;\n    var l1_l2_dict = {};\n    var l1_l2_l3_dict = {};\n    l1_l2_dict[l1_key] = l1_dict;\n    l1_l2_dict[l2_key] = l2_dict;\n    l1_l2_l3_dict[l1_key] = l1_l2_dict;\n    l1_l2_l3_dict[l3_key] = l3_dict;\n    return l1_l2_l3_dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  '85': {\n    '85': 98\n  },\n  S001: {\n    'Adina Park': {\n      'Adina Park': 'Leyton Marsh'\n    },\n    S001: {\n      S001: 'S002'\n    }\n  }\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpjbrg9mvk.js:29:10)\n    at Object.<anonymous> (/tmp/tmpjbrg9mvk.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    '85': { '85': 98 },\n    S001: {\n      S001: { S001: 'S002' },\n      'Adina Park': { 'Adina Park': 'Leyton Marsh' }\n    }\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpvjm7cn4x.js:14:10)\n    at Object.<anonymous> (/tmp/tmpvjm7cn4x.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp_89f3dvj.js:15:10)\n    at Object.<anonymous> (/tmp/tmp_89f3dvj.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++) {\n        result[l1[i]] = {};\n        result[l1[i]][l2[i]] = l3[i];\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: {\n    'Adina Park': 85\n  },\n  S002: {\n    'Leyton Marsh': 98\n  },\n  S003: {\n    'Duncan Boyle': 89\n  },\n  S004: {\n    'Saim Richards': 92\n  }\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpyi7724lj.js:15:10)\n    at Object.<anonymous> (/tmp/tmpyi7724lj.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: { 'Adina Park': 85 },\n    S002: { 'Leyton Marsh': 98 },\n    S003: { 'Duncan Boyle': 89 },\n    S004: { 'Saim Richards': 92 }\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpn5vzqa9w.js:13:10)\n    at Object.<anonymous> (/tmp/tmpn5vzqa9w.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = {};\n        result[l1[i]][l2[i]] = l3[i];\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: {\n    'Adina Park': 85\n  },\n  S002: {\n    'Leyton Marsh': 98\n  },\n  S003: {\n    'Duncan Boyle': 89\n  },\n  S004: {\n    'Saim Richards': 92\n  }\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp3ocabkcx.js:15:10)\n    at Object.<anonymous> (/tmp/tmp3ocabkcx.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: { 'Adina Park': 85 },\n    S002: { 'Leyton Marsh': 98 },\n    S003: { 'Duncan Boyle': 89 },\n    S004: { 'Saim Richards': 92 }\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpn5vzqa9w.js:13:10)\n    at Object.<anonymous> (/tmp/tmpn5vzqa9w.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var new_dict = {};\n    for(var i = 0; i < l1.length; i++){\n        new_dict[l1[i]] = [l2[i], l3[i]];\n    }\n    return new_dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpm5gbi0f7.js:14:10)\n    at Object.<anonymous> (/tmp/tmpm5gbi0f7.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpjvqnvn5f.js:14:10)\n    at Object.<anonymous> (/tmp/tmpjvqnvn5f.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpn5vzqa9w.js:13:10)\n    at Object.<anonymous> (/tmp/tmpn5vzqa9w.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var obj = {};\n    for(var i = 0; i < l1.length; i++){\n        obj[l1[i]] = {};\n        for(var j = 0; j < l2.length; j++){\n            obj[l1[i]][l2[j]] = l3[i][j];\n        }\n    }\n    return obj;\n}\n\nvar l1 = [\"a\", \"b\", \"c\"];\nvar l2 = [\"d\", \"e\", \"f\"];\nvar l3 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: {\n    'Adina Park': undefined,\n    'Duncan Boyle': undefined,\n    'Leyton Marsh': undefined,\n    'Saim Richards': undefined\n  },\n  S002: {\n    'Adina Park': undefined,\n    'Duncan Boyle': undefined,\n    'Leyton Marsh': undefined,\n    'Saim Richards': undefined\n  },\n  S003: {\n    'Adina Park': undefined,\n    'Duncan Boyle': undefined,\n    'Leyton Marsh': undefined,\n    'Saim Richards': undefined\n  },\n  S004: {\n    'Adina Park': undefined,\n    'Duncan Boyle': undefined,\n    'Leyton Marsh': undefi...\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmptad9u8rs.js:21:10)\n    at Object.<anonymous> (/tmp/tmptad9u8rs.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: {\n      'Adina Park': undefined,\n      'Leyton Marsh': undefined,\n      'Duncan Boyle': undefined,\n      'Saim Richards': undefined\n    },\n    S002: {\n      'Adina Park': undefined,\n      'Leyton Marsh': undefined,\n      'Duncan Boyle': undefined,\n      'Saim Richards': undefined\n    },\n    S003: {\n      'Adina Park': undefined,\n      'Leyton Marsh': undefined,\n      'Duncan Boyle': undefined,\n      'Saim Richards': undefined\n    },\n    S004: {\n      'Adina Park': undefined,\n      'Leyton Marsh': undefined,\n      'Duncan Boyle': undefined,\n      'Saim Richards': undefined\n    }\n  },\n  expected",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp_89f3dvj.js:15:10)\n    at Object.<anonymous> (/tmp/tmp_89f3dvj.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpn5vzqa9w.js:13:10)\n    at Object.<anonymous> (/tmp/tmpn5vzqa9w.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++) {\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpxb8ylk8d.js:15:10)\n    at Object.<anonymous> (/tmp/tmpxb8ylk8d.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpn5vzqa9w.js:13:10)\n    at Object.<anonymous> (/tmp/tmpn5vzqa9w.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpn5vzqa9w.js:13:10)\n    at Object.<anonymous> (/tmp/tmpn5vzqa9w.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++) {\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\n\nvar l1 = [\"name\", \"age\", \"sex\"];\nvar l2 = [\"John\", \"25\", \"Male\"];\nvar l3 = [\"Jane\", \"30\", \"Female\"];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpcww7w8g8.js:18:10)\n    at Object.<anonymous> (/tmp/tmpcww7w8g8.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++) {\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpxb8ylk8d.js:15:10)\n    at Object.<anonymous> (/tmp/tmpxb8ylk8d.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++) {\n        result[l1[i]] = {};\n        result[l1[i]][l2[i]] = l3[i];\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: {\n    'Adina Park': 85\n  },\n  S002: {\n    'Leyton Marsh': 98\n  },\n  S003: {\n    'Duncan Boyle': 89\n  },\n  S004: {\n    'Saim Richards': 92\n  }\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpyi7724lj.js:15:10)\n    at Object.<anonymous> (/tmp/tmpyi7724lj.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: { 'Adina Park': 85 },\n    S002: { 'Leyton Marsh': 98 },\n    S003: { 'Duncan Boyle': 89 },\n    S004: { 'Saim Richards': 92 }\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var obj = {};\n    for (var i = 0; i < l1.length; i++) {\n        obj[l1[i]] = [l2[i], l3[i]];\n    }\n    return obj;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp740ky31i.js:14:10)\n    at Object.<anonymous> (/tmp/tmp740ky31i.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var obj = {};\n    for(var i = 0; i < l1.length; i++){\n        obj[l1[i]] = [l2[i], l3[i]];\n    }\n    return obj;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpgl2b7u8g.js:15:10)\n    at Object.<anonymous> (/tmp/tmpgl2b7u8g.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++) {\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpnppu20ze.js:14:10)\n    at Object.<anonymous> (/tmp/tmpnppu20ze.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpn5vzqa9w.js:13:10)\n    at Object.<anonymous> (/tmp/tmpn5vzqa9w.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpn5vzqa9w.js:13:10)\n    at Object.<anonymous> (/tmp/tmpn5vzqa9w.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++) {\n        result[l1[i]] = {};\n        result[l1[i]][l2[i]] = l3[i];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: {\n    'Adina Park': 85\n  },\n  S002: {\n    'Leyton Marsh': 98\n  },\n  S003: {\n    'Duncan Boyle': 89\n  },\n  S004: {\n    'Saim Richards': 92\n  }\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp0vu6u0tt.js:16:10)\n    at Object.<anonymous> (/tmp/tmp0vu6u0tt.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: { 'Adina Park': 85 },\n    S002: { 'Leyton Marsh': 98 },\n    S003: { 'Duncan Boyle': 89 },\n    S004: { 'Saim Richards': 92 }\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++) {\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpxb8ylk8d.js:15:10)\n    at Object.<anonymous> (/tmp/tmpxb8ylk8d.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpjvqnvn5f.js:14:10)\n    at Object.<anonymous> (/tmp/tmpjvqnvn5f.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp_89f3dvj.js:15:10)\n    at Object.<anonymous> (/tmp/tmp_89f3dvj.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\n\nvar l1 = [\"name\", \"age\", \"sex\"];\nvar l2 = [\"John\", \"25\", \"male\"];\nvar l3 = [\"Mary\", \"30\", \"female\"];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp4478sziw.js:18:10)\n    at Object.<anonymous> (/tmp/tmp4478sziw.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++) {\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpxb8ylk8d.js:15:10)\n    at Object.<anonymous> (/tmp/tmpxb8ylk8d.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp_89f3dvj.js:15:10)\n    at Object.<anonymous> (/tmp/tmp_89f3dvj.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\n\nvar l1 = [\"name\", \"age\", \"sex\"];\nvar l2 = [\"Jhon\", \"25\", \"Male\"];\nvar l3 = [\"Mary\", \"30\", \"Female\"];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpjymub326.js:18:10)\n    at Object.<anonymous> (/tmp/tmpjymub326.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpn5vzqa9w.js:13:10)\n    at Object.<anonymous> (/tmp/tmpn5vzqa9w.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpjvqnvn5f.js:14:10)\n    at Object.<anonymous> (/tmp/tmpjvqnvn5f.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp_89f3dvj.js:15:10)\n    at Object.<anonymous> (/tmp/tmp_89f3dvj.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp_89f3dvj.js:15:10)\n    at Object.<anonymous> (/tmp/tmp_89f3dvj.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpvjm7cn4x.js:14:10)\n    at Object.<anonymous> (/tmp/tmpvjm7cn4x.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp_89f3dvj.js:15:10)\n    at Object.<anonymous> (/tmp/tmp_89f3dvj.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpjvqnvn5f.js:14:10)\n    at Object.<anonymous> (/tmp/tmpjvqnvn5f.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\n\nvar l1 = [\"name\", \"age\", \"sex\"];\nvar l2 = [\"John\", \"20\", \"male\"];\nvar l3 = [\"Mary\", \"18\", \"female\"];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp77vd2sga.js:17:10)\n    at Object.<anonymous> (/tmp/tmp77vd2sga.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++) {\n        result[l1[i]] = {};\n        result[l1[i]][l2[i]] = l3[i];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: {\n    'Adina Park': 85\n  },\n  S002: {\n    'Leyton Marsh': 98\n  },\n  S003: {\n    'Duncan Boyle': 89\n  },\n  S004: {\n    'Saim Richards': 92\n  }\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp0vu6u0tt.js:16:10)\n    at Object.<anonymous> (/tmp/tmp0vu6u0tt.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: { 'Adina Park': 85 },\n    S002: { 'Leyton Marsh': 98 },\n    S003: { 'Duncan Boyle': 89 },\n    S004: { 'Saim Richards': 92 }\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++) {\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpxb8ylk8d.js:15:10)\n    at Object.<anonymous> (/tmp/tmpxb8ylk8d.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpn5vzqa9w.js:13:10)\n    at Object.<anonymous> (/tmp/tmpn5vzqa9w.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpvjm7cn4x.js:14:10)\n    at Object.<anonymous> (/tmp/tmpvjm7cn4x.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpn5vzqa9w.js:13:10)\n    at Object.<anonymous> (/tmp/tmpn5vzqa9w.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var obj = {};\n    for (var i = 0; i < l1.length; i++) {\n        obj[l1[i]] = [l2[i], l3[i]];\n    }\n    return obj;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpbxuceewu.js:15:10)\n    at Object.<anonymous> (/tmp/tmpbxuceewu.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpvjm7cn4x.js:14:10)\n    at Object.<anonymous> (/tmp/tmpvjm7cn4x.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp_89f3dvj.js:15:10)\n    at Object.<anonymous> (/tmp/tmp_89f3dvj.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\n\nvar keys = [\"name\", \"age\", \"gender\"];\nvar values = [\"Nguyen Van A\", 20, \"male\"];\nvar values2 = [\"Nguyen Van B\", 21, \"female\"];\nvar values3 = [\"Nguyen Van C\", 22, \"male\"];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpnb_p9gtc.js:18:10)\n    at Object.<anonymous> (/tmp/tmpnb_p9gtc.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++) {\n        result[l1[i]] = {};\n        result[l1[i]][l2[i]] = l3[i];\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: {\n    'Adina Park': 85\n  },\n  S002: {\n    'Leyton Marsh': 98\n  },\n  S003: {\n    'Duncan Boyle': 89\n  },\n  S004: {\n    'Saim Richards': 92\n  }\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpyi7724lj.js:15:10)\n    at Object.<anonymous> (/tmp/tmpyi7724lj.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: { 'Adina Park': 85 },\n    S002: { 'Leyton Marsh': 98 },\n    S003: { 'Duncan Boyle': 89 },\n    S004: { 'Saim Richards': 92 }\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpvjm7cn4x.js:14:10)\n    at Object.<anonymous> (/tmp/tmpvjm7cn4x.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpn5vzqa9w.js:13:10)\n    at Object.<anonymous> (/tmp/tmpn5vzqa9w.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++) {\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpxb8ylk8d.js:15:10)\n    at Object.<anonymous> (/tmp/tmpxb8ylk8d.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\n\nvar l1 = [\"name\", \"age\", \"sex\"];\nvar l2 = [\"Tom\", \"18\", \"male\"];\nvar l3 = [\"Jerry\", \"20\", \"female\"];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpzni7nc4m.js:17:10)\n    at Object.<anonymous> (/tmp/tmpzni7nc4m.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = {};\n        result[l1[i]][l2[i]] = l3[i];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: {\n    'Adina Park': 85\n  },\n  S002: {\n    'Leyton Marsh': 98\n  },\n  S003: {\n    'Duncan Boyle': 89\n  },\n  S004: {\n    'Saim Richards': 92\n  }\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp75r124zb.js:16:10)\n    at Object.<anonymous> (/tmp/tmp75r124zb.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: { 'Adina Park': 85 },\n    S002: { 'Leyton Marsh': 98 },\n    S003: { 'Duncan Boyle': 89 },\n    S004: { 'Saim Richards': 92 }\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var obj = {};\n    for(var i = 0; i < l1.length; i++){\n        obj[l1[i]] = [l2[i], l3[i]];\n    }\n    return obj;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpgl2b7u8g.js:15:10)\n    at Object.<anonymous> (/tmp/tmpgl2b7u8g.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpvjm7cn4x.js:14:10)\n    at Object.<anonymous> (/tmp/tmpvjm7cn4x.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp_89f3dvj.js:15:10)\n    at Object.<anonymous> (/tmp/tmp_89f3dvj.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++) {\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpnppu20ze.js:14:10)\n    at Object.<anonymous> (/tmp/tmpnppu20ze.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp_89f3dvj.js:15:10)\n    at Object.<anonymous> (/tmp/tmp_89f3dvj.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp_89f3dvj.js:15:10)\n    at Object.<anonymous> (/tmp/tmp_89f3dvj.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++) {\n        result[l1[i]] = {};\n        result[l1[i]][l2[0]] = l2[i];\n        result[l1[i]][l3[0]] = l3[i];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: {\n    '85': 85,\n    'Adina Park': 'Adina Park'\n  },\n  S002: {\n    '85': 98,\n    'Adina Park': 'Leyton Marsh'\n  },\n  S003: {\n    '85': 89,\n    'Adina Park': 'Duncan Boyle'\n  },\n  S004: {\n    '85': 92,\n    'Adina Park': 'Saim Richards'\n  }\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpoyc_zhjw.js:17:10)\n    at Object.<anonymous> (/tmp/tmpoyc_zhjw.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: { '85': 85, 'Adina Park': 'Adina Park' },\n    S002: { '85': 98, 'Adina Park': 'Leyton Marsh' },\n    S003: { '85': 89, 'Adina Park': 'Duncan Boyle' },\n    S004: { '85': 92, 'Adina Park': 'Saim Richards' }\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpvjm7cn4x.js:14:10)\n    at Object.<anonymous> (/tmp/tmpvjm7cn4x.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp_89f3dvj.js:15:10)\n    at Object.<anonymous> (/tmp/tmp_89f3dvj.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpn5vzqa9w.js:13:10)\n    at Object.<anonymous> (/tmp/tmpn5vzqa9w.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpvjm7cn4x.js:14:10)\n    at Object.<anonymous> (/tmp/tmpvjm7cn4x.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpvjm7cn4x.js:14:10)\n    at Object.<anonymous> (/tmp/tmpvjm7cn4x.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp_89f3dvj.js:15:10)\n    at Object.<anonymous> (/tmp/tmp_89f3dvj.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++) {\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpnppu20ze.js:14:10)\n    at Object.<anonymous> (/tmp/tmpnppu20ze.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpn5vzqa9w.js:13:10)\n    at Object.<anonymous> (/tmp/tmpn5vzqa9w.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp_89f3dvj.js:15:10)\n    at Object.<anonymous> (/tmp/tmp_89f3dvj.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpn5vzqa9w.js:13:10)\n    at Object.<anonymous> (/tmp/tmpn5vzqa9w.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpn5vzqa9w.js:13:10)\n    at Object.<anonymous> (/tmp/tmpn5vzqa9w.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpn5vzqa9w.js:13:10)\n    at Object.<anonymous> (/tmp/tmpn5vzqa9w.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\n\nvar keys = [\"name\", \"age\", \"sex\"];\nvar values = [\"John\", \"20\", \"male\"];\nvar values2 = [\"Jane\", \"21\", \"female\"];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp9kedznt2.js:18:10)\n    at Object.<anonymous> (/tmp/tmp9kedznt2.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\n\nvar l1 = [\"name\", \"age\", \"gender\"];\nvar l2 = [\"John\", \"23\", \"male\"];\nvar l3 = [\"Mary\", \"24\", \"female\"];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp2h6ssn0b.js:17:10)\n    at Object.<anonymous> (/tmp/tmp2h6ssn0b.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var obj = {};\n    for (var i = 0; i < l1.length; i++) {\n        obj[l1[i]] = [l2[i], l3[i]];\n    }\n    return obj;\n}\nvar l1 = [\"name\", \"age\", \"gender\"];\nvar l2 = [\"John\", \"25\", \"Male\"];\nvar l3 = [\"Mary\", \"30\", \"Female\"];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpkxmm47du.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkxmm47du.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var obj = {};\n    for(var i = 0; i < l1.length; i++){\n        obj[l1[i]] = [l2[i], l3[i]];\n    }\n    return obj;\n}\n\nvar l1 = [\"name\", \"age\", \"sex\"];\nvar l2 = [\"John\", \"20\", \"male\"];\nvar l3 = [\"Mary\", \"18\", \"female\"];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp8woz1ogq.js:19:10)\n    at Object.<anonymous> (/tmp/tmp8woz1ogq.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpjvqnvn5f.js:14:10)\n    at Object.<anonymous> (/tmp/tmpjvqnvn5f.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpn5vzqa9w.js:13:10)\n    at Object.<anonymous> (/tmp/tmpn5vzqa9w.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp_89f3dvj.js:15:10)\n    at Object.<anonymous> (/tmp/tmp_89f3dvj.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var obj = {};\n    for(var i = 0; i < l1.length; i++){\n        obj[l1[i]] = [l2[i], l3[i]];\n    }\n    return obj;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp5zeq8aeq.js:14:10)\n    at Object.<anonymous> (/tmp/tmp5zeq8aeq.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpn5vzqa9w.js:13:10)\n    at Object.<anonymous> (/tmp/tmpn5vzqa9w.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\n\nvar l1 = [\"name\", \"age\", \"gender\"];\nvar l2 = [\"John\", \"20\", \"Male\"];\nvar l3 = [\"Mary\", \"21\", \"Female\"];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpfqf8r5m5.js:19:10)\n    at Object.<anonymous> (/tmp/tmpfqf8r5m5.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\nvar keys = [\"name\", \"class\", \"city\"];\nvar values = [\"David Rayy\", \"VI\", \"Dhenkanal\"];\nvar roll_no = [1, 2, 3];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpf2zgdduo.js:16:10)\n    at Object.<anonymous> (/tmp/tmpf2zgdduo.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++) {\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpnppu20ze.js:14:10)\n    at Object.<anonymous> (/tmp/tmpnppu20ze.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp_89f3dvj.js:15:10)\n    at Object.<anonymous> (/tmp/tmp_89f3dvj.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpvjm7cn4x.js:14:10)\n    at Object.<anonymous> (/tmp/tmpvjm7cn4x.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpn5vzqa9w.js:13:10)\n    at Object.<anonymous> (/tmp/tmpn5vzqa9w.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var obj = {};\n    for (var i = 0; i < l1.length; i++) {\n        obj[l1[i]] = [l2[i], l3[i]];\n    }\n    return obj;\n}\n\nvar l1 = [\"name\", \"age\", \"gender\"];\nvar l2 = [\"John\", \"23\", \"male\"];\nvar l3 = [\"Mary\", \"25\", \"female\"];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmprd09nvf6.js:18:10)\n    at Object.<anonymous> (/tmp/tmprd09nvf6.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpn5vzqa9w.js:13:10)\n    at Object.<anonymous> (/tmp/tmpn5vzqa9w.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp_89f3dvj.js:15:10)\n    at Object.<anonymous> (/tmp/tmp_89f3dvj.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var obj = {};\n    for (var i = 0; i < l1.length; i++){\n        obj[l1[i]] = [l2[i], l3[i]];\n    }\n    return obj;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpstea2odo.js:15:10)\n    at Object.<anonymous> (/tmp/tmpstea2odo.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++){\n        result[l1[i]] = [l2[i], l3[i]];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmp_89f3dvj.js:15:10)\n    at Object.<anonymous> (/tmp/tmp_89f3dvj.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpn5vzqa9w.js:13:10)\n    at Object.<anonymous> (/tmp/tmpn5vzqa9w.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpn5vzqa9w.js:13:10)\n    at Object.<anonymous> (/tmp/tmpn5vzqa9w.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var obj = {};\n    for(var i = 0; i < l1.length; i++){\n        obj[l1[i]] = [l2[i], l3[i]];\n    }\n    return obj;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpgl2b7u8g.js:15:10)\n    at Object.<anonymous> (/tmp/tmpgl2b7u8g.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpn5vzqa9w.js:13:10)\n    at Object.<anonymous> (/tmp/tmpn5vzqa9w.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert more than one array to nested object.\nfunction convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for (var i = 0; i < l1.length; i++)\n        result[l1[i]] = [l2[i], l3[i]];\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = convert_list_dictionary;\n  assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);\n  assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);\n  assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);\n}\n\ntest();",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  S001: [\n    'Adina Park',\n    85\n  ],\n  S002: [\n    'Leyton Marsh',\n    98\n  ],\n  S003: [\n    'Duncan Boyle',\n    89\n  ],\n  S004: [\n    'Saim Richards',\n    92\n  ]\n}\n\nshould loosely deep-equal\n\n[\n  {\n    S001: {\n      'Adina Park': 85\n    }\n  },\n  {\n    S002: {\n      'Leyton Marsh': 98\n    }\n  },\n  {\n    S003: {\n      'Duncan Boyle': 89\n    }\n  },\n  {\n    S004: {\n      'Saim Richards': 92\n    }\n  }\n]\n    at test (/tmp/tmpn5vzqa9w.js:13:10)\n    at Object.<anonymous> (/tmp/tmpn5vzqa9w.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {\n    S001: [ 'Adina Park', 85 ],\n    S002: [ 'Leyton Marsh', 98 ],\n    S003: [ 'Duncan Boyle', 89 ],\n    S004: [ 'Saim Richards', 92 ]\n  },\n  expected: [\n    { S001: { 'Adina Park': 85 } },\n    { S002: { 'Leyton Marsh': 98 } },\n    { S003: { 'Duncan Boyle': 89 } },\n    { S004: { 'Saim Richards': 92 } }\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    }
  ]
}