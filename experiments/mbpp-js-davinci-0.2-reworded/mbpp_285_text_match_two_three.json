{
  "name": "mbpp_285_text_match_two_three",
  "language": "js",
  "prompt": "//Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\nfunction text_match_two_three(text){\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_285_text_match_two_three.py",
  "prompt_terminology": "reworded",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = text_match_two_three;\n  assert.deepEqual(candidate(\"ac\"),false);\n  assert.deepEqual(candidate(\"dc\"),false);\n  assert.deepEqual(candidate(\"abbbba\"),true);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    if(text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}\n",
    "    var regex = /ab{2,3}/;\n    if(regex.test(text)){\n        return true;\n    }\n    return false;\n}",
    "    if(text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    if (text.match(/ab{2,3}/)) {\n        return true;\n    }\n    return false;\n}",
    "    let a = /ab{2,3}/;\n    if(a.test(text)){\n        return true;\n    }\n    return false;\n}",
    "    let regex = /ab{2,3}/;\n    return regex.test(text);\n}",
    "    let regex = /ab{2,3}/;\n    return regex.test(text);\n}",
    "    var regex = /ab{2,3}/;\n    if(regex.test(text)){\n        return true;\n    }\n    return false;\n}",
    "    var regex = /ab{2,3}/;\n    return regex.test(text);\n}",
    "    var regex = /ab{2,3}/;\n    return regex.test(text);\n}",
    "    if (text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    if(text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    let pattern = /a{1}b{2,3}/;\n    return pattern.test(text);\n}",
    "    let regex = /ab{2,3}/g;\n    return regex.test(text);\n}\n",
    "    if (text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    let regex = /ab{2,3}/;\n    if(regex.test(text)){\n        return true;\n    }\n    return false;\n}",
    "    if (text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    if (text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    if(text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    var pattern = /ab{2,3}/;\n    if (pattern.test(text)) {\n        return true;\n    }\n    return false;\n}",
    "    if(text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    if (text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}\n",
    "    if (text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    if(text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    if(text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    let regExp = /ab{2,3}/;\n    return regExp.test(text);\n}",
    "    let pattern = /ab{2,3}/;\n    return pattern.test(text);\n}",
    "    var regex = /ab{2,3}/;\n    return regex.test(text);\n}\n",
    "    if (text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    let patt = /ab{2,3}/g;\n    let result = patt.test(text);\n    return result;\n}",
    "    if (text.match(/ab{2,3}/)) {\n        return true;\n    }\n    return false;\n}",
    "    var regex = /ab{2,3}/;\n    return regex.test(text);\n}",
    "    if (text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    let regex = /ab{2,3}/;\n    return regex.test(text);\n}",
    "    var regex = /ab{2,3}/;\n    return regex.test(text);\n}",
    "    if(text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    if(text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    if (text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    var regex = /a{1}b{2,3}/;\n    return regex.test(text);\n}",
    "    if (text.match(/ab{2,3}/)) {\n        return true;\n    }\n    return false;\n}",
    "    if (text.match(/ab{2,3}/)) {\n        return true;\n    }\n    return false;\n}",
    "    if(text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    if(text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    let a = /ab{2,3}/;\n    if (a.test(text)) {\n        return true;\n    }\n    return false;\n}",
    "    if (text.match(/ab{2,3}/)) {\n        return true;\n    }\n    return false;\n}",
    "    let regex = /ab{2,3}/;\n    return regex.test(text);\n}",
    "    if(text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    let regex = /ab{2,3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{2,3}/;\n    return regex.test(text);\n}",
    "    if (text.match(/ab{2,3}/)) {\n        return true;\n    }\n    return false;\n}",
    "    if(text.match(/ab{2,3}/)){\n        return true;\n    }\n    else{\n        return false;\n    }\n}",
    "    if (text.match(/ab{2,3}/)) {\n        return true;\n    }\n    return false;\n}",
    "    var pattern = /ab{2,3}/;\n    if (pattern.test(text)){\n        return true;\n    }\n    return false;\n}",
    "    if (text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    if (text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    let pattern = /ab{2,3}/;\n    return pattern.test(text);\n}\n",
    "    if (text.match(/ab{2,3}/)) {\n        return true;\n    }\n    return false;\n}",
    "    var pattern = /ab{2,3}/;\n    return pattern.test(text);\n}",
    "    let regex = /ab{2,3}/;\n    return regex.test(text);\n}",
    "    var regex = /ab{2,3}/;\n    return regex.test(text);\n}",
    "    if(text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    let regex = /ab{2,3}/;\n    return regex.test(text);\n}\n",
    "    var pattern = /a{2,3}b/;\n    if (pattern.test(text)) {\n        return true;\n    } else {\n        return false;\n    }\n}",
    "    if(text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    let regex = /ab{2,3}/;\n    return regex.test(text);\n}",
    "    let regex = /ab{2,3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{2,3}/;\n    return regex.test(text);\n}",
    "    if (text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    let regex = /ab{2,3}/;\n    return regex.test(text);\n}",
    "    var regex = /ab{2,3}/;\n    return regex.test(text);\n}",
    "    let regexp = /ab{2,3}/;\n    return regexp.test(text);\n}",
    "    var pattern = /ab{2,3}/;\n    if(pattern.test(text)){\n        return true;\n    }else{\n        return false;\n    }\n}\n",
    "    let regex = /ab{2,3}/;\n    return regex.test(text);\n}",
    "    if (text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    let regex = /ab{2,3}/;\n    return regex.test(text);\n}",
    "    let regex = /ab{2,3}/;\n    return regex.test(text);\n}",
    "    if(text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    if(text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    var pattern = /a{1}b{2,3}/;\n    if(pattern.test(text)){\n        return true;\n    }else{\n        return false;\n    }\n}",
    "    var regex = /ab{2,3}/;\n    return regex.test(text);\n}",
    "    if (text.match(/ab{2,3}/)) {\n        return true;\n    }\n    return false;\n}",
    "    let regex = /ab{2,3}/;\n    return regex.test(text);\n}",
    "    var pattern = /ab{2,3}/;\n    if (pattern.test(text)) {\n        return true;\n    }\n    return false;\n}",
    "    let a = /ab{2,3}/;\n    if (a.test(text)) {\n        return true;\n    }\n    return false;\n}",
    "    if(text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    if (text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    var pattern = /ab{2,3}/;\n    if (pattern.test(text)){\n        return true;\n    }\n    return false;\n}",
    "    let regex = /ab{2,3}/;\n    return regex.test(text);\n}",
    "    let regex = /ab{2,3}/;\n    return regex.test(text);\n}",
    "    if(text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    if (text.match(/ab{2,3}/)) {\n        return true;\n    }\n    return false;\n}\n",
    "    if (text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    if (text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    var regex = /ab{2,3}/;\n    return regex.test(text);\n}",
    "    if(text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    if (text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    if (text.match(/ab{2,3}/)) {\n        return true;\n    }\n    return false;\n}",
    "    let regex = /ab{2,3}/;\n    return regex.test(text);\n}",
    "    if (text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    if (text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    if(text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "  var pattern = /ab{2,3}/;\n  if (pattern.test(text)) {\n    return true;\n  } else {\n    return false;\n  }\n}",
    "    var regex = /ab{2,3}/;\n    if (regex.test(text)) {\n        return true;\n    }\n    return false;\n}",
    "    let regex = /ab{2,3}/;\n    return regex.test(text);\n}",
    "    if (text.match(/ab{2,3}/)) {\n        return true;\n    }\n    return false;\n}",
    "    let regex = /ab{2,3}/;\n    return regex.test(text);\n}",
    "    var re = /ab{2,3}/;\n    if (re.test(text)) {\n        return true;\n    } else {\n        return false;\n    }\n}",
    "    var regex = /ab{2,3}/;\n    return regex.test(text);\n}",
    "    if(text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    if(text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    let regex = /ab{2,3}/;\n    return regex.test(text);\n}",
    "    let regex = /ab{2,3}/;\n    return regex.test(text);\n}",
    "    var pattern = /ab{2,3}/;\n    return pattern.test(text);\n}\n",
    "    if (text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    if (text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    if (text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    if(text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    if (text.match(/ab{2,3}/)) {\n        return true;\n    }\n    return false;\n}",
    "    if(text.match(/ab{2,3}/)){\n        return true;\n    }else{\n        return false;\n    }\n}",
    "    let regex = /ab{2,3}/;\n    return regex.test(text);\n}",
    "    if (text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    var pattern = /ab{2,3}/;\n    if (pattern.test(text)){\n        return true;\n    }\n    return false;\n}",
    "    let regex = /ab{2,3}/;\n    if(regex.test(text)){\n        return true;\n    }\n    return false;\n}",
    "    if (text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    if (text.match(/ab{2,3}/)) {\n        return true;\n    }\n    return false;\n}",
    "    var regex = /ab{2,3}/;\n    return regex.test(text);\n}",
    "    let regex = /ab{2,3}/;\n    return regex.test(text);\n}",
    "    var regex = /ab{2,3}/gi;\n    return regex.test(text);\n}",
    "    if (text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    let regex = /ab{2,3}/;\n    return regex.test(text);\n}",
    "    var regex = /ab{2,3}/;\n    if (regex.test(text)) {\n        return true;\n    }\n    return false;\n}",
    "    let regex = /ab{2,3}/;\n    return regex.test(text);\n}\n",
    "    if(text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    if (text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    let regex = /ab{2,3}/;\n    return regex.test(text);\n}",
    "    var pattern = /ab{2,3}/;\n    if(pattern.test(text)){\n        return true;\n    }\n    return false;\n}",
    "    if (text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}\n",
    "    var regex = /ab{2,3}/;\n    if (regex.test(text)) {\n        return true;\n    }\n    return false;\n}",
    "    let regex = /ab{2,3}/;\n    return regex.test(text);\n}",
    "    let regex = /ab{2,3}/;\n    return regex.test(text);\n}",
    "    if (text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    if (text.match(/ab{2,3}/)) {\n        return true;\n    }\n    return false;\n}",
    "    if (text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    var regex = /ab{2,3}/;\n    return regex.test(text);\n}",
    "    if (text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    if (text.match(/ab{2,3}/)) {\n        return true;\n    }\n    return false;\n}",
    "    if (text.match(/ab{2,3}/)) {\n        return true;\n    }\n    return false;\n}",
    "    let regex = /ab{2,3}/;\n    return regex.test(text);\n}",
    "    if (text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    if (text.match(/ab{2,3}/)) {\n        return true;\n    }\n    return false;\n}",
    "    if (text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}\n",
    "    if (text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    if(text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    if (text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    let pattern = /ab{2,3}/;\n    return pattern.test(text);\n}",
    "    if (text.match(/ab{2,3}/)) {\n        return true;\n    }\n    return false;\n}",
    "    if(text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    var pattern = /ab{2,3}/;\n    if (pattern.test(text)) {\n        return true;\n    } else {\n        return false;\n    }\n}",
    "    if (text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    let regex = /ab{2,3}/;\n    return regex.test(text);\n}",
    "    let regex = /ab{2,3}/;\n    return regex.test(text);\n}\n",
    "    var regex = /ab{2,3}/;\n    return regex.test(text);\n}",
    "    let regex = /ab{2,3}/;\n    if(regex.test(text)){\n        return true;\n    }\n    return false;\n}\n",
    "    if (text.match(/ab{2,3}/)) {\n        return true;\n    }\n    return false;\n}",
    "    if (text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    let regex = /ab{2,3}/;\n    return regex.test(text);\n}",
    "    if(text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    if (text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    if (text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    var match = text.match(/ab{2,3}/g);\n    return match;\n}",
    "    var pattern = /ab{2,3}/;\n    if (pattern.test(text)){\n        return true;\n    }else{\n        return false;\n    }\n}",
    "    if (text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    var regex = /ab{2,3}/;\n    return regex.test(text);\n}",
    "    if (text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    if(text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    if (text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    if (text.match(/ab{2,3}/)) {\n        return true;\n    }\n    return false;\n}",
    "    if (text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    if (text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    if(text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}\n",
    "    let regex = /ab{2,3}/;\n    return regex.test(text);\n}\n",
    "    if(text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    let pattern = /ab{2,3}/;\n    return pattern.test(text);\n}\n",
    "    if (text.match(/ab{2,3}/)) {\n        return true;\n    }\n    return false;\n}",
    "    if(text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    if (text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    let regex = /ab{2,3}/;\n    return regex.test(text);\n}",
    "    var pattern = /ab{2,3}/g;\n    if(text.match(pattern)){\n        return true;\n    }else{\n        return false;\n    }\n}",
    "    var regex = /ab{2,3}/g;\n    return regex.test(text);\n}",
    "    if (text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    if(text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    if (text.match(/ab{2,3}/)){\n        return true;\n    }\n    else{\n        return false;\n    }\n}",
    "    var regex = /ab{2,3}/;\n    if (regex.test(text)) {\n        return true;\n    }\n    return false;\n}",
    "    if(text.match(/ab{2,3}/)){\n        return true;\n    }\n    return false;\n}",
    "    let patt = /ab{2,3}/g;\n    return patt.test(text);\n}",
    "    if (text.match(/ab{2,3}/))\n        return true;\n    else\n        return false;\n}",
    "    var pattern = /ab{2,3}/;\n    if (pattern.test(text)) {\n        return true;\n    } else {\n        return false;\n    }\n}",
    "    let regex = /ab{2,3}/;\n    return regex.test(text);\n}",
    "    let regex = /ab{2,3}/;\n    return regex.test(text);\n}",
    "    let regex = /ab{2,3}/;\n    return regex.test(text);\n}\n"
  ]
}