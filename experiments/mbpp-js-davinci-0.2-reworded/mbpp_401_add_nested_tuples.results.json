{
  "name": "mbpp_401_add_nested_tuples",
  "language": "js",
  "prompt": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_401_add_nested_tuples.py",
  "prompt_terminology": "reworded",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "results": [
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2,3],[3,4,5]];\nvar test_tup2 = [[1,2,3],[3,4,5]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2,3], [3,4,5]];\nvar test_tup2 = [[1,2,3], [3,4,5]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2],[3,4]];\nvar test_tup2 = [[5,6],[7,8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4], [5,6]];\nvar test_tup2 = [[7,8], [9,10], [11,12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4], [5,6]];\nvar test_tup2 = [[7,8], [9,10], [11,12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4]];\nvar test_tup2 = [[5,6], [7,8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2,3], [3,4,5], [6,7,8]];\nvar test_tup2 = [[5,6,7], [7,8,9], [10,11,12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\n\nvar test_tup1 = [[1,2], [3,4]];\nvar test_tup2 = [[5,6], [7,8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4], [5,6]];\nvar test_tup2 = [[7,8], [9,10], [11,12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2,3],[3,4,5]];\nvar test_tup2 = [[1,2,3],[3,4,5]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4], [5,6]];\nvar test_tup2 = [[-1,-2], [-3,-4], [-5,-6]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\n\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\n\nvar test_tup1 = [[1,2,3],[3,4,5]];\nvar test_tup2 = [[1,2,3],[3,4,5]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4], [5,6]];\nvar test_tup2 = [[7,8], [9,10], [11,12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[0].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\n\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2,3], [4,5,6], [7,8,9]];\nvar test_tup2 = [[9,8,7], [6,5,4], [3,2,1]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4], [5,6]];\nvar test_tup2 = [[7,8], [9,10], [11,12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4], [5,6]];\nvar test_tup2 = [[7,8], [9,10], [11,12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2,3], [4,5,6], [7,8,9]];\nvar test_tup2 = [[9,8,7], [6,5,4], [3,2,1]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4], [5,6]];\nvar test_tup2 = [[7,8], [9,10], [11,12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2,3], [4,5,6], [7,8,9]];\nvar test_tup2 = [[1,2,3], [4,5,6], [7,8,9]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4], [5,6]];\nvar test_tup2 = [[7,8], [9,10], [11,12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2,3], [3,4,5], [6,7,8]];\nvar test_tup2 = [[1,2,3], [3,4,5], [6,7,8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0;i<test_tup1.length;i++){\n        var temp = [];\n        for(var j=0;j<test_tup1[i].length;j++){\n            temp.push(test_tup1[i][j]+test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2],[3,4]];\nvar test_tup2 = [[5,6],[7,8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2],[3,4]];\nvar test_tup2 = [[5,6],[7,8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4]];\nvar test_tup2 = [[5,6], [7,8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2,3],[3,4,5]];\nvar test_tup2 = [[1,2,3],[3,4,5]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2,3], [4,5,6], [7,8,9]];\nvar test_tup2 = [[1,2,3], [4,5,6], [7,8,9]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        result.push(test_tup1[i]+test_tup2[i]);\n    }\n    return result;\n}\nvar test_tup1 = [1, 2, 3, 4, 5];\nvar test_tup2 = [6, 7, 8, 9, 10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '1,36,7',\n  '4,53,9',\n  '2,91,1',\n  '1,107,3'\n]\n\nshould loosely deep-equal\n\n[\n  [\n    7,\n    10\n  ],\n  [\n    7,\n    14\n  ],\n  [\n    3,\n    10\n  ],\n  [\n    8,\n    13\n  ]\n]\n    at test (/tmp/tmpltdh6vg0.js:16:10)\n    at Object.<anonymous> (/tmp/tmpltdh6vg0.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '1,36,7', '4,53,9', '2,91,1', '1,107,3' ],\n  expected: [ [ 7, 10 ], [ 7, 14 ], [ 3, 10 ], [ 8, 13 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4]];\nvar test_tup2 = [[5,6], [7,8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2],[3,4]];\nvar test_tup2 = [[5,6],[7,8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2],[3,4]];\nvar test_tup2 = [[5,6],[7,8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2],[3,4]];\nvar test_tup2 = [[5,6],[7,8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2],[3,4]];\nvar test_tup2 = [[5,6],[7,8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var tup = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            tup.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(tup);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4]];\nvar test_tup2 = [[5,6], [7,8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2],[3,4]];\nvar test_tup2 = [[5,6],[7,8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2],[3,4]];\nvar test_tup2 = [[5,6],[7,8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2,3], [4,5,6], [7,8,9]];\nvar test_tup2 = [[1,2,3], [4,5,6], [7,8,9]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\n\nvar test_tup1 = [[1,2,3], [4,5,6]];\nvar test_tup2 = [[7,8,9], [10,11,12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2,3], [4,5,6], [7,8,9]];\nvar test_tup2 = [[1,2,3], [4,5,6], [7,8,9]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4], [5,6]];\nvar test_tup2 = [[7,8], [9,10], [11,12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2,3],[3,4,5]];\nvar test_tup2 = [[2,3,4],[5,6,7]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2],[3,4]];\nvar test_tup2 = [[5,6],[7,8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1,2], [3,4]];\nvar test_tup2 = [[5,6], [7,8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2],[3,4]];\nvar test_tup2 = [[5,6],[7,8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4], [5,6]];\nvar test_tup2 = [[7,8], [9,10], [11,12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2],[3,4]];\nvar test_tup2 = [[5,6],[7,8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4]];\nvar test_tup2 = [[5,6], [7,8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\n\nvar test_tup1 = [[1,2],[3,4]];\nvar test_tup2 = [[5,6],[7,8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4], [5,6]];\nvar test_tup2 = [[-1,-2], [-3,-4], [-5,-6]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\n\nvar test_tup1 = [[1,2], [3,4], [5,6]];\nvar test_tup2 = [[7,8], [9,10], [11,12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for(var i=0;i<test_tup1.length;i++){\n        var temp = [];\n        for(var j=0;j<test_tup1[i].length;j++){\n            temp.push(test_tup1[i][j]+test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1,2],[3,4]];\nvar test_tup2 = [[5,6],[7,8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2],[3,4]];\nvar test_tup2 = [[5,6],[7,8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4], [5,6]];\nvar test_tup2 = [[7,8], [9,10], [11,12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4], [5,6]];\nvar test_tup2 = [[7,8], [9,10], [11,12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4]];\nvar test_tup2 = [[5,6], [7,8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2],[3,4]];\nvar test_tup2 = [[5,6],[7,8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4], [5,6]];\nvar test_tup2 = [[7,8], [9,10], [11,12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4], [5,6]];\nvar test_tup2 = [[-1,-2], [-3,-4], [-5,-6]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2],[3,4]];\nvar test_tup2 = [[5,6],[7,8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2,3],[3,4,5]];\nvar test_tup2 = [[1,2,3],[3,4,5]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4], [5,6]];\nvar test_tup2 = [[7,8], [9,10], [11,12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2],[3,4],[5,6]];\nvar test_tup2 = [[7,8],[9,10],[11,12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4]];\nvar test_tup2 = [[5,6], [7,8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4], [5,6]];\nvar test_tup2 = [[7,8], [9,10], [11,12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4], [5,6]];\nvar test_tup2 = [[-1,-2], [-3,-4], [-5,-6]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4], [5,6]];\nvar test_tup2 = [[7,8], [9,10], [11,12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0;i<test_tup1.length;i++){\n        var temp = [];\n        for(var j=0;j<test_tup1[i].length;j++){\n            temp.push(test_tup1[i][j]+test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4], [5,6]];\nvar test_tup2 = [[7,8], [9,10], [11,12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4], [5,6]];\nvar test_tup2 = [[-1,-2], [-3,-4], [-5,-6]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2],[3,4]];\nvar test_tup2 = [[5,6],[7,8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2],[3,4]];\nvar test_tup2 = [[5,6],[7,8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2,3], [4,5,6]];\nvar test_tup2 = [[7,8,9], [10,11,12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\n\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4], [5,6]];\nvar test_tup2 = [[7,8], [9,10], [11,12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2,3],[3,4,5]];\nvar test_tup2 = [[1,2,3],[3,4,5]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\n\nvar test_tup1 = [[1,2,3], [4,5,6]];\nvar test_tup2 = [[7,8,9], [10,11,12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2],[3,4]];\nvar test_tup2 = [[5,6],[7,8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = []; \n    for (var i = 0; i < test_tup1.length; i++) { \n        var temp = []; \n        for (var j = 0; j < test_tup1[i].length; j++) { \n            temp.push(test_tup1[i][j] + test_tup2[i][j]); \n        } \n        res.push(temp); \n    } \n    return res; \n}\nvar test_tup1 = [[1, 2], [3, 4]]; \nvar test_tup2 = [[5, 6], [7, 8]]; \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2],[3,4]];\nvar test_tup2 = [[5,6],[7,8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4], [5,6]];\nvar test_tup2 = [[7,8], [9,10], [11,12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4], [5,6]];\nvar test_tup2 = [[-1,-2], [-3,-4], [-5,-6]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\n\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2],[3,4]];\nvar test_tup2 = [[5,6],[7,8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4], [5,6]];\nvar test_tup2 = [[7,8], [9,10], [11,12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4], [5,6]];\nvar test_tup2 = [[7,8], [9,10], [11,12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var res = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        res.push(temp);\n    }\n    return res;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0;i<test_tup1.length;i++){\n        var temp = [];\n        for(var j=0;j<test_tup1[i].length;j++){\n            temp.push(test_tup1[i][j]+test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2],[3,4]];\nvar test_tup2 = [[5,6],[7,8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4], [5,6]];\nvar test_tup2 = [[7,8], [9,10], [11,12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4], [5,6]];\nvar test_tup2 = [[7,8], [9,10], [11,12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4], [5,6]];\nvar test_tup2 = [[7,8], [9,10], [11,12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2],[3,4]];\nvar test_tup2 = [[5,6],[7,8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2],[3,4]];\nvar test_tup2 = [[5,6],[7,8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4], [5,6]];\nvar test_tup2 = [[-1,-2], [-3,-4], [-5,-6]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2,3], [3,4,5]];\nvar test_tup2 = [[1,2,3], [3,4,5]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4], [5,6]];\nvar test_tup2 = [[7,8], [9,10], [11,12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4], [5,6]];\nvar test_tup2 = [[7,8], [9,10], [11,12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\n\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4], [5,6]];\nvar test_tup2 = [[7,8], [9,10], [11,12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4], [5,6]];\nvar test_tup2 = [[-1,-2], [-3,-4], [-5,-6]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\n\nvar test_tup1 = [[1,2,3], [4,5,6], [7,8,9]];\nvar test_tup2 = [[1,2,3], [4,5,6], [7,8,9]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\n\nvar test_tup1 = [[1,2], [3,4], [5,6]];\nvar test_tup2 = [[7,8], [9,10], [11,12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2],[3,4]];\nvar test_tup2 = [[5,6],[7,8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2,3], [4,5,6]];\nvar test_tup2 = [[7,8,9], [10,11,12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4], [5,6]];\nvar test_tup2 = [[7,8], [9,10], [11,12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4], [5,6]];\nvar test_tup2 = [[7,8], [9,10], [11,12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4], [5,6]];\nvar test_tup2 = [[7,8], [9,10], [11,12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4], [5,6]];\nvar test_tup2 = [[7,8], [9,10], [11,12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2],[3,4]];\nvar test_tup2 = [[5,6],[7,8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2],[3,4]];\nvar test_tup2 = [[5,6],[7,8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4], [5,6]];\nvar test_tup2 = [[7,8], [9,10], [11,12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\n\nvar test_tup1 = [[1,2], [3,4]];\nvar test_tup2 = [[5,6], [7,8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2],[3,4]];\nvar test_tup2 = [[5,6],[7,8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4], [5,6]];\nvar test_tup2 = [[7,8], [9,10], [11,12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4], [5,6]];\nvar test_tup2 = [[7,8], [9,10], [11,12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2,3], [3,4,5]];\nvar test_tup2 = [[1,2,3], [3,4,5]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2],[3,4]];\nvar test_tup2 = [[5,6],[7,8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4], [5,6]];\nvar test_tup2 = [[7,8], [9,10], [11,12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0;i<test_tup1.length;i++){\n        var temp = [];\n        for(var j=0;j<test_tup1[i].length;j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4], [5,6]];\nvar test_tup2 = [[7,8], [9,10], [11,12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4], [5,6]];\nvar test_tup2 = [[7,8], [9,10], [11,12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2],[3,4]];\nvar test_tup2 = [[5,6],[7,8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2,3], [4,5,6], [7,8,9]];\nvar test_tup2 = [[1,2,3], [4,5,6], [7,8,9]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2],[3,4]];\nvar test_tup2 = [[5,6],[7,8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4], [5,6]];\nvar test_tup2 = [[7,8], [9,10], [11,12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4], [5,6]];\nvar test_tup2 = [[7,8], [9,10], [11,12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4], [5,6]];\nvar test_tup2 = [[7,8], [9,10], [11,12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0;i<test_tup1.length;i++){\n        var temp = [];\n        for(var j=0;j<test_tup1[i].length;j++){\n            temp.push(test_tup1[i][j]+test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2,3],[3,4,5]];\nvar test_tup2 = [[1,2,3],[3,4,5]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        var temp = [];\n        for(var j = 0; j < test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2,3], [4,5,6], [7,8,9]];\nvar test_tup2 = [[1,2,3], [4,5,6], [7,8,9]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4], [5, 6]];\nvar test_tup2 = [[7, 8], [9, 10], [11, 12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        result.push(test_tup1[i] + test_tup2[i]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '1,36,7',\n  '4,53,9',\n  '2,91,1',\n  '1,107,3'\n]\n\nshould loosely deep-equal\n\n[\n  [\n    7,\n    10\n  ],\n  [\n    7,\n    14\n  ],\n  [\n    3,\n    10\n  ],\n  [\n    8,\n    13\n  ]\n]\n    at test (/tmp/tmppokimtfu.js:15:10)\n    at Object.<anonymous> (/tmp/tmppokimtfu.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '1,36,7', '4,53,9', '2,91,1', '1,107,3' ],\n  expected: [ [ 7, 10 ], [ 7, 14 ], [ 3, 10 ], [ 8, 13 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4], [5,6]];\nvar test_tup2 = [[7,8], [9,10], [11,12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2],[3,4]];\nvar test_tup2 = [[5,6],[7,8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1666122789,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4], [5,6]];\nvar test_tup2 = [[7,8], [9,10], [11,12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4]];\nvar test_tup2 = [[5,6], [7,8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        var temp = [];\n        for (var j = 0; j < test_tup1[i].length; j++) {\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1, 2], [3, 4]];\nvar test_tup2 = [[5, 6], [7, 8]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4], [5,6]];\nvar test_tup2 = [[7,8], [9,10], [11,12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4], [5,6]];\nvar test_tup2 = [[7,8], [9,10], [11,12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4], [5,6]];\nvar test_tup2 = [[7,8], [9,10], [11,12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        var temp = [];\n        for(var j=0; j<test_tup1[i].length; j++){\n            temp.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\nvar test_tup1 = [[1,2], [3,4], [5,6]];\nvar test_tup2 = [[7,8], [9,10], [11,12]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_nested_tuples;\n  assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);\n  assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);\n  assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);\n}\n\ntest();",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}