{
  "name": "mbpp_627_find_First_Missing",
  "language": "js",
  "prompt": "//Write a jsthon function to find the smallest missing number from a sorted array of natural numbers.\nfunction find_First_Missing(array){\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_627_find_First_Missing.py",
  "prompt_terminology": "reworded",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_First_Missing;\n  assert.deepEqual(candidate([0, 1, 2, 3]),4);\n  assert.deepEqual(candidate([0, 1, 2, 6, 9]),3);\n  assert.deepEqual(candidate([2, 3, 5, 8, 9]),0);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    var i = 0;\n    while(array[i] == i){\n        i++;\n    }\n    return i;\n}\n",
    "    var i = 0;\n    while(i < array.length){\n        if(array[i] !== i){\n            return i;\n        }\n        i++;\n    }\n    return i;\n}",
    "    var i = 0;\n    while(array[i] == i+1){\n        i++;\n    }\n    return i+1;\n}",
    "    var i = 0;\n    while(i < array.length){\n        if(array[i] !== i){\n            return i;\n        }\n        i++;\n    }\n    return i;\n}",
    "    var i=0;\n    while(i<array.length){\n        if(array[i]!=i){\n            return i;\n        }\n        i++;\n    }\n    return i;\n}",
    "    var i = 0;\n    while(i < array.length){\n        if(array[i] != i){\n            return i;\n        }\n        i++;\n    }\n    return i;\n}\n",
    "    var min = array[0];\n    var max = array[array.length-1];\n    var newArray = [];\n    for(var i = min; i <= max; i++){\n        newArray.push(i);\n    }\n    for(var j = 0; j < newArray.length; j++){\n        if(newArray[j] != array[j]){\n            return newArray[j];\n        }\n    }\n}",
    "    var i = 0;\n    while(array[i] == i){\n        i++;\n    }\n    return i;\n}\n",
    "    var i = 0;\n    while(array[i] === i){\n        i++;\n    }\n    return i;\n}",
    "    var i = 0;\n    while(array[i] == i){\n        i++;\n    }\n    return i;\n}",
    "    let min = array[0];\n    let max = array[array.length-1];\n    let expectedSum = (min+max)*(array.length+1)/2;\n    let actualSum = 0;\n    for(let i=0; i<array.length; i++){\n        actualSum += array[i];\n    }\n    return expectedSum - actualSum;\n}",
    "    var min = array[0]\n    var max = array[array.length-1]\n    for(var i = min; i < max; i++){\n        if(array.indexOf(i) == -1){\n            return i\n        }\n    }\n}",
    "    var i = 0;\n    while(array[i] === i+1){\n        i++;\n    }\n    return i+1;\n}",
    "    var i = 0;\n    while(array[i] < array.length){\n        i++;\n    }\n    return i;\n}",
    "    var len = array.length;\n    if(len == 0){\n        return 1;\n    }\n    if(len == 1){\n        if(array[0] == 1){\n            return 2;\n        }\n        else{\n            return 1;\n        }\n    }\n    var i = 0;\n    while(i < len){\n        if(array[i] != i+1){\n            return i+1;\n        }\n        i++;\n    }\n    return array[len-1]+1;\n}",
    "    var i = 0;\n    while(array[i] == i){\n        i++;\n    }\n    return i;\n}\n",
    "    var min = 0;\n    var max = array.length;\n    var mid = 0;\n    while(min <= max){\n        mid = Math.floor((min + max)/2);\n        if(array[mid] == mid){\n            min = mid + 1;\n        }\n        else{\n            max = mid - 1;\n        }\n    }\n    return min;\n}",
    "    var i = 0;\n    while (array[i] == i){\n        i++;\n    }\n    return i;\n}\n",
    "    var i = 0;\n    while (array[i] < array.length){\n        i++;\n    }\n    return i;\n}",
    "    var i = 0;\n    while(array[i] < array.length){\n        i++;\n    }\n    return i;\n}"
  ]
}