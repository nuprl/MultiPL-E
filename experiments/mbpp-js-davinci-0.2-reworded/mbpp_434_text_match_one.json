{
  "name": "mbpp_434_text_match_one",
  "language": "js",
  "prompt": "//Write a function that matches a string that has an a followed by one or more b's.\nfunction text_match_one(text){\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_434_text_match_one.py",
  "prompt_terminology": "reworded",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = text_match_one;\n  assert.deepEqual(candidate(\"ac\"),false);\n  assert.deepEqual(candidate(\"dc\"),false);\n  assert.deepEqual(candidate(\"abba\"),true);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    var regex = /ab+/;\n    return regex.test(text);\n}",
    "    var regex = /ab+/;\n    var result = regex.test(text);\n    if(result == true){\n        return \"Match\";\n    }else{\n        return \"Not Match\";\n    }\n}",
    "    var regex = /ab+/;\n    return regex.test(text);\n}",
    "    var regex = /ab+/;\n    if(regex.test(text)){\n        return true;\n    }\n    return false;\n}",
    "    var regex = /ab+/;\n    var result = regex.test(text);\n    return result;\n}\n",
    "    var regex = /ab+/;\n    return regex.test(text);\n}",
    "    var regex = /ab+/;\n    if (regex.test(text)) {\n        return true;\n    }\n    return false;\n}",
    "    var regex = /ab+/;\n    if (regex.test(text)) {\n        return true;\n    } else {\n        return false;\n    }\n}",
    "    var regex = /ab+/;\n    return regex.test(text);\n}",
    "    var regex = /ab+/;\n    return regex.test(text);\n}",
    "    var regex = /ab+/;\n    return regex.test(text);\n}",
    "    var regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    var regex = /ab+/;\n    return regex.test(text);\n}",
    "    var regex = /ab+/;\n    if(regex.test(text)){\n        console.log(\"Match found\");\n    }else{\n        console.log(\"Match not found\");\n    }\n}\ntext_match_one(\"abbc\");\n",
    "    var regex = /ab+/;\n    return regex.test(text);\n}",
    "    var regex = /ab+/;\n    return regex.test(text);\n}",
    "    var regex = /ab+/;\n    return regex.test(text);\n}",
    "    if(text.match(/ab+/)){\n        return true;\n    }\n    return false;\n}\n",
    "    var regex = /ab+/;\n    if (regex.test(text)) {\n        return true;\n    }\n    return false;\n}",
    "    var regex = /ab+/;\n    return regex.test(text);\n}\n"
  ]
}