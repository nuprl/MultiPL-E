{
  "name": "mbpp_255_combinations_colors",
  "language": "js",
  "prompt": "//Write a function that takes in an array and length n, and generates all combinations (with repetition) of the elements of the array and returns an array with an array for each combination.\nfunction combinations_colors(l, n){\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_255_combinations_colors.py",
  "prompt_terminology": "reworded",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = combinations_colors;\n  assert.deepEqual(candidate([\"Red\", \"Green\", \"Blue\"], 1),[[\"Red\"], [\"Green\"], [\"Blue\"]]);\n  assert.deepEqual(candidate([\"Red\", \"Green\", \"Blue\"], 2),[[\"Red\", \"Red\"], [\"Red\", \"Green\"], [\"Red\", \"Blue\"], [\"Green\", \"Green\"], [\"Green\", \"Blue\"], [\"Blue\", \"Blue\"]]);\n  assert.deepEqual(candidate([\"Red\", \"Green\", \"Blue\"], 3),[[\"Red\", \"Red\", \"Red\"], [\"Red\", \"Red\", \"Green\"], [\"Red\", \"Red\", \"Blue\"], [\"Red\", \"Green\", \"Green\"], [\"Red\", \"Green\", \"Blue\"], [\"Red\", \"Blue\", \"Blue\"], [\"Green\", \"Green\", \"Green\"], [\"Green\", \"Green\", \"Blue\"], [\"Green\", \"Blue\", \"Blue\"], [\"Blue\", \"Blue\", \"Blue\"]]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}",
    "  var res = [];\n  var f = function(t, i, a){\n    if (i == n){\n      res.push(t);\n      return;\n    }\n    for (var j = 0, l = a.length; j <= l - n + i; j++){\n      f(t.concat(a[j]), i+1, a.slice(j));\n    }\n  }\n  f([], 0, l);\n  return res;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}\n",
    "  var result = [];\n  function helper(start, combo){\n    if(combo.length === n){\n      result.push(combo);\n      return;\n    }\n    for(var i = start; i < l.length; i++){\n      helper(i, combo.concat(l[i]));\n    }\n  }\n  helper(0, []);\n  return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}\n",
    "  var result = [];\n  function helper(start, combo){\n    if(combo.length === n){\n      result.push(combo);\n      return;\n    }\n    for(var i = start; i < l.length; i++){\n      helper(i, combo.concat(l[i]));\n    }\n  }\n  helper(0, []);\n  return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length === n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length === n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}\n",
    "    var result = [];\n    function recurse(start, curr){\n        if(curr.length == n){\n            result.push(curr);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            recurse(i, curr.concat(l[i]));\n        }\n    }\n    recurse(0, []);\n    return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if (combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for (var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}\n",
    "  var result = [];\n  function helper(start, combo){\n    if(combo.length == n){\n      result.push(combo);\n      return;\n    }\n    for(var i = start; i < l.length; i++){\n      helper(i, combo.concat(l[i]));\n    }\n  }\n  helper(0, []);\n  return result;\n}\n",
    "  var result = [];\n  function recurse(start, curr){\n    if(curr.length === n){\n      result.push(curr);\n      return;\n    }\n    for(var i = start; i < l.length; i++){\n      recurse(i, curr.concat(l[i]));\n    }\n  }\n  recurse(0, []);\n  return result;\n}\n",
    "  var result = [];\n  var current = [];\n  var recurse = function(start, n){\n    for(var i = start; i < l.length; i++){\n      current[current.length] = l[i];\n      if(n === 1){\n        result.push(current.slice());\n      }else{\n        recurse(i, n-1);\n      }\n      current.pop();\n    }\n  }\n  recurse(0, n);\n  return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length === n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}\n",
    "  var result = [];\n  function helper(start, combo){\n    if(combo.length == n){\n      result.push(combo);\n      return;\n    }\n    for(var i = start; i < l.length; i++){\n      helper(i, combo.concat(l[i]));\n    }\n  }\n  helper(0, []);\n  return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if (combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for (var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}\n",
    "  var result = [];\n  function helper(start, combo){\n    if(combo.length === n){\n      result.push(combo);\n      return;\n    }\n    for(var i = start; i < l.length; i++){\n      helper(i, combo.concat(l[i]));\n    }\n  }\n  helper(0, []);\n  return result;\n}\n",
    "    let result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(let i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}",
    "  var result = [];\n  var i;\n  var j;\n  var k;\n  var temp;\n  var len = l.length;\n  var nlen = n;\n  var n_result = [];\n  var n_temp = [];\n  var n_len = n_result.length;\n\n  for (i = 0; i < len; i++){\n    result.push(l[i]);\n    for (j = 0; j < len; j++){\n      if (j != i){\n        temp = result.slice(0);\n        temp.push(l[j]);\n        result.push(temp);\n      }\n    }\n  }\n  for (k = 0; k < result.length; k++){\n    if (result[k].length === n){\n      n_result.push(result[k]);\n    }\n  }\n  return n_result;\n}\n",
    "\tvar result = [];\n\tfunction helper(start, combo){\n\t\tif(combo.length === n){\n\t\t\tresult.push(combo);\n\t\t\treturn;\n\t\t}\n\t\tfor(var i = start; i < l.length; i++){\n\t\t\thelper(i, combo.concat(l[i]));\n\t\t}\n\t}\n\thelper(0, []);\n\treturn result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}",
    "\tvar result = [];\n\tfunction helper(start, combo){\n\t\tif(combo.length == n){\n\t\t\tresult.push(combo);\n\t\t\treturn;\n\t\t}\n\t\tfor(var i = start; i < l.length; i++){\n\t\t\thelper(i, combo.concat(l[i]));\n\t\t}\n\t}\n\thelper(0, []);\n\treturn result;\n}\n",
    "  var result = [];\n  var helper = function(start, combo){\n    if(combo.length === n){\n      result.push(combo);\n      return;\n    }\n    for(var i = start; i < l.length; i++){\n      helper(i, combo.concat(l[i]));\n    }\n  }\n  helper(0, []);\n  return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}\n",
    "\tvar result = [];\n\tvar recurse = function(arr, i){\n\t\tif(i === n){\n\t\t\tresult.push(arr);\n\t\t\treturn;\n\t\t}\n\t\tfor(var j = 0; j < l.length; j++){\n\t\t\trecurse(arr.concat(l[j]), i+1);\n\t\t}\n\t}\n\trecurse([], 0);\n\treturn result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}",
    "    var result = [];\n    function helper(start, combo){\n        if (combo.length === n){\n            result.push(combo);\n            return;\n        }\n        for (var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}",
    "    var result = [];\n    function helper(start, combo){\n        if (combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for (var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}\n",
    "    var result = [];\n    function recurse(start, chosen){\n        if(chosen.length == n){\n            result.push(chosen);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            chosen.push(l[i]);\n            recurse(i, chosen);\n            chosen.pop();\n        }\n    }\n    recurse(0, []);\n    return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length === n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}",
    "    var result = [];\n    function helper(start, combo){\n        if (combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for (var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}\n",
    "  var result = [];\n  function recurse(start, curr){\n    if(curr.length === n){\n      result.push(curr);\n      return;\n    }\n    for(var i = start; i < l.length; i++){\n      recurse(i, curr.concat(l[i]));\n    }\n  }\n  recurse(0, []);\n  return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length === n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}",
    "    var result = [];\n    function helper(start, curr){\n        if(curr.length == n){\n            result.push(curr);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, curr.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length === n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if (combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for (var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}\n",
    "  var result = [];\n  function helper(start, combo){\n    if(combo.length === n){\n      result.push(combo);\n      return;\n    }\n    for(var i = start; i < l.length; i++){\n      helper(i, combo.concat(l[i]));\n    }\n  }\n  helper(0, []);\n  return result;\n}\n",
    "    var result = [];\n    function recurse(arr, i){\n        if(i === n){\n            result.push(arr);\n            return;\n        }\n        for(var j = 0; j < l.length; j++){\n            recurse(arr.concat(l[j]), i + 1);\n        }\n    }\n    recurse([], 0);\n    return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}\n",
    "    var result = [];\n    function recurse(start, curr){\n        if(curr.length === n){\n            result.push(curr);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            recurse(i, curr.concat(l[i]));\n        }\n    }\n    recurse(0, []);\n    return result;\n}\n",
    "\tvar a = [];\n\tvar f = function(t, i, l){\n\t\tif (t.length === n){\n\t\t\ta.push(t);\n\t\t\treturn;\n\t\t}\n\t\tif (i + 1 > l.length){\n\t\t\treturn;\n\t\t}\n\t\tf(t.concat(l[i]), i, l);\n\t\tf(t, i + 1, l);\n\t}\n\tf([], 0, l);\n\treturn a;\n}\n",
    "    var result = [];\n    function helper(arr, start, end, index, r){\n        if(index == r){\n            result.push(arr.slice());\n            return;\n        }\n        for(var i = start; i <= end && end - i + 1 >= r - index; i++){\n            arr[index] = l[i];\n            helper(arr, i, end, index + 1, r);\n        }\n    }\n    helper([], 0, l.length - 1, 0, n);\n    return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}\n",
    "  var result = [];\n  function helper(start, combo){\n    if(combo.length === n){\n      result.push(combo);\n      return;\n    }\n    for(var i = start; i < l.length; i++){\n      helper(i, combo.concat(l[i]));\n    }\n  }\n  helper(0, []);\n  return result;\n}\n",
    "    var result = [];\n    function recurse(start, curr){\n        if(curr.length === n){\n            result.push(curr);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            recurse(i, curr.concat(l[i]));\n        }\n    }\n    recurse(0, []);\n    return result;\n}\n",
    "\tvar result = [];\n\tfunction helper(start, combo){\n\t\tif(combo.length == n){\n\t\t\tresult.push(combo);\n\t\t\treturn;\n\t\t}\n\t\tfor(var i = start; i < l.length; i++){\n\t\t\thelper(i, combo.concat(l[i]));\n\t\t}\n\t}\n\thelper(0, []);\n\treturn result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length === n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}\n",
    "    var result = [];\n    function permute(arr, m){\n        if(m == 0){\n            result.push(arr);\n            return;\n        }\n        for(var i = 0; i < l.length; i++){\n            var curr = arr.slice(0);\n            curr.push(l[i]);\n            permute(curr, m-1);\n        }\n    }\n    permute([], n);\n    return result;\n}",
    "  var result = [];\n  var i;\n  var j;\n  var k;\n  var a;\n  var p;\n  p = [];\n  if(n == 1){\n    for(i = 0; i < l.length; i++){\n      p.push(l[i]);\n      result.push(p);\n      p = [];\n    }\n    return result;\n  }\n  else{\n    for(i = 0; i < l.length; i++){\n      a = combinations_colors(l, n-1);\n      for(j = 0; j < a.length; j++){\n        p.push(l[i]);\n        for(k = 0; k < a[j].length; k++){\n          p.push(a[j][k]);\n        }\n        result.push(p);\n        p = [];\n      }\n    }\n    return result;\n  }\n}\n",
    "    var result = [];\n    function helper(arr, start){\n        if(arr.length == n){\n            result.push(arr);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(arr.concat(l[i]), i);\n        }\n    }\n    helper([], 0);\n    return result;\n}",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length === n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}\n",
    "  var result = [];\n  function helper(start, combo){\n    if(combo.length == n){\n      result.push(combo);\n      return;\n    }\n    for(var i = start; i < l.length; i++){\n      helper(i, combo.concat(l[i]));\n    }\n  }\n  helper(0, []);\n  return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}",
    "  var result = [];\n  function recurse(arr, i){\n    if(i === n){\n      result.push(arr);\n      return;\n    }\n    for(var j = 0; j < l.length; j++){\n      recurse(arr.concat(l[j]), i + 1);\n    }\n  }\n  recurse([], 0);\n  return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}",
    "    var result = [];\n    function helper(l, n, arr){\n        if(arr.length == n){\n            result.push(arr);\n            return;\n        }\n        for(var i = 0; i < l.length; i++){\n            helper(l, n, arr.concat(l[i]));\n        }\n    }\n    helper(l, n, []);\n    return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length === n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}",
    "  var result = [];\n  function helper(start, combo){\n    if(combo.length == n){\n      result.push(combo);\n      return;\n    }\n    for(var i = start; i < l.length; i++){\n      helper(i, combo.concat(l[i]));\n    }\n  }\n  helper(0, []);\n  return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}",
    "    var result = [];\n    function recurse(start, curr){\n        if(curr.length === n){\n            result.push(curr);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            recurse(i, curr.concat(l[i]));\n        }\n    }\n    recurse(0, []);\n    return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}",
    "\tvar result = [];\n\tfunction helper(start, combo){\n\t\tif(combo.length == n){\n\t\t\tresult.push(combo);\n\t\t\treturn;\n\t\t}\n\t\tfor(var i = start; i < l.length; i++){\n\t\t\thelper(i, combo.concat(l[i]));\n\t\t}\n\t}\n\thelper(0, []);\n\treturn result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}",
    "  var result = [];\n  function helper(start, combo){\n    if (combo.length == n){\n      result.push(combo);\n      return;\n    }\n    for (var i = start; i < l.length; i++){\n      helper(i, combo.concat(l[i]));\n    }\n  }\n  helper(0, []);\n  return result;\n}\n",
    "  var result = [];\n  function recurse(start, combo){\n    if(combo.length === n){\n      result.push(combo);\n      return;\n    }\n    for(var i = start; i < l.length; i++){\n      recurse(i, combo.concat(l[i]));\n    }\n  }\n  recurse(0, []);\n  return result;\n}\n",
    "\tvar result = [];\n\tfunction helper(start, combo){\n\t\tif(combo.length == n){\n\t\t\tresult.push(combo);\n\t\t\treturn;\n\t\t}\n\t\tfor(var i = start; i < l.length; i++){\n\t\t\thelper(i, combo.concat(l[i]));\n\t\t}\n\t}\n\thelper(0, []);\n\treturn result;\n}\n",
    "    var result = [];\n    function helper(arr, start){\n        if(arr.length == n){\n            result.push(arr);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(arr.concat(l[i]), i);\n        }\n    }\n    helper([], 0);\n    return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}\n",
    "    var result = [];\n    function helper(arr, start, end, index, r){\n        if(index == r){\n            result.push(arr.slice());\n            return;\n        }\n        for(var i = start; i <= end && end - i + 1 >= r - index; i++){\n            arr[index] = l[i];\n            helper(arr, i, end, index + 1, r);\n        }\n    }\n    helper([], 0, l.length - 1, 0, n);\n    return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length === n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}\n",
    "  var result = [];\n  function recurse(start, curr){\n    if(curr.length === n){\n      result.push(curr);\n      return;\n    }\n    for(var i = start; i < l.length; i++){\n      recurse(i, curr.concat(l[i]));\n    }\n  }\n  recurse(0, []);\n  return result;\n}\n",
    "    var result = [];\n    function recurse(start, curr){\n        if(curr.length === n){\n            result.push(curr);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            recurse(i, curr.concat(l[i]));\n        }\n    }\n    recurse(0, []);\n    return result;\n}\n",
    "    var result = [];\n    function recurse(start, curr){\n        if(curr.length === n){\n            result.push(curr);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            recurse(i, curr.concat(l[i]));\n        }\n    }\n    recurse(0, []);\n    return result;\n}\n",
    "  var result = [];\n  function helper(start, combo){\n    if(combo.length == n){\n      result.push(combo);\n      return;\n    }\n    for(var i = start; i < l.length; i++){\n      helper(i, combo.concat(l[i]));\n    }\n  }\n  helper(0, []);\n  return result;\n}\n",
    "    var result = [];\n    var temp = [];\n    function combinations(l, n, start, temp){\n        if(n == 0){\n            result.push(temp.slice());\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            temp.push(l[i]);\n            combinations(l, n-1, i, temp);\n            temp.pop();\n        }\n    }\n    combinations(l, n, 0, temp);\n    return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}\n",
    "\tvar result = [];\n\tfunction helper(start, combo){\n\t\tif(combo.length == n){\n\t\t\tresult.push(combo);\n\t\t\treturn;\n\t\t}\n\t\tfor(var i = start; i < l.length; i++){\n\t\t\thelper(i, combo.concat(l[i]));\n\t\t}\n\t}\n\thelper(0, []);\n\treturn result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}",
    "  var result = [];\n  var temp = [];\n  function helper(l, n, temp, result){\n    if(n === 0){\n      result.push(temp);\n      return;\n    }\n    for(var i = 0; i < l.length; i++){\n      temp.push(l[i]);\n      helper(l, n - 1, temp, result);\n      temp.pop();\n    }\n  }\n  helper(l, n, temp, result);\n  return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}\n",
    "  var result = [];\n  function helper(start, combo){\n    if(combo.length === n){\n      result.push(combo);\n      return;\n    }\n    for(var i = start; i < l.length; i++){\n      helper(i, combo.concat(l[i]));\n    }\n  }\n  helper(0, []);\n  return result;\n}\n",
    "  var result = [];\n  var recurse = function(start, combo){\n    if(combo.length === n){\n      result.push(combo);\n      return;\n    }\n    for(var i = start; i < l.length; i++){\n      recurse(i, combo.concat(l[i]));\n    }\n  }\n  recurse(0, []);\n  return result;\n}\n",
    "\tvar result = [];\n\tvar i = 0;\n\tvar j = 0;\n\tvar k = 0;\n\tvar temp = [];\n\tvar temp2 = [];\n\tfor(i = 0; i < l.length; i++){\n\t\ttemp.push(l[i]);\n\t\tfor(j = 0; j < l.length; j++){\n\t\t\ttemp.push(l[j]);\n\t\t\tfor(k = 0; k < l.length; k++){\n\t\t\t\ttemp.push(l[k]);\n\t\t\t\ttemp2.push(temp);\n\t\t\t\ttemp = [];\n\t\t\t\ttemp.push(l[i]);\n\t\t\t\ttemp.push(l[j]);\n\t\t\t}\n\t\t\ttemp = [];\n\t\t\ttemp.push(l[i]);\n\t\t}\n\t\ttemp = [];\n\t}\n\treturn temp2;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}\n",
    "    var result = [];\n    function recurse(arr, i){\n        if(i == n){\n            result.push(arr);\n            return;\n        }\n        for(var j = 0; j < l.length; j++){\n            recurse(arr.concat(l[j]), i+1);\n        }\n    }\n    recurse([], 0);\n    return result;\n}\n",
    "\tvar result = [];\n\tfunction helper(start, combo){\n\t\tif(combo.length == n){\n\t\t\tresult.push(combo);\n\t\t\treturn;\n\t\t}\n\t\tfor(var i = start; i < l.length; i++){\n\t\t\thelper(i, combo.concat(l[i]));\n\t\t}\n\t}\n\thelper(0, []);\n\treturn result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length === n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}",
    "  var result = [];\n  function helper(start, combo){\n    if(combo.length === n){\n      result.push(combo);\n      return;\n    }\n    for(var i = start; i < l.length; i++){\n      helper(i, combo.concat(l[i]));\n    }\n  }\n  helper(0, []);\n  return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length === n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}\n",
    "  var result = [];\n  var temp = [];\n  function helper(l, n, i){\n    if(temp.length === n){\n      result.push(temp.slice());\n      return;\n    }\n    if(i === l.length){\n      return;\n    }\n    temp.push(l[i]);\n    helper(l, n, i);\n    temp.pop();\n    helper(l, n, i+1);\n  }\n  helper(l, n, 0);\n  return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}\n",
    "  var result = [];\n  function helper(start, combo){\n    if(combo.length == n){\n      result.push(combo);\n      return;\n    }\n    for(var i = start; i < l.length; i++){\n      helper(i, combo.concat(l[i]));\n    }\n  }\n  helper(0, []);\n  return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if (combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for (var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}",
    "  var result = [];\n  function helper(start, combo){\n    if(combo.length == n){\n      result.push(combo);\n      return;\n    }\n    for(var i = start; i < l.length; i++){\n      helper(i, combo.concat(l[i]));\n    }\n  }\n  helper(0, []);\n  return result;\n}\n",
    "\tvar result = [];\n\tfunction recurse(start, combo){\n\t\tif(combo.length === n){\n\t\t\tresult.push(combo);\n\t\t\treturn;\n\t\t}\n\t\tfor(var i = start; i < l.length; i++){\n\t\t\trecurse(i, combo.concat(l[i]));\n\t\t}\n\t}\n\trecurse(0, []);\n\treturn result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}",
    "\tvar result = [];\n\tvar temp = [];\n\tfunction helper(l, n, i){\n\t\tif(n === 0){\n\t\t\tresult.push(temp.slice());\n\t\t\treturn;\n\t\t}\n\t\tfor(var j = i; j < l.length; j++){\n\t\t\ttemp.push(l[j]);\n\t\t\thelper(l, n-1, j);\n\t\t\ttemp.pop();\n\t\t}\n\t}\n\thelper(l, n, 0);\n\treturn result;\n}\n",
    "    var result = [];\n    function recurse(start, curr) {\n        if (curr.length === n) {\n            result.push(curr);\n            return;\n        }\n        for (var i = start; i < l.length; i++) {\n            recurse(i, curr.concat(l[i]));\n        }\n    }\n    recurse(0, []);\n    return result;\n}\n",
    "  var result = [];\n  function helper(start, combo){\n    if (combo.length == n){\n      result.push(combo);\n      return;\n    }\n    for (var i = start; i < l.length; i++){\n      helper(i, combo.concat(l[i]));\n    }\n  }\n  helper(0, []);\n  return result;\n}\n",
    "    var result = [];\n    function recurse(start, curr){\n        if(curr.length === n){\n            result.push(curr);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            recurse(i, curr.concat(l[i]));\n        }\n    }\n    recurse(0, []);\n    return result;\n}",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length === n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}",
    "    var result = [];\n    var i;\n    var j;\n    var k;\n    var m;\n    var temp;\n    var len = l.length;\n    var nlen = Math.pow(len, n);\n    for(i = 0; i < nlen; i++){\n        temp = [];\n        for(j = 0; j < n; j++){\n            k = i;\n            for(m = 0; m < j; m++){\n                k = k / len;\n            }\n            k = k % len;\n            temp.push(l[k]);\n        }\n        result.push(temp);\n    }\n    return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length === n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}",
    "\tvar result = [];\n\tfunction helper(start, combo){\n\t\tif(combo.length == n){\n\t\t\tresult.push(combo);\n\t\t\treturn;\n\t\t}\n\t\tfor(var i = start; i < l.length; i++){\n\t\t\thelper(i, combo.concat(l[i]));\n\t\t}\n\t}\n\thelper(0, []);\n\treturn result;\n}\n",
    "  var result = [];\n  function helper(start, combo){\n    if(combo.length == n){\n      result.push(combo);\n      return;\n    }\n    for(var i = start; i < l.length; i++){\n      helper(i, combo.concat(l[i]));\n    }\n  }\n  helper(0, []);\n  return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}",
    "    if (n == 0)\n        return [[]];\n    var result = [];\n    for (var i = 0; i < l.length; i++){\n        var copy = l.slice();\n        var first = copy.splice(i, 1);\n        var innerPermutation = combinations_colors(copy, n - 1);\n        for (var j = 0; j < innerPermutation.length; j++){\n            result.push(first.concat(innerPermutation[j]));\n        }\n    }\n    return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length === n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}",
    "  var result = [];\n  var current = [];\n  function helper(start){\n    for (var i = start; i < l.length; i++){\n      current.push(l[i]);\n      if (current.length == n){\n        result.push(current.slice());\n      } else {\n        helper(i);\n      }\n      current.pop();\n    }\n  }\n  helper(0);\n  return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length === n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}\n",
    "  var result = [];\n  function helper(start, combo){\n    if(combo.length == n){\n      result.push(combo);\n      return;\n    }\n    for(var i = start; i < l.length; i++){\n      helper(i, combo.concat(l[i]));\n    }\n  }\n  helper(0, []);\n  return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}",
    "    var res = [];\n    var f = function(t, i, n){\n        if (n === 0){\n            res.push(t);\n            return;\n        }\n        for (i = i; i < l.length; i++){\n            f(t.concat(l[i]), i, n-1);\n        }\n    }\n    f([], 0, n);\n    return res;\n}\n",
    "  var result = [];\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var m = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var aa = 0;\n  var bb = 0;\n  var cc = 0;\n  var dd = 0;\n  var ee = 0;\n  var ff = 0;\n  var gg = 0;\n  var hh = 0;\n  var ii = 0;\n  var jj = 0;\n  var kk = 0;\n  var ll = 0;\n  var mm = 0;\n  var nn = 0;\n  var oo = 0;\n  var pp = 0;\n  var qq = 0;\n  var rr = 0;\n  var ss = 0;\n  var tt = 0;\n  var uu = 0;\n  var vv = 0;\n  var ww = 0;\n  var xx = 0;\n  var yy = 0;\n  var zz = 0;\n  var aaa = 0;\n  var bbb = 0;\n  var ccc = 0;\n  var ddd = 0;\n  var eee = 0;\n  var fff = 0;\n  var ggg = 0;\n  var hhh = 0;\n  var iii = 0;\n  var jjj = 0;\n  var kkk = 0;\n  var lll = 0;\n  var mmm = 0;\n  var nnn = 0;\n  var ooo = 0;\n  var ppp = 0;\n  var qqq = 0;\n  var rrr = 0;\n  var sss = 0;\n  var ttt = 0;\n  var uuu = 0;\n  var vvv = 0;\n  var www = 0;\n  var xxx = 0;\n  var yyy = 0;\n  var z",
    "    var result = [];\n    function recurse(start, curr){\n        if(curr.length == n){\n            result.push(curr);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            recurse(i, curr.concat(l[i]));\n        }\n    }\n    recurse(0, []);\n    return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}\n",
    "    var result = [];\n    function recurse(arr, i){\n        if(i == n){\n            result.push(arr);\n            return;\n        }\n        for(var j = 0; j < l.length; j++){\n            recurse(arr.concat(l[j]), i + 1);\n        }\n    }\n    recurse([], 0);\n    return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}\n",
    "  var result = [];\n  function helper(start, combo){\n    if(combo.length == n){\n      result.push(combo);\n      return;\n    }\n    for(var i = start; i < l.length; i++){\n      helper(i, combo.concat(l[i]));\n    }\n  }\n  helper(0, []);\n  return result;\n}\n",
    "  var result = [];\n  function helper(start, combo){\n    if(combo.length == n){\n      result.push(combo);\n      return;\n    }\n    for(var i = start; i < l.length; i++){\n      helper(i, combo.concat(l[i]));\n    }\n  }\n  helper(0, []);\n  return result;\n}\n",
    "    var result = [];\n    function recurse(arr, i){\n        if (i == n){\n            result.push(arr);\n            return;\n        }\n        for (var j = 0; j < l.length; j++){\n            var new_arr = arr.slice();\n            new_arr.push(l[j]);\n            recurse(new_arr, i+1);\n        }\n    }\n    recurse([], 0);\n    return result;\n}\n",
    "\tvar result = [];\n\tvar current = [];\n\tvar recurse = function(start, len){\n\t\tif(len === 0){\n\t\t\tresult.push(current.slice());\n\t\t\treturn;\n\t\t}\n\t\tfor(var i = start; i < l.length; i++){\n\t\t\tcurrent.push(l[i]);\n\t\t\trecurse(i, len - 1);\n\t\t\tcurrent.pop();\n\t\t}\n\t}\n\trecurse(0, n);\n\treturn result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}",
    "    var result = [];\n    function recurse(arr, i){\n        if(i == n){\n            result.push(arr);\n            return;\n        }\n        for(var j = 0; j < l.length; j++){\n            recurse(arr.concat(l[j]), i+1);\n        }\n    }\n    recurse([], 0);\n    return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length === n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}\n",
    "    var result = [];\n    function helper(start, curr){\n        if(curr.length === n){\n            result.push(curr);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, curr.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}\n",
    "\tvar result = [];\n\tvar temp = [];\n\tfunction helper(l, n, temp, result){\n\t\tif(n === 0){\n\t\t\tresult.push(temp.slice());\n\t\t\treturn;\n\t\t}\n\t\tfor(var i = 0; i < l.length; i++){\n\t\t\ttemp.push(l[i]);\n\t\t\thelper(l, n-1, temp, result);\n\t\t\ttemp.pop();\n\t\t}\n\t}\n\thelper(l, n, temp, result);\n\treturn result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}",
    "    var result = [];\n    function helper(l, n, arr){\n        if(n == 0){\n            result.push(arr);\n            return;\n        }\n        for(var i = 0; i < l.length; i++){\n            helper(l, n-1, arr.concat(l[i]));\n        }\n    }\n    helper(l, n, []);\n    return result;\n}",
    "  var result = [];\n  function recurse(start, curr){\n    if(curr.length === n){\n      result.push(curr.slice());\n      return;\n    }\n    for(var i = start; i < l.length; i++){\n      curr.push(l[i]);\n      recurse(i, curr);\n      curr.pop();\n    }\n  }\n  recurse(0, []);\n  return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length === n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}",
    "    var result = [];\n    function helper(start, combo){\n        if (combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for (var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}",
    "    var a = [];\n    var f = function(prefix, l){\n        if(prefix.length === n){\n            a.push(prefix);\n            return;\n        }\n        for(var i = 0; i < l.length; i++){\n            f(prefix.concat(l[i]), l);\n        }\n    }\n    f([], l);\n    return a;\n}\n",
    "  var result = [];\n  function helper(start, combo){\n    if(combo.length === n){\n      result.push(combo);\n      return;\n    }\n    for(var i = start; i < l.length; i++){\n      helper(i, combo.concat(l[i]));\n    }\n  }\n  helper(0, []);\n  return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}\n",
    "    var result = [];\n    var f = function(prefix, l){\n        if(prefix.length == n){\n            result.push(prefix);\n            return;\n        }\n        for(var i = 0; i < l.length; i++){\n            f(prefix.concat(l[i]), l);\n        }\n    }\n    f([], l);\n    return result;\n}\n",
    "  var result = [];\n  function helper(start, combo){\n    if(combo.length === n){\n      result.push(combo);\n      return;\n    }\n    for(var i = start; i < l.length; i++){\n      helper(i, combo.concat(l[i]));\n    }\n  }\n  helper(0, []);\n  return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length === n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}\n",
    "    var result = [];\n    function helper(start, curr){\n        if(curr.length == n){\n            result.push(curr);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, curr.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}\n",
    "\tvar combinations = [];\n\tvar combination = [];\n\tfunction generate(l, n, i){\n\t\tif(n === 0){\n\t\t\tcombinations.push(combination.slice());\n\t\t\treturn;\n\t\t}\n\t\tfor(var j = i; j < l.length; j++){\n\t\t\tcombination.push(l[j]);\n\t\t\tgenerate(l, n-1, j);\n\t\t\tcombination.pop();\n\t\t}\n\t}\n\tgenerate(l, n, 0);\n\treturn combinations;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}",
    "  var result = [];\n  function helper(l, n, arr){\n    if(arr.length === n){\n      result.push(arr);\n      return;\n    }\n    for(var i = 0; i < l.length; i++){\n      helper(l, n, arr.concat(l[i]));\n    }\n  }\n  helper(l, n, []);\n  return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if (combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for (var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}\n",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}\n",
    "\tvar result = [];\n\tfunction helper(start, combo){\n\t\tif(combo.length == n){\n\t\t\tresult.push(combo);\n\t\t\treturn;\n\t\t}\n\t\tfor(var i = start; i < l.length; i++){\n\t\t\thelper(i, combo.concat(l[i]));\n\t\t}\n\t}\n\thelper(0, []);\n\treturn result;\n}\n",
    "    var result = [];\n    function helper(arr, start){\n        if(arr.length == n){\n            result.push(arr);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(arr.concat(l[i]), i);\n        }\n    }\n    helper([], 0);\n    return result;\n}",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length === n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length === n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length == n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length === n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}\n",
    "  var result = [];\n  function helper(start, combo){\n    if(combo.length === n){\n      result.push(combo);\n      return;\n    }\n    for(var i = start; i < l.length; i++){\n      helper(i, combo.concat(l[i]));\n    }\n  }\n  helper(0, []);\n  return result;\n}",
    "    var result = [];\n    function helper(start, combo){\n        if(combo.length === n){\n            result.push(combo);\n            return;\n        }\n        for(var i = start; i < l.length; i++){\n            helper(i, combo.concat(l[i]));\n        }\n    }\n    helper(0, []);\n    return result;\n}"
  ]
}