{
  "name": "mbpp_562_Find_Max_Length",
  "language": "js",
  "prompt": "//Write a jsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst){\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_562_Find_Max_Length.py",
  "prompt_terminology": "reworded",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    var max_len = 0;\n    var temp_len = 0;\n    var dict = {};\n    for(var i=0; i<lst.length; i++){\n        if(lst[i] == 0){\n            temp_len += 1;\n        }\n        else{\n            temp_len -= 1;\n        }\n        if(temp_len == 0){\n            max_len = i+1;\n        }\n        if(dict[temp_len] == undefined){\n            dict[temp_len] = i;\n        }\n        else{\n            if(max_len < i - dict[temp_len]){\n                max_len = i - dict[temp_len];\n            }\n        }\n    }\n    return max_len;\n}\n",
    "    var max_length = 0;\n    var temp_length = 0;\n    var i = 0;\n    while (i < lst.length){\n        if (lst[i] == 0){\n            temp_length += 1;\n        }\n        else{\n            if (temp_length > max_length){\n                max_length = temp_length;\n            }\n            temp_length = 0;\n        }\n        i += 1;\n    }\n    return max_length;\n}",
    "    var max_length = 0;\n    var temp_length = 0;\n    var i = 0;\n    while(i < lst.length){\n        if(lst[i] == 0){\n            temp_length = 0;\n        }\n        else{\n            temp_length++;\n            if(temp_length > max_length){\n                max_length = temp_length;\n            }\n        }\n        i++;\n    }\n    return max_length;\n}\n\nvar lst = [1,0,1,1,0,1,0,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
    "    var max_length = 0;\n    var temp_length = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] == 0){\n            temp_length += 1;\n        }\n        else{\n            if(temp_length > max_length){\n                max_length = temp_length;\n            }\n            temp_length = 0;\n        }\n    }\n    return max_length;\n}\nvar lst = [1,0,1,1,0,1,0,0,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,1,1,1,1,0,1,0,0,1,1,1,0,1,1,1,1,0,1,0,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
    "    var max_length = 0;\n    var temp_length = 0;\n    for(var i=0; i<lst.length; i++){\n        if(lst[i] == 0){\n            temp_length += 1;\n        }\n        else{\n            if(temp_length > max_length){\n                max_length = temp_length;\n            }\n            temp_length = 0;\n        }\n    }\n    return max_length;\n}\nvar lst = [1,0,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,",
    "    var max_length = 0;\n    var temp_length = 0;\n    var i;\n    for(i=0;i<lst.length;i++){\n        if(lst[i]==0){\n            temp_length = 0;\n        }\n        else{\n            temp_length += 1;\n            if(temp_length > max_length){\n                max_length = temp_length;\n            }\n        }\n    }\n    return max_length;\n}\nvar lst = [1,0,0,1,1,0,1,0,1,1];",
    "    var max_length = 0;\n    var temp_length = 0;\n    for(var i=0; i<lst.length; i++){\n        if(lst[i] == 0){\n            temp_length += 1;\n        }\n        else{\n            if(temp_length > max_length){\n                max_length = temp_length;\n            }\n            temp_length = 0;\n        }\n    }\n    return max_length;\n}\nvar lst = [1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
    "    var max_length = 0;\n    var current_length = 0;\n    var i = 0;\n    while(i < lst.length){\n        if(lst[i] == 0){\n            current_length = 0;\n        }\n        else{\n            current_length += 1;\n            max_length = Math.max(max_length, current_length);\n        }\n        i += 1;\n    }\n    return max_length;\n}",
    "    var max_length = 0;\n    var temp_length = 0;\n    for (var i = 0; i < lst.length; i++){\n        if (lst[i] == 0){\n            temp_length += 1;\n        }\n        else{\n            if (temp_length > max_length){\n                max_length = temp_length;\n            }\n            temp_length = 0;\n        }\n    }\n    return max_length;\n}\n",
    "    var max_length = 0;\n    var temp_length = 0;\n    var i;\n    for(i=0;i<lst.length;i++){\n        if(lst[i] == 0){\n            temp_length = 0;\n        }\n        else{\n            temp_length += 1;\n            if(temp_length > max_length){\n                max_length = temp_length;\n            }\n        }\n    }\n    return max_length;\n}\nvar lst = [0,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,",
    "    var max_length = 0;\n    var max_length_arr = [];\n    for(var i=0; i<lst.length; i++){\n        var length = 0;\n        var arr = [];\n        for(var j=i; j<lst.length; j++){\n            if(lst[j] == 0){\n                length = length + 1;\n                arr.push(lst[j]);\n            }\n            else{\n                length = length - 1;\n                arr.push(lst[j]);\n            }\n            if(length == 0){\n                if(max_length < arr.length){\n                    max_length = arr.length;\n                    max_length_arr = arr;\n                }\n            }\n        }\n    }\n    return max_length_arr;\n}",
    "    var max_length = 0;\n    var current_length = 0;\n    var hash_map = {};\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] == 0){\n            current_length += 1;\n        }\n        else{\n            current_length -= 1;\n        }\n        if(current_length == 0){\n            max_length = i + 1;\n        }\n        if(hash_map[current_length] == undefined){\n            hash_map[current_length] = i;\n        }\n        else{\n            if(max_length < i - hash_map[current_length]){\n                max_length = i - hash_map[current_length];\n            }\n        }\n    }\n    return max_length;\n}",
    "    var max_length = 0;\n    var length = 0;\n    var i = 0;\n    while(i < lst.length){\n        if(lst[i] == 0){\n            length = 0;\n        }\n        else{\n            length++;\n            if(length > max_length){\n                max_length = length;\n            }\n        }\n        i++;\n    }\n    return max_length;\n}",
    "    var max_len = 0;\n    var temp_len = 0;\n    var i = 0;\n    while(i < lst.length){\n        if(lst[i] == 0){\n            temp_len = 0;\n        }\n        else{\n            temp_len += 1;\n            if(temp_len > max_len){\n                max_len = temp_len;\n            }\n        }\n        i += 1;\n    }\n    return max_len;\n}\n\nvar lst = [1,0,0,1,1,0,1,1,1,0,1,1,1];",
    "    var max_length = 0;\n    var count = 0;\n    for(var i=0; i<lst.length; i++){\n        if(lst[i] == 0){\n            count = 0;\n        }\n        else{\n            count += 1;\n            max_length = Math.max(max_length, count);\n        }\n    }\n    return max_length;\n}\nvar lst = [0,1,1,0,1,1,1,0,1,1];",
    "    var max = 0;\n    var count = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] == 0){\n            count = 0;\n        }\n        else{\n            count += 1;\n            max = Math.max(max, count);\n        }\n    }\n    return max;\n}",
    "    var max_length = 0;\n    var temp_length = 0;\n    for(var i=0; i<lst.length; i++){\n        if(lst[i] == 0){\n            temp_length = 0;\n        }\n        else{\n            temp_length += 1;\n            if(temp_length > max_length){\n                max_length = temp_length;\n            }\n        }\n    }\n    return max_length;\n}\nvar lst = [0,0,1,0,1,1,1,0,1,1];",
    "    var max_length = 0;\n    var count = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] == 0){\n            count = 0;\n        }\n        else{\n            count += 1;\n            max_length = Math.max(max_length, count);\n        }\n    }\n    return max_length;\n}",
    "    var max_length = 0;\n    var temp_length = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] == 0){\n            temp_length += 1;\n        }\n        else{\n            if(temp_length > max_length){\n                max_length = temp_length;\n            }\n            temp_length = 0;\n        }\n    }\n    return max_length;\n}\nvar lst = [1,0,0,1,1,0,1,1,1,0,1,1,0,0,0,1,1,1,1];",
    "    var max_length = 0;\n    var start_index = 0;\n    var end_index = 0;\n    var sum = 0;\n    var n = lst.length;\n    for(var i = 0; i < n; i++){\n        sum += lst[i];\n        if(sum == 0){\n            end_index = i;\n            var length = end_index - start_index + 1;\n            if(length > max_length){\n                max_length = length;\n            }\n        }\n        if(sum < 0){\n            sum = 0;\n            start_index = i + 1;\n        }\n    }\n    return max_length;\n}\n"
  ]
}