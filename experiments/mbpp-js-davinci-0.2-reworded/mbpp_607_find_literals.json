{
  "name": "mbpp_607_find_literals",
  "language": "js",
  "prompt": "//Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\nfunction find_literals(text, pattern){\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_607_find_literals.py",
  "prompt_terminology": "reworded",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_literals;\n  assert.deepEqual(candidate(\"The quick brown fox jumps over the lazy dog.\", \"fox\"),[\"fox\", 16, 19]);\n  assert.deepEqual(candidate(\"Its been a very crazy procedure right\", \"crazy\"),[\"crazy\", 16, 21]);\n  assert.deepEqual(candidate(\"Hardest choices required strongest will\", \"will\"),[\"will\", 35, 39]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var match = false;\n    for(var i = 0; i < text.length; i++){\n        if(text[i] == pattern[0]){\n            start = i;\n            for(var j = 0; j < pattern.length; j++){\n                if(text[i+j] == pattern[j]){\n                    match = true;\n                }\n                else{\n                    match = false;\n                    break;\n                }\n            }\n            if(match){\n                end = i + j;\n                result.push(text.substring(start, end));\n                result.push(start);\n                result.push(end);\n                return result;\n            }\n        }\n    }\n    return result;\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var i = 0;\n    var j = 0;\n    var found = false;\n    while(i < text.length){\n        if(text[i] == pattern[j]){\n            if(j == 0){\n                start = i;\n            }\n            if(j == pattern.length - 1){\n                end = i;\n                found = true;\n                break;\n            }\n            i++;\n            j++;\n        }\n        else{\n            i++;\n            j = 0;\n        }\n    }\n    if(found){\n        result.push(text.substring(start, end + 1));\n        result.push(start);\n        result.push(end);\n    }\n    else{\n        result.push(\"\");\n        result.push(-1);\n        result.push(-1);\n    }\n    return result;\n}\n",
    "  var result = [];\n  var start = 0;\n  var end = 0;\n  var match = false;\n  for (var i = 0; i < text.length; i++) {\n    if (text[i] === pattern[0]) {\n      start = i;\n      for (var j = 0; j < pattern.length; j++) {\n        if (text[i+j] === pattern[j]) {\n          match = true;\n        } else {\n          match = false;\n          break;\n        }\n      }\n      if (match) {\n        end = i + pattern.length - 1;\n        result.push([start, end]);\n      }\n    }\n  }\n  return result;\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var i = 0;\n    while(i < text.length){\n        if(text[i] === pattern[0]){\n            start = i;\n            var j = 0;\n            while(j < pattern.length){\n                if(text[i] === pattern[j]){\n                    i++;\n                    j++;\n                }\n                else{\n                    break;\n                }\n            }\n            if(j === pattern.length){\n                end = i;\n                result.push([start, end]);\n            }\n        }\n        else{\n            i++;\n        }\n    }\n    return result;\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var i = 0;\n    var j = 0;\n    var found = false;\n    while(i < text.length){\n        if(text[i] == pattern[j]){\n            if(!found){\n                start = i;\n                found = true;\n            }\n            j++;\n            if(j == pattern.length){\n                end = i;\n                result.push([start, end]);\n                j = 0;\n                found = false;\n            }\n        }\n        else{\n            j = 0;\n            found = false;\n        }\n        i++;\n    }\n    return result;\n}\n",
    "    var i = 0;\n    var j = 0;\n    var match = \"\";\n    var start = 0;\n    var end = 0;\n    while(i < text.length && j < pattern.length){\n        if(text[i] == pattern[j]){\n            if(match == \"\"){\n                start = i;\n            }\n            match += text[i];\n            i++;\n            j++;\n        }\n        else{\n            match = \"\";\n            i++;\n            j = 0;\n        }\n    }\n    if(match == pattern){\n        end = i;\n        return [match, start, end];\n    }\n    else{\n        return null;\n    }\n}\n",
    "    var result = {\n        'start': null,\n        'end': null,\n        'match': null\n    };\n    var start = text.indexOf(pattern);\n    if(start != -1){\n        result.start = start;\n        result.end = start + pattern.length;\n        result.match = pattern;\n    }\n    return result;\n}\n",
    "\tvar result = [];\n\tvar start_index = 0;\n\tvar end_index = 0;\n\tvar match = text.match(pattern);\n\tif(match){\n\t\tstart_index = text.indexOf(match[0]);\n\t\tend_index = start_index + match[0].length;\n\t\tresult.push(match[0]);\n\t\tresult.push(start_index);\n\t\tresult.push(end_index);\n\t}\n\treturn result;\n}\n",
    "    var match = text.match(pattern);\n    if(match){\n        return {\n            match: match[0],\n            start: match.index,\n            end: match.index + match[0].length\n        };\n    }\n    return null;\n}\n",
    "\tvar result = {};\n\tvar start = text.indexOf(pattern);\n\tvar end = start + pattern.length;\n\tresult.start = start;\n\tresult.end = end;\n\tresult.match = text.substring(start, end);\n\treturn result;\n}\n",
    "    var result = {};\n    var start = text.indexOf(pattern);\n    var end = start + pattern.length;\n    result.start = start;\n    result.end = end;\n    result.match = text.substring(start, end);\n    return result;\n}\n",
    "    var result = [];\n    var index = 0;\n    while(index < text.length){\n        var match = text.substr(index).match(pattern);\n        if(match){\n            result.push({\n                match: match[0],\n                start: index + match.index,\n                end: index + match.index + match[0].length\n            });\n            index += match.index + match[0].length;\n        } else {\n            break;\n        }\n    }\n    return result;\n}\n",
    "    var pattern_length = pattern.length;\n    var text_length = text.length;\n    var i = 0;\n    var j = 0;\n    var start_index = 0;\n    var end_index = 0;\n    var match = false;\n    var match_index = 0;\n    var match_string = \"\";\n    for(i = 0; i < text_length; i++){\n        if(text[i] == pattern[j]){\n            match = true;\n            match_index = i;\n            for(j = 1; j < pattern_length; j++){\n                if(text[i+j] != pattern[j]){\n                    match = false;\n                    break;\n                }\n            }\n            if(match){\n                start_index = match_index;\n                end_index = match_index + pattern_length;\n                match_string = text.substring(start_index, end_index);\n                break;\n            }\n        }\n    }\n    return {\n        match_string: match_string,\n        start_index: start_index,\n        end_index: end_index\n    };\n}\n",
    "\tvar start_index = text.indexOf(pattern);\n\tvar end_index = start_index + pattern.length;\n\treturn {\n\t\tmatch: text.substring(start_index, end_index),\n\t\tstart_index: start_index,\n\t\tend_index: end_index\n\t};\n}\n",
    "\tvar result = [];\n\tvar i = 0;\n\twhile(i < text.length){\n\t\tvar j = 0;\n\t\twhile(j < pattern.length && i + j < text.length && text[i + j] == pattern[j]){\n\t\t\tj++;\n\t\t}\n\t\tif(j == pattern.length){\n\t\t\tresult.push(i);\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var match = pattern.exec(text);\n    while (match != null){\n        start = match.index;\n        end = pattern.lastIndex;\n        result.push(text.substring(start, end));\n        match = pattern.exec(text);\n    }\n    return result;\n}\n",
    "    var start = 0;\n    var end = 0;\n    var match = \"\";\n    var pattern_length = pattern.length;\n    var text_length = text.length;\n    var i = 0;\n    var j = 0;\n    while(i < text_length){\n        if(text[i] == pattern[j]){\n            if(j == 0){\n                start = i;\n            }\n            match += text[i];\n            i++;\n            j++;\n        }\n        else{\n            match = \"\";\n            j = 0;\n            i++;\n        }\n        if(j == pattern_length){\n            end = i;\n            break;\n        }\n    }\n    return [match, start, end];\n}\n",
    "    var regex = new RegExp(pattern, \"g\");\n    var result = regex.exec(text);\n    if(result){\n        return {\n            match: result[0],\n            start: result.index,\n            end: regex.lastIndex\n        };\n    }\n    return null;\n}\n",
    "\tvar result = {};\n\tvar start = text.indexOf(pattern);\n\tvar end = start + pattern.length;\n\tresult.substring = text.substring(start, end);\n\tresult.start = start;\n\tresult.end = end;\n\treturn result;\n}\n",
    "    var i = 0;\n    var j = 0;\n    var result = [];\n    while(i < text.length && j < pattern.length){\n        if(text[i] == pattern[j]){\n            i++;\n            j++;\n        }\n        else{\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if(j == pattern.length){\n        result.push(i - j);\n        result.push(i);\n    }\n    else{\n        result.push(-1);\n        result.push(-1);\n    }\n    return result;\n}\n",
    "    var start = 0;\n    var end = 0;\n    var match = \"\";\n    var i = 0;\n    while(i < text.length){\n        if(text[i] == pattern[0]){\n            start = i;\n            var j = 0;\n            while(j < pattern.length){\n                if(text[i] == pattern[j]){\n                    match += text[i];\n                    i++;\n                    j++;\n                }\n                else{\n                    match = \"\";\n                    i = start + 1;\n                    break;\n                }\n            }\n            if(match == pattern){\n                end = i;\n                break;\n            }\n        }\n        else{\n            i++;\n        }\n    }\n    return [match, start, end];\n}\n",
    "    var result = {};\n    var match = text.match(pattern);\n    if(match){\n        result.match = match[0];\n        result.start = match.index;\n        result.end = match.index + match[0].length;\n    }\n    return result;\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var match = pattern.exec(text);\n    while(match != null){\n        start = match.index;\n        end = pattern.lastIndex;\n        result.push(text.substring(start, end));\n        match = pattern.exec(text);\n    }\n    return result;\n}\n",
    "    var start = 0;\n    var end = 0;\n    var match = \"\";\n    var found = false;\n    for(var i = 0; i < text.length; i++){\n        if(text[i] == pattern[0]){\n            start = i;\n            end = i;\n            match = text[i];\n            found = true;\n            for(var j = 1; j < pattern.length; j++){\n                if(text[i+j] == pattern[j]){\n                    match += text[i+j];\n                    end++;\n                }\n                else{\n                    found = false;\n                    break;\n                }\n            }\n            if(found){\n                return {\n                    match: match,\n                    start: start,\n                    end: end\n                }\n            }\n        }\n    }\n    return {\n        match: \"\",\n        start: -1,\n        end: -1\n    }\n}\n",
    "    var result = {};\n    var match = text.match(pattern);\n    if(match){\n        result.match = match[0];\n        result.start = match.index;\n        result.end = match.index + match[0].length;\n    }\n    return result;\n}\n",
    "    var result = {};\n    var start = text.indexOf(pattern);\n    var end = start + pattern.length;\n    result.match = text.substring(start, end);\n    result.start = start;\n    result.end = end;\n    return result;\n}\n",
    "    var result = [];\n    var match = pattern.exec(text);\n    while(match != null){\n        result.push(match[0]);\n        match = pattern.exec(text);\n    }\n    return result;\n}\n",
    "  var result = {};\n  var start = text.indexOf(pattern);\n  var end = start + pattern.length;\n  result.start = start;\n  result.end = end;\n  result.match = text.substring(start, end);\n  return result;\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var match = false;\n    var i = 0;\n    while(i < text.length){\n        if(text[i] == pattern[0]){\n            start = i;\n            end = i;\n            match = true;\n            for(var j = 1; j < pattern.length; j++){\n                if(text[i+j] != pattern[j]){\n                    match = false;\n                    break;\n                }\n                end = i+j;\n            }\n            if(match){\n                result.push(text.substring(start, end+1));\n                i = end+1;\n            }\n            else{\n                i++;\n            }\n        }\n        else{\n            i++;\n        }\n    }\n    return result;\n}\n",
    "    var match = text.match(pattern);\n    if(match){\n        return {\n            match: match[0],\n            start: match.index,\n            end: match.index + match[0].length\n        };\n    }\n    return null;\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var index = 0;\n    var match = false;\n    for(var i = 0; i < text.length; i++){\n        if(text[i] === pattern[index]){\n            if(!match){\n                start = i;\n            }\n            match = true;\n            index++;\n            if(index === pattern.length){\n                end = i + 1;\n                result.push([start, end]);\n                index = 0;\n                match = false;\n            }\n        }else{\n            index = 0;\n            match = false;\n        }\n    }\n    return result;\n}\n",
    "\tvar result = [];\n\tvar index = 0;\n\tvar start = 0;\n\tvar end = 0;\n\tvar i = 0;\n\tvar j = 0;\n\tvar k = 0;\n\tvar match = false;\n\tvar found = false;\n\tvar temp = \"\";\n\tvar temp2 = \"\";\n\tvar temp3 = \"\";\n\tvar temp4 = \"\";\n\tvar temp5 = \"\";\n\tvar temp6 = \"\";\n\tvar temp7 = \"\";\n\tvar temp8 = \"\";\n\tvar temp9 = \"\";\n\tvar temp10 = \"\";\n\tvar temp11 = \"\";\n\tvar temp12 = \"\";\n\tvar temp13 = \"\";\n\tvar temp14 = \"\";\n\tvar temp15 = \"\";\n\tvar temp16 = \"\";\n\tvar temp17 = \"\";\n\tvar temp18 = \"\";\n\tvar temp19 = \"\";\n\tvar temp20 = \"\";\n\tvar temp21 = \"\";\n\tvar temp22 = \"\";\n\tvar temp23 = \"\";\n\tvar temp24 = \"\";\n\tvar temp25 = \"\";\n\tvar temp26 = \"\";\n\tvar temp27 = \"\";\n\tvar temp28 = \"\";\n\tvar temp29 = \"\";\n\tvar temp30 = \"\";\n\tvar temp31 = \"\";\n\tvar temp32 = \"\";\n\tvar temp33 = \"\";\n\tvar temp34 = \"\";\n\tvar temp35 = \"\";\n\tvar temp36 = \"\";\n\tvar temp37 = \"\";\n\tvar temp38 = \"\";\n\tvar temp39 = \"\";\n\tvar temp40 = \"\";\n\tvar temp41 = \"\";\n\tvar temp42 = \"\";\n\tvar temp43 = \"\";\n\tvar temp44 = \"\";\n\tvar temp45 = \"\";\n\tvar temp46 = \"\";\n\tvar temp47 = \"\";\n\tvar temp48 = \"\";\n\tvar temp49 = \"\";\n\tvar temp50 = \"\";\n\tvar temp51 = \"\";\n\tvar temp52 = \"\";\n\tvar temp53 = \"\";\n\tvar temp54 = \"\";\n\tvar temp55 = \"\";\n\tvar temp56 = \"\";\n\tvar",
    "    var start = text.indexOf(pattern);\n    var end = start + pattern.length;\n    return [text.substring(start, end), start, end];\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var i = 0;\n    while(i < text.length){\n        if(text[i] === pattern[0]){\n            start = i;\n            end = i;\n            for(var j = 1; j < pattern.length; j++){\n                if(pattern[j] === text[i+j]){\n                    end++;\n                }\n                else{\n                    break;\n                }\n            }\n            if(end - start === pattern.length - 1){\n                result.push(text.substring(start, end+1));\n                i = end + 1;\n            }\n            else{\n                i++;\n            }\n        }\n        else{\n            i++;\n        }\n    }\n    return result;\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var i = 0;\n    while(i < text.length){\n        if(text[i] == pattern[0]){\n            start = i;\n            end = i;\n            for(var j = 1; j < pattern.length; j++){\n                if(text[i+j] == pattern[j]){\n                    end++;\n                }\n                else{\n                    break;\n                }\n            }\n            if(end - start == pattern.length - 1){\n                result.push([text.substring(start, end+1), start, end]);\n            }\n        }\n        i++;\n    }\n    return result;\n}\n",
    "\tvar result = {};\n\tvar match = text.match(pattern);\n\tresult.match = match[0];\n\tresult.start = text.indexOf(match[0]);\n\tresult.end = result.start + match[0].length;\n\treturn result;\n}\n",
    "\tvar result = [];\n\tvar start_index = 0;\n\tvar end_index = 0;\n\tvar match = text.match(pattern);\n\tif(match){\n\t\tstart_index = text.indexOf(match[0]);\n\t\tend_index = start_index + match[0].length;\n\t\tresult.push(match[0]);\n\t\tresult.push(start_index);\n\t\tresult.push(end_index);\n\t}\n\treturn result;\n}\n",
    "    var start = text.search(pattern);\n    var end = start + pattern.length;\n    return text.substring(start, end);\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var i = 0;\n    while(i < text.length){\n        if(text[i] === pattern[0]){\n            start = i;\n            for(var j = 0; j < pattern.length; j++){\n                if(text[i+j] !== pattern[j]){\n                    break;\n                }\n                if(j === pattern.length - 1){\n                    end = i + j;\n                    result.push([start, end]);\n                }\n            }\n        }\n        i++;\n    }\n    return result;\n}\n",
    "    var result = {};\n    var start = 0;\n    var end = 0;\n    var match = \"\";\n    for(var i = 0; i < text.length; i++){\n        if(text[i] === pattern[0]){\n            start = i;\n            for(var j = 0; j < pattern.length; j++){\n                if(text[i + j] === pattern[j]){\n                    match += pattern[j];\n                    end = i + j;\n                }\n                else{\n                    match = \"\";\n                    start = 0;\n                    end = 0;\n                    break;\n                }\n            }\n        }\n    }\n    result.match = match;\n    result.start = start;\n    result.end = end;\n    return result;\n}\n",
    "    var result = [];\n    var start_index = 0;\n    var end_index = 0;\n    var match = false;\n    var match_index = 0;\n    var match_length = 0;\n    var match_string = \"\";\n    var match_start = 0;\n    var match_end = 0;\n    var match_count = 0;\n    var pattern_length = pattern.length;\n    var text_length = text.length;\n    var pattern_index = 0;\n    var text_index = 0;\n    var pattern_char = \"\";\n    var text_char = \"\";\n    var pattern_char_code = 0;\n    var text_char_code = 0;\n    var pattern_char_code_lower = 0;\n    var text_char_code_lower = 0;\n    var pattern_char_code_upper = 0;\n    var text_char_code_upper = 0;\n    var pattern_char_code_lower_hex = \"\";\n    var text_char_code_lower_hex = \"\";\n    var pattern_char_code_upper_hex = \"\";\n    var text_char_code_upper_hex = \"\";\n    var pattern_char_code_lower_hex_length = 0;\n    var text_char_code_lower_hex_length = 0;\n    var pattern_char_code_upper_hex_length = 0;\n    var text_char_code_upper_hex_length = 0;\n    var pattern_char_code_lower_hex_index = 0;\n    var text_char_code_lower_hex_index = 0;\n    var pattern_char_code_upper_hex_index = 0;\n    var text_char_code_upper_hex_index = 0;\n    var pattern_char_code_lower_hex_char = \"\";\n    var text_char_code_lower_hex_char = \"\";\n    var pattern_char_code_upper_hex_char = \"\";\n    var text_char_code_upper_hex_char = \"\";\n    var pattern_char_code_lower_hex_char_code = 0;\n    var text_char_code_lower_hex",
    "    var start = 0;\n    var end = 0;\n    var match = \"\";\n    var found = false;\n    for(var i = 0; i < text.length; i++){\n        if(text[i] == pattern[0]){\n            start = i;\n            match = text[i];\n            for(var j = 1; j < pattern.length; j++){\n                if(text[i+j] == pattern[j]){\n                    match += text[i+j];\n                }\n                else{\n                    break;\n                }\n            }\n            if(match == pattern){\n                end = i + pattern.length;\n                found = true;\n                break;\n            }\n        }\n    }\n    if(found){\n        return {\n            match: match,\n            start: start,\n            end: end\n        };\n    }\n    else{\n        return null;\n    }\n}\n",
    "    var match = text.match(pattern);\n    if(match){\n        return {\n            match: match[0],\n            start: match.index,\n            end: match.index + match[0].length\n        };\n    }\n    return null;\n}\n",
    "\tvar result = [];\n\tvar index = 0;\n\twhile(index < text.length){\n\t\tvar match = pattern.exec(text);\n\t\tif(match){\n\t\t\tresult.push(match[0]);\n\t\t\tindex = match.index + 1;\n\t\t}else{\n\t\t\tindex = text.length;\n\t\t}\n\t}\n\treturn result;\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var match = false;\n    var i = 0;\n    var j = 0;\n    while(i < text.length){\n        if(text[i] == pattern[j]){\n            if(!match){\n                start = i;\n            }\n            match = true;\n            j++;\n            if(j == pattern.length){\n                end = i;\n                result.push([start, end]);\n                j = 0;\n                match = false;\n            }\n        }\n        else{\n            j = 0;\n            match = false;\n        }\n        i++;\n    }\n    return result;\n}\n",
    "\tvar result = {};\n\tvar start = text.indexOf(pattern);\n\tvar end = start + pattern.length;\n\tresult.start = start;\n\tresult.end = end;\n\tresult.match = text.substring(start, end);\n\treturn result;\n}\n",
    "    var result = [];\n    for(var i = 0; i < text.length; i++){\n        if(text[i] === pattern[0]){\n            var match = true;\n            for(var j = 1; j < pattern.length; j++){\n                if(text[i + j] !== pattern[j]){\n                    match = false;\n                    break;\n                }\n            }\n            if(match){\n                result.push([i, i + pattern.length - 1]);\n            }\n        }\n    }\n    return result;\n}\n",
    "    var result = {};\n    var start = text.indexOf(pattern);\n    var end = start + pattern.length;\n    result.match = text.substring(start, end);\n    result.start = start;\n    result.end = end;\n    return result;\n}\n",
    "\tvar match = text.match(pattern);\n\treturn match;\n}\n",
    "    var start = 0;\n    var end = 0;\n    var match = \"\";\n    var found = false;\n    for(var i = 0; i < text.length; i++){\n        if(text[i] == pattern[0]){\n            start = i;\n            for(var j = 0; j < pattern.length; j++){\n                if(text[i+j] == pattern[j]){\n                    match += pattern[j];\n                    end = i+j;\n                    found = true;\n                }\n                else{\n                    match = \"\";\n                    found = false;\n                    break;\n                }\n            }\n        }\n        if(found){\n            break;\n        }\n    }\n    return [match, start, end];\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var match = text.match(pattern);\n    if(match){\n        start = text.indexOf(match[0]);\n        end = start + match[0].length;\n    }\n    result.push(match[0]);\n    result.push(start);\n    result.push(end);\n    return result;\n}\n",
    "\tvar result = [];\n\tvar match = pattern.exec(text);\n\twhile(match != null){\n\t\tresult.push(match[0]);\n\t\tmatch = pattern.exec(text);\n\t}\n\treturn result;\n}\n",
    "\tvar result = [];\n\tvar index = 0;\n\tvar start = 0;\n\tvar end = 0;\n\twhile(index < text.length){\n\t\tif(text[index] == pattern[0]){\n\t\t\tstart = index;\n\t\t\tend = index;\n\t\t\tvar i = 0;\n\t\t\twhile(text[index] == pattern[i]){\n\t\t\t\tend = index;\n\t\t\t\tindex++;\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tif(i == pattern.length){\n\t\t\t\tresult.push(text.substring(start, end + 1));\n\t\t\t}\n\t\t}\n\t\tindex++;\n\t}\n\treturn result;\n}\n",
    "    var i = 0;\n    var j = 0;\n    var result = [];\n    while(i < text.length){\n        if(text[i] == pattern[j]){\n            j++;\n            if(j == pattern.length){\n                result.push(i - pattern.length + 1);\n                result.push(i);\n                return result;\n            }\n        }\n        else{\n            j = 0;\n        }\n        i++;\n    }\n    return result;\n}\n",
    "\tvar result = {\n\t\tstart: 0,\n\t\tend: 0,\n\t\tmatch: ''\n\t};\n\tvar i = 0;\n\tvar j = 0;\n\tvar match = true;\n\twhile(i < text.length){\n\t\tif(text[i] === pattern[j]){\n\t\t\tif(j === 0){\n\t\t\t\tresult.start = i;\n\t\t\t}\n\t\t\tj++;\n\t\t\tif(j === pattern.length){\n\t\t\t\tresult.end = i;\n\t\t\t\tresult.match = text.substring(result.start, result.end + 1);\n\t\t\t\treturn result;\n\t\t\t}\n\t\t} else {\n\t\t\tj = 0;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\n",
    "    var result = {};\n    var start = 0;\n    var end = 0;\n    var match = \"\";\n    var found = false;\n    for(var i = 0; i < text.length; i++){\n        if(text[i] == pattern[0]){\n            start = i;\n            for(var j = 0; j < pattern.length; j++){\n                if(text[i+j] == pattern[j]){\n                    match += text[i+j];\n                    end = i+j;\n                    found = true;\n                }\n                else{\n                    found = false;\n                    break;\n                }\n            }\n        }\n    }\n    if(found){\n        result.match = match;\n        result.start = start;\n        result.end = end;\n    }\n    else{\n        result.match = \"\";\n        result.start = -1;\n        result.end = -1;\n    }\n    return result;\n}\n",
    "    var result = {};\n    var index = 0;\n    var match = text.match(pattern);\n    if(match){\n        result.match = match[0];\n        result.start = text.indexOf(match[0]);\n        result.end = result.start + match[0].length;\n    }\n    return result;\n}\n",
    "\tvar match = text.match(pattern);\n\treturn match;\n}\n",
    "\tvar result = [];\n\tvar start = 0;\n\tvar end = 0;\n\tvar found = false;\n\tfor(var i=0; i<text.length; i++){\n\t\tif(text[i] == pattern[0]){\n\t\t\tstart = i;\n\t\t\tfor(var j=0; j<pattern.length; j++){\n\t\t\t\tif(text[i+j] == pattern[j]){\n\t\t\t\t\tfound = true;\n\t\t\t\t}else{\n\t\t\t\t\tfound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(found){\n\t\t\t\tend = i+j;\n\t\t\t\tresult.push({\n\t\t\t\t\t\"start\": start,\n\t\t\t\t\t\"end\": end,\n\t\t\t\t\t\"match\": text.substring(start, end)\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var i = 0;\n    while(i < text.length){\n        if(text[i] === pattern[0]){\n            start = i;\n            end = i;\n            for(var j = 1; j < pattern.length; j++){\n                if(text[i+j] === pattern[j]){\n                    end++;\n                }\n                else{\n                    break;\n                }\n            }\n            if(end - start === pattern.length - 1){\n                result.push({\n                    start: start,\n                    end: end,\n                    match: text.substring(start, end+1)\n                });\n            }\n        }\n        i++;\n    }\n    return result;\n}\n",
    "    var result = {\n        start: 0,\n        end: 0,\n        match: ''\n    };\n    var match = text.match(pattern);\n    if(match){\n        result.start = match.index;\n        result.end = match.index + match[0].length;\n        result.match = match[0];\n    }\n    return result;\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var match = false;\n    for(var i = 0; i < text.length; i++){\n        if(text[i] === pattern[0]){\n            start = i;\n            for(var j = 0; j < pattern.length; j++){\n                if(text[i+j] === pattern[j]){\n                    match = true;\n                }else{\n                    match = false;\n                    break;\n                }\n            }\n            if(match){\n                end = i + pattern.length - 1;\n                result.push(text.substring(start, end + 1));\n            }\n        }\n    }\n    return result;\n}\n",
    "    var start_index = text.indexOf(pattern);\n    var end_index = start_index + pattern.length;\n    return {\n        match: text.substring(start_index, end_index),\n        start_index: start_index,\n        end_index: end_index\n    };\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var match = \"\";\n    for(var i = 0; i < text.length; i++){\n        if(text[i] == pattern[0]){\n            start = i;\n            for(var j = 0; j < pattern.length; j++){\n                if(text[i+j] == pattern[j]){\n                    match += text[i+j];\n                    end = i+j;\n                }\n                else{\n                    match = \"\";\n                    break;\n                }\n            }\n        }\n        if(match != \"\"){\n            result.push([match, start, end]);\n            match = \"\";\n        }\n    }\n    return result;\n}\n",
    "    var match = text.match(pattern);\n    return match;\n}\n",
    "    var result = {};\n    var match = text.match(pattern);\n    if(match){\n        result.match = match[0];\n        result.start = match.index;\n        result.end = match.index + match[0].length;\n    }\n    return result;\n}\n",
    "\tvar result = [];\n\tvar start = 0;\n\tvar end = 0;\n\tvar i = 0;\n\twhile(i < text.length){\n\t\tif(text[i] === pattern[0]){\n\t\t\tstart = i;\n\t\t\tend = i + pattern.length;\n\t\t\tif(text.slice(start, end) === pattern){\n\t\t\t\tresult.push(text.slice(start, end));\n\t\t\t\ti = end;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\n",
    "    var match = text.match(pattern);\n    return match;\n}\n",
    "    var match = text.match(pattern);\n    if (match){\n        return {\n            match: match[0],\n            start: match.index,\n            end: match.index + match[0].length\n        };\n    }\n    return null;\n}\n",
    "\tvar result = [];\n\tvar start = 0;\n\tvar end = 0;\n\tvar i = 0;\n\tvar j = 0;\n\tvar found = false;\n\twhile(i < text.length){\n\t\tif(text[i] == pattern[j]){\n\t\t\tif(!found){\n\t\t\t\tstart = i;\n\t\t\t\tfound = true;\n\t\t\t}\n\t\t\tj++;\n\t\t\tif(j == pattern.length){\n\t\t\t\tend = i;\n\t\t\t\tresult.push([start, end]);\n\t\t\t\tfound = false;\n\t\t\t\tj = 0;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tfound = false;\n\t\t\tj = 0;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var index = 0;\n    var found = false;\n    while(index < text.length){\n        if(text[index] == pattern[0]){\n            start = index;\n            end = index;\n            for(var i = 1; i < pattern.length; i++){\n                if(text[index + i] == pattern[i]){\n                    end = index + i;\n                }\n                else{\n                    break;\n                }\n            }\n            if(end == index + pattern.length - 1){\n                result.push([start, end]);\n                index = end + 1;\n            }\n            else{\n                index++;\n            }\n        }\n        else{\n            index++;\n        }\n    }\n    return result;\n}\n",
    "\tvar result = {};\n\tvar match = text.match(pattern);\n\tif(match){\n\t\tresult.match = match[0];\n\t\tresult.start = match.index;\n\t\tresult.end = match.index + match[0].length;\n\t}\n\treturn result;\n}\n",
    "    var result = {\n        start: 0,\n        end: 0,\n        match: \"\"\n    };\n    var i = 0;\n    var j = 0;\n    var match = false;\n    var found = false;\n    while(i < text.length){\n        if(text[i] === pattern[j]){\n            if(!match){\n                result.start = i;\n            }\n            result.match += text[i];\n            match = true;\n            j++;\n            if(j === pattern.length){\n                result.end = i;\n                found = true;\n                break;\n            }\n        }\n        else{\n            if(match){\n                i = result.start;\n                j = 0;\n                result.match = \"\";\n                match = false;\n            }\n        }\n        i++;\n    }\n    if(found){\n        return result;\n    }\n    else{\n        return null;\n    }\n}\n",
    "    var result = {\n        \"match\": \"\",\n        \"start\": 0,\n        \"end\": 0\n    };\n    var match = text.match(pattern);\n    if(match){\n        result.match = match[0];\n        result.start = match.index;\n        result.end = match.index + match[0].length;\n    }\n    return result;\n}\n",
    "    var start = 0;\n    var end = 0;\n    var match = \"\";\n    var found = false;\n    var pattern_index = 0;\n    var pattern_length = pattern.length;\n    var text_length = text.length;\n    for(var i = 0; i < text_length; i++){\n        if(text[i] == pattern[pattern_index]){\n            if(!found){\n                start = i;\n                found = true;\n            }\n            match += text[i];\n            pattern_index++;\n            if(pattern_index == pattern_length){\n                end = i;\n                break;\n            }\n        }\n        else{\n            found = false;\n            match = \"\";\n            pattern_index = 0;\n        }\n    }\n    return {\n        match: match,\n        start: start,\n        end: end\n    };\n}\n",
    "\tvar index = text.indexOf(pattern);\n\tif(index == -1){\n\t\treturn null;\n\t}\n\treturn {\n\t\tmatch: text.substring(index, index + pattern.length),\n\t\tstart: index,\n\t\tend: index + pattern.length\n\t}\n}\n",
    "    let start_index = text.indexOf(pattern);\n    let end_index = start_index + pattern.length;\n    return {\n        match: text.substring(start_index, end_index),\n        start_index: start_index,\n        end_index: end_index\n    }\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var match = false;\n    var match_start = 0;\n    var match_end = 0;\n    var match_text = \"\";\n    while(i < text.length){\n        if(text[i] == pattern[j]){\n            match = true;\n            match_start = i;\n            match_end = i;\n            match_text = text[i];\n            k = i + 1;\n            l = j + 1;\n            while(l < pattern.length){\n                if(text[k] == pattern[l]){\n                    match_end = k;\n                    match_text += text[k];\n                    k++;\n                    l++;\n                }\n                else{\n                    match = false;\n                    break;\n                }\n            }\n            if(match){\n                result.push({\n                    text: match_text,\n                    start: match_start,\n                    end: match_end\n                });\n            }\n        }\n        i++;\n    }\n    return result;\n}\n",
    "\tvar result = {};\n\tvar match = text.match(pattern);\n\tif(match){\n\t\tresult.match = match[0];\n\t\tresult.start = match.index;\n\t\tresult.end = match.index + match[0].length;\n\t}\n\treturn result;\n}\n",
    "    var result = [];\n    var i = 0;\n    while(i < text.length){\n        var j = 0;\n        while(j < pattern.length && i + j < text.length && text[i + j] == pattern[j]){\n            j++;\n        }\n        if(j == pattern.length){\n            result.push({\n                start: i,\n                end: i + j - 1,\n                text: text.substring(i, i + j)\n            });\n        }\n        i++;\n    }\n    return result;\n}\n",
    "    var match = text.match(pattern);\n    if (match){\n        return {\n            match: match[0],\n            start: match.index,\n            end: match.index + match[0].length\n        };\n    }\n    return null;\n}\n",
    "    var result = [];\n    var index = text.indexOf(pattern);\n    while(index >= 0){\n        result.push(index);\n        index = text.indexOf(pattern, index + 1);\n    }\n    return result;\n}\n",
    "    var match = text.match(pattern);\n    if(match){\n        return {\n            match: match[0],\n            start: match.index,\n            end: match.index + match[0].length\n        };\n    }\n    return null;\n}\n",
    "\tvar result = {};\n\tvar match = text.match(pattern);\n\tif (match){\n\t\tresult.match = match[0];\n\t\tresult.start = match.index;\n\t\tresult.end = match.index + match[0].length;\n\t}\n\treturn result;\n}\n",
    "\tvar start = text.search(pattern);\n\tvar end = start + pattern.length;\n\treturn [text.substring(start, end), start, end];\n}\n",
    "    var result = {};\n    var match = text.match(pattern);\n    if(match){\n        result.match = match[0];\n        result.start = match.index;\n        result.end = match.index + match[0].length;\n    }\n    return result;\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var match = false;\n    for(var i = 0; i < text.length; i++){\n        if(text[i] == pattern[0]){\n            start = i;\n            end = i;\n            match = true;\n            for(var j = 1; j < pattern.length; j++){\n                if(text[i+j] != pattern[j]){\n                    match = false;\n                    break;\n                }\n                end++;\n            }\n            if(match){\n                result.push([start, end]);\n            }\n        }\n    }\n    return result;\n}\n",
    "    var start = text.search(pattern);\n    var end = start + pattern.length;\n    return {\n        match: text.slice(start, end),\n        start: start,\n        end: end\n    }\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var match = false;\n    for(var i = 0; i < text.length; i++){\n        if(text[i] == pattern[0]){\n            start = i;\n            for(var j = 0; j < pattern.length; j++){\n                if(text[i+j] == pattern[j]){\n                    match = true;\n                }\n                else{\n                    match = false;\n                    break;\n                }\n            }\n            if(match){\n                end = i + j;\n                result.push([start, end]);\n            }\n        }\n    }\n    return result;\n}\n",
    "\tvar result = [];\n\tvar start = 0;\n\tvar end = 0;\n\tvar i = 0;\n\tvar j = 0;\n\tvar match = false;\n\tvar found = false;\n\twhile(i < text.length){\n\t\tif(text[i] === pattern[j]){\n\t\t\tif(!match){\n\t\t\t\tstart = i;\n\t\t\t}\n\t\t\tmatch = true;\n\t\t\tj++;\n\t\t\tif(j === pattern.length){\n\t\t\t\tend = i + 1;\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tmatch = false;\n\t\t\tj = 0;\n\t\t}\n\t\ti++;\n\t}\n\tif(found){\n\t\tresult.push(text.substring(start, end));\n\t\tresult.push(start);\n\t\tresult.push(end);\n\t}\n\treturn result;\n}\n",
    "\tvar result = [];\n\tvar start = 0;\n\twhile(start < text.length){\n\t\tvar index = text.indexOf(pattern, start);\n\t\tif(index == -1){\n\t\t\tbreak;\n\t\t}\n\t\tresult.push({\n\t\t\tstart: index,\n\t\t\tend: index + pattern.length\n\t\t});\n\t\tstart = index + pattern.length;\n\t}\n\treturn result;\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var index = 0;\n    var found = false;\n    var found_index = 0;\n    var found_end = 0;\n    var found_start = 0;\n    var found_text = \"\";\n    var found_pattern = \"\";\n    var found_pattern_index = 0;\n    var found_pattern_end = 0;\n    var found_pattern_start = 0;\n    var found_pattern_text = \"\";\n    var found_pattern_text_index = 0;\n    var found_pattern_text_end = 0;\n    var found_pattern_text_start = 0;\n    var found_pattern_text_text = \"\";\n    var found_pattern_text_text_index = 0;\n    var found_pattern_text_text_end = 0;\n    var found_pattern_text_text_start = 0;\n    var found_pattern_text_text_text = \"\";\n    var found_pattern_text_text_text_index = 0;\n    var found_pattern_text_text_text_end = 0;\n    var found_pattern_text_text_text_start = 0;\n    var found_pattern_text_text_text_text = \"\";\n    var found_pattern_text_text_text_text_index = 0;\n    var found_pattern_text_text_text_text_end = 0;\n    var found_pattern_text_text_text_text_start = 0;\n    var found_pattern_text_text_text_text_text = \"\";\n    var found_pattern_text_text_text_text_text_index = 0;\n    var found_pattern_text_text_text_text_text_end = 0;\n    var found_pattern_text_text_text_text_text_start = 0;\n    var found_pattern_text_text_text_text_text_text = \"\";\n    var found_pattern_text_text_text_text_text_text_index = 0;\n    var found_pattern_text_text_text_text_text_text_end = 0;\n    var",
    "\tvar result = {};\n\tvar start = text.indexOf(pattern);\n\tvar end = start + pattern.length;\n\tresult.match = text.substring(start, end);\n\tresult.start = start;\n\tresult.end = end;\n\treturn result;\n}\n",
    "    var result = [];\n    var i = 0;\n    while(i < text.length){\n        var j = 0;\n        while(j < pattern.length && i + j < text.length && text[i + j] == pattern[j]){\n            j++;\n        }\n        if(j == pattern.length){\n            result.push([i, i + j]);\n        }\n        i++;\n    }\n    return result;\n}\n",
    "\tvar result = {};\n\tvar start = text.indexOf(pattern);\n\tvar end = start + pattern.length;\n\tresult.start = start;\n\tresult.end = end;\n\tresult.match = text.substring(start, end);\n\treturn result;\n}\n",
    "\tvar result = text.match(pattern);\n\tif(result){\n\t\treturn {\n\t\t\tmatch: result[0],\n\t\t\tstart: result.index,\n\t\t\tend: result.index + result[0].length\n\t\t};\n\t}\n\treturn null;\n}\n",
    "\tvar result = {};\n\tvar start = text.indexOf(pattern);\n\tvar end = start + pattern.length;\n\tresult.match = text.substring(start, end);\n\tresult.start = start;\n\tresult.end = end;\n\treturn result;\n}\n",
    "    var result = {};\n    var match = text.match(pattern);\n    if(match){\n        result.match = match[0];\n        result.start = match.index;\n        result.end = match.index + match[0].length;\n    }\n    return result;\n}\n",
    "\tvar index = text.indexOf(pattern);\n\tif(index === -1){\n\t\treturn null;\n\t}\n\treturn {\n\t\tmatch: pattern,\n\t\tstart: index,\n\t\tend: index + pattern.length\n\t};\n}\n",
    "    var result = {};\n    var start = text.indexOf(pattern);\n    var end = start + pattern.length;\n    result.start = start;\n    result.end = end;\n    result.match = text.substring(start, end);\n    return result;\n}\n",
    "    var match = text.match(pattern);\n    return match;\n}\n",
    "    var result = [];\n    var i = 0;\n    while(i < text.length){\n        var match = pattern.exec(text.slice(i));\n        if(match){\n            result.push(match[0]);\n            i += match.index + match[0].length;\n        }else{\n            i++;\n        }\n    }\n    return result;\n}\n",
    "    var start = text.search(pattern);\n    var end = start + pattern.length;\n    return [text.slice(start, end), start, end];\n}\n",
    "    var result = [];\n    var index = 0;\n    while(index < text.length){\n        var match = pattern.exec(text);\n        if(match == null){\n            break;\n        }\n        result.push(match[0]);\n        index = match.index + 1;\n    }\n    return result;\n}\n",
    "    var result = {};\n    var match = text.match(pattern);\n    if(match){\n        result.match = match[0];\n        result.start = match.index;\n        result.end = match.index + match[0].length;\n    }\n    return result;\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var index = 0;\n    while(index < text.length){\n        if(text[index] === pattern[0]){\n            start = index;\n            end = index;\n            for(var i = 1; i < pattern.length; i++){\n                if(text[index + i] === pattern[i]){\n                    end = index + i;\n                }\n                else{\n                    break;\n                }\n            }\n            if(end - start === pattern.length - 1){\n                result.push({\n                    start: start,\n                    end: end,\n                    match: text.substring(start, end + 1)\n                });\n            }\n        }\n        index++;\n    }\n    return result;\n}\n",
    "    let start = 0;\n    let end = 0;\n    let match = '';\n    for(let i = 0; i < text.length; i++){\n        if(text[i] === pattern[0]){\n            let j = i;\n            let k = 0;\n            while(text[j] === pattern[k]){\n                if(k === pattern.length - 1){\n                    start = i;\n                    end = j;\n                    match = text.slice(i, j + 1);\n                    return {match, start, end};\n                }\n                j++;\n                k++;\n            }\n        }\n    }\n    return {match, start, end};\n}\n",
    "    var result = {};\n    var start = text.indexOf(pattern);\n    var end = start + pattern.length;\n    result.start = start;\n    result.end = end;\n    result.match = text.substring(start, end);\n    return result;\n}\n",
    "    var start = 0;\n    var end = 0;\n    var match = \"\";\n    var index = 0;\n    var found = false;\n    while(!found && index < text.length){\n        if(text[index] == pattern[0]){\n            start = index;\n            match = text[index];\n            for(var i = 1; i < pattern.length; i++){\n                if(text[index+i] == pattern[i]){\n                    match += text[index+i];\n                }\n                else{\n                    match = \"\";\n                    break;\n                }\n            }\n            if(match.length == pattern.length){\n                found = true;\n                end = index + pattern.length - 1;\n            }\n        }\n        index++;\n    }\n    return {match: match, start: start, end: end};\n}\n",
    "    var result = {};\n    var match = text.match(pattern);\n    if(match){\n        result.match = match[0];\n        result.start = match.index;\n        result.end = match.index + match[0].length;\n    }\n    return result;\n}\n",
    "\tvar result = {\n\t\t\"match\": \"\",\n\t\t\"start\": -1,\n\t\t\"end\": -1\n\t};\n\tvar i = 0;\n\tvar j = 0;\n\tvar k = 0;\n\tvar match = false;\n\twhile(i < text.length){\n\t\tif(text[i] == pattern[j]){\n\t\t\tif(j == 0){\n\t\t\t\tresult.start = i;\n\t\t\t}\n\t\t\tj++;\n\t\t\tif(j == pattern.length){\n\t\t\t\tmatch = true;\n\t\t\t\tresult.end = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tj = 0;\n\t\t}\n\t\ti++;\n\t}\n\tif(match){\n\t\tfor(k = result.start; k <= result.end; k++){\n\t\t\tresult.match += text[k];\n\t\t}\n\t}\n\treturn result;\n}\n",
    "    var result = {};\n    var regex = new RegExp(pattern, 'g');\n    var match = regex.exec(text);\n    if(match){\n        result.match = match[0];\n        result.start = match.index;\n        result.end = regex.lastIndex;\n    }\n    return result;\n}\n",
    "    var result = {};\n    var start = 0;\n    var end = 0;\n    var match = text.match(pattern);\n    if(match){\n        start = text.indexOf(match[0]);\n        end = start + match[0].length;\n    }\n    result.match = match;\n    result.start = start;\n    result.end = end;\n    return result;\n}\n",
    "    var result = {};\n    var start = text.indexOf(pattern);\n    var end = start + pattern.length;\n    result.start = start;\n    result.end = end;\n    result.match = text.substring(start, end);\n    return result;\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var match = false;\n    for(var i = 0; i < text.length; i++){\n        if(text[i] === pattern[0]){\n            start = i;\n            for(var j = 0; j < pattern.length; j++){\n                if(text[i+j] === pattern[j]){\n                    match = true;\n                }else{\n                    match = false;\n                    break;\n                }\n            }\n            if(match){\n                end = i + j;\n                result.push([start, end]);\n            }\n        }\n    }\n    return result;\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var index = 0;\n    var match = false;\n    var match_start = 0;\n    var match_end = 0;\n    var match_index = 0;\n    var match_found = false;\n    var match_text = \"\";\n    var match_text_index = 0;\n    var match_text_start = 0;\n    var match_text_end = 0;\n    var match_text_found = false;\n    var match_text_found_index = 0;\n    var match_text_found_start = 0;\n    var match_text_found_end = 0;\n    var match_text_found_found = false;\n    var match_text_found_found_index = 0;\n    var match_text_found_found_start = 0;\n    var match_text_found_found_end = 0;\n    var match_text_found_found_found = false;\n    var match_text_found_found_found_index = 0;\n    var match_text_found_found_found_start = 0;\n    var match_text_found_found_found_end = 0;\n    var match_text_found_found_found_found = false;\n    var match_text_found_found_found_found_index = 0;\n    var match_text_found_found_found_found_start = 0;\n    var match_text_found_found_found_found_end = 0;\n    var match_text_found_found_found_found_found = false;\n    var match_text_found_found_found_found_found_index = 0;\n    var match_text_found_found_found_found_found_start = 0;\n    var match_text_found_found_found_found_found_end = 0;\n    var match_text_found_found_found_found_found_found = false;\n    var match_text_found_found_found_found_found_found_index = 0;\n    var match_text_found_found_found_found_found_found_start = 0;\n    var",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var match = false;\n    for(var i = 0; i < text.length; i++){\n        if(text[i] == pattern[0]){\n            start = i;\n            for(var j = 0; j < pattern.length; j++){\n                if(text[i] == pattern[j]){\n                    i++;\n                    match = true;\n                }\n                else{\n                    match = false;\n                    break;\n                }\n            }\n            end = i;\n            if(match){\n                result.push(text.substring(start, end));\n            }\n        }\n    }\n    return result;\n}\n",
    "    var result = {};\n    var start = text.indexOf(pattern);\n    var end = start + pattern.length;\n    result.match = text.substring(start, end);\n    result.start = start;\n    result.end = end;\n    return result;\n}\n",
    "    var result = [];\n    var i = 0;\n    var j = 0;\n    while(i < text.length){\n        if(text[i] == pattern[j]){\n            j++;\n            if(j == pattern.length){\n                result.push(i-j+1);\n                result.push(i+1);\n                j = 0;\n            }\n        }\n        else{\n            j = 0;\n        }\n        i++;\n    }\n    return result;\n}\n",
    "  var start = text.indexOf(pattern);\n  var end = start + pattern.length;\n  return [text.slice(start, end), start, end];\n}\n",
    "\tvar result = [];\n\tvar index = 0;\n\twhile(index < text.length){\n\t\tindex = text.indexOf(pattern, index);\n\t\tif(index == -1){\n\t\t\tbreak;\n\t\t}\n\t\tresult.push(index);\n\t\tindex += pattern.length;\n\t}\n\treturn result;\n}\n",
    "    var result = {};\n    var start = text.search(pattern);\n    var end = start + pattern.length;\n    result.start = start;\n    result.end = end;\n    result.match = text.substring(start, end);\n    return result;\n}\n",
    "    var index = text.indexOf(pattern);\n    if(index == -1){\n        return null;\n    }\n    else{\n        return {\n            match: pattern,\n            start: index,\n            end: index + pattern.length\n        };\n    }\n}\n",
    "\tvar match = text.match(pattern);\n\treturn match;\n}\n",
    "\tvar result = {\n\t\tstart: 0,\n\t\tend: 0,\n\t\tmatch: \"\"\n\t};\n\tvar i = 0;\n\tvar j = 0;\n\twhile(i < text.length){\n\t\tif(text[i] === pattern[j]){\n\t\t\tif(j === 0){\n\t\t\t\tresult.start = i;\n\t\t\t}\n\t\t\tif(j === pattern.length - 1){\n\t\t\t\tresult.end = i;\n\t\t\t\tresult.match = text.substring(result.start, result.end + 1);\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\ti++;\n\t\t\tj++;\n\t\t} else {\n\t\t\ti++;\n\t\t\tj = 0;\n\t\t}\n\t}\n\treturn result;\n}\n",
    "\tvar start = 0;\n\tvar end = 0;\n\tvar match = \"\";\n\tvar found = false;\n\tfor(var i = 0; i < text.length; i++){\n\t\tif(text[i] == pattern[0]){\n\t\t\tstart = i;\n\t\t\tfor(var j = 0; j < pattern.length; j++){\n\t\t\t\tif(text[i+j] != pattern[j]){\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if(j == pattern.length - 1){\n\t\t\t\t\tend = i + j;\n\t\t\t\t\tfound = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(found){\n\t\tmatch = text.substring(start, end+1);\n\t}\n\treturn {\n\t\tmatch: match,\n\t\tstart: start,\n\t\tend: end\n\t};\n}\n",
    "    var match = text.match(pattern);\n    return match;\n}\n",
    "    var result = [];\n    var match = text.match(pattern);\n    if(match){\n        result.push(match[0]);\n        result.push(match.index);\n        result.push(match.index + match[0].length);\n    }\n    return result;\n}\n",
    "\tvar start_index = text.indexOf(pattern);\n\tvar end_index = start_index + pattern.length;\n\treturn [pattern, start_index, end_index];\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    for(var i = 0; i < text.length; i++){\n        if(text[i] == pattern[0]){\n            start = i;\n            for(var j = 0; j < pattern.length; j++){\n                if(text[i+j] == pattern[j]){\n                    end = i+j;\n                }\n                else{\n                    break;\n                }\n            }\n        }\n    }\n    result.push(text.substring(start, end+1));\n    result.push(start);\n    result.push(end);\n    return result;\n}\n",
    "\tvar result = {};\n\tvar match = text.match(pattern);\n\tif(match){\n\t\tresult.match = match[0];\n\t\tresult.start = match.index;\n\t\tresult.end = match.index + match[0].length;\n\t}\n\treturn result;\n}\n",
    "    var i = 0;\n    var j = 0;\n    var k = 0;\n    var match = false;\n    var start_index = 0;\n    var end_index = 0;\n    var match_text = \"\";\n    while(i < text.length){\n        if(text[i] == pattern[j]){\n            if(j == 0){\n                start_index = i;\n            }\n            match_text += text[i];\n            i++;\n            j++;\n            if(j == pattern.length){\n                end_index = i;\n                match = true;\n                break;\n            }\n        }\n        else{\n            j = 0;\n            i++;\n            match_text = \"\";\n        }\n    }\n    if(match){\n        return {match: match_text, start_index: start_index, end_index: end_index};\n    }\n    else{\n        return {match: match, start_index: start_index, end_index: end_index};\n    }\n}\n",
    "    var match = text.match(pattern);\n    return match;\n}\n",
    "    var match = text.match(pattern);\n    if(match){\n        return {\n            match: match[0],\n            start: match.index,\n            end: match.index + match[0].length\n        };\n    }\n    return null;\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    for(var i = 0; i < text.length; i++){\n        if(text[i] == pattern[0]){\n            start = i;\n            for(var j = 1; j < pattern.length; j++){\n                if(text[i+j] == pattern[j]){\n                    end = i+j;\n                }\n                else{\n                    break;\n                }\n            }\n            if(end == i+j-1){\n                result.push([text.substring(start, end+1), start, end]);\n            }\n        }\n    }\n    return result;\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var index = text.indexOf(pattern);\n    while(index !== -1){\n        result.push(text.substring(index, index + pattern.length));\n        start = index;\n        end = index + pattern.length;\n        index = text.indexOf(pattern, index + 1);\n    }\n    return {\n        result: result,\n        start: start,\n        end: end\n    };\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var i = 0;\n    while(i < text.length){\n        if(text[i] === pattern[0]){\n            start = i;\n            end = i;\n            var j = 1;\n            while(j < pattern.length){\n                if(text[i+j] === pattern[j]){\n                    end++;\n                    j++;\n                }else{\n                    break;\n                }\n            }\n            if(j === pattern.length){\n                result.push({\n                    start: start,\n                    end: end,\n                    match: text.substring(start, end+1)\n                });\n            }\n        }\n        i++;\n    }\n    return result;\n}\n",
    "\tvar match = text.match(pattern);\n\tvar start = text.indexOf(match);\n\tvar end = start + match.length;\n\treturn {\n\t\tmatch: match,\n\t\tstart: start,\n\t\tend: end\n\t};\n}\n",
    "    var match = text.match(pattern);\n    if(match){\n        return {\n            match: match[0],\n            start: match.index,\n            end: match.index + match[0].length\n        };\n    }\n    return null;\n}\n",
    "\tvar result = [];\n\tvar start = 0;\n\tvar end = 0;\n\tvar match = false;\n\tfor(var i = 0; i < text.length; i++){\n\t\tif(text[i] == pattern[0]){\n\t\t\tstart = i;\n\t\t\tend = i;\n\t\t\tmatch = true;\n\t\t\tfor(var j = 1; j < pattern.length; j++){\n\t\t\t\tif(text[i+j] != pattern[j]){\n\t\t\t\t\tmatch = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tend++;\n\t\t\t}\n\t\t\tif(match){\n\t\t\t\tresult.push([start, end]);\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n",
    "\tvar match = text.match(pattern);\n\tif(match){\n\t\treturn {\n\t\t\tmatch: match[0],\n\t\t\tstart: match.index,\n\t\t\tend: match.index + match[0].length\n\t\t};\n\t}\n\treturn null;\n}\n",
    "\tvar result = [];\n\tvar index = 0;\n\tvar start = 0;\n\tvar end = 0;\n\tvar found = false;\n\tfor(var i = 0; i < text.length; i++){\n\t\tif(text[i] == pattern[index]){\n\t\t\tif(index == 0){\n\t\t\t\tstart = i;\n\t\t\t}\n\t\t\tindex++;\n\t\t\tif(index == pattern.length){\n\t\t\t\tfound = true;\n\t\t\t\tend = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tindex = 0;\n\t\t}\n\t}\n\tif(found){\n\t\tresult.push(text.substring(start, end + 1));\n\t\tresult.push(start);\n\t\tresult.push(end);\n\t}\n\treturn result;\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var i = 0;\n    while(i < text.length){\n        if(text[i] == pattern[0]){\n            start = i;\n            var j = 0;\n            while(j < pattern.length){\n                if(text[i] == pattern[j]){\n                    i++;\n                    j++;\n                }\n                else{\n                    break;\n                }\n            }\n            if(j == pattern.length){\n                end = i;\n                result.push([start, end]);\n            }\n        }\n        else{\n            i++;\n        }\n    }\n    return result;\n}\n",
    "    var match = text.match(pattern);\n    if(match){\n        return {\n            match: match[0],\n            start: match.index,\n            end: match.index + match[0].length\n        }\n    }\n    return null;\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var i = 0;\n    var j = 0;\n    var match = false;\n    while(i < text.length){\n        if(text[i] === pattern[j]){\n            if(j === 0){\n                start = i;\n            }\n            match = true;\n            j++;\n        }\n        else{\n            match = false;\n            j = 0;\n        }\n        if(j === pattern.length){\n            end = i;\n            result.push([start, end]);\n            j = 0;\n        }\n        i++;\n    }\n    return result;\n}\n",
    "    var result = {};\n    var start = 0;\n    var end = 0;\n    var found = false;\n    for(var i = 0; i < text.length; i++){\n        if(text[i] === pattern[0]){\n            start = i;\n            for(var j = 0; j < pattern.length; j++){\n                if(text[i+j] !== pattern[j]){\n                    found = false;\n                    break;\n                }\n                else{\n                    found = true;\n                }\n            }\n            if(found){\n                end = i + j;\n                break;\n            }\n        }\n    }\n    result.start = start;\n    result.end = end;\n    result.match = text.substring(start, end);\n    return result;\n}\n",
    "    var result = [];\n    for(var i = 0; i < text.length; i++){\n        if(text[i] === pattern){\n            result.push(i);\n        }\n    }\n    return result;\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var match = false;\n    var i = 0;\n    var j = 0;\n    while(i < text.length){\n        if(text[i] == pattern[j]){\n            if(!match){\n                start = i;\n            }\n            match = true;\n            j++;\n            if(j == pattern.length){\n                end = i;\n                result.push([start, end]);\n                match = false;\n                j = 0;\n            }\n        }\n        else{\n            match = false;\n            j = 0;\n        }\n        i++;\n    }\n    return result;\n}\n",
    "    var match = text.match(pattern);\n    return match;\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n   ",
    "    var match = text.match(pattern);\n    return match;\n}\n",
    "\tvar result = {\n\t\tstart: 0,\n\t\tend: 0,\n\t\tmatch: ''\n\t};\n\tvar pattern_index = 0;\n\tvar text_index = 0;\n\tvar text_length = text.length;\n\tvar pattern_length = pattern.length;\n\tvar match_start = 0;\n\tvar match_end = 0;\n\tvar match_string = '';\n\twhile(text_index < text_length){\n\t\tif(text[text_index] === pattern[pattern_index]){\n\t\t\tif(pattern_index === 0){\n\t\t\t\tmatch_start = text_index;\n\t\t\t}\n\t\t\tmatch_string += text[text_index];\n\t\t\tpattern_index++;\n\t\t\ttext_index++;\n\t\t\tif(pattern_index === pattern_length){\n\t\t\t\tmatch_end = text_index;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tpattern_index = 0;\n\t\t\tmatch_string = '';\n\t\t\ttext_index++;\n\t\t}\n\t}\n\tresult.start = match_start;\n\tresult.end = match_end;\n\tresult.match = match_string;\n\treturn result;\n}\n",
    "    var match = pattern.exec(text);\n    if(match){\n        return {\n            match: match[0],\n            start: match.index,\n            end: match.index + match[0].length\n        };\n    }\n    return null;\n}\n",
    "    var start = 0;\n    var end = 0;\n    var match = \"\";\n    var index = 0;\n    var found = false;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n",
    "    var result = {\n        start: 0,\n        end: 0,\n        match: ''\n    };\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var match = false;\n    var pattern_length = pattern.length;\n    var text_length = text.length;\n    for(i = 0; i < text_length; i++){\n        if(text[i] === pattern[j]){\n            if(j === 0){\n                result.start = i;\n            }\n            match = true;\n            j++;\n            if(j === pattern_length){\n                result.end = i;\n                result.match = text.substring(result.start, result.end + 1);\n                return result;\n            }\n        } else {\n            if(match){\n                i = i - j;\n                j = 0;\n                match = false;\n            }\n        }\n    }\n    return result;\n}\n",
    "    var result = {};\n    var match = text.match(pattern);\n    if(match){\n        result.match = match[0];\n        result.start = match.index;\n        result.end = match.index + match[0].length;\n    }\n    return result;\n}\n",
    "\tvar start = text.search(pattern);\n\tvar end = start + pattern.length;\n\treturn {\n\t\tstart: start,\n\t\tend: end,\n\t\tmatch: text.substring(start, end)\n\t};\n}\n",
    "  var start_index = text.indexOf(pattern);\n  var end_index = start_index + pattern.length;\n  return [text.substring(start_index, end_index), start_index, end_index];\n}\n",
    "    var start = text.indexOf(pattern);\n    var end = start + pattern.length;\n    return [text.slice(start, end), start, end];\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var index = text.indexOf(pattern);\n    if(index != -1){\n        start = index;\n        end = index + pattern.length;\n    }\n    result.push(text.substring(start, end));\n    result.push(start);\n    result.push(end);\n    return result;\n}\n",
    "    var match = text.match(pattern);\n    if(match){\n        return {\n            match: match[0],\n            start: match.index,\n            end: match.index + match[0].length\n        };\n    }\n    return null;\n}\n",
    "\tvar start_index = text.indexOf(pattern);\n\tvar end_index = start_index + pattern.length;\n\treturn [text.substring(start_index, end_index), start_index, end_index];\n}\n",
    "    var result = {};\n    var match = text.match(pattern);\n    if(match){\n        result.match = match[0];\n        result.start = match.index;\n        result.end = match.index + match[0].length;\n    }\n    return result;\n}\n",
    "    var result = {};\n    var start = 0;\n    var end = 0;\n    var match = text.match(pattern);\n    if(match){\n        result.match = match[0];\n        result.start = text.indexOf(match[0]);\n        result.end = result.start + match[0].length;\n    }\n    return result;\n}\n",
    "    var match = text.match(pattern);\n    if(match){\n        return {\n            match: match[0],\n            start: match.index,\n            end: match.index + match[0].length\n        };\n    }\n    return null;\n}\n",
    "    var start = 0;\n    var end = 0;\n    var match = \"\";\n    var i = 0;\n    while(i < text.length){\n        if(text[i] == pattern[0]){\n            start = i;\n            end = i;\n            match = text[i];\n            for(var j = 1; j < pattern.length; j++){\n                if(text[i+j] == pattern[j]){\n                    match += text[i+j];\n                    end = i+j;\n                }\n                else{\n                    break;\n                }\n            }\n            if(match == pattern){\n                return {\n                    match: match,\n                    start: start,\n                    end: end\n                }\n            }\n        }\n        i++;\n    }\n    return null;\n}\n",
    "    var match = text.match(pattern);\n    return match;\n}\n",
    "\tvar result = {};\n\tvar start = text.search(pattern);\n\tvar end = start + pattern.length;\n\tresult.match = text.substring(start, end);\n\tresult.start = start;\n\tresult.end = end;\n\treturn result;\n}\n",
    "    var match = text.match(pattern);\n    if (match){\n        return {\n            match: match[0],\n            start: match.index,\n            end: match.index + match[0].length\n        };\n    }\n    return null;\n}\n",
    "    var start = 0;\n    var end = 0;\n    var match = \"\";\n    for(var i = 0; i < text.length; i++){\n        if(text[i] == pattern[0]){\n            start = i;\n            for(var j = 0; j < pattern.length; j++){\n                if(text[i+j] != pattern[j]){\n                    break;\n                }\n                else{\n                    end = i+j;\n                    match += pattern[j];\n                }\n            }\n        }\n    }\n    return [match, start, end];\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    for(var i=0; i<text.length; i++){\n        if(text[i] === pattern[0]){\n            start = i;\n            for(var j=0; j<pattern.length; j++){\n                if(text[i+j] !== pattern[j]){\n                    break;\n                }\n                if(j === pattern.length-1){\n                    end = i+j;\n                    result.push([start, end]);\n                }\n            }\n        }\n    }\n    return result;\n}\n",
    "\tvar result = [];\n\tvar start = 0;\n\tvar end = 0;\n\tvar i = 0;\n\twhile(i < text.length){\n\t\tif(text[i] === pattern[0]){\n\t\t\tstart = i;\n\t\t\tvar j = 0;\n\t\t\twhile(j < pattern.length && i < text.length){\n\t\t\t\tif(text[i] === pattern[j]){\n\t\t\t\t\ti++;\n\t\t\t\t\tj++;\n\t\t\t\t}else{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(j === pattern.length){\n\t\t\t\tend = i;\n\t\t\t\tresult.push([start, end]);\n\t\t\t}\n\t\t}else{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\n",
    "    let result = [];\n    let start = 0;\n    let end = 0;\n    let match = text.match(pattern);\n    if(match){\n        start = text.indexOf(match[0]);\n        end = start + match[0].length;\n    }\n    result.push(match, start, end);\n    return result;\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var match = pattern.exec(text);\n    while(match != null){\n        result.push(match[0]);\n        start = match.index;\n        end = match.index + match[0].length;\n        match = pattern.exec(text);\n    }\n    return {\n        result: result,\n        start: start,\n        end: end\n    };\n}\n",
    "    var result = {};\n    var start = text.indexOf(pattern);\n    var end = start + pattern.length;\n    result.match = text.substring(start, end);\n    result.start = start;\n    result.end = end;\n    return result;\n}\n",
    "\tvar start = 0;\n\tvar end = 0;\n\tvar match = \"\";\n\tvar i = 0;\n\tvar j = 0;\n\tvar found = false;\n\twhile(i < text.length && j < pattern.length){\n\t\tif(text[i] == pattern[j]){\n\t\t\tif(!found){\n\t\t\t\tstart = i;\n\t\t\t\tfound = true;\n\t\t\t}\n\t\t\tmatch += text[i];\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t\tj = 0;\n\t\t\tmatch = \"\";\n\t\t\tfound = false;\n\t\t}\n\t}\n\tif(match.length == pattern.length){\n\t\tend = i;\n\t\treturn [match, start, end];\n\t}\n\telse{\n\t\treturn null;\n\t}\n}\n",
    "    var result = {};\n    var start = text.indexOf(pattern);\n    var end = start + pattern.length;\n    result.start = start;\n    result.end = end;\n    result.match = text.substring(start, end);\n    return result;\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var match = false;\n    var match_index = 0;\n    var match_length = 0;\n    var match_start = 0;\n    var match_end = 0;\n    var match_text = \"\";\n    var pattern_length = pattern.length;\n    var text_length = text.length;\n    var pattern_index = 0;\n    var text_index = 0;\n    var match_found = false;\n    var match_start_found = false;\n    var match_end_found = false;\n    var match_start_index = 0;\n    var match_end_index = 0;\n    var match_text_index = 0;\n    var match_text_length = 0;\n    var match_text_found = false;\n    var match_text_start = 0;\n    var match_text_end = 0;\n    var match_text_start_found = false;\n    var match_text_end_found = false;\n    var match_text_start_index = 0;\n    var match_text_end_index = 0;\n    var match_text_start_index_found = false;\n    var match_text_end_index_found = false;\n    var match_text_start_index_value = 0;\n    var match_text_end_index_value = 0;\n    var match_text_start_index_value_found = false;\n    var match_text_end_index_value_found = false;\n    var match_text_start_index_value_found_index = 0;\n    var match_text_end_index_value_found_index = 0;\n    var match_text_start_index_value_found_index_found = false;\n    var match_text_end_index_value_found_index_found = false;\n    var match_text_start_index_value_found_index_found_index = 0;\n    var match_text_end_index_value_found_index_found_index = 0;\n    var match_text_start_index_value_found_index_found_index",
    "    var match = text.match(pattern);\n    if(match){\n        return {\n            match: match[0],\n            start: match.index,\n            end: match.index + match[0].length\n        }\n    }\n    return null;\n}\n",
    "    var start = text.search(pattern);\n    var end = start + pattern.length;\n    return [text.substring(start, end), start, end];\n}\n",
    "    var result = {\n        start: null,\n        end: null,\n        match: null\n    };\n    var match = text.match(pattern);\n    if(match){\n        result.start = match.index;\n        result.end = match.index + match[0].length;\n        result.match = match[0];\n    }\n    return result;\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var index = 0;\n    var pattern_length = pattern.length;\n    var text_length = text.length;\n    while(index < text_length){\n        if(text[index] == pattern[0]){\n            start = index;\n            end = index + pattern_length;\n            if(text.substring(start, end) == pattern){\n                result.push(text.substring(start, end));\n                index += pattern_length;\n            }\n            else{\n                index++;\n            }\n        }\n        else{\n            index++;\n        }\n    }\n    return result;\n}\n",
    "    var result = {};\n    var match = text.match(pattern);\n    if(match){\n        result.match = match[0];\n        result.start = match.index;\n        result.end = match.index + match[0].length;\n    }\n    return result;\n}\n",
    "\tvar start = 0;\n\tvar end = 0;\n\tvar match = \"\";\n\tvar found = false;\n\tfor(var i = 0; i < text.length; i++){\n\t\tif(text[i] == pattern[0]){\n\t\t\tstart = i;\n\t\t\tfor(var j = 0; j < pattern.length; j++){\n\t\t\t\tif(text[i+j] == pattern[j]){\n\t\t\t\t\tmatch += pattern[j];\n\t\t\t\t\tif(match == pattern){\n\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\tend = i+j;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(found){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tmatch = \"\";\n\t\t\t}\n\t\t}\n\t}\n\tif(found){\n\t\treturn [match, start, end];\n\t}\n\telse{\n\t\treturn \"No match found\";\n\t}\n}\n",
    "\tvar match = text.match(pattern);\n\treturn match;\n}\n",
    "\tvar start_index = text.indexOf(pattern);\n\tvar end_index = start_index + pattern.length;\n\treturn [text.substring(start_index, end_index), start_index, end_index];\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var match = \"\";\n    for(var i = 0; i < text.length; i++){\n        if(text[i] == pattern[0]){\n            start = i;\n            for(var j = 0; j < pattern.length; j++){\n                if(text[i+j] == pattern[j]){\n                    match += pattern[j];\n                    end = i+j;\n                }\n            }\n            if(match == pattern){\n                result.push([match, start, end]);\n            }\n            match = \"\";\n        }\n    }\n    return result;\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var match = \"\";\n    for(var i = 0; i < text.length; i++){\n        if(text[i] == pattern[0]){\n            start = i;\n            match = text[i];\n            for(var j = 1; j < pattern.length; j++){\n                if(text[i+j] == pattern[j]){\n                    match += text[i+j];\n                    end = i+j;\n                }\n                else{\n                    break;\n                }\n            }\n            if(match == pattern){\n                result.push([match, start, end]);\n            }\n        }\n    }\n    return result;\n}\n",
    "    var result = {};\n    var start = text.indexOf(pattern);\n    var end = start + pattern.length;\n    result.match = text.substring(start, end);\n    result.start = start;\n    result.end = end;\n    return result;\n}\n",
    "\tvar start = 0;\n\tvar end = 0;\n\tvar match = \"\";\n\tvar found = false;\n\tfor(var i = 0; i < text.length; i++){\n\t\tif(text[i] == pattern[0]){\n\t\t\tstart = i;\n\t\t\tend = i;\n\t\t\tmatch = text[i];\n\t\t\tfor(var j = 1; j < pattern.length; j++){\n\t\t\t\tif(text[i+j] == pattern[j]){\n\t\t\t\t\tmatch += text[i+j];\n\t\t\t\t\tend++;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(match == pattern){\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tif(found){\n\t\treturn [match, start, end];\n\t}\n\telse{\n\t\treturn null;\n\t}\n}\n",
    "\tvar index = text.search(pattern);\n\tvar result = text.match(pattern);\n\treturn [result, index, index + result.length];\n}\n",
    "\tvar result = {};\n\tvar match = text.match(pattern);\n\tif(match){\n\t\tresult.match = match[0];\n\t\tresult.start = match.index;\n\t\tresult.end = match.index + match[0].length;\n\t}\n\treturn result;\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var i = 0;\n    while(i < text.length){\n        if(text[i] == pattern[0]){\n            start = i;\n            var j = 0;\n            while(j < pattern.length && i < text.length && text[i] == pattern[j]){\n                i++;\n                j++;\n            }\n            if(j == pattern.length){\n                end = i;\n                result.push([start, end]);\n            }\n        }\n        i++;\n    }\n    return result;\n}\n",
    "    var start = 0;\n    var end = 0;\n    var match = \"\";\n    var found = false;\n    for(var i = 0; i < text.length; i++){\n        if(text[i] == pattern[0]){\n            start = i;\n            for(var j = 0; j < pattern.length; j++){\n                if(text[i+j] == pattern[j]){\n                    match += pattern[j];\n                    end = i+j;\n                    found = true;\n                }\n                else{\n                    found = false;\n                    break;\n                }\n            }\n        }\n        if(found){\n            return {\n                match: match,\n                start: start,\n                end: end\n            };\n        }\n    }\n    return {\n        match: match,\n        start: start,\n        end: end\n    };\n}\n",
    "    var match = text.match(pattern);\n    if(match){\n        return {\n            match: match[0],\n            start: match.index,\n            end: match.index + match[0].length\n        };\n    }\n    return null;\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var i = 0;\n    var j = 0;\n    var found = false;\n    while(i < text.length){\n        if(text[i] === pattern[j]){\n            if(!found){\n                start = i;\n            }\n            found = true;\n            j++;\n            if(j === pattern.length){\n                end = i;\n                result.push([start, end]);\n                j = 0;\n                found = false;\n            }\n        }\n        else{\n            j = 0;\n            found = false;\n        }\n        i++;\n    }\n    return result;\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var match = false;\n    for(var i = 0; i < text.length; i++){\n        if(text[i] == pattern[0]){\n            start = i;\n            end = i;\n            for(var j = 0; j < pattern.length; j++){\n                if(text[i+j] == pattern[j]){\n                    end = i+j;\n                    match = true;\n                }\n                else{\n                    match = false;\n                    break;\n                }\n            }\n            if(match){\n                result.push(text.substring(start, end+1));\n            }\n        }\n    }\n    return result;\n}\n",
    "    var start = 0;\n    var end = 0;\n    var result = [];\n    while(start < text.length){\n        var index = text.indexOf(pattern, start);\n        if(index == -1){\n            break;\n        }\n        end = index + pattern.length;\n        result.push({\n            start: index,\n            end: end,\n            text: text.substring(index, end)\n        });\n        start = end;\n    }\n    return result;\n}\n",
    "    var start = text.indexOf(pattern);\n    var end = start + pattern.length;\n    return {\n        start: start,\n        end: end,\n        match: text.substring(start, end)\n    };\n}\n",
    "\tvar start_index = text.indexOf(pattern);\n\tvar end_index = start_index + pattern.length;\n\treturn {\n\t\tstart_index: start_index,\n\t\tend_index: end_index,\n\t\tmatch: text.substring(start_index, end_index)\n\t};\n}\n"
  ]
}