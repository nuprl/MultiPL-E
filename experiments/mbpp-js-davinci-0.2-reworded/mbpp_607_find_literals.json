{
  "name": "mbpp_607_find_literals",
  "language": "js",
  "prompt": "//Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\nfunction find_literals(text, pattern){\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_607_find_literals.py",
  "prompt_terminology": "reworded",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_literals;\n  assert.deepEqual(candidate(\"The quick brown fox jumps over the lazy dog.\", \"fox\"),[\"fox\", 16, 19]);\n  assert.deepEqual(candidate(\"Its been a very crazy procedure right\", \"crazy\"),[\"crazy\", 16, 21]);\n  assert.deepEqual(candidate(\"Hardest choices required strongest will\", \"will\"),[\"will\", 35, 39]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var match = false;\n    for(var i = 0; i < text.length; i++){\n        if(text[i] == pattern[0]){\n            start = i;\n            for(var j = 0; j < pattern.length; j++){\n                if(text[i+j] == pattern[j]){\n                    match = true;\n                }\n                else{\n                    match = false;\n                    break;\n                }\n            }\n            if(match){\n                end = i + j;\n                result.push(text.substring(start, end));\n                result.push(start);\n                result.push(end);\n                return result;\n            }\n        }\n    }\n    return result;\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var i = 0;\n    var j = 0;\n    var found = false;\n    while(i < text.length){\n        if(text[i] == pattern[j]){\n            if(j == 0){\n                start = i;\n            }\n            if(j == pattern.length - 1){\n                end = i;\n                found = true;\n                break;\n            }\n            i++;\n            j++;\n        }\n        else{\n            i++;\n            j = 0;\n        }\n    }\n    if(found){\n        result.push(text.substring(start, end + 1));\n        result.push(start);\n        result.push(end);\n    }\n    else{\n        result.push(\"\");\n        result.push(-1);\n        result.push(-1);\n    }\n    return result;\n}\n",
    "  var result = [];\n  var start = 0;\n  var end = 0;\n  var match = false;\n  for (var i = 0; i < text.length; i++) {\n    if (text[i] === pattern[0]) {\n      start = i;\n      for (var j = 0; j < pattern.length; j++) {\n        if (text[i+j] === pattern[j]) {\n          match = true;\n        } else {\n          match = false;\n          break;\n        }\n      }\n      if (match) {\n        end = i + pattern.length - 1;\n        result.push([start, end]);\n      }\n    }\n  }\n  return result;\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var i = 0;\n    while(i < text.length){\n        if(text[i] === pattern[0]){\n            start = i;\n            var j = 0;\n            while(j < pattern.length){\n                if(text[i] === pattern[j]){\n                    i++;\n                    j++;\n                }\n                else{\n                    break;\n                }\n            }\n            if(j === pattern.length){\n                end = i;\n                result.push([start, end]);\n            }\n        }\n        else{\n            i++;\n        }\n    }\n    return result;\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var i = 0;\n    var j = 0;\n    var found = false;\n    while(i < text.length){\n        if(text[i] == pattern[j]){\n            if(!found){\n                start = i;\n                found = true;\n            }\n            j++;\n            if(j == pattern.length){\n                end = i;\n                result.push([start, end]);\n                j = 0;\n                found = false;\n            }\n        }\n        else{\n            j = 0;\n            found = false;\n        }\n        i++;\n    }\n    return result;\n}\n",
    "    var i = 0;\n    var j = 0;\n    var match = \"\";\n    var start = 0;\n    var end = 0;\n    while(i < text.length && j < pattern.length){\n        if(text[i] == pattern[j]){\n            if(match == \"\"){\n                start = i;\n            }\n            match += text[i];\n            i++;\n            j++;\n        }\n        else{\n            match = \"\";\n            i++;\n            j = 0;\n        }\n    }\n    if(match == pattern){\n        end = i;\n        return [match, start, end];\n    }\n    else{\n        return null;\n    }\n}\n",
    "    var result = {\n        'start': null,\n        'end': null,\n        'match': null\n    };\n    var start = text.indexOf(pattern);\n    if(start != -1){\n        result.start = start;\n        result.end = start + pattern.length;\n        result.match = pattern;\n    }\n    return result;\n}\n",
    "\tvar result = [];\n\tvar start_index = 0;\n\tvar end_index = 0;\n\tvar match = text.match(pattern);\n\tif(match){\n\t\tstart_index = text.indexOf(match[0]);\n\t\tend_index = start_index + match[0].length;\n\t\tresult.push(match[0]);\n\t\tresult.push(start_index);\n\t\tresult.push(end_index);\n\t}\n\treturn result;\n}\n",
    "    var match = text.match(pattern);\n    if(match){\n        return {\n            match: match[0],\n            start: match.index,\n            end: match.index + match[0].length\n        };\n    }\n    return null;\n}\n",
    "\tvar result = {};\n\tvar start = text.indexOf(pattern);\n\tvar end = start + pattern.length;\n\tresult.start = start;\n\tresult.end = end;\n\tresult.match = text.substring(start, end);\n\treturn result;\n}\n",
    "    var result = {};\n    var start = text.indexOf(pattern);\n    var end = start + pattern.length;\n    result.start = start;\n    result.end = end;\n    result.match = text.substring(start, end);\n    return result;\n}\n",
    "    var result = [];\n    var index = 0;\n    while(index < text.length){\n        var match = text.substr(index).match(pattern);\n        if(match){\n            result.push({\n                match: match[0],\n                start: index + match.index,\n                end: index + match.index + match[0].length\n            });\n            index += match.index + match[0].length;\n        } else {\n            break;\n        }\n    }\n    return result;\n}\n",
    "    var pattern_length = pattern.length;\n    var text_length = text.length;\n    var i = 0;\n    var j = 0;\n    var start_index = 0;\n    var end_index = 0;\n    var match = false;\n    var match_index = 0;\n    var match_string = \"\";\n    for(i = 0; i < text_length; i++){\n        if(text[i] == pattern[j]){\n            match = true;\n            match_index = i;\n            for(j = 1; j < pattern_length; j++){\n                if(text[i+j] != pattern[j]){\n                    match = false;\n                    break;\n                }\n            }\n            if(match){\n                start_index = match_index;\n                end_index = match_index + pattern_length;\n                match_string = text.substring(start_index, end_index);\n                break;\n            }\n        }\n    }\n    return {\n        match_string: match_string,\n        start_index: start_index,\n        end_index: end_index\n    };\n}\n",
    "\tvar start_index = text.indexOf(pattern);\n\tvar end_index = start_index + pattern.length;\n\treturn {\n\t\tmatch: text.substring(start_index, end_index),\n\t\tstart_index: start_index,\n\t\tend_index: end_index\n\t};\n}\n",
    "\tvar result = [];\n\tvar i = 0;\n\twhile(i < text.length){\n\t\tvar j = 0;\n\t\twhile(j < pattern.length && i + j < text.length && text[i + j] == pattern[j]){\n\t\t\tj++;\n\t\t}\n\t\tif(j == pattern.length){\n\t\t\tresult.push(i);\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    var match = pattern.exec(text);\n    while (match != null){\n        start = match.index;\n        end = pattern.lastIndex;\n        result.push(text.substring(start, end));\n        match = pattern.exec(text);\n    }\n    return result;\n}\n",
    "    var start = 0;\n    var end = 0;\n    var match = \"\";\n    var pattern_length = pattern.length;\n    var text_length = text.length;\n    var i = 0;\n    var j = 0;\n    while(i < text_length){\n        if(text[i] == pattern[j]){\n            if(j == 0){\n                start = i;\n            }\n            match += text[i];\n            i++;\n            j++;\n        }\n        else{\n            match = \"\";\n            j = 0;\n            i++;\n        }\n        if(j == pattern_length){\n            end = i;\n            break;\n        }\n    }\n    return [match, start, end];\n}\n",
    "    var regex = new RegExp(pattern, \"g\");\n    var result = regex.exec(text);\n    if(result){\n        return {\n            match: result[0],\n            start: result.index,\n            end: regex.lastIndex\n        };\n    }\n    return null;\n}\n",
    "\tvar result = {};\n\tvar start = text.indexOf(pattern);\n\tvar end = start + pattern.length;\n\tresult.substring = text.substring(start, end);\n\tresult.start = start;\n\tresult.end = end;\n\treturn result;\n}\n",
    "    var i = 0;\n    var j = 0;\n    var result = [];\n    while(i < text.length && j < pattern.length){\n        if(text[i] == pattern[j]){\n            i++;\n            j++;\n        }\n        else{\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if(j == pattern.length){\n        result.push(i - j);\n        result.push(i);\n    }\n    else{\n        result.push(-1);\n        result.push(-1);\n    }\n    return result;\n}\n"
  ]
}