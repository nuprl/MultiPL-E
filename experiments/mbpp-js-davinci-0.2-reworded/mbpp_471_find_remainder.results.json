{
  "name": "mbpp_471_find_remainder",
  "language": "js",
  "prompt": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_471_find_remainder.py",
  "prompt_terminology": "reworded",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "results": [
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var result = 1;\n    for(var i = 0; i < arr.length; i++){\n        result = (result * arr[i]) % n;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product *= arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var result = 1;\n    for(var i = 0; i < arr.length; i++){\n        result = (result * arr[i]) % n;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * (arr[i] % n)) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var result = 1;\n    for(var i = 0; i < arr.length; i++){\n        result = (result * arr[i]) % n;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    return arr.reduce((a,b) => a*b) % n;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    let result = 1;\n    for(let i = 0; i < arr.length; i++){\n        result = (result * (arr[i] % n)) % n;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i=0; i<arr.length; i++){\n        product = (product * (arr[i] % n)) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * (arr[i] % n)) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var remainder = 0;\n    for(var i = 0; i < arr.length; i++){\n        remainder = (remainder + arr[i]) % n;\n    }\n    return remainder;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmpgtytm887.js:14:10)\n    at Object.<anonymous> (/tmp/tmpgtytm887.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * (arr[i] % n)) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product *= arr[i];\n    }\n    return product % n;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var result = 1;\n    for(var i = 0; i < arr.length; i++){\n        result = (result * arr[i]) % n;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = product * arr[i];\n    }\n    return product % n;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * (arr[i] % n)) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for (var i = 0; i < arr.length; i++) {\n        product = (product * (arr[i] % n)) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product *= arr[i];\n    }\n    return product % n;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var result = 1;\n    for(var i = 0; i < arr.length; i++){\n        result = result * arr[i] % n;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var result = 1;\n    for(var i = 0; i < arr.length; i++){\n        result = (result * arr[i]) % n;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = product * arr[i];\n    }\n    return product % n;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * (arr[i] % n)) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n  var result = 1;\n  for(var i = 0; i < arr.length; i++){\n    result = (result * arr[i]) % n;\n  }\n  return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var result = 1;\n    for(var i = 0; i < arr.length; i++){\n        result = (result * arr[i]) % n;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var result = 1;\n    for(var i = 0; i < arr.length; i++){\n        result = (result * arr[i]) % n;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var result = 1;\n    for(var i=0; i<arr.length; i++){\n        result = (result * arr[i]) % n;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * (arr[i] % n)) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * (arr[i] % n)) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = product * arr[i];\n    }\n    return product % n;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * (arr[i] % n)) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var result = 1;\n    for(var i=0; i<arr.length; i++){\n        result = (result * arr[i]) % n;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * (arr[i] % n)) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * (arr[i] % n)) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i=0; i<arr.length; i++){\n        product = (product * (arr[i] % n)) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i=0; i<arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * (arr[i] % n)) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var sum = 1;\n    for(var i=0; i<arr.length; i++){\n        sum = (sum * arr[i]) % n;\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var rem = 1;\n    for(var i=0; i<arr.length; i++){\n        rem = (rem * (arr[i] % n)) % n;\n    }\n    return rem;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product *= arr[i];\n    }\n    return product % n;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i=0; i<arr.length; i++){\n        product = (product * (arr[i] % n)) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = product * arr[i];\n    }\n    return product % n;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product *= arr[i];\n    }\n    return product % n;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var sum = 1;\n    for(var i = 0; i < arr.length; i++){\n        sum = (sum * arr[i]) % n;\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = arr.reduce(function(a, b){\n        return a * b;\n    });\n    return product % n;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * (arr[i] % n)) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product *= arr[i];\n    }\n    return product % n;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * (arr[i] % n)) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var result = 1;\n    for(var i = 0; i < arr.length; i++){\n        result = (result * arr[i]) % n;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * (arr[i] % n)) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * (arr[i] % n)) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var result = 1;\n    for(var i = 0; i < arr.length; i++){\n        result = (result * arr[i]) % n;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product *= arr[i];\n    }\n    return product % n;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    let product = 1;\n    for(let i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    let product = 1;\n    for(let i = 0; i < arr.length; i++){\n        product *= arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    return arr.reduce((a, b) => a * b) % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i=0; i<arr.length; i++){\n        product = (product * (arr[i] % n)) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i=0; i<arr.length; i++){\n        product = (product * (arr[i] % n)) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * (arr[i] % n)) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * (arr[i] % n)) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var result = 1;\n    for(var i=0; i<arr.length; i++){\n        result = (result * arr[i]) % n;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n  var product = 1;\n  for(var i = 0; i < arr.length; i++){\n    product *= arr[i];\n  }\n  return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * (arr[i] % n)) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i=0; i<arr.length; i++){\n        product *= arr[i];\n    }\n    return product % n;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * (arr[i] % n)) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var sum = 0;\n    for(var i = 0; i < arr.length; i++){\n        sum = sum + arr[i];\n    }\n    return sum % n;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmpey5tco9g.js:14:10)\n    at Object.<anonymous> (/tmp/tmpey5tco9g.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var result = 1;\n    for(var i = 0; i < arr.length; i++){\n        result = (result * arr[i]) % n;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product *= arr[i];\n    }\n    return product % n;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var result = 1;\n    for(var i = 0; i < arr.length; i++){\n        result = (result * arr[i]) % n;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * (arr[i] % n)) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i=0; i<arr.length; i++){\n        product = (product * (arr[i] % n)) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i=0; i<arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var result = 1;\n    for(var i=0; i<arr.length; i++){\n        result = (result * arr[i]) % n;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var result = 1;\n    for(var i = 0; i < arr.length; i++){\n        result = (result * arr[i]) % n;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * (arr[i] % n)) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = product * arr[i];\n    }\n    return product % n;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = arr.reduce(function(a, b){\n        return a * b;\n    });\n    return product % n;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var result = 1;\n    for(var i = 0; i < arr.length; i++){\n        result = (result * arr[i]) % n;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * (arr[i] % n)) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n  var product = 1;\n  for(var i = 0; i < arr.length; i++){\n    product = (product * (arr[i] % n)) % n;\n  }\n  return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for (var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var result = 1;\n    for(var i = 0; i < arr.length; i++){\n        result = (result * arr[i]) % n;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * (arr[i] % n)) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i=0; i<arr.length; i++){\n        product = product * arr[i] % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var result = 1;\n    for (var i = 0; i < arr.length; i++){\n        result = (result * arr[i]) % n;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = product * arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product *= arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var result = 1;\n    for(var i = 0; i < arr.length; i++){\n        result = (result * arr[i]) % n;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * (arr[i] % n)) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var result = 1;\n    for (var i = 0; i < arr.length; i++){\n        result = (result * arr[i]) % n;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var result = 1;\n    for(var i = 0; i < arr.length; i++){\n        result = (result * arr[i]) % n;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var result = 1;\n    for(var i = 0; i < arr.length; i++){\n        result = (result * arr[i]) % n;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var result = 1;\n    for(var i = 0; i < arr.length; i++){\n        result = (result * arr[i]) % n;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * (arr[i] % n)) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i=0; i<arr.length; i++){\n        product *= arr[i];\n    }\n    return product % n;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = product * arr[i] % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i=0; i<arr.length; i++){\n        product = (product * (arr[i] % n)) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var result = 1;\n    for(var i = 0; i < arr.length; i++){\n        result = (result * arr[i]) % n;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i=0; i<arr.length; i++){\n        product = product * arr[i];\n    }\n    return product % n;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var result = 1;\n    for(var i = 0; i < arr.length; i++){\n        result = result * arr[i] % n;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for (var i = 0; i < arr.length; i++){\n        product = product * arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * (arr[i] % n)) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var result = 1;\n    for(var i=0; i<arr.length; i++){\n        result = (result*arr[i])%n;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var result = 1;\n    for(var i = 0; i < arr.length; i++){\n        result = (result * arr[i]) % n;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var remainder = 0;\n    for(var i = 0; i < arr.length; i++){\n        remainder = (remainder + arr[i]) % n;\n    }\n    return remainder;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmpgtytm887.js:14:10)\n    at Object.<anonymous> (/tmp/tmpgtytm887.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = product * arr[i];\n    }\n    return product % n;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product *= arr[i];\n    }\n    return product % n;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = product * arr[i];\n    }\n    return product % n;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n  var product = arr.reduce(function(a, b) {\n    return a * b;\n  });\n  return product % n;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product *= arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var rem = 0;\n    for(var i = 0; i < arr.length; i++){\n        rem = (rem + arr[i]) % n;\n    }\n    return rem;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmp_4tb6old.js:14:10)\n    at Object.<anonymous> (/tmp/tmp_4tb6old.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i=0; i<arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = product * arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * (arr[i] % n)) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i=0; i<arr.length; i++){\n        product *= arr[i];\n    }\n    return product % n;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = arr.reduce((a,b) => a*b);\n    return product % n;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    return arr.reduce((a,b) => a*b) % n;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var result = 1;\n    for(var i = 0; i < arr.length; i++){\n        result = (result * arr[i]) % n;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    let product = 1;\n    for(let i = 0; i < arr.length; i++){\n        product *= arr[i];\n    }\n    return product % n;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var result = 1;\n    for(var i = 0; i < arr.length; i++){\n        result = (result * arr[i]) % n;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product *= arr[i];\n    }\n    return product % n;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var result = 1;\n    for(var i = 0; i < arr.length; i++){\n        result = result * arr[i] % n;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * (arr[i] % n)) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var result = 1;\n    for(var i = 0; i < arr.length; i++){\n        result = (result * arr[i]) % n;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i=0; i<arr.length; i++){\n        product = (product * (arr[i] % n)) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i=0; i<arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i=0; i<arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var result = 1;\n    for(var i=0; i<arr.length; i++){\n        result = (result * arr[i]) % n;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * (arr[i] % n)) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = product * arr[i];\n    }\n    return product % n;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var result = 1;\n    for(var i = 0; i < arr.length; i++){\n        result = (result * arr[i]) % n;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * (arr[i] % n)) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i=0; i<arr.length; i++){\n        product = product * arr[i];\n    }\n    return product % n;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var result = 1;\n    for(var i = 0; i < arr.length; i++){\n        result = (result * arr[i]) % n;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i=0; i<arr.length; i++){\n        product = (product * (arr[i] % n)) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * (arr[i] % n)) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    return arr.reduce((a,b) => a*b) % n;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i=0; i<arr.length; i++){\n        product = (product * (arr[i] % n)) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * (arr[i] % n)) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i=0; i<arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var remainder = 0;\n    for(var i = 0; i < arr.length; i++){\n        remainder = (remainder + arr[i]) % n;\n    }\n    return remainder;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmpgtytm887.js:14:10)\n    at Object.<anonymous> (/tmp/tmpgtytm887.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n  var sum = 1;\n  for(var i = 0; i < arr.length; i++){\n    sum = (sum * arr[i]) % n;\n  }\n  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var result = 1;\n    for(var i=0; i<arr.length; i++){\n        result = (result * arr[i]) % n;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var result = 1;\n    for(var i=0; i<arr.length; i++){\n        result = (result * (arr[i] % n)) % n;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product *= arr[i];\n    }\n    return product % n;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var result = arr.reduce(function(a, b){\n        return a * b;\n    })\n    return result % n;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * (arr[i] % n)) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var result = 1;\n    for(var i = 0; i < arr.length; i++){\n        result = (result * arr[i]) % n;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * (arr[i] % n)) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var result = 1;\n    for(var i = 0; i < arr.length; i++){\n        result = (result * arr[i]) % n;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var result = 1;\n    for(var i = 0; i < arr.length; i++){\n        result = (result * arr[i]) % n;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * (arr[i] % n)) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n  var product = 1;\n  for(var i = 0; i < arr.length; i++){\n    product = (product * arr[i]) % n;\n  }\n  return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n  var product = 1;\n  for(var i = 0; i < arr.length; i++){\n    product = (product * (arr[i] % n)) % n;\n  }\n  return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * (arr[i] % n)) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for (var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * (arr[i] % n)) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var result = 1;\n    for(var i = 0; i < arr.length; i++){\n        result = (result * arr[i]) % n;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n  return arr.reduce((a, b) => a * b) % n;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = product * arr[i];\n    }\n    return product % n;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i=0; i<arr.length; i++){\n        product = (product * (arr[i] % n)) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * (arr[i] % n)) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var result = 1;\n    for(var i = 0; i < arr.length; i++){\n        result = (result * arr[i]) % n;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var result = 1;\n    for(var i=0; i<arr.length; i++){\n        result = (result * arr[i]) % n;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i=0; i<arr.length; i++){\n        product = (product * (arr[i] % n)) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var result = 1;\n    for(var i = 0; i < arr.length; i++){\n        result = (result * arr[i]) % n;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * (arr[i] % n)) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var result = 1;\n    for(var i = 0; i < arr.length; i++){\n        result = (result * arr[i]) % n;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}