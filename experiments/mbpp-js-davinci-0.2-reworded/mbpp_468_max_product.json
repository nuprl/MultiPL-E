{
  "name": "mbpp_468_max_product",
  "language": "js",
  "prompt": "//Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunction max_product(arr){\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_468_max_product.py",
  "prompt_terminology": "reworded",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_product;\n  assert.deepEqual(candidate([3, 100, 4, 5, 150, 6]),3000);\n  assert.deepEqual(candidate([4, 42, 55, 68, 80]),50265600);\n  assert.deepEqual(candidate([10, 22, 9, 33, 21, 50, 41, 60]),2460);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    let max = 0;\n    let product = 1;\n    for(let i = 0; i < arr.length; i++){\n        product *= arr[i];\n        if(product > max){\n            max = product;\n        }\n    }\n    return max;\n}\n",
    "    var max = 0;\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = product * arr[i];\n        if(product > max){\n            max = product;\n        }\n    }\n    return max;\n}\n",
    "    let max = 0;\n    let product = 1;\n    for(let i = 0; i < arr.length; i++){\n        product *= arr[i];\n        if(product > max){\n            max = product;\n        }\n    }\n    return max;\n}\n",
    "    let max_product = 1;\n    let temp_product = 1;\n    for(let i=0; i<arr.length; i++){\n        temp_product = temp_product * arr[i];\n        if(temp_product > max_product){\n            max_product = temp_product;\n        }\n    }\n    return max_product;\n}\n\nlet arr = [1,2,3,4,5,6,7,8,9,10];",
    "    let max = 0;\n    let product = 1;\n    for(let i = 0; i < arr.length; i++){\n        product = product * arr[i];\n        if(product > max){\n            max = product;\n        }\n    }\n    return max;\n}\n",
    "    var max = 0;\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = product * arr[i];\n        if(product > max){\n            max = product;\n        }\n    }\n    return max;\n}\n",
    "  var max = 0;\n  var max_arr = [];\n  for(var i = 0; i < arr.length; i++){\n    var product = 1;\n    for(var j = i; j < arr.length; j++){\n      product *= arr[j];\n      if(product > max){\n        max = product;\n        max_arr = arr.slice(i, j+1);\n      }\n    }\n  }\n  return max_arr;\n}\n",
    "    let max = 0;\n    let product = 1;\n    for(let i = 0; i < arr.length; i++){\n        product *= arr[i];\n        if(product > max){\n            max = product;\n        }\n    }\n    return max;\n}\n",
    "    let max = 0;\n    let product = 1;\n    for(let i = 0; i < arr.length; i++){\n        product *= arr[i];\n        if(product > max){\n            max = product;\n        }\n    }\n    return max;\n}\n",
    "    let max = 0;\n    let product = 1;\n    for(let i = 0; i < arr.length; i++){\n        product *= arr[i];\n        if(product > max){\n            max = product;\n        }\n    }\n    return max;\n}\n",
    "  var max = 0;\n  var product = 1;\n  for(var i = 0; i < arr.length; i++){\n    product = product * arr[i];\n    if(product > max){\n      max = product;\n    }\n  }\n  return max;\n}\n",
    "    var max = 0;\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product *= arr[i];\n        if(product > max){\n            max = product;\n        }\n    }\n    return max;\n}\n",
    "    var max = 0;\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = product * arr[i];\n        if(product > max){\n            max = product;\n        }\n    }\n    return max;\n}\n",
    "    let max = 0;\n    let product = 1;\n    for(let i = 0; i < arr.length; i++){\n        product *= arr[i];\n        if(product > max){\n            max = product;\n        }\n    }\n    return max;\n}\n",
    "    var max = 0;\n    var temp = 1;\n    for(var i = 0; i < arr.length; i++){\n        temp = 1;\n        for(var j = i; j < arr.length; j++){\n            temp *= arr[j];\n            if(temp > max){\n                max = temp;\n            }\n        }\n    }\n    return max;\n}\n",
    "    var max_product = 1;\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = product * arr[i];\n        if(product > max_product){\n            max_product = product;\n        }\n    }\n    return max_product;\n}\n",
    "    var max_product = 1;\n    var curr_product = 1;\n    for(var i = 0; i < arr.length; i++){\n        curr_product = curr_product * arr[i];\n        max_product = Math.max(max_product, curr_product);\n        if(curr_product === 0) curr_product = 1;\n    }\n    return max_product;\n}\n",
    "  let max_product = 0;\n  let product = 1;\n  for(let i = 0; i < arr.length; i++){\n    product = product * arr[i];\n    if(product > max_product){\n      max_product = product;\n    }\n  }\n  return max_product;\n}\n",
    "    var max_product = 1;\n    var max_so_far = 1;\n    var min_so_far = 1;\n    var flag = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n            max_so_far = max_so_far * arr[i];\n            min_so_far = Math.min(min_so_far * arr[i], 1);\n            flag = 1;\n        }\n        else if(arr[i] == 0){\n            max_so_far = 1;\n            min_so_far = 1;\n        }\n        else{\n            var temp = max_so_far;\n            max_so_far = Math.max(min_so_far * arr[i], 1);\n            min_so_far = temp * arr[i];\n        }\n        if(max_so_far > max_product){\n            max_product = max_so_far;\n        }\n    }\n    if(flag == 0 && max_product == 1){\n        return 0;\n    }\n    return max_product;\n}\n\nvar arr = [1, -2, -3, 0, 7, -8, -2];",
    "    var max = 0;\n    var product = 1;\n    var i = 0;\n    while(i < arr.length){\n        if(arr[i] < arr[i+1]){\n            product *= arr[i];\n        }\n        else{\n            if(product > max){\n                max = product;\n            }\n            product = 1;\n        }\n        i++;\n    }\n    return max;\n}"
  ]
}