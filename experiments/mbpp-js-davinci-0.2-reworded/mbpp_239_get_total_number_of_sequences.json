{
  "name": "mbpp_239_get_total_number_of_sequences",
  "language": "js",
  "prompt": "//Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\nfunction get_total_number_of_sequences(m, n){\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_239_get_total_number_of_sequences.py",
  "prompt_terminology": "reworded",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_total_number_of_sequences;\n  assert.deepEqual(candidate(10, 4),4);\n  assert.deepEqual(candidate(5, 2),6);\n  assert.deepEqual(candidate(16, 3),84);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "\tvar total = 0;\n\tfor(var i = 2; i <= m; i++){\n\t\ttotal += get_number_of_sequences(m, n, i);\n\t}\n\treturn total;\n}\n",
    "    if(n === 0) return 1;\n    let total = 0;\n    for(let i = 2; i <= m; i++){\n        total += get_total_number_of_sequences(i, n - 1);\n    }\n    return total;\n}\n",
    "    var total = 0;\n    var arr = [];\n    for(var i = 0; i < n; i++){\n        arr.push(0);\n    }\n    var helper = function(arr, i){\n        if(i === n){\n            total++;\n            return;\n        }\n        for(var j = 0; j < m; j++){\n            if(i === 0 || arr[i-1]*2 <= j+1){\n                arr[i] = j+1;\n                helper(arr, i+1);\n            }\n        }\n    }\n    helper(arr, 0);\n    return total;\n}\n",
    "    if(n == 0) return 1;\n    let total = 0;\n    for(let i = 2*n; i <= m; i++){\n        total += get_total_number_of_sequences(i, n-1);\n    }\n    return total;\n}\n",
    "    var total = 0;\n    for(var i = 2; i <= m; i++){\n        total += get_total_number_of_sequences_with_first_element(i, n);\n    }\n    return total;\n}\n",
    "    let total = 0;\n    for(let i = 2; i <= m; i++){\n        total += get_total_number_of_sequences_helper(m, n, i);\n    }\n    return total;\n}\n",
    "  if (n === 0) {\n    return 1;\n  }\n  if (m === 0) {\n    return 0;\n  }\n  return get_total_number_of_sequences(m-1, n) + get_total_number_of_sequences(m-1, n-1);\n}\n",
    "\tvar total = 0;\n\tvar arr = [];\n\tfor(var i = 0; i <= m; i++){\n\t\tarr.push(i);\n\t}\n\tvar sequences = get_sequences(arr, n);\n\tfor(var i = 0; i < sequences.length; i++){\n\t\tif(is_valid_sequence(sequences[i])){\n\t\t\ttotal++;\n\t\t}\n\t}\n\treturn total;\n}\n",
    "    let sum = 0;\n    for(let i = 1; i <= m; i++){\n        sum += get_total_number_of_sequences_helper(m, n, i);\n    }\n    return sum;\n}\n",
    "  let total = 0;\n  for(let i = 2; i <= m; i++){\n    total += get_number_of_sequences(i, n);\n  }\n  return total;\n}\n",
    "  if(m < 2 || n < 1) return 0;\n  if(n === 1) return m;\n  let dp = new Array(n).fill(0);\n  dp[0] = m;\n  for(let i = 1; i < n; i++){\n    for(let j = 2; j <= m; j++){\n      dp[i] += dp[i - 1];\n    }\n  }\n  return dp[n - 1];\n}\n",
    "    let count = 0;\n    for(let i = 2; i <= m; i++){\n        count += get_total_number_of_sequences_helper(m, n - 1, i);\n    }\n    return count;\n}\n",
    "    var total = 0;\n    for(var i = 2; i <= m; i++){\n        total += get_number_of_sequences(i, n);\n    }\n    return total;\n}\n",
    "  if(n === 1) return m;\n  let total = 0;\n  for(let i = 2; i <= m; i++){\n    total += get_total_number_of_sequences(i - 1, n - 1);\n  }\n  return total;\n}\n",
    "    let total = 0;\n    for(let i = 2; i <= m; i++){\n        total += get_number_of_sequences(i, n);\n    }\n    return total;\n}\n",
    "    let count = 0;\n    let arr = [];\n    for(let i = 1; i <= m; i++){\n        arr.push(i);\n    }\n    for(let i = 0; i < arr.length; i++){\n        for(let j = i + 1; j < arr.length; j++){\n            if(arr[j] >= 2 * arr[i]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n",
    "    if(n === 1) return m;\n    let total = 0;\n    for(let i = 2; i <= m; i++){\n        total += get_total_number_of_sequences(i, n - 1);\n    }\n    return total;\n}\n",
    "    // Write your code here\n    var arr = [];\n    for(var i = 2; i <= m; i++){\n        arr.push(i);\n    }\n    var result = [];\n    var temp = [];\n    get_total_number_of_sequences_helper(arr, n, temp, result);\n    return result.length;\n}\n",
    "    if(n === 1){\n        return m;\n    }\n    let total = 0;\n    for(let i = 2; i <= m; i++){\n        total += get_total_number_of_sequences(i, n - 1);\n    }\n    return total;\n}\n",
    "  if(n === 0){\n    return 1;\n  }\n  if(m === 0){\n    return 0;\n  }\n  let total = 0;\n  for(let i = 2; i <= m; i++){\n    total += get_total_number_of_sequences(i, n-1);\n  }\n  return total;\n}\n"
  ]
}