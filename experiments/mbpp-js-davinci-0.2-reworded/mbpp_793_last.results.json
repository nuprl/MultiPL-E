{
  "name": "mbpp_793_last",
  "language": "js",
  "prompt": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_793_last.py",
  "prompt_terminology": "reworded",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "results": [
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var index = -1;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] == x){\n            index = i;\n        }\n    }\n    return index;\n}\nvar arr = [1,2,3,4,5,6,7,8,9,10];\nvar x = 10;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var result = -1;\n    for(var i = 0; i < n; i++){\n        if(arr[i] == x){\n            result = i;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var result = -1;\n    for(var i = 0; i < n; i++){\n        if(arr[i] == x){\n            result = i;\n        }\n    }\n    return result;\n}\n\nvar arr = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\nvar x = 2;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = 0;\n    var j = arr.length - 1;\n    while(i <= j){\n        var m = Math.floor((i + j) / 2);\n        if(arr[m] === x){\n            if(arr[m + 1] !== x){\n                return m;\n            }\n            i = m + 1;\n        }\n        else if(arr[m] < x){\n            i = m + 1;\n        }\n        else{\n            j = m - 1;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var l = arr.length;\n    var i = 0;\n    while(i<l){\n        if(arr[i] == x){\n            return i;\n        }\n        i++;\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp0jxrhqnr.js:20:10)\n    at Object.<anonymous> (/tmp/tmp0jxrhqnr.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var l = 0;\n    var r = arr.length - 1;\n    var result = -1;\n    while(l <= r){\n        var mid = Math.floor((l + r) / 2);\n        if(arr[mid] == x){\n            result = mid;\n            l = mid + 1;\n        }else if(arr[mid] > x){\n            r = mid - 1;\n        }else{\n            l = mid + 1;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var result = -1;\n    for(var i = 0; i < n; i++){\n        if(arr[i] == x){\n            result = i;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var index = -1;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] == x){\n            index = i;\n        }\n    }\n    return index;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var result = -1;\n    for(var i = 0; i < n; i++){\n        if(arr[i] == x){\n            result = i;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var i = 0;\n    var j = n-1;\n    var res = -1;\n    while(i <= j){\n        var mid = Math.floor((i+j)/2);\n        if(arr[mid] == x){\n            res = mid;\n            i = mid+1;\n        }\n        else if(arr[mid] > x)\n            j = mid-1;\n        else\n            i = mid+1;\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var result = -1;\n    for(var i=0; i<n; i++){\n        if(arr[i] == x){\n            result = i;\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var l = arr.length;\n    for(var i = l-1; i >= 0; i--){\n        if(arr[i] == x){\n            return i;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var pos = -1;\n    for(var i = 0; i < n; i++){\n        if(arr[i] == x){\n            pos = i;\n        }\n    }\n    return pos;\n}\nvar arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar x = 5;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var result = -1;\n    for(var i = 0; i < n; i++){\n        if(arr[i] == x){\n            result = i;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var len = arr.length;\n    for(var i = len-1; i>=0; i--){\n        if(arr[i] == x){\n            return i;\n        }\n    }\n    return -1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    for(var i = arr.length; i >= 0; i--){\n        if(arr[i] === x){\n            return i;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n  var i = arr.length - 1;\n  while(i >= 0 && arr[i] != x){\n    i--;\n  }\n  return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var len = arr.length;\n    var index = 0;\n    for(var i = 0; i < len; i++){\n        if(arr[i] == x){\n            index = i;\n        }\n    }\n    return index;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i;\n    for(i=0;i<arr.length;i++){\n        if(arr[i]==x){\n            return i;\n        }\n    }\n    return -1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpkcabvfey.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkcabvfey.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var len = arr.length;\n    var i = 0;\n    while(i < len){\n        if(arr[i] == x){\n            return i;\n        }\n        i++;\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpz0sl_4rl.js:20:10)\n    at Object.<anonymous> (/tmp/tmpz0sl_4rl.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = 0;\n    var j = arr.length - 1;\n    while(i <= j){\n        var mid = Math.floor((i + j) / 2);\n        if(arr[mid] == x){\n            if(arr[mid + 1] == x){\n                i = mid + 1;\n            }else{\n                return mid;\n            }\n        }else if(arr[mid] > x){\n            j = mid - 1;\n        }else{\n            i = mid + 1;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var i = 0;\n    var j = n-1;\n    while(i<=j){\n        var mid = Math.floor((i+j)/2);\n        if(arr[mid] == x && (mid == n-1 || arr[mid+1] != x)){\n            return mid;\n        }\n        else if(arr[mid] <= x){\n            i = mid+1;\n        }\n        else{\n            j = mid-1;\n        }\n    }\n    return -1;\n}\nvar arr = [1,2,3,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "/tmp/tmppy_dm1yy.js:21\nconst assert = require('node:assert');\n^^^^^\n\nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var result = -1;\n    for(var i = 0; i < n; i++){\n        if(arr[i] == x){\n            result = i;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var len = arr.length;\n    var i = 0;\n    while(i < len){\n        if(arr[i] == x){\n            return i;\n        }\n        i++;\n    }\n    return -1;\n}\nvar arr = [1,2,3,4,5,6,7,8,9,10];\nvar x = 10;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpddk6rtch.js:21:10)\n    at Object.<anonymous> (/tmp/tmpddk6rtch.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = 0;\n    var j = arr.length - 1;\n    while(i <= j){\n        var mid = Math.floor((i + j) / 2);\n        if(arr[mid] == x){\n            if(arr[mid + 1] != x){\n                return mid;\n            }\n            else{\n                i = mid + 1;\n            }\n        }\n        else if(arr[mid] < x){\n            i = mid + 1;\n        }\n        else{\n            j = mid - 1;\n        }\n    }\n    return -1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var l = 0;\n    var r = arr.length - 1;\n    var result = -1;\n    while(l <= r){\n        var mid = Math.floor((l + r) / 2);\n        if(arr[mid] == x){\n            result = mid;\n            l = mid + 1;\n        }\n        else if(arr[mid] > x){\n            r = mid - 1;\n        }\n        else{\n            l = mid + 1;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = 0;\n    var j = arr.length - 1;\n    while(i <= j){\n        var mid = Math.floor((i + j) / 2);\n        if(arr[mid] == x && (arr[mid + 1] != x || mid == arr.length - 1)){\n            return mid;\n        }\n        else if(arr[mid] <= x){\n            i = mid + 1;\n        }\n        else{\n            j = mid - 1;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var i = 0;\n    var index = -1;\n    for(i = 0; i < n; i++){\n        if(arr[i] == x){\n            index = i;\n        }\n    }\n    return index;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var i = 0;\n    var j = n-1;\n    var res = -1;\n    while(i<=j){\n        var mid = Math.floor((i+j)/2);\n        if(arr[mid] == x){\n            res = mid;\n            i = mid + 1;\n        }\n        else if(arr[mid] > x){\n            j = mid - 1;\n        }\n        else{\n            i = mid + 1;\n        }\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var result = -1;\n    for(var i = 0; i < n; i++){\n        if(arr[i] == x){\n            result = i;\n        }\n    }\n    return result;\n}\nvar arr = [1,2,3,4,5,6,7,8,9,10];\nvar x = 10;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    for(var i=arr.length-1; i>=0; i--){\n        if(arr[i]==x){\n            return i;\n        }\n    }\n    return -1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var last = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] == x){\n            last = i;\n        }\n    }\n    return last;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i;\n    for(i=0; i<arr.length; i++){\n        if(arr[i] == x){\n            return i;\n        }\n    }\n    return -1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp9327df76.js:17:10)\n    at Object.<anonymous> (/tmp/tmp9327df76.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    for(var i=arr.length-1; i>=0; i--){\n        if(arr[i]==x){\n            return i;\n        }\n    }\n    return -1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var result = -1;\n    for(var i = 0; i < n; i++){\n        if(arr[i] == x){\n            result = i;\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    for(var i=arr.length-1; i>=0; i--){\n        if(arr[i]==x){\n            return i;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var i = 0;\n    var j = n-1;\n    var res = -1;\n    while(i<=j){\n        var mid = Math.floor((i+j)/2);\n        if(arr[mid] == x){\n            res = mid;\n            i = mid+1;\n        }\n        else if(arr[mid] > x){\n            j = mid-1;\n        }\n        else{\n            i = mid+1;\n        }\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i=0;\n    while(i<arr.length){\n        if(arr[i]==x){\n            return i;\n        }\n        i++;\n    }\n    return -1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpnbtz9qab.js:18:10)\n    at Object.<anonymous> (/tmp/tmpnbtz9qab.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = 0;\n    var j = arr.length - 1;\n    var mid = 0;\n    while(i <= j){\n        mid = Math.floor((i + j) / 2);\n        if(arr[mid] == x){\n            if(arr[mid + 1] != x){\n                return mid;\n            }\n            else{\n                i = mid + 1;\n            }\n        }\n        else if(arr[mid] > x){\n            j = mid - 1;\n        }\n        else{\n            i = mid + 1;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var result = -1;\n    for(var i = 0; i < n; i++){\n        if(arr[i] == x){\n            result = i;\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var l = arr.length;\n    for(var i = l-1; i>=0; i--){\n        if(arr[i] == x){\n            return i;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var result = -1;\n    for(var i = 0; i < n; i++){\n        if(arr[i] == x){\n            result = i;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var i = 0;\n    var j = n-1;\n    var res = -1;\n    while(i <= j){\n        var mid = Math.floor((i+j)/2);\n        if(arr[mid] == x){\n            res = mid;\n            i = mid+1;\n        }\n        else if(arr[mid] < x){\n            i = mid+1;\n        }\n        else{\n            j = mid-1;\n        }\n    }\n    return res;\n}\n\nvar arr = [1,2,3,4,5,6,7,8,9,10];\nvar x = 9;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = 0;\n    var j = arr.length - 1;\n    while(i <= j){\n        var mid = Math.floor((i + j) / 2);\n        if(arr[mid] == x && (arr[mid + 1] == undefined || arr[mid + 1] != x)){\n            return mid;\n        }\n        else if(arr[mid] <= x){\n            i = mid + 1;\n        }\n        else{\n            j = mid - 1;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    for(var i=arr.length-1; i>=0; i--){\n        if(arr[i]==x){\n            return i;\n        }\n    }\n    return -1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var i = 0;\n    var j = n-1;\n    var res = -1;\n    while(i<=j){\n        var mid = Math.floor((i+j)/2);\n        if(arr[mid] == x){\n            res = mid;\n            i = mid + 1;\n        }\n        else if(arr[mid] < x){\n            i = mid + 1;\n        }\n        else{\n            j = mid - 1;\n        }\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = 0;\n    var j = arr.length - 1;\n    while(i < j){\n        var mid = Math.floor((i + j) / 2);\n        if(arr[mid] <= x){\n            i = mid + 1;\n        }\n        else{\n            j = mid;\n        }\n    }\n    if(arr[i] == x){\n        return i;\n    }\n    else{\n        return -1;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmphj6bou9z.js:27:10)\n    at Object.<anonymous> (/tmp/tmphj6bou9z.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] !== x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var index = -1;\n    for(var i = 0; i < n; i++){\n        if(arr[i] == x){\n            index = i;\n        }\n    }\n    return index;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var l = arr.length;\n    for(var i = l-1; i >= 0; i--){\n        if(arr[i] == x){\n            return i;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var result = -1;\n    for (var i = 0; i < n; i++){\n        if (arr[i] == x){\n            result = i;\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var index = -1;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] == x){\n            index = i;\n        }\n    }\n    return index;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var result = -1;\n    for(var i = 0; i < n; i++){\n        if(arr[i] == x){\n            result = i;\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var result = -1;\n    for(var i=0; i<n; i++){\n        if(arr[i] == x){\n            result = i;\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    for(var i = arr.length-1; i >= 0; i--){\n        if(arr[i] == x){\n            return i;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    for(var i=arr.length-1; i>=0; i--){\n        if(arr[i]===x){\n            return i;\n        }\n    }\n    return -1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var result = -1;\n    for(var i = 0; i < n; i++){\n        if(arr[i] == x){\n            result = i;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    for(var i=arr.length-1; i>=0; i--){\n        if(arr[i]==x){\n            return i;\n        }\n    }\n    return -1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = 0;\n    while(i < arr.length){\n        if(arr[i] == x){\n            return i;\n        }\n        i++;\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp67dsgdqs.js:19:10)\n    at Object.<anonymous> (/tmp/tmp67dsgdqs.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    for(var i = arr.length - 1; i >= 0; i--){\n        if(arr[i] == x){\n            return i;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var i = 0;\n    var j = n-1;\n    var res = -1;\n    while(i<=j){\n        var mid = Math.floor((i+j)/2);\n        if(arr[mid] == x){\n            res = mid;\n            i = mid+1;\n        }\n        else if(arr[mid]<x){\n            i = mid+1;\n        }\n        else{\n            j = mid-1;\n        }\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    for(var i = arr.length-1; i>=0; i--){\n        if(arr[i] === x){\n            return i;\n        }\n    }\n    return -1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = 0;\n    var j = arr.length - 1;\n    while(i <= j){\n        var mid = Math.floor((i + j) / 2);\n        if(arr[mid] === x && (arr[mid + 1] !== x || mid === arr.length - 1)){\n            return mid;\n        }\n        else if(arr[mid] <= x){\n            i = mid + 1;\n        }\n        else{\n            j = mid - 1;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = 0;\n    var j = arr.length - 1;\n    var mid = 0;\n    while(i < j){\n        mid = Math.floor((i + j) / 2);\n        if(arr[mid] > x){\n            j = mid - 1;\n        }else if(arr[mid] < x){\n            i = mid + 1;\n        }else{\n            if(mid == arr.length - 1 || arr[mid + 1] != x){\n                return mid;\n            }else{\n                i = mid + 1;\n            }\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpi_eqnvng.js:28:10)\n    at Object.<anonymous> (/tmp/tmpi_eqnvng.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var result = -1;\n    for(var i = 0; i < n; i++){\n        if(arr[i] == x){\n            result = i;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var index = -1;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] == x){\n            index = i;\n        }\n    }\n    return index;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var l = arr.length;\n    for(var i = l-1; i >= 0; i--){\n        if(arr[i] == x){\n            return i;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nvar arr = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x)\n        i--;\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var result = -1;\n    for(var i = 0; i < n; i++){\n        if(arr[i] == x){\n            result = i;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = 0;\n    var n = arr.length;\n    while(i < n){\n        if(arr[i] == x){\n            return i;\n        }\n        i++;\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpc7tm0hmf.js:20:10)\n    at Object.<anonymous> (/tmp/tmpc7tm0hmf.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var l = arr.length;\n    for(var i = l-1; i >= 0; i--){\n        if(arr[i] == x){\n            return i;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    for(var i=arr.length-1; i>=0; i--){\n        if(arr[i]==x){\n            return i;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\nvar arr = [1,2,3,4,5,6,7,8,9,10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    for(var i = arr.length - 1; i >= 0; i--){\n        if(arr[i] == x){\n            return i;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i;\n    for(i=0; i<arr.length; i++){\n        if(arr[i] == x){\n            return i;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpz62mhnjm.js:18:10)\n    at Object.<anonymous> (/tmp/tmpz62mhnjm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var index = arr.lastIndexOf(x);\n    return index;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] !== x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var result = -1;\n    for(var i = 0; i < n; i++){\n        if(arr[i] == x){\n            result = i;\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    for(var i = arr.length - 1; i >= 0; i--){\n        if(arr[i] == x){\n            return i;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var l = arr.length;\n    var i = 0;\n    while(i < l){\n        if(arr[i] == x){\n            return i;\n        }\n        i++;\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpvfzh9dnz.js:20:10)\n    at Object.<anonymous> (/tmp/tmpvfzh9dnz.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var result = -1;\n    for(var i = 0; i < n; i++){\n        if(arr[i] == x){\n            result = i;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var result = -1;\n    for(var i = 0; i < n; i++){\n        if(arr[i] == x){\n            result = i;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var index = arr.lastIndexOf(x);\n    return index;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var i = 0;\n    var index = -1;\n    while(i < n){\n        if(arr[i] == x){\n            index = i;\n        }\n        i++;\n    }\n    return index;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var l = 0;\n    var r = arr.length - 1;\n    var result = -1;\n    while(l <= r){\n        var mid = Math.floor((l + r) / 2);\n        if(arr[mid] == x){\n            result = mid;\n            l = mid + 1;\n        }\n        else if(arr[mid] > x){\n            r = mid - 1;\n        }\n        else{\n            l = mid + 1;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var result = -1;\n    for(var i = 0; i < n; i++){\n        if(arr[i] == x){\n            result = i;\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var index = -1;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] == x){\n            index = i;\n        }\n    }\n    return index;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    for(var i = arr.length - 1; i >= 0; i--){\n        if(arr[i] == x){\n            return i;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var i = 0;\n    var index = -1;\n    for(i = 0; i < n; i++){\n        if(arr[i] == x){\n            index = i;\n        }\n    }\n    return index;\n}\nvar arr = [1,2,3,4,5,6,7,8,9,10];\nvar x = 10;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] !== x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = 0;\n    while(i < arr.length){\n        if(arr[i] == x){\n            return i;\n        }\n        i++;\n    }\n    return -1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpektrnx6z.js:18:10)\n    at Object.<anonymous> (/tmp/tmpektrnx6z.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var result = -1;\n    for(var i = 0; i < n; i++){\n        if(arr[i] == x){\n            result = i;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0){\n        if(arr[i] == x){\n            return i;\n        }\n        i--;\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = 0;\n    var j = arr.length - 1;\n    while(i <= j){\n        var mid = Math.floor((i + j) / 2);\n        if(arr[mid] == x && (mid == arr.length - 1 || arr[mid + 1] != x)){\n            return mid;\n        }\n        else if(arr[mid] <= x){\n            i = mid + 1;\n        }\n        else{\n            j = mid - 1;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var index = arr.lastIndexOf(x);\n    return index;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var l = arr.length;\n    for(var i = l-1; i >= 0; i--){\n        if(arr[i] == x){\n            return i;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n\tvar i = arr.length - 1;\n\twhile(i >= 0 && arr[i] != x){\n\t\ti--;\n\t}\n\treturn i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var i = 0;\n    var index = -1;\n    for(i = 0; i < n; i++){\n        if(arr[i] == x){\n            index = i;\n        }\n    }\n    return index;\n}\nvar arr = [1,2,3,4,5,6,7,8,9,10];\nvar x = 10;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = 0;\n    var j = arr.length - 1;\n    while(i < j){\n        var mid = Math.floor((i + j) / 2);\n        if(arr[mid] <= x){\n            i = mid + 1;\n        }else{\n            j = mid;\n        }\n    }\n    if(arr[i] === x){\n        return i;\n    }else{\n        return -1;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpxlbmwylk.js:25:10)\n    at Object.<anonymous> (/tmp/tmpxlbmwylk.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var index = -1;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] == x){\n            index = i;\n        }\n    }\n    return index;\n}\nvar arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar x = 5;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var i = 0;\n    var j = n-1;\n    var res = -1;\n    while(i<=j){\n        var mid = Math.floor((i+j)/2);\n        if(arr[mid] == x){\n            res = mid;\n            i = mid+1;\n        }\n        else if(arr[mid]<x){\n            i = mid+1;\n        }\n        else{\n            j = mid-1;\n        }\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var index = -1;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] == x){\n            index = i;\n        }\n    }\n    return index;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var res = -1;\n    for(var i = 0; i < n; i++){\n        if(arr[i] == x){\n            res = i;\n        }\n    }\n    return res;\n}\nvar arr = [1,2,3,4,5,6,7,8,9,10];\nvar x = 4;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var i = 0;\n    var index = -1;\n    while(i < n){\n        if(arr[i] == x){\n            index = i;\n        }\n        i++;\n    }\n    return index;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var index = -1;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] == x){\n            index = i;\n        }\n    }\n    return index;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var i = 0;\n    var j = n - 1;\n    var res = -1;\n    while (i <= j) {\n        var mid = Math.floor((i + j) / 2);\n        if (arr[mid] == x) {\n            res = mid;\n            i = mid + 1;\n        }\n        else if (arr[mid] > x) {\n            j = mid - 1;\n        }\n        else {\n            i = mid + 1;\n        }\n    }\n    return res;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var n = arr.length;\n    var index = -1;\n    for(var i = 0; i < n; i++){\n        if(arr[i] == x){\n            index = i;\n        }\n    }\n    return index;\n}\nvar arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar x = 10;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] !== x){\n        i--;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var index = -1;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] == x){\n            index = i;\n        }\n    }\n    return index;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i;\n    for(i=0; i<arr.length; i++){\n        if(arr[i] == x){\n            return i;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpz62mhnjm.js:18:10)\n    at Object.<anonymous> (/tmp/tmpz62mhnjm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the last position of an element in a sorted array.\nfunction last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] != x){\n        i--;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = last;\n  assert.deepEqual(candidate([1, 2, 3], 1),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);\n  assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);\n}\n\ntest();",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}