{
  "name": "mbpp_424_extract_rear",
  "language": "js",
  "prompt": "//Write a function to extract only the rear index element of each string in the given array.\nfunction extract_rear(test_tuple){\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_424_extract_rear.py",
  "prompt_terminology": "reworded",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_rear;\n  assert.deepEqual(candidate([\"Mers\", \"for\", \"Vers\"]),[\"s\", \"r\", \"s\"]);\n  assert.deepEqual(candidate([\"Avenge\", \"for\", \"People\"]),[\"e\", \"r\", \"e\"]);\n  assert.deepEqual(candidate([\"Gotta\", \"get\", \"go\"]),[\"a\", \"t\", \"o\"]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    var result = [];\n    for(var i = 0; i < test_tuple.length; i++){\n        result.push(test_tuple[i][test_tuple[i].length - 1]);\n    }\n    return result;\n}",
    "    var result = [];\n    for (var i = 0; i < test_tuple.length; i++) {\n        result.push(test_tuple[i][test_tuple[i].length - 1]);\n    }\n    return result;\n}",
    "    var result = test_tuple.map(function(str){\n        return str[str.length-1];\n    });\n    return result;\n}",
    "    var result = [];\n    for (var i = 0; i < test_tuple.length; i++) {\n        result.push(test_tuple[i][test_tuple[i].length - 1]);\n    }\n    return result;\n}\n",
    "    var result = [];\n    for (var i = 0; i < test_tuple.length; i++) {\n        result.push(test_tuple[i][test_tuple[i].length - 1]);\n    }\n    return result;\n}",
    "    var result = [];\n    for (var i = 0; i < test_tuple.length; i++){\n        result.push(test_tuple[i][test_tuple[i].length - 1]);\n    }\n    return result;\n}",
    "    var result = [];\n    for(var i=0; i<test_tuple.length; i++){\n        result.push(test_tuple[i][test_tuple[i].length-1]);\n    }\n    return result;\n}",
    "    var result = [];\n    for(var i = 0; i < test_tuple.length; i++){\n        result.push(test_tuple[i][test_tuple[i].length - 1]);\n    }\n    return result;\n}",
    "    var result = [];\n    for(var i=0; i<test_tuple.length; i++){\n        result.push(test_tuple[i][test_tuple[i].length-1]);\n    }\n    return result;\n}",
    "    var result = [];\n    for (var i = 0; i < test_tuple.length; i++){\n        result.push(test_tuple[i][test_tuple[i].length - 1]);\n    }\n    return result;\n}",
    "    var result = [];\n    for(var i=0; i<test_tuple.length; i++){\n        result.push(test_tuple[i][test_tuple[i].length-1]);\n    }\n    return result;\n}",
    "    var result = [];\n    for(var i=0; i<test_tuple.length; i++){\n        result.push(test_tuple[i][test_tuple[i].length-1]);\n    }\n    return result;\n}",
    "    var result = [];\n    for (var i = 0; i < test_tuple.length; i++){\n        result.push(test_tuple[i][test_tuple[i].length - 1]);\n    }\n    return result;\n}",
    "    var result = [];\n    for(var i=0;i<test_tuple.length;i++){\n        var str = test_tuple[i];\n        result.push(str[str.length-1]);\n    }\n    return result;\n}",
    "    var result = [];\n    for(var i=0;i<test_tuple.length;i++){\n        result.push(test_tuple[i][test_tuple[i].length-1]);\n    }\n    return result;\n}",
    "    var result = [];\n    for (var i = 0; i < test_tuple.length; i++){\n        result.push(test_tuple[i][test_tuple[i].length - 1]);\n    }\n    return result;\n}",
    "    var result = [];\n    for (var i = 0; i < test_tuple.length; i++) {\n        result.push(test_tuple[i][test_tuple[i].length - 1]);\n    }\n    return result;\n}",
    "    var result = [];\n    for (var i = 0; i < test_tuple.length; i++) {\n        result.push(test_tuple[i][test_tuple[i].length - 1]);\n    }\n    return result;\n}",
    "    var result = test_tuple.map(function(value){\n        return value[value.length - 1];\n    });\n    return result;\n}",
    "    var result = [];\n    for(var i=0;i<test_tuple.length;i++){\n        result.push(test_tuple[i][test_tuple[i].length-1]);\n    }\n    return result;\n}"
  ]
}