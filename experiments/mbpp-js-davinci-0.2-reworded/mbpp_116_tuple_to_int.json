{
  "name": "mbpp_116_tuple_to_int",
  "language": "js",
  "prompt": "//Write a function to convert a given array of positive integers into a single integer.\nfunction tuple_to_int(nums){\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_116_tuple_to_int.py",
  "prompt_terminology": "reworded",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tuple_to_int;\n  assert.deepEqual(candidate([1, 2, 3]),123);\n  assert.deepEqual(candidate([4, 5, 6]),456);\n  assert.deepEqual(candidate([5, 6, 7]),567);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    return parseInt(nums.join(\"\"));\n}\n",
    "    let result = 0;\n    for(let i = 0; i < nums.length; i++){\n        result = result * 10 + nums[i];\n    }\n    return result;\n}",
    "    var result = 0;\n    for (var i = 0; i < nums.length; i++) {\n        result += nums[i] * Math.pow(10, nums.length - i - 1);\n    }\n    return result;\n}\n",
    "    let result = 0;\n    for(let i = 0; i < nums.length; i++){\n        result += nums[i] * Math.pow(10, nums.length - i - 1);\n    }\n    return result;\n}\n",
    "    var num = 0;\n    for(var i = 0; i < nums.length; i++){\n        num += nums[i] * Math.pow(10, nums.length - i - 1);\n    }\n    return num;\n}\n",
    "    return parseInt(nums.join(''));\n}\n",
    "    return parseInt(nums.join(''));\n}\n",
    "  return parseInt(nums.join(''));\n}\n",
    "  return parseInt(nums.join(''));\n}\n",
    "    return parseInt(nums.join(''));\n}\n",
    "    let res = 0;\n    for(let i = 0; i < nums.length; i++){\n        res += nums[i] * Math.pow(10, nums.length - i - 1);\n    }\n    return res;\n}\n",
    "  var result = 0;\n  for(var i = 0; i < nums.length; i++){\n    result += nums[i] * Math.pow(10, nums.length - i - 1);\n  }\n  return result;\n}\n",
    "    return parseInt(nums.join(''));\n}\n",
    "    return parseInt(nums.join(''));\n}",
    "    return parseInt(nums.join(''));\n}\n",
    "  var sum = 0;\n  for (var i = 0; i < nums.length; i++) {\n    sum += nums[i] * Math.pow(10, nums.length - 1 - i);\n  }\n  return sum;\n}\n",
    "    return parseInt(nums.join(''));\n}\n",
    "  var num = 0;\n  for(var i = 0; i < nums.length; i++){\n    num += nums[i] * Math.pow(10, nums.length - 1 - i);\n  }\n  return num;\n}\n",
    "  var num = 0;\n  for(var i = 0; i < nums.length; i++){\n    num += nums[i] * Math.pow(10, nums.length - i - 1);\n  }\n  return num;\n}\n",
    "    var num = 0;\n    for(var i = 0; i < nums.length; i++){\n        num = num * 10 + nums[i];\n    }\n    return num;\n}\n"
  ]
}