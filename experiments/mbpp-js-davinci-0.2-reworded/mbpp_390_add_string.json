{
  "name": "mbpp_390_add_string",
  "language": "js",
  "prompt": "//Write a function to apply a given format string to all of the elements in an array.\nfunction add_string(list_, string){\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_390_add_string.py",
  "prompt_terminology": "reworded",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_string;\n  assert.deepEqual(candidate([1, 2, 3, 4], \"temp{0}\"),[\"temp1\", \"temp2\", \"temp3\", \"temp4\"]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], \"python{0}\"),[\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"]);\n  assert.deepEqual(candidate([5, 6, 7, 8], \"string{0}\"),[\"string5\", \"string6\", \"string7\", \"string8\"]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    for(var i = 0; i < list_.length; i++){\n        list_[i] = string + list_[i];\n    }\n    return list_;\n}\n",
    "    for(var i = 0; i < list_.length; i++){\n        list_[i] = string + list_[i];\n    }\n    return list_;\n}\n",
    "    var new_list = [];\n    for (var i = 0; i < list_.length; i++){\n        new_list.push(string + list_[i]);\n    }\n    return new_list;\n}\n",
    "    var new_list = [];\n    for(var i = 0; i < list_.length; i++){\n        new_list.push(string + list_[i]);\n    }\n    return new_list;\n}\n",
    "\tvar new_list = [];\n\tfor(var i = 0; i < list_.length; i++){\n\t\tnew_list.push(string + list_[i]);\n\t}\n\treturn new_list;\n}\n",
    "    for(var i = 0; i < list_.length; i++){\n        list_[i] = string + list_[i];\n    }\n    return list_;\n}\n",
    "    for(var i = 0; i < list_.length; i++){\n        list_[i] = string + list_[i];\n    }\n    return list_;\n}\n",
    "    for(var i = 0; i < list_.length; i++){\n        list_[i] = string + list_[i];\n    }\n    return list_;\n}\n",
    "    var new_list = [];\n    for(var i = 0; i < list_.length; i++){\n        new_list.push(string + list_[i]);\n    }\n    return new_list;\n}\n",
    "    var new_list = [];\n    for (var i = 0; i < list_.length; i++){\n        new_list.push(string + list_[i]);\n    }\n    return new_list;\n}\n",
    "\tvar new_list = [];\n\tfor (var i = 0; i < list_.length; i++) {\n\t\tnew_list.push(string + list_[i]);\n\t}\n\treturn new_list;\n}\n",
    "    var new_list = [];\n    for(var i = 0; i < list_.length; i++){\n        new_list.push(string + list_[i]);\n    }\n    return new_list;\n}\n",
    "    var list = list_.slice();\n    for(var i = 0; i < list.length; i++){\n        list[i] = string + list[i];\n    }\n    return list;\n}\n",
    "    for(var i = 0; i < list_.length; i++){\n        list_[i] = string + list_[i];\n    }\n    return list_;\n}\n",
    "    var new_list = [];\n    for (var i = 0; i < list_.length; i++){\n        new_list.push(string + list_[i]);\n    }\n    return new_list;\n}\n",
    "    var new_list = [];\n    for(var i = 0; i < list_.length; i++){\n        new_list.push(string + list_[i]);\n    }\n    return new_list;\n}\n",
    "    for(var i = 0; i < list_.length; i++){\n        list_[i] = string + list_[i];\n    }\n    return list_;\n}\n",
    "    var new_list = [];\n    for(var i = 0; i < list_.length; i++){\n        new_list.push(string + list_[i]);\n    }\n    return new_list;\n}\n",
    "    var new_list = [];\n    for(var i = 0; i < list_.length; i++){\n        new_list.push(list_[i] + string);\n    }\n    return new_list;\n}\n",
    "  var new_list = [];\n  for(var i = 0; i < list_.length; i++){\n    new_list.push(string + list_[i]);\n  }\n  return new_list;\n}\n"
  ]
}