{
  "name": "mbpp_743_rotate_right",
  "language": "js",
  "prompt": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_743_rotate_right.py",
  "prompt_terminology": "reworded",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "results": [
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = [];\n    for(var i = 0; i < m; i++){\n        temp.push(list[list.length - m + i]);\n    }\n    for(var i = list.length - m - 1; i >= 0; i--){\n        list[i + m] = list[i];\n    }\n    for(var i = 0; i < m; i++){\n        list[i] = temp[i];\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.slice(list.length-m, list.length);\n    var temp2 = list.slice(0, list.length-m);\n    return temp.concat(temp2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.slice(list.length - m);\n    list.splice(list.length - m, m);\n    return temp.concat(list);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var n = list.length;\n    var r = m % n;\n    var g = gcd(n,r);\n    for (var i = 0; i < g; i++){\n        var temp = list[i];\n        var j = i;\n        while (true){\n            var k = j + r;\n            if (k >= n)\n                k = k - n;\n            if (k == i)\n                break;\n            list[j] = list[k];\n            j = k;\n        }\n        list[j] = temp;\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "/tmp/tmpge6114ph.js:5\n    var g = gcd(n,r);\n            ^\n\nReferenceError: gcd is not defined\n    at rotate_right (/tmp/tmpge6114ph.js:5:13)\n    at test (/tmp/tmpge6114ph.js:28:20)\n    at Object.<anonymous> (/tmp/tmpge6114ph.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "ReferenceError"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var n = list.length;\n    var temp = [];\n    for(var i = 0; i < m; i++){\n        temp.push(list[n-m+i]);\n    }\n    for(var i = n-1; i >= m; i--){\n        list[i] = list[i-m];\n    }\n    for(var i = 0; i < m; i++){\n        list[i] = temp[i];\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n\tvar new_list = [];\n\tfor(var i = 0; i < list.length; i++){\n\t\tnew_list[(i + m) % list.length] = list[i];\n\t}\n\treturn new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    let temp = list[list.length-1];\n    for(let i = list.length-1; i > 0; i--){\n        list[i] = list[i-1];\n    }\n    list[0] = temp;\n    m--;\n    if(m > 0){\n        rotate_right(list, m);\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list[list.length-1];\n    for(var i = list.length-1; i > 0; i--){\n        list[i] = list[i-1];\n    }\n    list[0] = temp;\n    if(m > 1){\n        return rotate_right(list, m-1);\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.slice(list.length - m, list.length);\n    var temp2 = list.slice(0, list.length - m);\n    return temp.concat(temp2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list[list.length-1];\n    for(var i = list.length-1; i > 0; i--){\n        list[i] = list[i-1];\n    }\n    list[0] = temp;\n    m--;\n    if(m > 0){\n        rotate_right(list, m);\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.slice(list.length-m, list.length);\n    var temp2 = list.slice(0, list.length-m);\n    return temp.concat(temp2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.slice(list.length - m, list.length);\n    var temp2 = list.slice(0, list.length - m);\n    return temp.concat(temp2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = [];\n    for(var i = 0; i < m; i++){\n        temp.push(list[list.length - 1]);\n        list.pop();\n    }\n    for(var i = 0; i < temp.length; i++){\n        list.unshift(temp[i]);\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.slice(list.length-m, list.length);\n    var temp2 = list.slice(0, list.length-m);\n    return temp.concat(temp2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.slice(0, m);\n    var temp2 = list.slice(m, list.length);\n    var result = temp2.concat(temp);\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10,\n  1,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  8,\n  9,\n  10,\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7\n]\n    at test (/tmp/tmputr6y_ll.js:14:10)\n    at Object.<anonymous> (/tmp/tmputr6y_ll.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    4,  5, 6, 7, 8,\n    9, 10, 1, 2, 3\n  ],\n  expected: [\n    8, 9, 10, 1, 2,\n    3, 4,  5, 6, 7\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.slice(list.length-m, list.length);\n    var temp2 = list.slice(0, list.length-m);\n    return temp.concat(temp2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.slice(list.length - m, list.length);\n    var temp2 = list.slice(0, list.length - m);\n    return temp.concat(temp2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var n = list.length;\n    var r = m % n;\n    var temp = [];\n    for(var i = 0; i < r; i++){\n        temp.push(list[i]);\n    }\n    for(var i = r; i < n; i++){\n        list[i-r] = list[i];\n    }\n    for(var i = 0; i < r; i++){\n        list[n-r+i] = temp[i];\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10,\n  1,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  8,\n  9,\n  10,\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7\n]\n    at test (/tmp/tmpeldczah6.js:23:10)\n    at Object.<anonymous> (/tmp/tmpeldczah6.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    4,  5, 6, 7, 8,\n    9, 10, 1, 2, 3\n  ],\n  expected: [\n    8, 9, 10, 1, 2,\n    3, 4,  5, 6, 7\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    for (var i = 0; i < m; i++){\n        list.unshift(list.pop());\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var n = list.length;\n    var temp = list.slice(n-m, n);\n    for(var i = n-1; i>=m; i--){\n        list[i] = list[i-m];\n    }\n    for(var i = 0; i<m; i++){\n        list[i] = temp[i];\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var n = list.length;\n    var r = m % n;\n    var i = 0;\n    var j = n - 1;\n    while(i < j){\n        var temp = list[i];\n        list[i] = list[j];\n        list[j] = temp;\n        i++;\n        j--;\n    }\n    i = 0;\n    j = r - 1;\n    while(i < j){\n        var temp = list[i];\n        list[i] = list[j];\n        list[j] = temp;\n        i++;\n        j--;\n    }\n    i = r;\n    j = n - 1;\n    while(i < j){\n        var temp = list[i];\n        list[i] = list[j];\n        list[j] = temp;\n        i++;\n        j--;\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var n = list.length;\n    var temp = list.slice(n-m, n);\n    var temp2 = list.slice(0, n-m);\n    return temp.concat(temp2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list[list.length-1];\n    for(var i = list.length-1; i > 0; i--){\n        list[i] = list[i-1];\n    }\n    list[0] = temp;\n    m--;\n    if(m > 0){\n        rotate_right(list, m);\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.slice(list.length - m, list.length);\n    var temp2 = list.slice(0, list.length - m);\n    return temp.concat(temp2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var len = list.length;\n    var r = m % len;\n    var result = [];\n    for(var i = 0; i < len; i++){\n        result[i] = list[(i + r) % len];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10,\n  1,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  8,\n  9,\n  10,\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7\n]\n    at test (/tmp/tmpqo0y1x9o.js:17:10)\n    at Object.<anonymous> (/tmp/tmpqo0y1x9o.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    4,  5, 6, 7, 8,\n    9, 10, 1, 2, 3\n  ],\n  expected: [\n    8, 9, 10, 1, 2,\n    3, 4,  5, 6, 7\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.slice(list.length-m, list.length);\n    var temp2 = list.slice(0, list.length-m);\n    return temp.concat(temp2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var new_list = [];\n    for(var i = 0; i < list.length; i++){\n        new_list[(i + m) % list.length] = list[i];\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var len = list.length;\n    var new_list = [];\n    for(var i = 0; i < len; i++){\n        new_list[i] = list[(i + m) % len];\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10,\n  1,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  8,\n  9,\n  10,\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7\n]\n    at test (/tmp/tmp207rmisj.js:16:10)\n    at Object.<anonymous> (/tmp/tmp207rmisj.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    4,  5, 6, 7, 8,\n    9, 10, 1, 2, 3\n  ],\n  expected: [\n    8, 9, 10, 1, 2,\n    3, 4,  5, 6, 7\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.slice(list.length-m);\n    var temp2 = list.slice(0, list.length-m);\n    return temp.concat(temp2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list[list.length - 1];\n    for(var i = list.length - 1; i > 0; i--){\n        list[i] = list[i - 1];\n    }\n    list[0] = temp;\n    m--;\n    if(m > 0){\n        rotate_right(list, m);\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var result = [];\n    var len = list.length;\n    for(var i = 0; i < len; i++){\n        result[(i + m) % len] = list[i];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var n = list.length;\n    var new_list = [];\n    for(var i = 0; i < n; i++){\n        new_list[(i + m) % n] = list[i];\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list[list.length-1];\n    for(var i = list.length-1; i > 0; i--){\n        list[i] = list[i-1];\n    }\n    list[0] = temp;\n    if(m > 1){\n        rotate_right(list, m-1);\n    }\n    return list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var new_list = [];\n    for(var i = 0; i < list.length; i++){\n        new_list[(i + m) % list.length] = list[i];\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    let new_list = [];\n    for(let i = 0; i < list.length; i++){\n        new_list[(i + m) % list.length] = list[i];\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var new_list = [];\n    for(var i = 0; i < list.length; i++){\n        new_list[(i + m) % list.length] = list[i];\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.splice(list.length - m, m);\n    return temp.concat(list);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list[list.length-1];\n    for(var i = list.length-1; i > 0; i--){\n        list[i] = list[i-1];\n    }\n    list[0] = temp;\n    if(m > 1){\n        rotate_right(list, m-1);\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.slice(list.length - m, list.length);\n    var temp2 = list.slice(0, list.length - m);\n    return temp.concat(temp2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.slice(list.length-m, list.length);\n    list.splice(list.length-m, m);\n    list = temp.concat(list);\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var new_list = [];\n    for(var i = 0; i < list.length; i++){\n        new_list[(i + m) % list.length] = list[i];\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var result = [];\n    for(var i = 0; i < list.length; i++){\n        result[(i + m) % list.length] = list[i];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var n = list.length;\n    var temp = list.slice(n-m, n);\n    list.splice(n-m, m);\n    list.splice(0, 0, ...temp);\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    for(var i = 0; i < m; i++){\n        var last = list.pop();\n        list.unshift(last);\n    }\n    return list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var n = list.length;\n    var rot_list = [];\n    for(var i=0; i<n; i++){\n        rot_list[(i+m)%n] = list[i];\n    }\n    return rot_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.slice(list.length - m);\n    var temp2 = list.slice(0, list.length - m);\n    return temp.concat(temp2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var n = list.length;\n    var temp = [];\n    for(var i = 0; i < m; i++){\n        temp.push(list[i]);\n    }\n    for(var i = m; i < n; i++){\n        list[i-m] = list[i];\n    }\n    for(var i = 0; i < m; i++){\n        list[n-m+i] = temp[i];\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10,\n  1,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  8,\n  9,\n  10,\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7\n]\n    at test (/tmp/tmp51i9e1ij.js:22:10)\n    at Object.<anonymous> (/tmp/tmp51i9e1ij.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    4,  5, 6, 7, 8,\n    9, 10, 1, 2, 3\n  ],\n  expected: [\n    8, 9, 10, 1, 2,\n    3, 4,  5, 6, 7\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var new_list = [];\n    for(var i = 0; i < list.length; i++){\n        new_list[(i + m) % list.length] = list[i];\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.slice(0, m);\n    var temp2 = list.slice(m, list.length);\n    var temp3 = temp2.concat(temp);\n    return temp3;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10,\n  1,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  8,\n  9,\n  10,\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7\n]\n    at test (/tmp/tmpn9tldvl8.js:14:10)\n    at Object.<anonymous> (/tmp/tmpn9tldvl8.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    4,  5, 6, 7, 8,\n    9, 10, 1, 2, 3\n  ],\n  expected: [\n    8, 9, 10, 1, 2,\n    3, 4,  5, 6, 7\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var n = list.length;\n    var r = m % n;\n    var i;\n    var temp = [];\n    for(i = 0; i < n; i++){\n        temp[i] = list[(i + r) % n];\n    }\n    for(i = 0; i < n; i++){\n        list[i] = temp[i];\n    }\n    return list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10,\n  1,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  8,\n  9,\n  10,\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7\n]\n    at test (/tmp/tmpajqw05y1.js:20:10)\n    at Object.<anonymous> (/tmp/tmpajqw05y1.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    4,  5, 6, 7, 8,\n    9, 10, 1, 2, 3\n  ],\n  expected: [\n    8, 9, 10, 1, 2,\n    3, 4,  5, 6, 7\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = [];\n    var length = list.length;\n    for(var i = 0; i < m; i++){\n        temp.push(list[length - m + i]);\n    }\n    for(var i = length - 1; i >= m; i--){\n        list[i] = list[i - m];\n    }\n    for(var i = 0; i < m; i++){\n        list[i] = temp[i];\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var new_list = [];\n    for(var i = 0; i < list.length; i++){\n        new_list[(i + m) % list.length] = list[i];\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.slice(list.length - m);\n    list.splice(list.length - m, m);\n    list.unshift(...temp);\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list[list.length - 1];\n    for(var i = list.length - 1; i > 0; i--){\n        list[i] = list[i - 1];\n    }\n    list[0] = temp;\n    m--;\n    if(m > 0){\n        rotate_right(list, m);\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var n = list.length;\n    var r = m % n;\n    var temp = [];\n    for(var i = 0; i < n; i++){\n        temp[i] = list[(i + r) % n];\n    }\n    return temp;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10,\n  1,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  8,\n  9,\n  10,\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7\n]\n    at test (/tmp/tmpcv8hdm9q.js:17:10)\n    at Object.<anonymous> (/tmp/tmpcv8hdm9q.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    4,  5, 6, 7, 8,\n    9, 10, 1, 2, 3\n  ],\n  expected: [\n    8, 9, 10, 1, 2,\n    3, 4,  5, 6, 7\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var n = list.length;\n    var r = m % n;\n    var temp = [];\n    for(var i = 0; i < r; i++){\n        temp[i] = list[n - r + i];\n    }\n    for(var i = n - 1; i >= r; i--){\n        list[i] = list[i - r];\n    }\n    for(var i = 0; i < r; i++){\n        list[i] = temp[i];\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var new_list = [];\n    for (var i = 0; i < list.length; i++){\n        new_list[(i + m) % list.length] = list[i];\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.slice(list.length-m, list.length);\n    var temp2 = list.slice(0, list.length-m);\n    return temp.concat(temp2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var n = list.length;\n    var r = m % n;\n    var temp = list.slice(n-r, n);\n    for(var i = n-1; i >= r; i--){\n        list[i] = list[i-r];\n    }\n    for(var i = 0; i < r; i++){\n        list[i] = temp[i];\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var new_list = [];\n    for(var i = 0; i < list.length; i++){\n        new_list[(i + m) % list.length] = list[i];\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var len = list.length;\n    var new_list = [];\n    for(var i = 0; i < len; i++){\n        new_list[(i + m) % len] = list[i];\n    }\n    return new_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var new_list = [];\n    for(var i = 0; i < list.length; i++){\n        new_list[(i + m) % list.length] = list[i];\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.slice(list.length-m, list.length);\n    list.splice(list.length-m, m);\n    list.splice(0, 0, ...temp);\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.slice(0, m);\n    var temp2 = list.slice(m, list.length);\n    return temp2.concat(temp);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10,\n  1,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  8,\n  9,\n  10,\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7\n]\n    at test (/tmp/tmpc_fp9snw.js:13:10)\n    at Object.<anonymous> (/tmp/tmpc_fp9snw.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    4,  5, 6, 7, 8,\n    9, 10, 1, 2, 3\n  ],\n  expected: [\n    8, 9, 10, 1, 2,\n    3, 4,  5, 6, 7\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.slice(list.length-m, list.length);\n    for(var i = list.length-1; i >= 0; i--){\n        if(i >= m){\n            list[i] = list[i-m];\n        }\n        else{\n            list[i] = temp[i];\n        }\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.slice(list.length-m, list.length);\n    var temp2 = list.slice(0, list.length-m);\n    return temp.concat(temp2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var n = list.length;\n    var temp = list.slice(n-m, n);\n    var temp2 = list.slice(0, n-m);\n    return temp.concat(temp2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var n = list.length;\n    var temp = list.slice(n-m, n);\n    var temp2 = list.slice(0, n-m);\n    return temp.concat(temp2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var n = list.length;\n    var r = m % n;\n    var g = gcd(n, r);\n    for (var i = 0; i < g; i++) {\n        var temp = list[i];\n        var j = i;\n        while (true) {\n            var k = j + r;\n            if (k >= n) {\n                k = k - n;\n            }\n            if (k == i) {\n                break;\n            }\n            list[j] = list[k];\n            j = k;\n        }\n        list[j] = temp;\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "/tmp/tmp39k3f930.js:5\n    var g = gcd(n, r);\n            ^\n\nReferenceError: gcd is not defined\n    at rotate_right (/tmp/tmp39k3f930.js:5:13)\n    at test (/tmp/tmp39k3f930.js:30:20)\n    at Object.<anonymous> (/tmp/tmp39k3f930.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "ReferenceError"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var new_list = [];\n    for(var i=0; i<list.length; i++){\n        new_list[(i+m)%list.length] = list[i];\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.slice(list.length - m);\n    list.splice(list.length - m, m);\n    return temp.concat(list);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = [];\n    for(var i = 0; i < m; i++){\n        temp.push(list[list.length - 1]);\n        list.pop();\n    }\n    for(var i = 0; i < temp.length; i++){\n        list.unshift(temp[i]);\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var len = list.length;\n    var temp = [];\n    for(var i = 0; i < m; i++){\n        temp.push(list[len - m + i]);\n    }\n    for(var i = len - 1; i >= m; i--){\n        list[i] = list[i - m];\n    }\n    for(var i = 0; i < m; i++){\n        list[i] = temp[i];\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var new_list = [];\n    for(var i = 0; i < list.length; i++){\n        new_list[(i + m) % list.length] = list[i];\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list[list.length-1];\n    for(var i = list.length-1; i > 0; i--){\n        list[i] = list[i-1];\n    }\n    list[0] = temp;\n    m--;\n    if(m > 0){\n        rotate_right(list, m);\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var n = list.length;\n    var gcd = function(a, b){\n        if(b == 0)\n            return a;\n        else\n            return gcd(b, a % b);\n    }\n    var d = gcd(n, m);\n    for(var i = 0; i < d; i++){\n        var temp = list[n - 1 - i];\n        var j = n - 1 - i;\n        while(true){\n            var k = j - m;\n            if(k < 0)\n                k = k + n;\n            if(k == n - 1 - i)\n                break;\n            list[j] = list[k];\n            j = k;\n        }\n        list[j] = temp;\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.slice(list.length-m);\n    var temp2 = list.slice(0, list.length-m);\n    return temp.concat(temp2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var n = list.length;\n    var new_list = [];\n    for(var i = 0; i < n; i++){\n        new_list[(i + m) % n] = list[i];\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.slice(list.length-m, list.length);\n    for(var i = list.length-1; i >= 0; i--){\n        if(i-m >= 0){\n            list[i] = list[i-m];\n        }\n        else{\n            list[i] = temp[i];\n        }\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n  var temp = list.slice(list.length - m, list.length);\n  var temp2 = list.slice(0, list.length - m);\n  return temp.concat(temp2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var n = list.length;\n    var r = m % n;\n    var temp = [];\n    for(var i = 0; i < r; i++){\n        temp[i] = list[n - r + i];\n    }\n    for(var i = n - 1; i >= r; i--){\n        list[i] = list[i - r];\n    }\n    for(var i = 0; i < r; i++){\n        list[i] = temp[i];\n    }\n    return list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var n = list.length;\n    var r = m % n;\n    var temp = [];\n    for(var i = 0; i < n; i++){\n        temp[(i + r) % n] = list[i];\n    }\n    return temp;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var n = list.length;\n    var r = m % n;\n    var temp = [];\n    for (var i = 0; i < r; i++){\n        temp.push(list[i]);\n    }\n    for (var i = r; i < n; i++){\n        list[i - r] = list[i];\n    }\n    for (var i = 0; i < r; i++){\n        list[n - r + i] = temp[i];\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10,\n  1,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  8,\n  9,\n  10,\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7\n]\n    at test (/tmp/tmpclsnv1wh.js:23:10)\n    at Object.<anonymous> (/tmp/tmpclsnv1wh.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    4,  5, 6, 7, 8,\n    9, 10, 1, 2, 3\n  ],\n  expected: [\n    8, 9, 10, 1, 2,\n    3, 4,  5, 6, 7\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var new_list = [];\n    for(var i = 0; i < list.length; i++){\n        new_list[(i + m) % list.length] = list[i];\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var new_list = [];\n    for(var i = 0; i < list.length; i++){\n        new_list[(i + m) % list.length] = list[i];\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.slice(list.length-m, list.length);\n    var temp2 = list.slice(0, list.length-m);\n    return temp.concat(temp2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var result = [];\n    for(var i = 0; i < list.length; i++){\n        result[(i + m) % list.length] = list[i];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.slice(list.length - m, list.length);\n    var temp2 = list.slice(0, list.length - m);\n    return temp.concat(temp2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var n = list.length;\n    var gcd = gcd_two_numbers(n, m);\n    for(var i = 0; i < gcd; i++){\n        var temp = list[n-1];\n        for(var j = n-1; j > 0; j--){\n            list[j] = list[j-1];\n        }\n        list[0] = temp;\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "/tmp/tmpz530x4nq.js:4\n    var gcd = gcd_two_numbers(n, m);\n              ^\n\nReferenceError: gcd_two_numbers is not defined\n    at rotate_right (/tmp/tmpz530x4nq.js:4:15)\n    at test (/tmp/tmpz530x4nq.js:20:20)\n    at Object.<anonymous> (/tmp/tmpz530x4nq.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "ReferenceError"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.slice(list.length - m);\n    var temp2 = list.slice(0, list.length - m);\n    return temp.concat(temp2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.slice(list.length - m);\n    var temp2 = list.slice(0, list.length - m);\n    return temp.concat(temp2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var i = 0;\n    while(i < m){\n        var temp = list.pop();\n        list.unshift(temp);\n        i++;\n    }\n    return list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list[list.length-1];\n    for(var i = list.length-1; i > 0; i--){\n        list[i] = list[i-1];\n    }\n    list[0] = temp;\n    if(m > 1){\n        rotate_right(list, m-1);\n    }\n    return list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list[list.length-1];\n    for(var i = list.length-1; i > 0; i--){\n        list[i] = list[i-1];\n    }\n    list[0] = temp;\n    m--;\n    if(m > 0){\n        rotate_right(list, m);\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var n = list.length;\n    var temp = [];\n    for(var i = 0; i < m; i++){\n        temp.push(list[n-m+i]);\n    }\n    for(var i = 0; i < n-m; i++){\n        temp.push(list[i]);\n    }\n    return temp;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.slice(list.length-m, list.length);\n    var temp2 = list.slice(0, list.length-m);\n    return temp.concat(temp2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    for (var i = 0; i < m; i++){\n        var temp = list[list.length - 1];\n        for (var j = list.length - 1; j > 0; j--){\n            list[j] = list[j - 1];\n        }\n        list[0] = temp;\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var n = list.length;\n    var temp = [];\n    for(var i = 0; i < m; i++){\n        temp.push(list[i]);\n    }\n    for(var i = m; i < n; i++){\n        list[i - m] = list[i];\n    }\n    for(var i = 0; i < m; i++){\n        list[n - m + i] = temp[i];\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10,\n  1,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  8,\n  9,\n  10,\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7\n]\n    at test (/tmp/tmp9u2ybngb.js:22:10)\n    at Object.<anonymous> (/tmp/tmp9u2ybngb.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    4,  5, 6, 7, 8,\n    9, 10, 1, 2, 3\n  ],\n  expected: [\n    8, 9, 10, 1, 2,\n    3, 4,  5, 6, 7\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var n = list.length;\n    var r = m%n;\n    var result = [];\n    for(var i = 0; i<n; i++){\n        result[i] = list[(i+r)%n];\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10,\n  1,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  8,\n  9,\n  10,\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7\n]\n    at test (/tmp/tmpu0pfstod.js:16:10)\n    at Object.<anonymous> (/tmp/tmpu0pfstod.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    4,  5, 6, 7, 8,\n    9, 10, 1, 2, 3\n  ],\n  expected: [\n    8, 9, 10, 1, 2,\n    3, 4,  5, 6, 7\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    for(var i = 0; i < m; i++){\n        list.unshift(list.pop());\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var n = list.length;\n    var temp = list.slice(n-m, n);\n    var temp2 = list.slice(0, n-m);\n    return temp.concat(temp2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.slice(list.length-m, list.length);\n    var temp2 = list.slice(0, list.length-m);\n    return temp.concat(temp2);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var n = list.length;\n    var result = [];\n    for (var i = 0; i < n; i++){\n        result[(i + m) % n] = list[i];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n\tvar temp = [];\n\tfor(var i = 0; i < m; i++){\n\t\ttemp.push(list[i]);\n\t}\n\tfor(var i = m; i < list.length; i++){\n\t\tlist[i-m] = list[i];\n\t}\n\tfor(var i = 0; i < temp.length; i++){\n\t\tlist[list.length-m+i] = temp[i];\n\t}\n\treturn list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10,\n  1,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  8,\n  9,\n  10,\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7\n]\n    at test (/tmp/tmp3j733bqx.js:21:10)\n    at Object.<anonymous> (/tmp/tmp3j733bqx.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    4,  5, 6, 7, 8,\n    9, 10, 1, 2, 3\n  ],\n  expected: [\n    8, 9, 10, 1, 2,\n    3, 4,  5, 6, 7\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var len = list.length;\n    var temp = [];\n    for(var i = 0; i < m; i++){\n        temp.push(list[len - m + i]);\n    }\n    for(var i = len - m - 1; i >= 0; i--){\n        list[i + m] = list[i];\n    }\n    for(var i = 0; i < m; i++){\n        list[i] = temp[i];\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var len = list.length;\n    var temp = list.slice(len - m, len);\n    var temp2 = list.slice(0, len - m);\n    return temp.concat(temp2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var new_list = [];\n    for(var i = 0; i < list.length; i++){\n        new_list[(i + m) % list.length] = list[i];\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list[list.length-1];\n    for(var i = list.length-1; i > 0; i--){\n        list[i] = list[i-1];\n    }\n    list[0] = temp;\n    if(m > 1){\n        rotate_right(list, m-1);\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var n = list.length;\n    var temp = list.slice(n-m, n);\n    var temp2 = list.slice(0, n-m);\n    return temp.concat(temp2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.slice(list.length-m, list.length);\n    list.splice(list.length-m, m);\n    list.splice(0, 0, ...temp);\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var n = list.length;\n    var r = m % n;\n    var temp = [];\n    for(var i = 0; i < r; i++){\n        temp.push(list[i]);\n    }\n    for(var i = 0; i < n - r; i++){\n        list[i] = list[i + r];\n    }\n    for(var i = n - r; i < n; i++){\n        list[i] = temp[i - n + r];\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10,\n  1,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  8,\n  9,\n  10,\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7\n]\n    at test (/tmp/tmpot6ilz8r.js:23:10)\n    at Object.<anonymous> (/tmp/tmpot6ilz8r.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    4,  5, 6, 7, 8,\n    9, 10, 1, 2, 3\n  ],\n  expected: [\n    8, 9, 10, 1, 2,\n    3, 4,  5, 6, 7\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.slice(list.length-m, list.length);\n    for(var i = list.length-1; i >= 0; i--){\n        if(i-m >= 0){\n            list[i] = list[i-m];\n        }\n        else{\n            list[i] = temp[i];\n        }\n    }\n    return list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.slice(list.length - m, list.length);\n    var temp2 = list.slice(0, list.length - m);\n    return temp.concat(temp2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var n = list.length;\n    var temp = list.slice(n-m, n);\n    var temp2 = list.slice(0, n-m);\n    return temp.concat(temp2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var i, j, k, temp;\n    for (i = 0; i < m; i++) {\n        temp = list[list.length - 1];\n        for (j = list.length - 1; j > 0; j--) {\n            list[j] = list[j - 1];\n        }\n        list[0] = temp;\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var len = list.length;\n    var new_list = [];\n    for(var i = 0; i < len; i++){\n        new_list[(i + m) % len] = list[i];\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.slice(list.length-m, list.length);\n    var temp2 = list.slice(0, list.length-m);\n    return temp.concat(temp2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var new_list = [];\n    for(var i = 0; i < list.length; i++){\n        new_list[(i + m) % list.length] = list[i];\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var i;\n    var j;\n    var k;\n    var temp;\n    var n = list.length;\n    for (i = 0; i < gcd(m, n); i++){\n        temp = list[i];\n        j = i;\n        while (true){\n            k = j + m;\n            if (k >= n)\n                k = k - n;\n            if (k == i)\n                break;\n            list[j] = list[k];\n            j = k;\n        }\n        list[j] = temp;\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "/tmp/tmpry0ofagq.js:8\n    for (i = 0; i < gcd(m, n); i++){\n                  ^\n\nReferenceError: gcd is not defined\n    at rotate_right (/tmp/tmpry0ofagq.js:8:19)\n    at test (/tmp/tmpry0ofagq.js:30:20)\n    at Object.<anonymous> (/tmp/tmpry0ofagq.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "ReferenceError"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var new_list = [];\n    var len = list.length;\n    for(var i = 0; i < len; i++){\n        new_list[(i + m) % len] = list[i];\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list[list.length - 1];\n    for(var i = list.length - 1; i > 0; i--){\n        list[i] = list[i - 1];\n    }\n    list[0] = temp;\n    if(m > 1){\n        rotate_right(list, m - 1);\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var n = list.length;\n    var r = m % n;\n    var temp = list.slice(n-r, n);\n    for(var i = n-1; i >= r; i--){\n        list[i] = list[i-r];\n    }\n    for(var i = 0; i < r; i++){\n        list[i] = temp[i];\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var n = list.length;\n    var temp = list.slice(n-m, n);\n    list.splice(n-m, m);\n    list = temp.concat(list);\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = [];\n    for(var i = 0; i < m; i++){\n        temp.push(list[i]);\n    }\n    for(var i = 0; i < list.length - m; i++){\n        list[i] = list[i + m];\n    }\n    for(var i = 0; i < m; i++){\n        list[list.length - m + i] = temp[i];\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10,\n  1,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  8,\n  9,\n  10,\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7\n]\n    at test (/tmp/tmp0nss1yo_.js:21:10)\n    at Object.<anonymous> (/tmp/tmp0nss1yo_.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    4,  5, 6, 7, 8,\n    9, 10, 1, 2, 3\n  ],\n  expected: [\n    8, 9, 10, 1, 2,\n    3, 4,  5, 6, 7\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var result = [];\n    for(var i = 0; i < list.length; i++){\n        result[(i + m) % list.length] = list[i];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var new_list = [];\n    for(var i = 0; i < list.length; i++){\n        new_list[(i + m) % list.length] = list[i];\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var n = list.length;\n    var temp = [];\n    for(var i=0; i<m; i++){\n        temp[i] = list[n-m+i];\n    }\n    for(var i=n-1; i>=m; i--){\n        list[i] = list[i-m];\n    }\n    for(var i=0; i<m; i++){\n        list[i] = temp[i];\n    }\n    return list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var n = list.length;\n    var new_list = [];\n    for(var i=0; i<n; i++){\n        new_list[(i+m)%n] = list[i];\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var n = list.length;\n    var r = m % n;\n    var temp = [];\n    for(var i = 0; i < n; i++){\n        temp[i] = list[(i + r) % n];\n    }\n    return temp;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10,\n  1,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  8,\n  9,\n  10,\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7\n]\n    at test (/tmp/tmpcv8hdm9q.js:17:10)\n    at Object.<anonymous> (/tmp/tmpcv8hdm9q.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    4,  5, 6, 7, 8,\n    9, 10, 1, 2, 3\n  ],\n  expected: [\n    8, 9, 10, 1, 2,\n    3, 4,  5, 6, 7\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var list_length = list.length;\n    var new_list = [];\n    for(var i = 0; i < list_length; i++){\n        new_list[(i + m) % list_length] = list[i];\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.slice(list.length - m, list.length);\n    var temp2 = list.slice(0, list.length - m);\n    return temp.concat(temp2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var n = list.length;\n    var r = m % n;\n    var new_list = [];\n    for(var i = 0; i < n; i++){\n        new_list[i] = list[(i + r) % n];\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10,\n  1,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  8,\n  9,\n  10,\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7\n]\n    at test (/tmp/tmpjuopt4b9.js:17:10)\n    at Object.<anonymous> (/tmp/tmpjuopt4b9.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    4,  5, 6, 7, 8,\n    9, 10, 1, 2, 3\n  ],\n  expected: [\n    8, 9, 10, 1, 2,\n    3, 4,  5, 6, 7\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.slice(list.length-m, list.length);\n    list.splice(list.length-m, m);\n    list = temp.concat(list);\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var n = list.length;\n    var r = m % n;\n    var temp = list.slice(n-r, n);\n    for (var i = n-1; i >= r; i--){\n        list[i] = list[i-r];\n    }\n    for (var i = 0; i < r; i++){\n        list[i] = temp[i];\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.slice(list.length - m, list.length);\n    var temp2 = list.slice(0, list.length - m);\n    return temp.concat(temp2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var len = list.length;\n    var temp = list.slice(len-m, len);\n    list.splice(len-m, m);\n    list.unshift(...temp);\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.slice(list.length - m, list.length);\n    var temp2 = list.slice(0, list.length - m);\n    return temp.concat(temp2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.slice(list.length - m, list.length);\n    var temp2 = list.slice(0, list.length - m);\n    return temp.concat(temp2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.slice(list.length - m, list.length);\n    var temp2 = list.slice(0, list.length - m);\n    return temp.concat(temp2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    for(var i = 0; i < m; i++){\n        var last = list[list.length - 1];\n        for(var j = list.length - 1; j > 0; j--){\n            list[j] = list[j - 1];\n        }\n        list[0] = last;\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.slice(list.length-m, list.length);\n    var temp2 = list.slice(0, list.length-m);\n    return temp.concat(temp2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.slice(list.length - m);\n    var temp2 = list.slice(0, list.length - m);\n    return temp.concat(temp2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var n = list.length;\n    var temp = [];\n    for(var i = 0; i < m; i++){\n        temp[i] = list[n-m+i];\n    }\n    for(var i = n-1; i >= m; i--){\n        list[i] = list[i-m];\n    }\n    for(var i = 0; i < m; i++){\n        list[i] = temp[i];\n    }\n    return list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var new_list = [];\n    for(var i = 0; i < list.length; i++){\n        new_list[(i + m) % list.length] = list[i];\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var new_list = [];\n    for (var i = 0; i < list.length; i++){\n        new_list[(i+m)%list.length] = list[i];\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list[list.length-1];\n    for(var i = list.length-1; i > 0; i--){\n        list[i] = list[i-1];\n    }\n    list[0] = temp;\n    m--;\n    if(m > 0){\n        rotate_right(list, m);\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var n = list.length;\n    var r = m % n;\n    var temp = list.slice(n - r, n);\n    for(var i = n - 1; i >= r; i--){\n        list[i] = list[i - r];\n    }\n    for(var i = 0; i < r; i++){\n        list[i] = temp[i];\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var new_list = [];\n    for(var i = 0; i < list.length; i++){\n        new_list[(i + m) % list.length] = list[i];\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.slice(0, m);\n    var temp2 = list.slice(m, list.length);\n    var temp3 = temp2.concat(temp);\n    return temp3;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10,\n  1,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  8,\n  9,\n  10,\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7\n]\n    at test (/tmp/tmpn9tldvl8.js:14:10)\n    at Object.<anonymous> (/tmp/tmpn9tldvl8.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    4,  5, 6, 7, 8,\n    9, 10, 1, 2, 3\n  ],\n  expected: [\n    8, 9, 10, 1, 2,\n    3, 4,  5, 6, 7\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.slice(list.length-m);\n    for(var i=list.length-1; i>=m; i--){\n        list[i] = list[i-m];\n    }\n    for(var i=0; i<m; i++){\n        list[i] = temp[i];\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.slice(0, m);\n    var new_list = list.slice(m, list.length);\n    return new_list.concat(temp);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10,\n  1,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  8,\n  9,\n  10,\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7\n]\n    at test (/tmp/tmppzlbsk89.js:13:10)\n    at Object.<anonymous> (/tmp/tmppzlbsk89.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    4,  5, 6, 7, 8,\n    9, 10, 1, 2, 3\n  ],\n  expected: [\n    8, 9, 10, 1, 2,\n    3, 4,  5, 6, 7\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.slice(list.length - m);\n    var temp2 = list.slice(0, list.length - m);\n    return temp.concat(temp2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.slice(list.length - m, list.length);\n    var temp2 = list.slice(0, list.length - m);\n    return temp.concat(temp2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    for(var i = 0; i < m; i++){\n        list.unshift(list.pop());\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var len = list.length;\n    var new_list = [];\n    for(var i=0; i<len; i++){\n        new_list[i] = list[(i+m)%len];\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10,\n  1,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  8,\n  9,\n  10,\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7\n]\n    at test (/tmp/tmphb74l1xv.js:16:10)\n    at Object.<anonymous> (/tmp/tmphb74l1xv.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    4,  5, 6, 7, 8,\n    9, 10, 1, 2, 3\n  ],\n  expected: [\n    8, 9, 10, 1, 2,\n    3, 4,  5, 6, 7\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var n = list.length;\n    var r = m % n;\n    var temp = list.slice(n-r, n);\n    for(var i = n-1; i >= r; i--){\n        list[i] = list[i-r];\n    }\n    for(var i = 0; i < r; i++){\n        list[i] = temp[i];\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var new_list = [];\n    for (var i = 0; i < list.length; i++){\n        new_list[(i + m) % list.length] = list[i];\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var n = list.length;\n    var temp = list.slice(n-m, n);\n    var temp2 = list.slice(0, n-m);\n    return temp.concat(temp2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    for(var i = 0; i < m; i++){\n        list.unshift(list.pop());\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.slice(list.length-m, list.length);\n    var temp2 = list.slice(0, list.length-m);\n    return temp.concat(temp2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var n = list.length;\n    var r = m % n;\n    var temp = list.slice(n-r, n);\n    var temp2 = list.slice(0, n-r);\n    return temp.concat(temp2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.slice(list.length - m, list.length);\n    var temp2 = list.slice(0, list.length - m);\n    return temp.concat(temp2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.slice(list.length-m, list.length);\n    var temp2 = list.slice(0, list.length-m);\n    return temp.concat(temp2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var n = list.length;\n    var temp = list.slice(n-m, n);\n    for(var i=n-1; i>=m; i--){\n        list[i] = list[i-m];\n    }\n    for(var i=0; i<m; i++){\n        list[i] = temp[i];\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = [];\n    for(var i = 0; i < m; i++){\n        temp.push(list.pop());\n    }\n    for(var i = 0; i < m; i++){\n        list.unshift(temp[i]);\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    for(let i = 0; i < m; i++){\n        let last = list.pop();\n        list.unshift(last);\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var n = list.length;\n    var temp = [];\n    for(var i = 0; i < m; i++){\n        temp.push(list[i]);\n    }\n    for(var i = 0; i < n-m; i++){\n        list[i] = list[i+m];\n    }\n    for(var i = 0; i < m; i++){\n        list[n-m+i] = temp[i];\n    }\n    return list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10,\n  1,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  8,\n  9,\n  10,\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7\n]\n    at test (/tmp/tmpme5cybgl.js:21:10)\n    at Object.<anonymous> (/tmp/tmpme5cybgl.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    4,  5, 6, 7, 8,\n    9, 10, 1, 2, 3\n  ],\n  expected: [\n    8, 9, 10, 1, 2,\n    3, 4,  5, 6, 7\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.slice(list.length-m, list.length);\n    var temp2 = list.slice(0, list.length-m);\n    return temp.concat(temp2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var new_list = [];\n    for(var i = 0; i < list.length; i++){\n        new_list[(i + m) % list.length] = list[i];\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var n = list.length;\n    var temp = list.slice(n-m, n);\n    for(var i = n-1; i >= m; i--){\n        list[i] = list[i-m];\n    }\n    for(var i = 0; i < m; i++){\n        list[i] = temp[i];\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var new_list = [];\n    for(var i=0; i<list.length; i++){\n        new_list[(i+m)%list.length] = list[i];\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = [];\n    for(var i = 0; i < m; i++){\n        temp.push(list[list.length - 1]);\n        list.pop();\n    }\n    for(var i = temp.length - 1; i >= 0; i--){\n        list.unshift(temp[i]);\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  10,\n  9,\n  8,\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7\n]\n\nshould loosely deep-equal\n\n[\n  8,\n  9,\n  10,\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7\n]\n    at test (/tmp/tmpoo1fecyh.js:19:10)\n    at Object.<anonymous> (/tmp/tmpoo1fecyh.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    10, 9, 8, 1, 2,\n     3, 4, 5, 6, 7\n  ],\n  expected: [\n    8, 9, 10, 1, 2,\n    3, 4,  5, 6, 7\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.slice(list.length-m, list.length);\n    var temp2 = list.slice(0, list.length-m);\n    return temp.concat(temp2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.slice(list.length-m, list.length);\n    for(var i = list.length-1; i >= m; i--){\n        list[i] = list[i-m];\n    }\n    for(var i = 0; i < m; i++){\n        list[i] = temp[i];\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    return list.slice(list.length - m).concat(list.slice(0, list.length - m));\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.slice(0, m);\n    var temp2 = list.slice(m, list.length);\n    return temp2.concat(temp);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10,\n  1,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  8,\n  9,\n  10,\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7\n]\n    at test (/tmp/tmpc_fp9snw.js:13:10)\n    at Object.<anonymous> (/tmp/tmpc_fp9snw.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    4,  5, 6, 7, 8,\n    9, 10, 1, 2, 3\n  ],\n  expected: [\n    8, 9, 10, 1, 2,\n    3, 4,  5, 6, 7\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.slice(list.length-m, list.length);\n    var temp2 = list.slice(0, list.length-m);\n    return temp.concat(temp2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var len = list.length;\n    var r = m % len;\n    var temp = list.slice(len - r, len);\n    var temp2 = list.slice(0, len - r);\n    return temp.concat(temp2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var n = list.length;\n    var r = m % n;\n    var temp = [];\n    for (var i = 0; i < n; i++){\n        temp[i] = list[(i + r) % n];\n    }\n    return temp;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10,\n  1,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  8,\n  9,\n  10,\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7\n]\n    at test (/tmp/tmpkk6q0zjr.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkk6q0zjr.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    4,  5, 6, 7, 8,\n    9, 10, 1, 2, 3\n  ],\n  expected: [\n    8, 9, 10, 1, 2,\n    3, 4,  5, 6, 7\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var n = list.length;\n    var r = m % n;\n    var temp = list.slice(n-r, n);\n    var temp2 = list.slice(0, n-r);\n    return temp.concat(temp2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list[list.length-1];\n    for(var i = list.length-1; i > 0; i--){\n        list[i] = list[i-1];\n    }\n    list[0] = temp;\n    if(m > 1){\n        rotate_right(list, m-1);\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list[list.length-1];\n    for(var i=list.length-1; i>0; i--){\n        list[i] = list[i-1];\n    }\n    list[0] = temp;\n    m--;\n    if(m>0){\n        rotate_right(list, m);\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list[list.length-1];\n    for(var i = list.length-1; i > 0; i--){\n        list[i] = list[i-1];\n    }\n    list[0] = temp;\n    m--;\n    if(m > 0){\n        rotate_right(list, m);\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n  var n = list.length;\n  var gcd = gcd_of_two_numbers(n, m);\n  for(var i = 0; i < gcd; i++){\n    var temp = list[n - 1];\n    for(var j = n - 1; j > 0; j--){\n      list[j] = list[j - 1];\n    }\n    list[0] = temp;\n  }\n  return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "/tmp/tmpu4z5vs_l.js:4\n  var gcd = gcd_of_two_numbers(n, m);\n            ^\n\nReferenceError: gcd_of_two_numbers is not defined\n    at rotate_right (/tmp/tmpu4z5vs_l.js:4:13)\n    at test (/tmp/tmpu4z5vs_l.js:20:20)\n    at Object.<anonymous> (/tmp/tmpu4z5vs_l.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "ReferenceError"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var n = list.length;\n    var r = m % n;\n    var temp = [];\n    for(var i = 0; i < n; i++){\n        temp[i] = list[(i + r) % n];\n    }\n    return temp;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10,\n  1,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  8,\n  9,\n  10,\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7\n]\n    at test (/tmp/tmpcv8hdm9q.js:17:10)\n    at Object.<anonymous> (/tmp/tmpcv8hdm9q.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    4,  5, 6, 7, 8,\n    9, 10, 1, 2, 3\n  ],\n  expected: [\n    8, 9, 10, 1, 2,\n    3, 4,  5, 6, 7\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var new_list = [];\n    for(var i=0; i<list.length; i++){\n        new_list[(i+m)%list.length] = list[i];\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var n = list.length;\n    var temp = list.slice(n-m, n);\n    list.splice(n-m, m);\n    list.unshift(...temp);\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.slice(list.length-m, list.length);\n    var temp2 = list.slice(0, list.length-m);\n    return temp.concat(temp2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.slice(list.length-m, list.length);\n    var temp2 = list.slice(0, list.length-m);\n    return temp.concat(temp2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.slice(list.length-m, list.length);\n    var temp2 = list.slice(0, list.length-m);\n    return temp.concat(temp2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1665509987,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var new_list = [];\n    for(var i = 0; i < list.length; i++){\n        new_list[(i + m) % list.length] = list[i];\n    }\n    return new_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var n = list.length;\n    var r = m % n;\n    var temp = list.slice(n-r, n);\n    for(var i=n-1; i>=r; i--){\n        list[i] = list[i-r];\n    }\n    for(var i=0; i<r; i++){\n        list[i] = temp[i];\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var n = list.length;\n    var r = m % n;\n    var temp = list.slice(n-r, n);\n    var temp2 = list.slice(0, n-r);\n    return temp.concat(temp2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list[list.length-1];\n    for(var i = list.length-1; i > 0; i--){\n        list[i] = list[i-1];\n    }\n    list[0] = temp;\n    if(m > 1){\n        rotate_right(list, m-1);\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.slice(list.length - m);\n    list.splice(list.length - m, m);\n    return temp.concat(list);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var temp = list.slice(list.length-m, list.length)\n    var temp2 = list.slice(0, list.length-m)\n    return temp.concat(temp2)\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var tmp = list.slice(list.length-m, list.length);\n    for(var i = list.length-1; i>=m; i--){\n        list[i] = list[i-m];\n    }\n    for(var i = 0; i<m; i++){\n        list[i] = tmp[i];\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var len = list.length;\n    var new_list = [];\n    for(var i = 0; i < len; i++){\n        new_list[(i + m) % len] = list[i];\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var len = list.length;\n    var new_list = [];\n    for(var i = 0; i < len; i++){\n        new_list[(i + m) % len] = list[i];\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/\nfunction rotate_right(list, m){\n    var new_list = [];\n    for(var i = 0; i < list.length; i++){\n        new_list[(i + m) % list.length] = list[i];\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rotate_right;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}