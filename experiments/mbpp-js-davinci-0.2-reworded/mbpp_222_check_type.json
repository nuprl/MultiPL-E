{
  "name": "mbpp_222_check_type",
  "language": "js",
  "prompt": "//Write a function to check if all the elements in array have same data type or not.\nfunction check_type(test_tuple){\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_222_check_type.py",
  "prompt_terminology": "reworded",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_type;\n  assert.deepEqual(candidate([5, 6, 7, 3, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, \"4\"]),false);\n  assert.deepEqual(candidate([3, 2, 1, 4, 5]),true);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    var first_element = test_tuple[0];\n    var flag = true;\n    for(var i=1; i<test_tuple.length; i++){\n        if(typeof(first_element) != typeof(test_tuple[i])){\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}",
    "    var type = typeof test_tuple[0];\n    for(var i = 1; i < test_tuple.length; i++)\n    {\n        if (typeof test_tuple[i] != type)\n            return false;\n    }\n    return true;\n}",
    "    var first_type = typeof test_tuple[0];\n    for(var i=1; i<test_tuple.length; i++){\n        if(typeof test_tuple[i] != first_type){\n            return false;\n        }\n    }\n    return true;\n}",
    "    var first_element = test_tuple[0];\n    var flag = true;\n    for(var i = 1; i < test_tuple.length; i++){\n        if(typeof(first_element) != typeof(test_tuple[i])){\n            flag = false;\n            break;\n        }\n    }\n    if(flag == true){\n        console.log(\"All elements have same data type\");\n    }\n    else{\n        console.log(\"All elements do not have same data type\");\n    }\n}\ncheck_type([1,2,3,4,5]);\ncheck_type([1,2,3,\"4\",5]);\n",
    "    var first_element = test_tuple[0];\n    for(var i = 1; i < test_tuple.length; i++){\n        if(typeof(first_element) != typeof(test_tuple[i])){\n            return false;\n        }\n    }\n    return true;\n}",
    "    var first_element = test_tuple[0];\n    for(var i = 1; i < test_tuple.length; i++){\n        if(typeof(first_element) != typeof(test_tuple[i])){\n            return false;\n        }\n    }\n    return true;\n}\n",
    "    var first_type = typeof(test_tuple[0]);\n    for(var i=1; i<test_tuple.length; i++){\n        if(typeof(test_tuple[i]) != first_type){\n            return false;\n        }\n    }\n    return true;\n}\n",
    "    var first_type = typeof test_tuple[0];\n    for (var i = 1; i < test_tuple.length; i++) {\n        if (typeof test_tuple[i] != first_type) {\n            return false;\n        }\n    }\n    return true;\n}\n",
    "    var first_type = typeof(test_tuple[0]);\n    for(var i=1; i<test_tuple.length; i++){\n        if(typeof(test_tuple[i]) != first_type){\n            return false;\n        }\n    }\n    return true;\n}",
    "    var first_element = test_tuple[0];\n    var flag = true;\n    for(var i = 1; i < test_tuple.length; i++){\n        if(typeof(first_element) != typeof(test_tuple[i])){\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}",
    "    var first_type = typeof test_tuple[0];\n    for(var i = 1; i < test_tuple.length; i++){\n        if(typeof test_tuple[i] != first_type){\n            return false;\n        }\n    }\n    return true;\n}\n",
    "    var first_element = test_tuple[0];\n    var flag = true;\n    for(var i = 1; i < test_tuple.length; i++){\n        if(typeof(first_element) != typeof(test_tuple[i])){\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n",
    "    var first_type = typeof(test_tuple[0]);\n    for (var i = 0; i < test_tuple.length; i++){\n        if (typeof(test_tuple[i]) != first_type){\n            return false;\n        }\n    }\n    return true;\n}\n",
    "    var first_type = typeof test_tuple[0];\n    for(var i = 1; i < test_tuple.length; i++){\n        if(typeof test_tuple[i] != first_type){\n            return false;\n        }\n    }\n    return true;\n}",
    "    var first_element = test_tuple[0];\n    var same_type = true;\n    for (var i = 1; i < test_tuple.length; i++) {\n        if (typeof(first_element) != typeof(test_tuple[i])) {\n            same_type = false;\n        }\n    }\n    return same_type;\n}",
    "    var first_element = test_tuple[0];\n    var type = typeof(first_element);\n    for(var i = 1; i < test_tuple.length; i++){\n        if(typeof(test_tuple[i]) != type){\n            return false;\n        }\n    }\n    return true;\n}",
    "    var first_element = test_tuple[0];\n    for(var i = 1; i < test_tuple.length; i++){\n        if(typeof(first_element) != typeof(test_tuple[i])){\n            return false;\n        }\n    }\n    return true;\n}",
    "    var first_type = typeof(test_tuple[0]);\n    for(var i=1; i<test_tuple.length; i++){\n        if(typeof(test_tuple[i]) != first_type){\n            return false;\n        }\n    }\n    return true;\n}",
    "    var type = typeof test_tuple[0];\n    for(var i = 1; i < test_tuple.length; i++){\n        if (typeof test_tuple[i] != type){\n            return false;\n        }\n    }\n    return true;\n}\n",
    "    var first_type = typeof(test_tuple[0]);\n    for(var i=1;i<test_tuple.length;i++){\n        if(typeof(test_tuple[i]) != first_type){\n            return false;\n        }\n    }\n    return true;\n}"
  ]
}