{
  "name": "mbpp_279_is_num_decagonal",
  "language": "js",
  "prompt": "//Write a function to find the nth decagonal number.\nfunction is_num_decagonal(n){\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_279_is_num_decagonal.py",
  "prompt_terminology": "reworded",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_num_decagonal;\n  assert.deepEqual(candidate(3),27);\n  assert.deepEqual(candidate(7),175);\n  assert.deepEqual(candidate(10),370);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    var x = (Math.sqrt(1 + 4 * 2 * n) - 1) / 2;\n    return x === Math.floor(x);\n}\n",
    "    var num = (Math.sqrt(1 + 4 * 2 * n) - 1) / 2;\n    return num % 1 == 0;\n}",
    "\treturn (Math.sqrt(1+4*2*n)%4==3);\n}\n",
    "    var num = (Math.sqrt(4*n + 1) + 1)/2;\n    if(num % 1 == 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}",
    "    var num = (Math.sqrt(1 + 4 * 2 * n) - 1) / 2;\n    return num % 1 === 0;\n}\n",
    "    var x = (Math.sqrt(1 + 4 * 2 * n) - 1) / 2;\n    return x === Math.floor(x);\n}\n",
    "    var num = (Math.sqrt(1 + 4 * 2 * n) - 1) / 2;\n    if(num % 1 == 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n",
    "\tvar num = (Math.sqrt(1 + 4 * 2 * n) - 1) / 2;\n\treturn num % 1 === 0;\n}\n",
    "    var num = (Math.sqrt(1 + 4 * 2 * n) - 1) / 2;\n    return num % 1 == 0;\n}\n",
    "    var x = (Math.sqrt(1 + 4 * 2 * n) - 1) / 2;\n    return x === Math.floor(x);\n}\n",
    "    var num = (Math.sqrt(1 + 4 * 2 * n) - 1) / 2;\n    return num % 1 === 0;\n}\n",
    "\tvar x = (Math.sqrt(1 + 40 * n) + 1) / 10;\n\treturn x % 1 === 0;\n}\n",
    "    var num = (Math.sqrt(1 + 4 * 2 * n) - 1) / 2;\n    if(num % 1 === 0){\n        return true;\n    }\n    return false;\n}\n",
    "    var x = (Math.sqrt(1 + 4 * 2 * n) - 1) / 2;\n    return x % 1 === 0;\n}\n",
    "\tvar num = (Math.sqrt(1 + 4 * 2 * n) - 1) / 2;\n\treturn num % 1 === 0;\n}\n",
    "    var num = (Math.sqrt(4*n+1)+1)/2;\n    if(num % 1 == 0){\n        return true;\n    }\n    return false;\n}",
    "    var num = (Math.sqrt(1 + 4 * 2 * n) - 1) / 2;\n    if(num % 1 == 0){\n        return true;\n    }\n    return false;\n}",
    "    var num = (Math.sqrt(4*n + 1) + 1)/2;\n    if(num % 1 == 0){\n        return true;\n    }\n    return false;\n}\n",
    "    var num = (Math.sqrt(1 + 4 * 2 * n) - 1) / 2;\n    if(num % 1 === 0)\n        return true;\n    else\n        return false;\n}",
    "    var x = (Math.sqrt(1 + 4 * 2 * n) - 1) / 2;\n    return x === Math.floor(x);\n}\n"
  ]
}