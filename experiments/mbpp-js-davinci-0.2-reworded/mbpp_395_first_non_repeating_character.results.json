{
  "name": "mbpp_395_first_non_repeating_character",
  "language": "js",
  "prompt": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_395_first_non_repeating_character.py",
  "prompt_terminology": "reworded",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "results": [
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1.split('');\n    for(var i = 0; i < str.length; i++){\n        if(str.indexOf(str[i]) === str.lastIndexOf(str[i])){\n            return str[i];\n        }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var arr1 = str1.split('');\n    var count = 0;\n    for (var i = 0; i < arr1.length; i++) {\n        for (var j = 0; j < arr1.length; j++) {\n            if (arr1[i] == arr1[j]) {\n                count++;\n            }\n        }\n        if (count == 1) {\n            return arr1[i];\n        }\n        count = 0;\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    var len = str.length;\n    var char;\n    var charCount = {};\n    for(var i = 0; i<len; i++){\n        char = str[i];\n        if(charCount[char]){\n            charCount[char]++;\n        }\n        else\n            charCount[char] = 1;\n    }\n    for (var j in charCount){\n        if (charCount[j]==1)\n        {\n            return j;\n        }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str=str1;\n    var len=str.length;\n    var count=0;\n    for(var i=0;i<len;i++){\n        if(str.indexOf(str[i])==str.lastIndexOf(str[i])){\n            return str[i];\n        }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1.split('');\n    var ctr = 0;\n    for(var x = 0; x < str.length; x++){\n        ctr = 0;\n        for(var y = 0; y < str.length; y++){\n            if(x != y){\n                if(str[x] == str[y]){\n                    ctr+= 1;\n                }\n            }\n        }\n        if(ctr < 1){\n            return str[x];\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str=str1;\n    var count=0;\n    var index;\n    for(var i=0;i<str.length;i++){\n        count=0;\n        for(var j=0;j<str.length;j++){\n            if(str[i]==str[j]){\n                count++;\n            }\n        }\n        if(count==1){\n            index=i;\n            break;\n        }\n    }\n    return str[index];\n}\nvar str1=\"abcdabcd\";\nvar result=first_non_repeating_character(str1);\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    var len = str.length;\n    var char;\n    var charCount = {};\n    for(var i =0; i<len; i++){\n        char = str[i];\n        if(charCount[char]){\n            charCount[char]++;\n        }\n        else\n            charCount[char] = 1;\n    }\n    for (var j in charCount){\n        if (charCount[j]==1)\n        {\n            return j;\n        }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var arr = str1.split('');\n    var count = 0;\n    var index = 0;\n    for(var i = 0; i < arr.length; i++){\n        for(var j = 0; j < arr.length; j++){\n            if(arr[i] == arr[j]){\n                count++;\n            }\n        }\n        if(count == 1){\n            index = i;\n            break;\n        }\n        count = 0;\n    }\n    return arr[index];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'a'\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmppzvn4ugq.js:25:10)\n    at Object.<anonymous> (/tmp/tmppzvn4ugq.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var arr1 = str1.split('');\n    var count = 0;\n    var index = 0;\n    for(var i = 0; i < arr1.length; i++){\n        for(var j = 0; j < arr1.length; j++){\n            if(arr1[i] === arr1[j]){\n                count++;\n            }\n        }\n        if(count === 1){\n            index = i;\n            break;\n        }\n        count = 0;\n    }\n    return arr1[index];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'a'\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmpedaypfb0.js:25:10)\n    at Object.<anonymous> (/tmp/tmpedaypfb0.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++){\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1){\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var arr = str1.split('');\n    var result = '';\n    for(var i = 0; i < arr.length; i++){\n        var count = 0;\n        for(var j = 0; j < arr.length; j++){\n            if(arr[i] === arr[j]){\n                count++;\n            }\n        }\n        if(count < 2){\n            result = arr[i];\n            break;\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmpxgr51lou.js:24:10)\n    at Object.<anonymous> (/tmp/tmpxgr51lou.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1.split('');\n    var ctr = 0;\n    for(var x = 0; x < str.length; x++){\n        ctr = 0;\n        for(var y = 0; y < str.length; y++){\n            if(x != y){\n                if(str[x] == str[y]){\n                    ctr+= 1;\n                }\n            }\n        }\n        if(ctr < 1){\n            return str[x];\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    var len = str.length;\n    var char;\n    var charCount = {};\n    for(var i =0; i<len; i++){\n        char = str[i];\n        if(charCount[char]){\n            charCount[char]++;\n        }\n        else\n            charCount[char] = 1;\n    }\n    for (var j in charCount){\n        if(charCount[j]==1)\n        {\n            return j;\n        }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++){\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1){\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for(var i = 0; i < str.length; i++){\n        var c = str.charAt(i);\n        if(str.indexOf(c) == i && str.indexOf(c, i + 1) == -1){\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str=str1;\n    var len=str.length;\n    var count=0;\n    for(var i=0;i<len;i++){\n        if(str.charAt(i)==str.charAt(i+1)){\n            count++;\n        }\n        else{\n            return str.charAt(i);\n        }\n    }\n    if(count==len){\n        return -1;\n    }\n}\nvar str=\"aabbccdd\";\nvar result=first_non_repeating_character(str);\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'a'\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmpij6geuoh.js:25:10)\n    at Object.<anonymous> (/tmp/tmpij6geuoh.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var arr = str1.split('');\n    var result = '';\n    var ctr = 0;\n    for(var x = 0; x < arr.length; x++){\n        ctr = 0;\n        for(var y = 0; y < arr.length; y++){\n            if(arr[x] === arr[y]){\n                ctr+= 1;\n            }\n        }\n        if(ctr < 2){\n            result = arr[x];\n            break;\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmp50sfn5ew.js:25:10)\n    at Object.<anonymous> (/tmp/tmp50sfn5ew.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1.split('');\n    var ctr = 0;\n    for(var i = 0; i < str.length; i++){\n        ctr = 0;\n        for(var j = 0; j < str.length; j++){\n            if(str[i] == str[j]){\n                ctr += 1;\n            }\n        }\n        if(ctr < 2){\n            return str[i];\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str=str1;\n    var count=0;\n    var index;\n    for(var i=0;i<str.length;i++){\n        count=0;\n        for(var j=0;j<str.length;j++){\n            if(str[i]==str[j]){\n                count++;\n            }\n        }\n        if(count==1){\n            index=i;\n            break;\n        }\n    }\n    return str[index];\n}\nvar str=\"abcdabcd\";\nvar result=first_non_repeating_character(str);\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str=str1;\n    var len=str.length;\n    var char;\n    for(var i=0;i<len;i++){\n        char=str[i];\n        if(str.indexOf(char)==i && str.indexOf(char,i+1)==-1){\n            return char;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    var len = str.length;\n    var char, charCount = {};\n    for(var i =0; i<len; i++){\n        char = str[i];\n        if(charCount[char]){\n            charCount[char]++;\n        }\n        else\n            charCount[char] = 1;\n    }\n    for (var j in charCount){\n        if(charCount[j]==1)\n        {\n            return j;\n        }\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str=str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    var len = str.length;\n    var char, charCount = {};\n    for(var i =0; i<len; i++){\n        char = str[i];\n        if(charCount[char]){\n            charCount[char]++;\n        }\n        else\n            charCount[char] = 1;\n    }\n    for (var j in charCount){\n        if(charCount[j]==1)\n        {\n            return j;\n        }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str=str1;\n    var len=str.length;\n    var count=0;\n    for(var i=0;i<len;i++){\n        if(str.lastIndexOf(str[i])==str.indexOf(str[i])){\n            return str[i];\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    var len = str.length;\n    var char, charCount = {};\n    for(var i =0; i<len; i++){\n        char = str[i];\n        if(charCount[char]){\n            charCount[char]++;\n        }\n        else\n            charCount[char] = 1;\n    }\n    for (var j in charCount){\n        if(charCount[j]==1){\n            return j;\n        }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var arr = str1.split('');\n    var result = '';\n    for(var i = 0; i < arr.length; i++){\n        var count = 0;\n        for(var j = 0; j < arr.length; j++){\n            if(arr[i] == arr[j]){\n                count++;\n            }\n        }\n        if(count == 1){\n            result = arr[i];\n            break;\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmpg1dzadvs.js:24:10)\n    at Object.<anonymous> (/tmp/tmpg1dzadvs.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    var counts = {};\n    var i;\n    for (i = 0; i < str.length; i++) {\n        var character = str.charAt(i);\n        if (counts[character]) {\n            counts[character]++;\n        } else {\n            counts[character] = 1;\n        }\n    }\n    for (i = 0; i < str.length; i++) {\n        if (counts[str.charAt(i)] == 1) {\n            return str.charAt(i);\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str=str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++){\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1){\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var arr = str1.split('');\n    var result = '';\n    var ctr = 0;\n    for(var x = 0; x < arr.length; x++){\n        ctr = 0;\n        for(var y = 0; y < arr.length; y++){\n            if(arr[x] === arr[y]){\n                ctr+= 1;\n            }\n        }\n        if(ctr < 2){\n            result = arr[x];\n            break;\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmp50sfn5ew.js:25:10)\n    at Object.<anonymous> (/tmp/tmp50sfn5ew.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1.split(\"\");\n    for(var i = 0; i < str.length; i++){\n        if(str.indexOf(str[i]) == str.lastIndexOf(str[i])){\n            return str[i];\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var arr1 = str1.split('');\n    var count = 0;\n    var index = 0;\n    for(var i=0; i<arr1.length; i++){\n        count = 0;\n        for(var j=0; j<arr1.length; j++){\n            if(arr1[i] == arr1[j]){\n                count++;\n            }\n        }\n        if(count == 1){\n            index = i;\n            break;\n        }\n    }\n    return arr1[index];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'a'\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmpyt2uv1np.js:25:10)\n    at Object.<anonymous> (/tmp/tmpyt2uv1np.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var arr1 = str1.split('');\n    var count = 0;\n    var index = 0;\n    for(var i = 0; i < arr1.length; i++){\n        for(var j = 0; j < arr1.length; j++){\n            if(arr1[i] === arr1[j]){\n                count++;\n            }\n        }\n        if(count === 1){\n            index = i;\n            break;\n        }\n        count = 0;\n    }\n    return arr1[index];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'a'\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmpedaypfb0.js:25:10)\n    at Object.<anonymous> (/tmp/tmpedaypfb0.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    var counts = {};\n    var i;\n    for (i = 0; i < str.length; i++) {\n        var character = str.charAt(i);\n        if (counts[character]) {\n            counts[character]++;\n        } else {\n            counts[character] = 1;\n        }\n    }\n    for (i = 0; i < str.length; i++) {\n        if (counts[str.charAt(i)] == 1) {\n            return str.charAt(i);\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str=str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    var counts = {};\n    var i;\n    for (i = 0; i < str.length; i++) {\n        var character = str.charAt(i);\n        if (counts[character]) {\n            counts[character]++;\n        } else {\n            counts[character] = 1;\n        }\n    }\n    for (i = 0; i < str.length; i++) {\n        if (counts[str.charAt(i)] == 1) {\n            return str.charAt(i);\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    var len = str.length;\n    var char, charCount = {};\n    for(var i =0; i<len; i++){\n        char = str[i];\n        if(charCount[char]){\n            charCount[char]++;\n        }\n        else\n            charCount[char] = 1;\n    }\n    for(var j in charCount){\n        if(charCount[j]==1)\n        return j;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var arr = str1.split('');\n    var count = 0;\n    var result = '';\n    for(var i=0; i<arr.length; i++){\n        for(var j=0; j<arr.length; j++){\n            if(arr[i] == arr[j]){\n                count++;\n            }\n        }\n        if(count == 1){\n            result = arr[i];\n            break;\n        }\n        count = 0;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmpbrg8ojsv.js:25:10)\n    at Object.<anonymous> (/tmp/tmpbrg8ojsv.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var arr = str1.split('');\n    var result = '';\n    var ctr = 0;\n    for(var x = 0; x < arr.length; x++){\n        ctr = 0;\n        for(var y = 0; y < arr.length; y++){\n            if(arr[x] === arr[y]){\n                ctr+= 1;\n            }\n        }\n        if(ctr < 2){\n            result = arr[x];\n            break;\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmp50sfn5ew.js:25:10)\n    at Object.<anonymous> (/tmp/tmp50sfn5ew.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    var len = str.length;\n    var char;\n    var charCount = {};\n    for(var i =0; i<len; i++){\n        char = str[i];\n        if(charCount[char]){\n            charCount[char]++;\n        }\n        else\n            charCount[char] = 1;\n    }\n    for (var j in charCount){\n        if (charCount[j]==1)\n        {\n            return j;\n        }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str=str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var arr = str1.split('');\n    var count = 0;\n    for(var i = 0; i < arr.length; i++){\n        for(var j = 0; j < arr.length; j++){\n            if(arr[i] === arr[j]){\n                count++;\n            }\n        }\n        if(count === 1){\n            return arr[i];\n        }\n        count = 0;\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    var arr = str.split('');\n    var count = 0;\n    var index = 0;\n    for(var i = 0; i < arr.length; i++){\n        for(var j = 0; j < arr.length; j++){\n            if(arr[i] == arr[j]){\n                count++;\n            }\n        }\n        if(count == 1){\n            index = i;\n            break;\n        }\n        count = 0;\n    }\n    return arr[index];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'a'\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmp18r0cy30.js:26:10)\n    at Object.<anonymous> (/tmp/tmp18r0cy30.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str=str1;\n    var len=str.length;\n    var count=0;\n    for(var i=0;i<len;i++){\n        if(str.lastIndexOf(str[i])==str.indexOf(str[i])){\n            return str[i];\n        }\n    }\n    return null;\n}\nvar str1=\"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\";\nvar str2=\"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\";\nvar str3=\"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\";\nvar str4=\"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\";\nvar str5=\"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\";\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var arr = str1.split('');\n    var result = '';\n    for(var i = 0; i < arr.length; i++){\n        var count = 0;\n        for(var j = 0; j < arr.length; j++){\n            if(arr[i] == arr[j]){\n                count++;\n            }\n        }\n        if(count == 1){\n            result = arr[i];\n            break;\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmpg1dzadvs.js:24:10)\n    at Object.<anonymous> (/tmp/tmpg1dzadvs.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1.split('');\n    var ctr = 0;\n    for (var x = 0; x < str.length; x++) {\n        ctr = 0;\n        for (var y = 0; y < str.length; y++) {\n            if (x != y && str[x] == str[y]) {\n                ctr++;\n            }\n        }\n        if (ctr < 1) {\n            return str[x];\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    var len = str.length;\n    var char, charCount = {};\n    for(var i =0; i<len; i++){\n        char = str[i];\n        if(charCount[char]){\n            charCount[char]++;\n        }\n        else\n            charCount[char] = 1;\n    }\n    for (var j in charCount){\n        if(charCount[j]==1){\n            return j;\n        }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    var counts = {};\n    var i;\n    for (i = 0; i < str.length; i++) {\n        var character = str.charAt(i);\n        if (counts[character]) {\n            counts[character]++;\n        } else {\n            counts[character] = 1;\n        }\n    }\n    for (i = 0; i < str.length; i++) {\n        if (counts[str.charAt(i)] == 1) {\n            return str.charAt(i);\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var arr1 = str1.split('');\n    var count = 0;\n    for(var i=0; i<arr1.length; i++){\n        for(var j=0; j<arr1.length; j++){\n            if(arr1[i] === arr1[j]){\n                count++;\n            }\n        }\n        if(count === 1){\n            return arr1[i];\n        }\n        count = 0;\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str=str1;\n    var len=str.length;\n    var count=0;\n    var temp;\n    for(var i=0;i<len;i++){\n        if(str.charAt(i)==' '){\n            continue;\n        }\n        temp=str.charAt(i);\n        for(var j=0;j<len;j++){\n            if(temp==str.charAt(j)){\n                count++;\n            }\n        }\n        if(count<2){\n            return temp;\n        }\n        count=0;\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1.split('');\n    var ctr = 0;\n    for(var x = 0; x < str.length; x++){\n        ctr = 0;\n        for(var y = 0; y < str.length; y++){\n            if(x != y && str[x] == str[y]){\n                ctr++;\n            }\n        }\n        if(ctr < 1){\n            return str[x];\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var arr = str1.split('');\n    var result = '';\n    for(var i = 0; i < arr.length; i++){\n        var count = 0;\n        for(var j = 0; j < arr.length; j++){\n            if(arr[i] === arr[j]){\n                count++;\n            }\n        }\n        if(count === 1){\n            result = arr[i];\n            break;\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmppbbzz25h.js:24:10)\n    at Object.<anonymous> (/tmp/tmppbbzz25h.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var arr = str1.split('');\n    var result = '';\n    var ctr = 0;\n    for(var x = 0; x < arr.length; x++){\n        ctr = 0;\n        for(var y = 0; y < arr.length; y++){\n            if(arr[x] === arr[y]){\n                ctr+= 1;\n            }\n        }\n        if(ctr < 2){\n            result = arr[x];\n            break;\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmp50sfn5ew.js:25:10)\n    at Object.<anonymous> (/tmp/tmp50sfn5ew.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str=str1;\n    var len=str.length;\n    var count=0;\n    for(var i=0;i<len;i++){\n        if(str.charAt(i)==str.charAt(i+1)){\n            count++;\n        }\n        else{\n            return str.charAt(i);\n        }\n    }\n    if(count==len){\n        return -1;\n    }\n}\nvar str=\"aabbccddeeffgg\";\nvar res=first_non_repeating_character(str);\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'a'\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmp838wc5dd.js:25:10)\n    at Object.<anonymous> (/tmp/tmp838wc5dd.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    var len = str.length;\n    var char;\n    var charCount = {};\n    for(var i =0; i<len; i++){\n        char = str[i];\n        if(charCount[char]){\n            charCount[char]++;\n        }\n        else\n            charCount[char] = 1;\n    }\n    for (var j in charCount){\n        if (charCount[j]==1)\n        {\n            return j;\n        }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str=str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for(var i = 0; i < str.length; i++){\n        var c = str.charAt(i);\n        if(str.indexOf(c) == i && str.indexOf(c, i + 1) == -1){\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str=str1;\n    var len=str.length;\n    var count=0;\n    for(var i=0;i<len;i++){\n        if(str.charAt(i)==str.charAt(i+1)){\n            count++;\n        }\n        else{\n            console.log(str.charAt(i));\n            break;\n        }\n    }\n}\nfirst_non_repeating_character(\"the quick brown fox jumps then quickly blow air\");\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "t\na\na\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n'a'\n    at test (/tmp/tmp_axt9a9s.js:24:10)\n    at Object.<anonymous> (/tmp/tmp_axt9a9s.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 'a',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var arr = str1.split('');\n    var result = '';\n    var ctr = 0;\n    for(var x = 0; x < arr.length; x++){\n        ctr = 0;\n        for(var y = 0; y < arr.length; y++){\n            if(arr[x] === arr[y]){\n                ctr+= 1;\n            }\n        }\n        if(ctr < 2){\n            result = arr[x];\n            break;\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmp50sfn5ew.js:25:10)\n    at Object.<anonymous> (/tmp/tmp50sfn5ew.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    var len = str.length;\n    var char;\n    var charCount = {};\n    for(var i =0; i<len; i++){\n        char = str[i];\n        if(charCount[char]){\n            charCount[char]++;\n        }\n        else\n            charCount[char] = 1;\n    }\n    for (var j in charCount){\n        if(charCount[j]==1){\n            return j;\n        }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++){\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1){\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    var len = str.length;\n    var char, charCount = {};\n    for(var i =0; i<len; i++){\n        char = str[i];\n        if(charCount[char]){\n            charCount[char]++;\n        }\n        else\n            charCount[char] = 1;\n    }\n    for (var j in charCount){\n        if(charCount[j]==1){\n            return j;\n        }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str=str1;\n    var count=0;\n    var index;\n    for(var i=0;i<str.length;i++){\n        count=0;\n        for(var j=0;j<str.length;j++){\n            if(str[i]==str[j]){\n                count++;\n            }\n        }\n        if(count==1){\n            index=i;\n            break;\n        }\n    }\n    return str[index];\n}\nvar str=\"hello\";\nvar result=first_non_repeating_character(str);\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    var len = str.length;\n    var char, charCount = {};\n    for(var i =0; i<len; i++){\n        char = str[i];\n        if(charCount[char]){\n            charCount[char]++;\n        }\n        else\n            charCount[char] = 1;\n    }\n    for (var j in charCount){\n        if (charCount[j]==1)\n        {\n            return j;\n        }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1.split('');\n    var ctr = 0;\n    for(var x = 0; x < str.length; x++){\n        ctr = 0;\n        for(var y = 0; y < str.length; y++){\n            if(x != y && str[x] == str[y]){\n                ctr++;\n            }\n        }\n        if(ctr < 1){\n            return str[x];\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str=str1;\n    var len=str.length;\n    var char;\n    for(var i=0;i<len;i++){\n        char=str[i];\n        if(str.indexOf(char)==i && str.indexOf(char,i+1)==-1){\n            return char;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str=str1;\n    var len=str.length;\n    var char,count=0;\n    for(var i=0;i<len;i++){\n        char=str[i];\n        count=0;\n        for(var j=0;j<len;j++){\n            if(char==str[j]){\n                count++;\n            }\n        }\n        if(count==1){\n            return char;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++){\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1){\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    var len = str.length;\n    var char;\n    var charCount = {};\n    for(var i = 0; i<len; i++){\n        char = str[i];\n        if(charCount[char]){\n            charCount[char]++;\n        }\n        else\n            charCount[char] = 1;\n    }\n    for (var j in charCount){\n        if (charCount[j]==1)\n        {\n            return j;\n        }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str=str1;\n    var len=str.length;\n    var count=0;\n    var char;\n    for(var i=0;i<len;i++){\n        char=str[i];\n        count=0;\n        for(var j=0;j<len;j++){\n            if(char==str[j]){\n                count++;\n            }\n        }\n        if(count==1){\n            return char;\n        }\n    }\n}\nvar str=\"abcdabcd\";\nvar result=first_non_repeating_character(str);\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str=str1;\n    var len=str.length;\n    var count=0;\n    for(var i=0;i<len;i++){\n        if(str.lastIndexOf(str[i])==str.indexOf(str[i])){\n            return str[i];\n        }\n    }\n}\n\nvar str=\"geeksforgeeks\";\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var arr = str1.split('');\n    var result = '';\n    var ctr = 0;\n    for(var x = 0; x < arr.length; x++){\n        ctr = 0;\n        for(var y = 0; y < arr.length; y++){\n            if(arr[x] === arr[y]){\n                ctr+= 1;\n            }\n        }\n        if(ctr < 2){\n            result = arr[x];\n            break;\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmp50sfn5ew.js:25:10)\n    at Object.<anonymous> (/tmp/tmp50sfn5ew.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    var len = str.length;\n    var char;\n    var charCount = {};\n    for(var i = 0; i<len; i++){\n        char = str[i];\n        if(charCount[char]){\n            charCount[char]++;\n        }\n        else\n            charCount[char] = 1;\n    }\n    for (var j in charCount){\n        if (charCount[j]==1)\n        {\n            return j;\n        }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var count = 0;\n    var string = str1;\n    var first = string.charAt(0);\n    for(var i = 0; i < string.length; i++){\n        if(first == string.charAt(i)){\n            count++;\n        }\n    }\n    if(count == 1){\n        return first;\n    }else{\n        var string = string.substring(1);\n        return first_non_repeating_character(string);\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'a'\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmptci3zz9n.js:23:10)\n    at Object.<anonymous> (/tmp/tmptci3zz9n.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    var len = str.length;\n    var char;\n    var charCount = {};\n    for(var i = 0; i<len; i++){\n        char = str[i];\n        if(charCount[char]){\n            charCount[char]++;\n        }\n        else\n            charCount[char] = 1;\n    }\n    for (var j in charCount){\n        if (charCount[j]==1)\n        {\n            return j;\n        }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var len = str1.length;\n    var char;\n    var charCount = {};\n    for(var i = 0; i<len; i++){\n        char = str1[i];\n        if(charCount[char]){\n            charCount[char]++;\n        }\n        else\n            charCount[char] = 1;\n    }\n    for (var j in charCount){\n        if (charCount[j]==1)\n        {\n            return j;\n        }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var arr = str1.split('');\n    var count = 0;\n    var first = '';\n    for(var i = 0; i < arr.length; i++){\n        count = 0;\n        for(var j = 0; j < arr.length; j++){\n            if(arr[i] == arr[j]){\n                count++;\n            }\n        }\n        if(count == 1){\n            first = arr[i];\n            break;\n        }\n    }\n    return first;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmps_of26sq.js:25:10)\n    at Object.<anonymous> (/tmp/tmps_of26sq.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1.split('');\n    var ctr = 0;\n    for (var x = 0; x < str.length; x++) {\n        ctr = 0;\n        for (var y = 0; y < str.length; y++) {\n            if (x != y && str[x] == str[y]) {\n                ctr++;\n            }\n        }\n        if (ctr < 1) {\n            return str[x];\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    var len = str.length;\n    var char;\n    var charCount = {};\n    for(var i = 0; i<len; i++){\n        char = str[i];\n        if(charCount[char]){\n            charCount[char]++;\n        }\n        else\n            charCount[char] = 1;\n    }\n    for (var j in charCount){\n        if (charCount[j]==1)\n        {\n            return j;\n        }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    var counts = {};\n    var i;\n    for (i = 0; i < str.length; i++) {\n        var character = str.charAt(i);\n        if (counts[character]) {\n            counts[character]++;\n        } else {\n            counts[character] = 1;\n        }\n    }\n    for (i = 0; i < str.length; i++) {\n        if (counts[str.charAt(i)] == 1) {\n            return str.charAt(i);\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var arr1 = str1.split('');\n    var arr2 = [];\n    var arr3 = [];\n    var arr4 = [];\n    var arr5 = [];\n    var arr6 = [];\n    var arr7 = [];\n    var arr8 = [];\n    var arr9 = [];\n    var arr10 = [];\n    var arr11 = [];\n    var arr12 = [];\n    var arr13 = [];\n    var arr14 = [];\n    var arr15 = [];\n    var arr16 = [];\n    var arr17 = [];\n    var arr18 = [];\n    var arr19 = [];\n    var arr20 = [];\n    var arr21 = [];\n    var arr22 = [];\n    var arr23 = [];\n    var arr24 = [];\n    var arr25 = [];\n    var arr26 = [];\n    var arr27 = [];\n    var arr28 = [];\n    var arr29 = [];\n    var arr30 = [];\n    var arr31 = [];\n    var arr32 = [];\n    var arr33 = [];\n    var arr34 = [];\n    var arr35 = [];\n    var arr36 = [];\n    var arr37 = [];\n    var arr38 = [];\n    var arr39 = [];\n    var arr40 = [];\n    var arr41 = [];\n    var arr42 = [];\n    var arr43 = [];\n    var arr44 = [];\n    var arr45 = [];\n    var arr46 = [];\n    var arr47 = [];\n    var arr48 = [];\n    var arr49 = [];\n    var arr50 = [];\n    var arr51 = [];\n    var arr52 = [];\n    var arr53 = [];\n    var arr54 = [];\n    var arr55 = [];\n    var arr56 = [];\n    var arr57 = [];\n    var arr58 = [];\n    var arr59 = [];\n    var arr60 = [];\n    var arr61 = [];\n    var arr62 = [];\n    var arr63 = [];\n    var arr64 = [];\n    var arr65 = [];\n    var arr66 = [];\n    var arr67 = [];\n    var arr68 = [];\n    var arr69 = [];\n    var arr70 = [];\n    var arr71 = [];\n    var arr72 = [];\n   \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "/tmp/tmpib7ximf2.js:86\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var arr1 = str1.split('');\n    var count = 0;\n    var index = 0;\n    for(var i=0; i<arr1.length; i++){\n        for(var j=0; j<arr1.length; j++){\n            if(arr1[i] == arr1[j]){\n                count++;\n            }\n        }\n        if(count == 1){\n            index = i;\n            break;\n        }\n        count = 0;\n    }\n    return arr1[index];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'a'\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmpif045l1n.js:25:10)\n    at Object.<anonymous> (/tmp/tmpif045l1n.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str=str1;\n    var len=str.length;\n    var count=0;\n    for(var i=0;i<len;i++){\n        if(str.charAt(i)==str.charAt(i+1)){\n            count++;\n        }\n    }\n    if(count==0){\n        console.log(str.charAt(0));\n    }\n    else{\n        console.log(-1);\n    }\n}\nfirst_non_repeating_character(\"the quick brown fox jumps then quickly blow air\");\nfirst_non_repeating_character(\"hello\");\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "t\n-1\na\na\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n'a'\n    at test (/tmp/tmp7mrkf9ji.js:27:10)\n    at Object.<anonymous> (/tmp/tmp7mrkf9ji.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 'a',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    var len = str.length;\n    var char;\n    var charCount = {};\n    for(var i = 0; i<len; i++){\n        char = str[i];\n        if(charCount[char]){\n            charCount[char]++;\n        }\n        else\n            charCount[char] = 1;\n    }\n    for (var j in charCount){\n        if (charCount[j]==1)\n        {\n            return j;\n        }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str=str1;\n    var len=str.length;\n    var char,count=0;\n    for(var i=0;i<len;i++){\n        char=str[i];\n        count=0;\n        for(var j=0;j<len;j++){\n            if(char==str[j]){\n                count++;\n            }\n        }\n        if(count==1){\n            return char;\n        }\n    }\n    return null;\n}\nvar str=\"the quick brown fox jumps then quickly blow air\";\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var arr = str1.split('');\n    var result = '';\n    var ctr = 0;\n    for(var x = 0; x < arr.length; x++){\n        ctr = 0;\n        for(var y = 0; y < arr.length; y++){\n            if(arr[x] === arr[y]){\n                ctr+= 1;\n            }\n        }\n        if(ctr < 2){\n            result = arr[x];\n            break;\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmp50sfn5ew.js:25:10)\n    at Object.<anonymous> (/tmp/tmp50sfn5ew.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    var len = str.length;\n    var char;\n    var charCount = {};\n    for(var i = 0; i<len; i++){\n        char = str[i];\n        if(charCount[char]){\n            charCount[char]++;\n        }\n        else\n            charCount[char] = 1;\n    }\n    for (var j in charCount){\n        if (charCount[j]==1)\n        {\n            return j;\n        }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    var counts = {};\n    var i;\n    for (i = 0; i < str.length; i++) {\n        var character = str.charAt(i);\n        if (counts[character]) {\n            counts[character]++;\n        } else {\n            counts[character] = 1;\n        }\n    }\n    for (i = 0; i < str.length; i++) {\n        if (counts[str.charAt(i)] == 1) {\n            return str.charAt(i);\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var arr1 = str1.split('');\n    var count = 0;\n    for(var i = 0; i < arr1.length; i++){\n        for(var j = 0; j < arr1.length; j++){\n            if(arr1[i] === arr1[j]){\n                count++;\n            }\n        }\n        if(count === 1){\n            return arr1[i];\n        }\n        count = 0;\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var arr1 = str1.split('');\n    var count = 0;\n    for(var i = 0; i < arr1.length; i++){\n        for(var j = 0; j < arr1.length; j++){\n            if(arr1[i] === arr1[j]){\n                count++;\n            }\n        }\n        if(count === 1){\n            return arr1[i];\n        }\n        count = 0;\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    var len = str.length;\n    var char, charCount = {};\n    for(var i =0; i<len; i++){\n        char = str[i];\n        if(charCount[char]){\n            charCount[char]++;\n        }\n        else\n            charCount[char] = 1;\n    }\n    for(var j in charCount){\n        if(charCount[j]==1)\n        return j;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var arr1 = str1.split('');\n    var count = 0;\n    var result = '';\n    for(var i = 0; i < arr1.length; i++){\n        for(var j = 0; j < arr1.length; j++){\n            if(arr1[i] == arr1[j]){\n                count++;\n            }\n        }\n        if(count == 1){\n            result = arr1[i];\n            break;\n        }\n        count = 0;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmpjksjj71l.js:25:10)\n    at Object.<anonymous> (/tmp/tmpjksjj71l.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    var len = str.length;\n    var char;\n    var charCount = {};\n    for(var i =0; i<len; i++){\n        char = str[i];\n        if(charCount[char]){\n            charCount[char]++;\n        }\n        else\n            charCount[char] = 1;\n    }\n    for (var j in charCount){\n        if (charCount[j]==1)\n        {\n            return j;\n        }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    var len = str.length;\n    var char;\n    var charCount = {};\n    for(var i =0; i<len; i++){\n        char = str[i];\n        if(charCount[char]){\n            charCount[char]++;\n        }\n        else\n            charCount[char] = 1;\n    }\n    for (var j in charCount){\n        if(charCount[j]==1)\n        return j;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var arr1 = str1.split('');\n    var count = 0;\n    var index = 0;\n    for(var i = 0; i < arr1.length; i++){\n        count = 0;\n        for(var j = 0; j < arr1.length; j++){\n            if(arr1[i] == arr1[j]){\n                count++;\n            }\n        }\n        if(count == 1){\n            index = i;\n            break;\n        }\n    }\n    return arr1[index];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'a'\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmpe4r4kr24.js:25:10)\n    at Object.<anonymous> (/tmp/tmpe4r4kr24.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++){\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1){\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var arr = str1.split('');\n    var count = 0;\n    var result = '';\n    for(var i = 0; i < arr.length; i++){\n        for(var j = 0; j < arr.length; j++){\n            if(arr[i] === arr[j]){\n                count++;\n            }\n        }\n        if(count === 1){\n            result = arr[i];\n            break;\n        }\n        count = 0;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmpxmu_1wkx.js:25:10)\n    at Object.<anonymous> (/tmp/tmpxmu_1wkx.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var arr = str1.split('');\n    var count = 0;\n    var index = -1;\n    for(var i = 0; i < arr.length; i++){\n        count = 0;\n        for(var j = 0; j < arr.length; j++){\n            if(arr[i] == arr[j]){\n                count++;\n            }\n        }\n        if(count == 1){\n            index = i;\n            break;\n        }\n    }\n    return arr[index];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    var len = str.length;\n    var char;\n    var charCount = {};\n    for(var i = 0; i<len; i++){\n        char = str[i];\n        if(charCount[char]){\n            charCount[char]++;\n        }\n        else\n            charCount[char] = 1;\n    }\n    for (var j in charCount){\n        if (charCount[j]==1)\n        {\n            return j;\n        }\n    }\n}\nvar str = \"abacddbec\";\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1.split('');\n    for(var i = 0; i < str.length; i++){\n        if(str.indexOf(str[i]) == str.lastIndexOf(str[i])){\n            return str[i];\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    var len = str.length;\n    var char;\n    var charCount = {};\n    for(var i =0; i<len; i++){\n        char = str[i];\n        if(charCount[char]){\n            charCount[char]++;\n        }\n        else\n            charCount[char] = 1;\n    }\n    for (var j in charCount){\n        if (charCount[j]==1)\n        {\n            return j;\n        }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var arr = str1.split('');\n    var result = '';\n    for(var i = 0; i < arr.length; i++){\n        var count = 0;\n        for(var j = 0; j < arr.length; j++){\n            if(arr[i] == arr[j]){\n                count++;\n            }\n        }\n        if(count == 1){\n            result = arr[i];\n            break;\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmpg1dzadvs.js:24:10)\n    at Object.<anonymous> (/tmp/tmpg1dzadvs.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    var len = str.length;\n    var char;\n    var charCount = {};\n    for(var i = 0; i<len; i++){\n        char = str[i];\n        if(charCount[char]){\n            charCount[char]++;\n        }\n        else\n            charCount[char] = 1;\n    }\n    for (var j in charCount){\n        if (charCount[j]==1)\n        {\n            return j;\n        }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str=str1;\n    var len=str.length;\n    var count=0;\n    var char;\n    for(var i=0;i<len;i++){\n        char=str[i];\n        for(var j=0;j<len;j++){\n            if(char==str[j] && i!=j){\n                count++;\n                break;\n            }\n        }\n        if(count==0){\n            return char;\n        }\n        count=0;\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1.toLowerCase();\n    for(var i = 0; i < str.length; i++){\n        if(str.indexOf(str[i]) == str.lastIndexOf(str[i])){\n            return str[i];\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var arr = str1.split('');\n    var count = 0;\n    for(var i = 0; i < arr.length; i++){\n        for(var j = 0; j < arr.length; j++){\n            if(arr[i] == arr[j]){\n                count++;\n            }\n        }\n        if(count == 1){\n            return arr[i];\n        }\n        count = 0;\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1.split('');\n    var count = 0;\n    var index;\n    for(var i = 0; i < str.length; i++){\n        for(var j = 0; j < str.length; j++){\n            if(i != j && str[i] == str[j]){\n                count++;\n                break;\n            }\n        }\n        if(count == 0){\n            index = i;\n            break;\n        }\n    }\n    if(index == undefined){\n        return -1;\n    }else{\n        return str[index];\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmp523gqshh.js:29:10)\n    at Object.<anonymous> (/tmp/tmp523gqshh.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    var len = str.length;\n    var char;\n    var charCount = {};\n    for(var i = 0; i<len; i++){\n        char = str[i];\n        if(charCount[char]){\n            charCount[char]++;\n        }\n        else\n            charCount[char] = 1;\n    }\n    for (var j in charCount){\n        if (charCount[j]==1)\n        {\n            return j;\n        }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var arr = str1.split('');\n    var result = '';\n    for(var i = 0; i < arr.length; i++){\n        var count = 0;\n        for(var j = 0; j < arr.length; j++){\n            if(arr[i] === arr[j]){\n                count++;\n            }\n        }\n        if(count === 1){\n            result = arr[i];\n            break;\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmppbbzz25h.js:24:10)\n    at Object.<anonymous> (/tmp/tmppbbzz25h.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    var len = str.length;\n    var char;\n    var charCount = {};\n    for(var i = 0; i<len; i++){\n        char = str[i];\n        if(charCount[char]){\n            charCount[char]++;\n        }\n        else\n            charCount[char] = 1;\n    }\n    for (var j in charCount){\n        if (charCount[j]==1)\n        {\n            return j;\n        }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var arr = str1.split('');\n    var result = '';\n    for(var i = 0; i < arr.length; i++){\n        if(arr.indexOf(arr[i]) == arr.lastIndexOf(arr[i])){\n            result = arr[i];\n            break;\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmptjcx_v1k.js:18:10)\n    at Object.<anonymous> (/tmp/tmptjcx_v1k.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1){\n    var str = str1.split('');\n    for (var i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) == i && str.indexOf(str[i], i + 1) == -1) {\n            return str[i];\n        }\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}