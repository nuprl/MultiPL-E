{
  "name": "mbpp_779_unique_sublists",
  "language": "js",
  "prompt": "//Write a function to count the number of arrays within an array. The function should return an object, where every array is turned to an array, and the value of the array is the number of its occurrences.\nfunction unique_sublists(list1){\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_779_unique_sublists.py",
  "prompt_terminology": "reworded",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_sublists;\n  assert.deepEqual(candidate([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]),{[1, 3]: 2, [5, 7]: 2, [13, 15, 17]: 1, [9, 11]: 1});\n  assert.deepEqual(candidate([[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]]),{[\"green\", \"orange\"]: 2, [\"black\"]: 1, [\"white\"]: 1});\n  assert.deepEqual(candidate([[1, 2], [3, 4], [4, 5], [6, 7]]),{[1, 2]: 1, [3, 4]: 1, [4, 5]: 1, [6, 7]: 1});\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "  var obj = {};\n  for(var i = 0; i < list1.length; i++){\n    if(obj[list1[i]] === undefined){\n      obj[list1[i]] = 1;\n    } else {\n      obj[list1[i]] += 1;\n    }\n  }\n  return obj;\n}\n",
    "  var result = {};\n  for(var i = 0; i < list1.length; i++){\n    if(Array.isArray(list1[i])){\n      if(result[list1[i]]){\n        result[list1[i]]++;\n      }else{\n        result[list1[i]] = 1;\n      }\n    }\n  }\n  return result;\n}\n",
    "    var result = {};\n    for(var i=0; i<list1.length; i++){\n        var array = list1[i];\n        if(result[array] === undefined){\n            result[array] = 1;\n        }else{\n            result[array] += 1;\n        }\n    }\n    return result;\n}\n",
    "    var result = {};\n    for(var i = 0; i < list1.length; i++){\n        var key = list1[i].toString();\n        if(result[key] == undefined){\n            result[key] = 1;\n        }\n        else{\n            result[key]++;\n        }\n    }\n    return result;\n}\n",
    "    var result = {};\n    for (var i = 0; i < list1.length; i++) {\n        var key = list1[i].toString();\n        if (result[key] == null) {\n            result[key] = 1;\n        } else {\n            result[key]++;\n        }\n    }\n    return result;\n}",
    "  var result = {};\n  for(var i = 0; i < list1.length; i++){\n    var key = list1[i].toString();\n    if(result[key] == undefined){\n      result[key] = 1;\n    }\n    else{\n      result[key]++;\n    }\n  }\n  return result;\n}\n",
    "    var result = {};\n    for (var i = 0; i < list1.length; i++){\n        var key = list1[i];\n        if (result[key] == undefined){\n            result[key] = 1;\n        }\n        else{\n            result[key] += 1;\n        }\n    }\n    return result;\n}\n",
    "  var obj = {};\n  for(var i = 0; i < list1.length; i++){\n    var key = list1[i].toString();\n    if(obj[key] === undefined){\n      obj[key] = 1;\n    } else {\n      obj[key]++;\n    }\n  }\n  return obj;\n}\n",
    "    var result = {};\n    for (var i = 0; i < list1.length; i++) {\n        var key = list1[i].toString();\n        if (result[key] === undefined) {\n            result[key] = 1;\n        } else {\n            result[key]++;\n        }\n    }\n    return result;\n}\n",
    "    var result = {};\n    for (var i = 0; i < list1.length; i++){\n        if (result[list1[i]] === undefined){\n            result[list1[i]] = 1;\n        }\n        else {\n            result[list1[i]] += 1;\n        }\n    }\n    return result;\n}\n",
    "    var result = {};\n    for(var i = 0; i < list1.length; i++){\n        var key = JSON.stringify(list1[i]);\n        if(result[key] == undefined){\n            result[key] = 1;\n        }\n        else{\n            result[key]++;\n        }\n    }\n    return result;\n}\n",
    "    var result = {};\n    for(var i = 0; i < list1.length; i++){\n        var key = list1[i].toString();\n        if(result[key] == undefined){\n            result[key] = 1;\n        }\n        else{\n            result[key]++;\n        }\n    }\n    return result;\n}\n",
    "  var result = {};\n  for (var i = 0; i < list1.length; i++) {\n    var key = list1[i];\n    if (result[key] === undefined) {\n      result[key] = 1;\n    } else {\n      result[key] = result[key] + 1;\n    }\n  }\n  return result;\n}\n",
    "    var result = {};\n    for(var i = 0; i < list1.length; i++){\n        var key = list1[i];\n        if(result[key]){\n            result[key]++;\n        }\n        else{\n            result[key] = 1;\n        }\n    }\n    return result;\n}\n",
    "    var result = {};\n    for (var i = 0; i < list1.length; i++) {\n        var key = list1[i].toString();\n        if (result[key] == undefined) {\n            result[key] = 1;\n        } else {\n            result[key]++;\n        }\n    }\n    return result;\n}",
    "    var result = {};\n    for(var i = 0; i < list1.length; i++){\n        var key = JSON.stringify(list1[i]);\n        if(result[key]){\n            result[key]++;\n        }else{\n            result[key] = 1;\n        }\n    }\n    return result;\n}\n",
    "  var result = {};\n  for(var i = 0; i < list1.length; i++){\n    if(result[list1[i]] === undefined){\n      result[list1[i]] = 1;\n    } else {\n      result[list1[i]]++;\n    }\n  }\n  return result;\n}\n",
    "    var result = {};\n    for(var i = 0; i < list1.length; i++){\n        if(result[list1[i]] === undefined){\n            result[list1[i]] = 1;\n        }\n        else{\n            result[list1[i]] += 1;\n        }\n    }\n    return result;\n}",
    "    var count = {};\n    for(var i = 0; i < list1.length; i++){\n        var num = list1[i];\n        count[num] = count[num] ? count[num] + 1 : 1;\n    }\n    return count;\n}\n",
    "    var result = {};\n    for(var i = 0; i < list1.length; i++){\n        var key = list1[i];\n        if(result[key] == undefined){\n            result[key] = 1;\n        }\n        else{\n            result[key]++;\n        }\n    }\n    return result;\n}\n"
  ]
}