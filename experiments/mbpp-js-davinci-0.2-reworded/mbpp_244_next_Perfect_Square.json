{
  "name": "mbpp_244_next_Perfect_Square",
  "language": "js",
  "prompt": "//Write a jsthon function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N){\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_244_next_Perfect_Square.py",
  "prompt_terminology": "reworded",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    var i = 1;\n    while(i*i<N){\n        i++;\n    }\n    return i*i;\n}",
    "    var i=1;\n    while(i*i<N){\n        i++;\n    }\n    return i*i;\n}",
    "    var i=1;\n    while(i*i<N){\n        i++;\n    }\n    return i*i;\n}",
    "    var i = 1;\n    while(i*i < N){\n        i++;\n    }\n    return i*i;\n}",
    "    var i=1;\n    while(i*i<=N){\n        i++;\n    }\n    return i*i;\n}",
    "    var i=1;\n    while(true){\n        if(i*i>N){\n            return i*i;\n        }\n        i++;\n    }\n}",
    "    var i=1;\n    while(i*i<N){\n        i++;\n    }\n    return i*i;\n}",
    "    var i = 1;\n    while(i*i < N){\n        i++;\n    }\n    return i*i;\n}",
    "    var i=1;\n    while(i*i<N){\n        i++;\n    }\n    return i*i;\n}",
    "    var i = 1;\n    while(i*i<N){\n        i++;\n    }\n    return i*i;\n}",
    "    var i=0;\n    var j=0;\n    for(i=0;i<=N;i++){\n        j=i*i;\n        if(j>N){\n            return j;\n        }\n    }\n}",
    "    var i = 1;\n    while(i*i <= N){\n        i++;\n    }\n    return i*i;\n}",
    "    var i=1;\n    while(true){\n        if(i*i>N){\n            return i*i;\n        }\n        i++;\n    }\n}",
    "    var i = 1;\n    while(i*i<N){\n        i++;\n    }\n    return i*i;\n}",
    "    var i=1;\n    while(true){\n        if(i*i>N){\n            return i*i;\n        }\n        i++;\n    }\n}",
    "    var i=1;\n    while(i*i<N){\n        i++;\n    }\n    return i*i;\n}\nvar N=10;",
    "    var next_Perfect_Square = N;\n    while(true){\n        var sqrt = Math.sqrt(next_Perfect_Square);\n        if(sqrt == Math.floor(sqrt)){\n            return next_Perfect_Square;\n        }\n        next_Perfect_Square++;\n    }\n}",
    "    var i = 1;\n    while(true){\n        if(i*i > N){\n            return i*i;\n        }\n        i++;\n    }\n}",
    "    var i=1;\n    while(i*i<N){\n        i++;\n    }\n    return i*i;\n}",
    "    var i=1;\n    while(i*i<=N){\n        i++;\n    }\n    return i*i;\n}"
  ]
}