{
  "name": "mbpp_119_search",
  "language": "js",
  "prompt": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_119_search.py",
  "prompt_terminology": "reworded",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "results": [
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var result = arr[0];\n    for(var i = 1; i < arr.length; i++){\n        result = result ^ arr[i];\n    }\n    return result;\n}\n\nvar arr = [1,1,2,2,3,3,4,50,50,65,65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665510198,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i = 0;\n    while(i < arr.length){\n        if(arr[i] == arr[i+1]){\n            i += 2;\n        }\n        else{\n            return arr[i];\n        }\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665510198,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i = 0;\n    while(i < arr.length){\n        if(arr[i] === arr[i+1]){\n            i = i + 2;\n        }\n        else{\n            return arr[i];\n        }\n    }\n    return -1;\n}\n\nvar arr = [1,1,2,2,3,3,4,50,50,65,65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665510198,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    let i = 0;\n    while(i < arr.length){\n        if(arr[i] === arr[i+1]){\n            i = i + 2;\n        }\n        else{\n            return arr[i];\n        }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665510198,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    let i=0;\n    while(i<arr.length){\n        if(arr[i]==arr[i+1]){\n            i=i+2;\n        }\n        else{\n            return arr[i];\n        }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665510198,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i=0;\n    var j=arr.length-1;\n    while(i<j){\n        var mid=Math.floor((i+j)/2);\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        else if(arr[mid]==arr[mid-1]){\n            if((mid-1)%2==0){\n                i=mid+1;\n            }\n            else{\n                j=mid-2;\n            }\n        }\n        else if(arr[mid]==arr[mid+1]){\n            if((mid+1)%2==0){\n                i=mid+2;\n            }\n            else{\n                j=mid-1;\n            }\n        }\n    }\n    return arr[i];\n}\nvar arr=[1,1,2,2,3,3,4,50,50,65,65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665510198,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpn17_8rwt.js:35:10)\n    at Object.<anonymous> (/tmp/tmpn17_8rwt.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i = 0;\n    var j = arr.length - 1;\n    while(i < j){\n        var mid = Math.floor((i + j) / 2);\n        if(arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]){\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid - 1]){\n            if(mid % 2 == 0){\n                i = mid + 1;\n            }else{\n                j = mid - 2;\n            }\n        }else{\n            if(mid % 2 == 0){\n                j = mid - 1;\n            }else{\n                i = mid + 2;\n            }\n        }\n    }\n    return arr[i];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665510198,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpz_4_a9_g.js:32:10)\n    at Object.<anonymous> (/tmp/tmpz_4_a9_g.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i=0;\n    var j=arr.length-1;\n    while(i<j){\n        var mid=Math.floor((i+j)/2);\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid]==arr[mid-1]){\n            if(mid%2==0){\n                j=mid-2;\n            }\n            else{\n                i=mid+1;\n            }\n        }\n        else{\n            if(mid%2==0){\n                i=mid+2;\n            }\n            else{\n                j=mid-1;\n            }\n        }\n    }\n    return arr[i];\n}\nvar arr=[1,1,2,2,3,3,4,50,50,65,65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665510198,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var result = 0;\n    for(var i = 0; i < arr.length; i++){\n        result = result ^ arr[i];\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665510198,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var count=0;\n    var result;\n    for(var i=0;i<arr.length;i++){\n        for(var j=0;j<arr.length;j++){\n            if(arr[i]==arr[j]){\n                count++;\n            }\n        }\n        if(count==1){\n            result=arr[i];\n        }\n        count=0;\n    }\n    return result;\n}\nvar arr=[1,1,2,2,3,3,4,50,50,65,65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665510198,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    let i = 0;\n    while(i < arr.length){\n        if(arr[i] === arr[i+1]){\n            i += 2;\n        }\n        else{\n            return arr[i];\n        }\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665510198,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i = 0;\n    while(i < arr.length){\n        if(arr[i] == arr[i+1]){\n            i = i+2;\n        }\n        else{\n            return arr[i];\n        }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665510198,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i=0;\n    var j=arr.length-1;\n    while(i<j){\n        var mid=Math.floor((i+j)/2);\n        if(arr[mid]==arr[mid-1]){\n            if(mid%2==0){\n                j=mid-2;\n            }\n            else{\n                i=mid+1;\n            }\n        }\n        else if(arr[mid]==arr[mid+1]){\n            if(mid%2==0){\n                i=mid+2;\n            }\n            else{\n                j=mid-1;\n            }\n        }\n        else{\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\nvar arr=[1,1,2,2,3,4,4,5,5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665510198,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    let start = 0;\n    let end = arr.length - 1;\n    while(start <= end){\n        let mid = Math.floor((start + end) / 2);\n        if(arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]){\n            return arr[mid];\n        }\n        else if(arr[mid] == arr[mid - 1]){\n            if(mid % 2 == 0){\n                end = mid - 2;\n            }\n            else{\n                start = mid + 1;\n            }\n        }\n        else if(arr[mid] == arr[mid + 1]){\n            if(mid % 2 == 0){\n                start = mid + 2;\n            }\n            else{\n                end = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665510198,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i=0;\n    while(arr[i]==arr[i+1]){\n        i++;\n    }\n    return arr[i];\n}\nvar arr=[1,1,2,2,3,3,4,50,50,65,65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665510198,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpqob_hs2y.js:15:10)\n    at Object.<anonymous> (/tmp/tmpqob_hs2y.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i = 0;\n    var j = arr.length - 1;\n    while(i < j){\n        var m = Math.floor((i + j) / 2);\n        if(arr[m] == arr[m - 1]){\n            if((m - i) % 2 == 0){\n                i = m + 1;\n            }\n            else{\n                j = m - 2;\n            }\n        }\n        else if(arr[m] == arr[m + 1]){\n            if((j - m) % 2 == 0){\n                j = m - 1;\n            }\n            else{\n                i = m + 2;\n            }\n        }\n        else{\n            return arr[m];\n        }\n    }\n    return arr[i];\n}\n\nvar arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665510198,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmps61jwms9.js:36:10)\n    at Object.<anonymous> (/tmp/tmps61jwms9.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i = 0;\n    var j = arr.length - 1;\n    var mid = 0;\n    while(i <= j){\n        mid = Math.floor((i + j) / 2);\n        if(arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]){\n            return arr[mid];\n        }\n        else if(arr[mid] == arr[mid - 1]){\n            if(mid % 2 == 0){\n                j = mid - 2;\n            }\n            else{\n                i = mid + 1;\n            }\n        }\n        else if(arr[mid] == arr[mid + 1]){\n            if(mid % 2 == 0){\n                i = mid + 2;\n            }\n            else{\n                j = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\nvar arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665510198,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    let i = 0;\n    let j = arr.length - 1;\n    while(i < j){\n        let mid = Math.floor((i + j) / 2);\n        if(arr[mid] === arr[mid - 1]){\n            if(mid % 2 === 0){\n                j = mid - 2;\n            } else {\n                i = mid + 1;\n            }\n        } else if(arr[mid] === arr[mid + 1]){\n            if(mid % 2 === 0){\n                i = mid + 2;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665510198,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i=0;\n    while(i<arr.length){\n        if(arr[i]!=arr[i+1] && arr[i]!=arr[i-1]){\n            return arr[i];\n        }\n        i++;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665510198,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i = 0;\n    var j = arr.length-1;\n    var mid = 0;\n    while(i<=j){\n        mid = Math.floor((i+j)/2);\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        else if(arr[mid]==arr[mid-1]){\n            if((mid-1)%2==0){\n                i = mid+1;\n            }\n            else{\n                j = mid-2;\n            }\n        }\n        else if(arr[mid]==arr[mid+1]){\n            if((mid+1)%2==0){\n                i = mid+2;\n            }\n            else{\n                j = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nvar arr = [1,1,2,2,3,3,4,50,50,65,65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665510198,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpj9eu96ms.js:36:10)\n    at Object.<anonymous> (/tmp/tmpj9eu96ms.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    let i = 0;\n    let j = arr.length - 1;\n    while(i < j){\n        let mid = Math.floor((i + j) / 2);\n        if(arr[mid] == arr[mid - 1]){\n            if(mid % 2 == 0){\n                j = mid - 2;\n            }else{\n                i = mid + 1;\n            }\n        }else if(arr[mid] == arr[mid + 1]){\n            if(mid % 2 == 0){\n                i = mid + 2;\n            }else{\n                j = mid - 1;\n            }\n        }else{\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    let i = 0;\n    let j = arr.length - 1;\n    while(i < j){\n        let mid = Math.floor((i + j) / 2);\n        if(arr[mid] == arr[mid - 1]){\n            if((mid - i) % 2 == 0){\n                j = mid - 2;\n            }else{\n                i = mid + 1;\n            }\n        }else if(arr[mid] == arr[mid + 1]){\n            if((j - mid) % 2 == 0){\n                i = mid + 2;\n            }else{\n                j = mid - 1;\n            }\n        }else{\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i=0;\n    var j=arr.length-1;\n    while(i<j){\n        var mid=Math.floor((i+j)/2);\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid]==arr[mid-1]){\n            if((mid-i)%2==0){\n                i=mid+1;\n            }\n            else{\n                j=mid-1;\n            }\n        }\n        else{\n            if((j-mid)%2==0){\n                j=mid-1;\n            }\n            else{\n                i=mid+1;\n            }\n        }\n    }\n    return arr[i];\n}\nvar arr=[1,1,2,2,3,3,4,50,50,65,65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123256,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpg15yvp0u.js:35:10)\n    at Object.<anonymous> (/tmp/tmpg15yvp0u.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var start = 0;\n    var end = arr.length - 1;\n    while(start < end){\n        var mid = Math.floor((start + end)/2);\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]){\n            return arr[mid];\n        }\n        else if(arr[mid] == arr[mid-1]){\n            if(mid % 2 == 0){\n                start = mid + 1;\n            }\n            else{\n                end = mid - 1;\n            }\n        }\n        else if(arr[mid] == arr[mid+1]){\n            if(mid % 2 == 0){\n                end = mid - 1;\n            }\n            else{\n                start = mid + 1;\n            }\n        }\n    }\n    return arr[start];\n}\n\nvar arr = [1,1,2,2,3,3,4,50,50,65,65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123256,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpca9bz2d2.js:36:10)\n    at Object.<anonymous> (/tmp/tmpca9bz2d2.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i = 0;\n    var j = arr.length - 1;\n    while(i < j){\n        var m = Math.floor((i + j) / 2);\n        if(arr[m] == arr[m - 1]){\n            if(m % 2 == 0){\n                j = m - 2;\n            }else{\n                i = m + 1;\n            }\n        }else if(arr[m] == arr[m + 1]){\n            if(m % 2 == 0){\n                i = m + 2;\n            }else{\n                j = m - 1;\n            }\n        }else{\n            return arr[m];\n        }\n    }\n    return arr[i];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var n = arr.length;\n    var i = 0;\n    while(i < n){\n        if(arr[i] == arr[i+1]){\n            i = i + 2;\n        }\n        else{\n            return arr[i];\n        }\n    }\n    return -1;\n}\nvar arr = [1,1,2,2,3,3,4,50,50,65,65];\nvar result = search(arr);\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    let i=0;\n    let j=arr.length-1;\n    while(i<j){\n        let mid=Math.floor((i+j)/2);\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid]==arr[mid-1]){\n            if((mid-1)%2==0){\n                i=mid+1;\n            }\n            else{\n                j=mid-2;\n            }\n        }\n        else{\n            if((mid)%2==0){\n                i=mid+2;\n            }\n            else{\n                j=mid-1;\n            }\n        }\n    }\n    return arr[i];\n}\nlet arr=[1,1,2,2,3,3,4,50,50,65,65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] !== arr[i-1] && arr[i] !== arr[i+1]){\n            return arr[i];\n        }\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var result = 0;\n    for(var i = 0; i < arr.length; i++){\n        result ^= arr[i];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i=0;\n    while(i<arr.length){\n        if(arr[i]==arr[i+1]){\n            i=i+2;\n        }\n        else{\n            return arr[i];\n        }\n    }\n}\nvar arr=[1,1,3,3,4,5,5,7,7,8,8];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    let i = 0;\n    while(i < arr.length){\n        if(arr[i] === arr[i+1]){\n            i += 2;\n        }else{\n            return arr[i];\n        }\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var result = 0;\n    for(var i = 0; i < arr.length; i++){\n        result = result ^ arr[i];\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665510198,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    let i=0;\n    let j=arr.length-1;\n    while(i<j){\n        let mid=Math.floor((i+j)/2);\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid]==arr[mid-1]){\n            if((mid-1)%2==0){\n                i=mid+1;\n            }\n            else{\n                j=mid-2;\n            }\n        }\n        else{\n            if((mid)%2==0){\n                i=mid+2;\n            }\n            else{\n                j=mid-1;\n            }\n        }\n    }\n    return arr[i];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    for(var i=0;i<arr.length;i++){\n        if(arr[i]!=arr[i+1] && arr[i]!=arr[i-1]){\n            return arr[i];\n        }\n    }\n}\nvar arr=[1,1,2,2,3,3,4,50,50,65,65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i = 0;\n    while(i < arr.length){\n        if(arr[i] == arr[i+1]){\n            i = i + 2;\n        }\n        else{\n            return arr[i];\n        }\n    }\n}\nvar arr = [1,1,2,2,3,3,4,50,50,65,65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i;\n    for(i=0;i<arr.length;i++){\n        if(arr[i]!=arr[i+1] && arr[i]!=arr[i-1]){\n            return arr[i];\n        }\n    }\n}\nvar arr=[1,1,2,2,3,3,4,50,50,65,65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i=0;\n    var j=arr.length-1;\n    while(i<j){\n        var mid=Math.floor((i+j)/2);\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        else if(arr[mid]==arr[mid-1]){\n            if(mid%2==0){\n                j=mid-2;\n            }\n            else{\n                i=mid+1;\n            }\n        }\n        else if(arr[mid]==arr[mid+1]){\n            if(mid%2==0){\n                i=mid+2;\n            }\n            else{\n                j=mid-1;\n            }\n        }\n    }\n    return arr[i];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i = 0;\n    var j = arr.length - 1;\n    while(i < j){\n        var mid = Math.floor((i + j) / 2);\n        if(arr[mid] == arr[mid - 1]){\n            if(mid % 2 == 0){\n                j = mid - 2;\n            }\n            else{\n                i = mid + 1;\n            }\n        }\n        else if(arr[mid] == arr[mid + 1]){\n            if(mid % 2 == 0){\n                i = mid + 2;\n            }\n            else{\n                j = mid - 1;\n            }\n        }\n        else{\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var n = arr.length;\n    var i = 0;\n    while(i < n){\n        if(arr[i] == arr[i+1]){\n            i = i + 2;\n        }\n        else{\n            return arr[i];\n        }\n    }\n    return -1;\n}\nvar arr = [1,1,2,2,3,3,4,50,50,65,65];\nvar result = search(arr);\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i = 0;\n    var j = arr.length - 1;\n    while(i < j){\n        var m = Math.floor((i + j) / 2);\n        if(arr[m] == arr[m - 1]){\n            if((m - i) % 2 == 0){\n                i = m + 1;\n            }else{\n                j = m - 1;\n            }\n        }else if(arr[m] == arr[m + 1]){\n            if((j - m) % 2 == 0){\n                j = m - 1;\n            }else{\n                i = m + 1;\n            }\n        }else{\n            return arr[m];\n        }\n    }\n    return arr[i];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123256,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpx5kuqhvz.js:31:10)\n    at Object.<anonymous> (/tmp/tmpx5kuqhvz.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i = 0;\n    while(i < arr.length){\n        if(arr[i] != arr[i+1] && arr[i] != arr[i-1]){\n            return arr[i];\n        }\n        i++;\n    }\n}\n\nvar arr = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,35,35,36,36,37,37,38,38,39,39,40,40,41,41,42,42,43,43,44,44,45,45,46,46,47,47,48,48,49,49,50,50,51,51,52,52,53,53,54,54,55,55,56,56,57,57,58,58,59,59,60,60,61,61,62,62,63,63,64,64,65,65,66,66,67,67,68,68,69,69,70,70,71,71,72,72,73,73,74,74,75,75,76,76,77,77,78,78,79,79,80,80,81,81,82,82,83,83,84,84,85,85,86,86,87,87,88,88,89,89,90,90,91,91,92,92,93,93,94,94,95,95,96,96,97,97,98,98,99,99,100,100,101,101,102,102,103,103,104,104,105,105,106,106,107,107,108,108,109,109,110,110,111,\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123256,
      "stdout": "",
      "stderr": "/tmp/tmprpdbdtoq.js:13\nconst assert = require('node:assert');\n^^^^^\n\nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var low = 0;\n    var high = arr.length - 1;\n    var mid = 0;\n    while(low <= high){\n        mid = Math.floor((low + high)/2);\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]){\n            return arr[mid];\n        }\n        else if(arr[mid] == arr[mid-1]){\n            if((mid-1)%2 == 0){\n                low = mid + 1;\n            }\n            else{\n                high = mid - 2;\n            }\n        }\n        else if(arr[mid] == arr[mid+1]){\n            if((mid+1)%2 == 0){\n                low = mid + 2;\n            }\n            else{\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\nvar arr = [1,1,2,2,3,3,4,50,50,65,65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123256,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpm6wz9263.js:36:10)\n    at Object.<anonymous> (/tmp/tmpm6wz9263.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i=0;\n    var j=arr.length-1;\n    while(i<j){\n        var mid=Math.floor((i+j)/2);\n        if(arr[mid]==arr[mid+1]){\n            if(mid%2==0){\n                i=mid+2;\n            }else{\n                j=mid-1;\n            }\n        }else if(arr[mid]==arr[mid-1]){\n            if(mid%2==0){\n                j=mid-2;\n            }else{\n                i=mid+1;\n            }\n        }else{\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i=0;\n    while(i<arr.length){\n        if(arr[i]==arr[i+1]){\n            i=i+2;\n        }\n        else{\n            return arr[i];\n        }\n    }\n}\nvar arr=[1,1,2,2,3,3,4,50,50,65,65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i = 0;\n    var j = arr.length - 1;\n    while(i < j){\n        var mid = Math.floor((i+j)/2);\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]){\n            if((mid-1)%2 == 0){\n                i = mid + 1;\n            }else{\n                j = mid - 2;\n            }\n        }else{\n            if((mid)%2 == 0){\n                i = mid + 2;\n            }else{\n                j = mid - 1;\n            }\n        }\n    }\n    return arr[i];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    let start = 0;\n    let end = arr.length-1;\n    while(start<=end){\n        let mid = Math.floor((start+end)/2);\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        else if(arr[mid]==arr[mid-1]){\n            if((mid-1)%2==0){\n                start = mid+1;\n            }\n            else{\n                end = mid-2;\n            }\n        }\n        else if(arr[mid]==arr[mid+1]){\n            if((mid+1)%2==0){\n                start = mid+2;\n            }\n            else{\n                end = mid-1;\n            }\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp4i997b0x.js:35:10)\n    at Object.<anonymous> (/tmp/tmp4i997b0x.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    let i = 0;\n    let j = arr.length - 1;\n    while(i < j){\n        let m = Math.floor((i + j) / 2);\n        if(arr[m] == arr[m - 1]){\n            if((m - i + 1) % 2 == 0){\n                i = m + 1;\n            }\n            else{\n                j = m - 2;\n            }\n        }\n        else if(arr[m] == arr[m + 1]){\n            if((j - m + 1) % 2 == 0){\n                j = m - 1;\n            }\n            else{\n                i = m + 2;\n            }\n        }\n        else{\n            return arr[m];\n        }\n    }\n    return arr[i];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i = 0;\n    var j = arr.length - 1;\n    while(i < j){\n        var mid = Math.floor((i + j) / 2);\n        if(arr[mid] == arr[mid - 1]){\n            if((mid - i) % 2 == 0){\n                i = mid + 1;\n            }\n            else{\n                j = mid - 1;\n            }\n        }\n        else if(arr[mid] == arr[mid + 1]){\n            if((j - mid) % 2 == 0){\n                j = mid - 1;\n            }\n            else{\n                i = mid + 1;\n            }\n        }\n        else{\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmph79lf63y.js:35:10)\n    at Object.<anonymous> (/tmp/tmph79lf63y.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i=0;\n    var j=arr.length-1;\n    while(i<j){\n        var mid=Math.floor((i+j)/2);\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        else if(arr[mid]==arr[mid-1]){\n            if((mid-i)%2==0){\n                i=mid+1;\n            }\n            else{\n                j=mid-1;\n            }\n        }\n        else if(arr[mid]==arr[mid+1]){\n            if((j-mid)%2==0){\n                j=mid-1;\n            }\n            else{\n                i=mid+1;\n            }\n        }\n    }\n    return arr[i];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpnmwo1oo2.js:34:10)\n    at Object.<anonymous> (/tmp/tmpnmwo1oo2.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i=0,j=arr.length-1;\n    while(i<j){\n        var mid=Math.floor((i+j)/2);\n        if(arr[mid]==arr[mid-1]){\n            if(mid%2==0)\n                j=mid-2;\n            else\n                i=mid+1;\n        }\n        else if(arr[mid]==arr[mid+1]){\n            if(mid%2==0)\n                i=mid+2;\n            else\n                j=mid-1;\n        }\n        else\n            return arr[mid];\n    }\n    return arr[i];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i=0;\n    while(i<arr.length){\n        if(arr[i]===arr[i+1]){\n            i=i+2;\n        }\n        else{\n            return arr[i];\n        }\n    }\n}\nvar arr=[1,1,2,2,3,3,4,50,50,65,65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    let i = 0;\n    let j = arr.length - 1;\n    while(i < j){\n        let mid = Math.floor((i + j)/2);\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]){\n            return arr[mid];\n        }\n        else if(arr[mid] == arr[mid-1]){\n            if((mid-1)%2 == 0){\n                i = mid + 1;\n            }\n            else{\n                j = mid - 2;\n            }\n        }\n        else if(arr[mid] == arr[mid+1]){\n            if((mid+1)%2 == 0){\n                i = mid + 2;\n            }\n            else{\n                j = mid - 1;\n            }\n        }\n    }\n    return arr[i];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp281ryojq.js:35:10)\n    at Object.<anonymous> (/tmp/tmp281ryojq.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var low = 0;\n    var high = arr.length - 1;\n    while(low < high){\n        var mid = Math.floor((low + high) / 2);\n        if(mid % 2 == 0){\n            if(arr[mid] == arr[mid + 1]){\n                low = mid + 2;\n            }else{\n                high = mid;\n            }\n        }else{\n            if(arr[mid] == arr[mid - 1]){\n                low = mid + 1;\n            }else{\n                high = mid - 1;\n            }\n        }\n    }\n    return arr[low];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i = 0;\n    var j = arr.length - 1;\n    while(i < j){\n        var mid = Math.floor((i + j) / 2);\n        if(arr[mid] == arr[mid - 1]){\n            if(mid % 2 == 0){\n                j = mid - 2;\n            }else{\n                i = mid + 1;\n            }\n        }else if(arr[mid] == arr[mid + 1]){\n            if(mid % 2 == 0){\n                i = mid + 2;\n            }else{\n                j = mid - 1;\n            }\n        }else{\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var result = [];\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] === arr[i+1]){\n            i++;\n        }\n        else{\n            result.push(arr[i]);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3\n]\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpbh7lo1or.js:19:10)\n    at Object.<anonymous> (/tmp/tmpbh7lo1or.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3 ],\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    for(var i=0;i<arr.length;i++){\n        if(arr[i]!=arr[i+1] && arr[i]!=arr[i-1]){\n            return arr[i];\n        }\n    }\n}\nvar arr=[1,1,2,2,3,3,4,50,50,65,65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    let i = 0;\n    let j = arr.length - 1;\n    while(i < j){\n        let mid = Math.floor((i + j) / 2);\n        if(arr[mid] == arr[mid + 1]){\n            if(mid % 2 == 0){\n                i = mid + 2;\n            }\n            else{\n                j = mid - 1;\n            }\n        }\n        else if(arr[mid] == arr[mid - 1]){\n            if(mid % 2 == 0){\n                j = mid - 2;\n            }\n            else{\n                i = mid + 1;\n            }\n        }\n        else{\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n\tvar start = 0;\n\tvar end = arr.length - 1;\n\twhile(start <= end){\n\t\tvar mid = Math.floor((start + end)/2);\n\t\tif(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]){\n\t\t\treturn arr[mid];\n\t\t}\n\t\tif(arr[mid] == arr[mid-1]){\n\t\t\tif(mid % 2 == 0){\n\t\t\t\tstart = mid + 1;\n\t\t\t}else{\n\t\t\t\tend = mid - 1;\n\t\t\t}\n\t\t}\n\t\tif(arr[mid] == arr[mid+1]){\n\t\t\tif(mid % 2 == 0){\n\t\t\t\tend = mid - 1;\n\t\t\t}else{\n\t\t\t\tstart = mid + 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpybipgyc8.js:33:10)\n    at Object.<anonymous> (/tmp/tmpybipgyc8.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    let i=0;\n    let j=arr.length-1;\n    while(i<j){\n        let mid=Math.floor((i+j)/2);\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid]==arr[mid-1]){\n            if((mid-1)%2==0){\n                i=mid+1;\n            }\n            else{\n                j=mid-2;\n            }\n        }\n        else{\n            if(mid%2==0){\n                i=mid+2;\n            }\n            else{\n                j=mid-1;\n            }\n        }\n    }\n    return arr[i];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    let i = 0;\n    while(i < arr.length){\n        if(arr[i] === arr[i+1]){\n            i += 2;\n        }else{\n            return arr[i];\n        }\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    let i = 0;\n    let j = arr.length - 1;\n    while(i < j){\n        let mid = Math.floor((i + j)/2);\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]){\n            if(mid % 2 == 0){\n                j = mid - 2;\n            }else{\n                i = mid + 1;\n            }\n        }\n        if(arr[mid] == arr[mid+1]){\n            if(mid % 2 == 0){\n                i = mid + 2;\n            }else{\n                j = mid - 1;\n            }\n        }\n    }\n    return arr[i];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i=0;\n    var j=arr.length-1;\n    var mid=Math.floor((i+j)/2);\n    while(i<=j){\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        else if(arr[mid]==arr[mid-1]){\n            if(mid%2==0){\n                j=mid-2;\n            }\n            else{\n                i=mid+1;\n            }\n        }\n        else if(arr[mid]==arr[mid+1]){\n            if(mid%2==0){\n                i=mid+2;\n            }\n            else{\n                j=mid-1;\n            }\n        }\n        mid=Math.floor((i+j)/2);\n    }\n    return -1;\n}\nvar arr=[1,1,2,2,3,3,4,50,50,65,65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i = 0;\n    while(i < arr.length){\n        if(arr[i] == arr[i+1]){\n            i += 2;\n        }\n        else{\n            return arr[i];\n        }\n    }\n}\n\nvar arr = [1,1,2,2,3,3,4,50,50,65,65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    let result = 0;\n    for(let i = 0; i < arr.length; i++){\n        result ^= arr[i];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var len = arr.length;\n    var i = 0;\n    while(i < len){\n        if(arr[i] == arr[i+1]){\n            i = i + 2;\n        }else{\n            return arr[i];\n        }\n    }\n}\nvar arr = [1,1,2,2,3,3,4,50,50,65,65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] != arr[i+1] && arr[i] != arr[i-1]){\n            return arr[i];\n        }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i = 0;\n    var j = arr.length - 1;\n    while(i < j){\n        var mid = Math.floor((i + j) / 2);\n        if(arr[mid] == arr[mid - 1]){\n            if(mid % 2 == 0){\n                j = mid - 2;\n            }\n            else{\n                i = mid + 1;\n            }\n        }\n        else if(arr[mid] == arr[mid + 1]){\n            if(mid % 2 == 0){\n                i = mid + 2;\n            }\n            else{\n                j = mid - 1;\n            }\n        }\n        else{\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i = 0;\n    while(i < arr.length){\n        if(arr[i] == arr[i+1]){\n            i = i + 2;\n        }\n        else{\n            return arr[i];\n        }\n    }\n}\nvar arr = [1,1,2,2,3,3,4,50,50,65,65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    let i = 0;\n    let j = arr.length - 1;\n    while(i < j){\n        let mid = Math.floor((i + j) / 2);\n        if(arr[mid] == arr[mid - 1]){\n            if(mid % 2 == 0){\n                j = mid - 2;\n            }else{\n                i = mid + 1;\n            }\n        }else if(arr[mid] == arr[mid + 1]){\n            if(mid % 2 == 0){\n                i = mid + 2;\n            }else{\n                j = mid - 1;\n            }\n        }else{\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var result = arr[0];\n    for(var i = 1; i < arr.length; i++){\n        result = result ^ arr[i];\n    }\n    return result;\n}\nvar arr = [1,1,2,2,3,3,4,50,50,65,65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i = 0;\n    var j = arr.length - 1;\n    while(i < j){\n        var mid = Math.floor((i + j) / 2);\n        if(arr[mid] == arr[mid - 1]){\n            if((mid - i) % 2 == 0){\n                i = mid + 1;\n            }\n            else{\n                j = mid - 2;\n            }\n        }\n        else if(arr[mid] == arr[mid + 1]){\n            if((j - mid) % 2 == 0){\n                j = mid - 1;\n            }\n            else{\n                i = mid + 2;\n            }\n        }\n        else{\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpuczgrz8o.js:35:10)\n    at Object.<anonymous> (/tmp/tmpuczgrz8o.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    let i = 0;\n    let j = arr.length - 1;\n    while(i < j){\n        let mid = Math.floor((i + j) / 2);\n        if(arr[mid] == arr[mid + 1]){\n            if(mid % 2 == 0){\n                i = mid + 2;\n            }else{\n                j = mid - 1;\n            }\n        }else if(arr[mid] == arr[mid - 1]){\n            if(mid % 2 == 0){\n                j = mid - 2;\n            }else{\n                i = mid + 1;\n            }\n        }else{\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    let i = 0;\n    let j = arr.length - 1;\n    while(i < j){\n        let mid = Math.floor((i + j) / 2);\n        if(arr[mid] == arr[mid - 1]){\n            if(mid % 2 == 0){\n                j = mid - 2;\n            }else{\n                i = mid + 1;\n            }\n        }else if(arr[mid] == arr[mid + 1]){\n            if(mid % 2 == 0){\n                i = mid + 2;\n            }else{\n                j = mid - 1;\n            }\n        }else{\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    let i = 0;\n    let j = arr.length - 1;\n    while(i < j){\n        let mid = Math.floor((i + j) / 2);\n        if(arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]){\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid - 1]){\n            if((mid - 1) % 2 == 0){\n                j = mid - 2;\n            }\n            else{\n                i = mid + 1;\n            }\n        }\n        else{\n            if((mid - 1) % 2 == 0){\n                i = mid + 2;\n            }\n            else{\n                j = mid - 1;\n            }\n        }\n    }\n    return arr[i];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpeiuppwzk.js:35:10)\n    at Object.<anonymous> (/tmp/tmpeiuppwzk.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] !== arr[i+1] && arr[i] !== arr[i-1]){\n            return arr[i];\n        }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    for(var i=0;i<arr.length;i++){\n        if(arr[i]!=arr[i+1] && arr[i]!=arr[i-1]){\n            return arr[i];\n        }\n    }\n}\nvar arr=[1,1,2,2,3,3,4,50,50,65,65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i = 0;\n    while(i < arr.length){\n        if(arr[i] == arr[i+1]){\n            i += 2;\n        }else{\n            return arr[i];\n        }\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i = 0;\n    while(i < arr.length){\n        if(arr[i] === arr[i+1]){\n            i = i + 2;\n        }else{\n            return arr[i];\n        }\n    }\n}\n\nvar arr = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,35,35,36,36,37,37,38,38,39,39,40,40,41,41,42,42,43,43,44,44,45,45,46,46,47,47,48,48,49,49,50,50,51,51,52,52,53,53,54,54,55,55,56,56,57,57,58,58,59,59,60,60,61,61,62,62,63,63,64,64,65,65,66,66,67,67,68,68,69,69,70,70,71,71,72,72,73,73,74,74,75,75,76,76,77,77,78,78,79,79,80,80,81,81,82,82,83,83,84,84,85,85,86,86,87,87,88,88,89,89,90,90,91,91,92,92,93,93,94,94,95,95,96,96,97,97,98,98,99,99,100,100,101,101,102,102,103,103,104,104,105,105,106,106,107,107,108,108,109,109,110,110,111,111,112\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "/tmp/tmpk90odgl1.js:14\nconst assert = require('node:assert');\n^^^^^\n\nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i=0;\n    while(i<arr.length){\n        if(arr[i]==arr[i+1]){\n            i+=2;\n        }\n        else{\n            return arr[i];\n        }\n    }\n}\nvar arr=[1,1,2,2,3,3,4,50,50,65,65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var result = [];\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] !== arr[i+1] && arr[i] !== arr[i-1]){\n            result.push(arr[i]);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3\n]\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpgkj8h_k4.js:16:10)\n    at Object.<anonymous> (/tmp/tmpgkj8h_k4.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3 ],\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var count=0;\n    for(var i=0;i<arr.length;i++){\n        for(var j=0;j<arr.length;j++){\n            if(arr[i]==arr[j]){\n                count++;\n            }\n        }\n        if(count==1){\n            console.log(arr[i]);\n        }\n        count=0;\n    }\n}\nvar arr=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "/tmp/tmpr57pegpa.js:17\nconst assert = require('node:assert');\n^^^^^\n\nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i;\n    for(i=0;i<arr.length;i++){\n        if(arr[i]!=arr[i+1] && arr[i]!=arr[i-1]){\n            return arr[i];\n        }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i = 0;\n    var j = arr.length - 1;\n    while(i < j){\n        var mid = Math.floor((i + j) / 2);\n        if(arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]){\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid - 1]){\n            if((mid - 1) % 2 == 0){\n                i = mid + 1;\n            }else{\n                j = mid - 2;\n            }\n        }\n        if(arr[mid] == arr[mid + 1]){\n            if((mid + 1) % 2 == 0){\n                i = mid + 2;\n            }else{\n                j = mid - 1;\n            }\n        }\n    }\n    return arr[i];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpoit_2pkd.js:33:10)\n    at Object.<anonymous> (/tmp/tmpoit_2pkd.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var count=0;\n    for(var i=0;i<arr.length;i++){\n        for(var j=0;j<arr.length;j++){\n            if(arr[i]==arr[j]){\n                count++;\n            }\n        }\n        if(count==1){\n            console.log(arr[i]);\n        }\n        count=0;\n    }\n}\nsearch([1,1,2,2,3,3,4,50,50,65,65]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "4\n3\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpti20xqnc.js:23:10)\n    at Object.<anonymous> (/tmp/tmpti20xqnc.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var len = arr.length;\n    var i = 0;\n    while(i < len){\n        if(arr[i] != arr[i+1] && arr[i] != arr[i-1]){\n            return arr[i];\n        }\n        i++;\n    }\n}\n\nvar arr = [1,1,2,2,3,3,4,50,50,65,65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i = 0;\n    while(i < arr.length){\n        if(arr[i] !== arr[i+1] && arr[i] !== arr[i-1]){\n            return arr[i];\n        }\n        i++;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n  var result = 0;\n  for(var i = 0; i < arr.length; i++){\n    result = result ^ arr[i];\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i = 0;\n    var j = arr.length - 1;\n    while(i < j){\n        var m = Math.floor((i+j)/2);\n        if(arr[m] != arr[m-1] && arr[m] != arr[m+1]){\n            return arr[m];\n        }\n        if(arr[m] == arr[m-1]){\n            if((m-i)%2 == 0){\n                i = m+1;\n            }else{\n                j = m-2;\n            }\n        }\n        if(arr[m] == arr[m+1]){\n            if((j-m)%2 == 0){\n                j = m-1;\n            }else{\n                i = m+2;\n            }\n        }\n    }\n    return arr[i];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp0k1e42v6.js:33:10)\n    at Object.<anonymous> (/tmp/tmp0k1e42v6.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var count=0;\n    for(var i=0;i<arr.length;i++){\n        for(var j=0;j<arr.length;j++){\n            if(arr[i]==arr[j]){\n                count++;\n            }\n        }\n        if(count==1){\n            return arr[i];\n        }\n        count=0;\n    }\n}\nvar arr=[1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,35,35,36,36,37,37,38,38,39,39,40,40,41,41,42,42,43,43,44,44,45,45,46,46,47,47,48,48,49,49,50,50,51,51,52,52,53,53,54,54,55,55,56,56,57,57,58,58,59,59,60,60,61,61,62,62,63,63,64,64,65,65,66,66,67,67,68,68,69,69,70,70,71,71,72,72,73,73,74,74,75,75,76,76,77,77,78,78,79,79,80,80,81,81,82,82,83,83,84,84,85,85,86,86,87,87,88,88,89,89,90,90,91,91,92,92,93,93,94,94,95,95,96,96,97,97,98,98,99,99,100,100,101,101,102,102,103,103,\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "/tmp/tmph6_uyk9t.js:17\nconst assert = require('node:assert');\n^^^^^\n\nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i = 0;\n    var j = arr.length - 1;\n    while(i < j){\n        var mid = Math.floor((i + j) / 2);\n        if(arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]){\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid - 1]){\n            if((mid - 1) % 2 == 0){\n                i = mid + 1;\n            }else{\n                j = mid - 2;\n            }\n        }\n        if(arr[mid] == arr[mid + 1]){\n            if((mid + 1) % 2 == 0){\n                i = mid + 2;\n            }else{\n                j = mid - 1;\n            }\n        }\n    }\n    return arr[i];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpoit_2pkd.js:33:10)\n    at Object.<anonymous> (/tmp/tmpoit_2pkd.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    let i = 0;\n    let j = arr.length - 1;\n    while(i < j){\n        let mid = Math.floor((i + j) / 2);\n        if(arr[mid] == arr[mid - 1]){\n            if((mid - i) % 2 == 0){\n                i = mid + 1;\n            }else{\n                j = mid - 2;\n            }\n        }else if(arr[mid] == arr[mid + 1]){\n            if((j - mid) % 2 == 0){\n                j = mid - 1;\n            }else{\n                i = mid + 2;\n            }\n        }else{\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp0zonpvs3.js:31:10)\n    at Object.<anonymous> (/tmp/tmp0zonpvs3.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    let result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] !== arr[i+1]){\n            result.push(arr[i]);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp5up5cv0r.js:16:10)\n    at Object.<anonymous> (/tmp/tmp5up5cv0r.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3 ],\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    let i = 0;\n    let j = arr.length - 1;\n    while(i < j){\n        let mid = Math.floor((i + j) / 2);\n        if(arr[mid] == arr[mid + 1]){\n            if(mid % 2 == 0){\n                i = mid + 2;\n            }\n            else{\n                j = mid - 1;\n            }\n        }\n        else if(arr[mid] == arr[mid - 1]){\n            if(mid % 2 == 0){\n                j = mid - 2;\n            }\n            else{\n                i = mid + 1;\n            }\n        }\n        else{\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var low = 0;\n    var high = arr.length - 1;\n    while(low <= high){\n        var mid = Math.floor((low + high) / 2);\n        if(arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]){\n            return arr[mid];\n        }\n        else if(arr[mid] == arr[mid - 1]){\n            if(mid % 2 == 0){\n                high = mid - 2;\n            }\n            else{\n                low = mid + 1;\n            }\n        }\n        else if(arr[mid] == arr[mid + 1]){\n            if(mid % 2 == 0){\n                low = mid + 2;\n            }\n            else{\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\nvar arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i = 0;\n    var j = arr.length - 1;\n    while(i < j){\n        var mid = Math.floor((i+j)/2);\n        if(arr[mid] == arr[mid-1]){\n            if(mid % 2 == 0){\n                j = mid - 2;\n            }\n            else{\n                i = mid + 1;\n            }\n        }\n        else if(arr[mid] == arr[mid+1]){\n            if(mid % 2 == 0){\n                i = mid + 2;\n            }\n            else{\n                j = mid - 1;\n            }\n        }\n        else{\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var len = arr.length;\n    var i = 0;\n    while(i < len){\n        if(arr[i] == arr[i+1]){\n            i = i + 2;\n        }\n        else{\n            return arr[i];\n        }\n    }\n}\nvar arr = [1,1,2,2,3,3,4,50,50,65,65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i=0;\n    while(i<arr.length){\n        if(arr[i]==arr[i+1]){\n            i=i+2;\n        }\n        else{\n            return arr[i];\n        }\n    }\n}\nvar arr=[1,1,2,2,3,3,4,50,50,65,65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i;\n    for(i=0;i<arr.length;i++){\n        if(arr[i]!=arr[i+1] && arr[i]!=arr[i-1]){\n            return arr[i];\n        }\n    }\n}\nvar arr=[1,1,2,2,3,3,4,50,50,65,65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i=0;\n    var j=arr.length-1;\n    while(i<j){\n        var mid=Math.floor((i+j)/2);\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid]==arr[mid-1]){\n            if(mid%2==0){\n                i=mid+1;\n            }\n            else{\n                j=mid-1;\n            }\n        }\n        else{\n            if(mid%2==0){\n                j=mid-1;\n            }\n            else{\n                i=mid+1;\n            }\n        }\n    }\n    return arr[i];\n}\nvar arr=[1,1,2,2,3,3,4,50,50,65,65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpivisatao.js:35:10)\n    at Object.<anonymous> (/tmp/tmpivisatao.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i=0;\n    var j=arr.length-1;\n    while(i<j){\n        var mid=Math.floor((i+j)/2);\n        if(arr[mid]==arr[mid-1]){\n            if(mid%2==0){\n                j=mid-2;\n            }\n            else{\n                i=mid+1;\n            }\n        }\n        else if(arr[mid]==arr[mid+1]){\n            if(mid%2==0){\n                i=mid+2;\n            }\n            else{\n                j=mid-1;\n            }\n        }\n        else{\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\nvar arr=[1,1,2,2,3,3,4,50,50,65,65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i = 0;\n    var j = arr.length - 1;\n    var mid = 0;\n    while(i < j){\n        mid = Math.floor((i + j) / 2);\n        if(arr[mid] == arr[mid - 1]){\n            if(mid % 2 == 0){\n                j = mid - 2;\n            }\n            else{\n                i = mid + 1;\n            }\n        }\n        else if(arr[mid] == arr[mid + 1]){\n            if(mid % 2 == 0){\n                i = mid + 2;\n            }\n            else{\n                j = mid - 1;\n            }\n        }\n        else{\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i=0;\n    while(i<arr.length){\n        if(arr[i]!=arr[i+1] && arr[i]!=arr[i-1]){\n            return arr[i];\n        }\n        i++;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665510198,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var result = [];\n    for(var i=0; i<arr.length; i++){\n        if(arr[i] != arr[i+1]){\n            result.push(arr[i]);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpscdni88q.js:16:10)\n    at Object.<anonymous> (/tmp/tmpscdni88q.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3 ],\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    let low = 0;\n    let high = arr.length - 1;\n    while(low <= high){\n        let mid = Math.floor((low + high) / 2);\n        if(arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]){\n            return arr[mid];\n        }\n        else if(arr[mid] == arr[mid - 1]){\n            if((mid - 1) % 2 == 0){\n                low = mid + 1;\n            }\n            else{\n                high = mid - 2;\n            }\n        }\n        else if(arr[mid] == arr[mid + 1]){\n            if((mid + 1) % 2 == 0){\n                low = mid + 2;\n            }\n            else{\n                high = mid - 1;\n            }\n        }\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpjxtxme6e.js:34:10)\n    at Object.<anonymous> (/tmp/tmpjxtxme6e.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    let i = 0;\n    let j = arr.length - 1;\n    while(i < j){\n        let mid = Math.floor((i + j) / 2);\n        if(arr[mid] == arr[mid - 1]){\n            if(mid % 2 == 0){\n                j = mid - 2;\n            }else{\n                i = mid + 1;\n            }\n        }else if(arr[mid] == arr[mid + 1]){\n            if(mid % 2 == 0){\n                i = mid + 2;\n            }else{\n                j = mid - 1;\n            }\n        }else{\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i = 0;\n    while(i < arr.length){\n        if(arr[i] == arr[i+1]){\n            i = i + 2;\n        }\n        else{\n            return arr[i];\n        }\n    }\n}\nvar arr = [1,1,3,3,4,5,5,7,7,8,8];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    let i = 0;\n    let j = arr.length - 1;\n    while(i < j){\n        let mid = Math.floor((i + j) / 2);\n        if(arr[mid] == arr[mid - 1]){\n            if(mid % 2 == 0){\n                j = mid - 2;\n            }else{\n                i = mid + 1;\n            }\n        }else if(arr[mid] == arr[mid + 1]){\n            if(mid % 2 == 0){\n                i = mid + 2;\n            }else{\n                j = mid - 1;\n            }\n        }else{\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    let i = 0;\n    let j = arr.length - 1;\n    while(i < j){\n        let mid = Math.floor((i + j) / 2);\n        if(arr[mid] == arr[mid - 1]){\n            if(mid % 2 == 0){\n                j = mid - 2;\n            }\n            else{\n                i = mid + 1;\n            }\n        }\n        else if(arr[mid] == arr[mid + 1]){\n            if(mid % 2 == 0){\n                i = mid + 2;\n            }\n            else{\n                j = mid - 1;\n            }\n        }\n        else{\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i = 0;\n    var j = arr.length - 1;\n    var mid = 0;\n    while(i < j){\n        mid = Math.floor((i + j) / 2);\n        if(arr[mid] == arr[mid - 1]){\n            if(mid % 2 == 0){\n                j = mid - 2;\n            }else{\n                i = mid + 1;\n            }\n        }else if(arr[mid] == arr[mid + 1]){\n            if(mid % 2 == 0){\n                i = mid + 2;\n            }else{\n                j = mid - 1;\n            }\n        }else{\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    let i = 0;\n    let j = arr.length - 1;\n    while(i < j){\n        let mid = Math.floor((i + j) / 2);\n        if(arr[mid] == arr[mid - 1]){\n            if((mid - i) % 2 == 0){\n                i = mid + 1;\n            }else{\n                j = mid - 2;\n            }\n        }else if(arr[mid] == arr[mid + 1]){\n            if((j - mid) % 2 == 0){\n                j = mid - 1;\n            }else{\n                i = mid + 2;\n            }\n        }else{\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp0zonpvs3.js:31:10)\n    at Object.<anonymous> (/tmp/tmp0zonpvs3.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i = 0;\n    while(i < arr.length){\n        if(arr[i] == arr[i+1]){\n            i += 2;\n        }else{\n            return arr[i];\n        }\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i = 0;\n    while(i < arr.length){\n        if(arr[i] != arr[i+1] && arr[i] != arr[i-1]){\n            return arr[i];\n        }\n        i++;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i=0;\n    var j=arr.length-1;\n    while(i<j){\n        var mid=Math.floor((i+j)/2);\n        if(arr[mid]==arr[mid-1]){\n            if(mid%2==0){\n                j=mid-2;\n            }\n            else{\n                i=mid+1;\n            }\n        }\n        else if(arr[mid]==arr[mid+1]){\n            if(mid%2==0){\n                i=mid+2;\n            }\n            else{\n                j=mid-1;\n            }\n        }\n        else{\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\nvar arr=[1,1,2,2,3,3,4,50,50,65,65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i;\n    for(i=0;i<arr.length;i++){\n        if(arr[i]!=arr[i+1] && arr[i]!=arr[i-1]){\n            return arr[i];\n        }\n    }\n}\nvar arr=[1,1,2,2,3,3,4,50,50,65,65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i=0;\n    var j=arr.length-1;\n    while(i<j){\n        var mid=Math.floor((i+j)/2);\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        else if(arr[mid]==arr[mid-1]){\n            if((mid-1)%2==0){\n                i=mid+1;\n            }\n            else{\n                j=mid-2;\n            }\n        }\n        else if(arr[mid]==arr[mid+1]){\n            if((mid)%2==0){\n                i=mid+2;\n            }\n            else{\n                j=mid-1;\n            }\n        }\n    }\n    return arr[i];\n}\nvar arr=[1,1,2,2,3,3,4,50,50,65,65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    let i=0;\n    while(i<arr.length){\n        if(arr[i]!=arr[i+1] && arr[i]!=arr[i-1]){\n            return arr[i];\n        }\n        i++;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i=0;\n    var j=arr.length-1;\n    while(i<j){\n        var mid=Math.floor((i+j)/2);\n        if(arr[mid]==arr[mid-1]){\n            if(mid%2==0){\n                j=mid-2;\n            }\n            else{\n                i=mid+1;\n            }\n        }\n        else if(arr[mid]==arr[mid+1]){\n            if(mid%2==0){\n                i=mid+2;\n            }\n            else{\n                j=mid-1;\n            }\n        }\n        else{\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\nvar arr=[1,1,2,2,3,3,4,50,50,65,65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i=0;\n    while(i<arr.length){\n        if(arr[i]==arr[i+1]){\n            i=i+2;\n        }\n        else{\n            return arr[i];\n        }\n    }\n}\nvar arr=[1,1,2,2,3,3,4,50,50,65,65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i=0;\n    var j=arr.length-1;\n    while(i<j){\n        var mid=Math.floor((i+j)/2);\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        else if(arr[mid]==arr[mid-1]){\n            if((mid-1)%2==0){\n                i=mid+1;\n            }\n            else{\n                j=mid-2;\n            }\n        }\n        else if(arr[mid]==arr[mid+1]){\n            if((mid+1)%2==0){\n                i=mid+2;\n            }\n            else{\n                j=mid-1;\n            }\n        }\n    }\n    return arr[i];\n}\nvar arr=[1,1,2,2,3,3,4,50,50,65,65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665510198,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpn17_8rwt.js:35:10)\n    at Object.<anonymous> (/tmp/tmpn17_8rwt.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i=0;\n    var j=arr.length-1;\n    while(i<j){\n        var mid=Math.floor((i+j)/2);\n        if(arr[mid]==arr[mid-1]){\n            if(mid%2==0){\n                j=mid-2;\n            }\n            else{\n                i=mid+1;\n            }\n        }\n        else if(arr[mid]==arr[mid+1]){\n            if(mid%2==0){\n                i=mid+2;\n            }\n            else{\n                j=mid-1;\n            }\n        }\n        else{\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\nvar arr=[1,1,2,2,3,3,4,50,50,65,65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    let i = 0;\n    let j = arr.length - 1;\n    while(i < j){\n        let mid = Math.floor((i + j) / 2);\n        if(arr[mid] == arr[mid - 1]){\n            if(mid % 2 == 0){\n                j = mid - 2;\n            }\n            else{\n                i = mid + 1;\n            }\n        }\n        else if(arr[mid] == arr[mid + 1]){\n            if(mid % 2 == 0){\n                i = mid + 2;\n            }\n            else{\n                j = mid - 1;\n            }\n        }\n        else{\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i=0;\n    while(i<arr.length){\n        if(arr[i]!=arr[i+1] && arr[i]!=arr[i-1]){\n            return arr[i];\n        }\n        i++;\n    }\n}\nvar arr=[1,1,2,2,3,3,4,50,50,65,65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    let i=0;\n    let j=arr.length-1;\n    while(i<j){\n        let mid=Math.floor((i+j)/2);\n        if(arr[mid]==arr[mid-1]){\n            if(mid%2==0){\n                j=mid-2;\n            }else{\n                i=mid+1;\n            }\n        }else if(arr[mid]==arr[mid+1]){\n            if(mid%2==0){\n                i=mid+2;\n            }else{\n                j=mid-1;\n            }\n        }else{\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    let i = 0;\n    while(i < arr.length){\n        if(arr[i] === arr[i+1]){\n            i = i + 2;\n        }\n        else{\n            return arr[i];\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i=0;\n    while(i<arr.length){\n        if(arr[i]!=arr[i+1]){\n            return arr[i];\n        }\n        i=i+2;\n    }\n}\nvar arr=[1,1,2,2,3,3,4,50,50,65,65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var count = 0;\n    var i = 0;\n    var j = arr.length - 1;\n    while(i < j){\n        if(arr[i] == arr[i+1]){\n            i = i + 2;\n        }\n        else{\n            return arr[i];\n        }\n        if(arr[j] == arr[j-1]){\n            j = j - 2;\n        }\n        else{\n            return arr[j];\n        }\n    }\n    return -1;\n}\nvar arr = [1,1,2,2,3,3,4,50,50,65,65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    let start = 0;\n    let end = arr.length - 1;\n    let mid = Math.floor((start + end) / 2);\n    while(start < end){\n        if(arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]){\n            return arr[mid];\n        }\n        else if(arr[mid] == arr[mid - 1]){\n            if((mid - start) % 2 == 0){\n                end = mid - 2;\n            }\n            else{\n                start = mid + 1;\n            }\n        }\n        else if(arr[mid] == arr[mid + 1]){\n            if((end - mid) % 2 == 0){\n                start = mid + 2;\n            }\n            else{\n                end = mid - 1;\n            }\n        }\n        mid = Math.floor((start + end) / 2);\n    }\n    return arr[mid];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i = 0;\n    var j = arr.length - 1;\n    while(i < j){\n        var mid = Math.floor((i + j) / 2);\n        if(arr[mid] == arr[mid - 1]){\n            if(mid % 2 == 0){\n                j = mid - 2;\n            }else{\n                i = mid + 1;\n            }\n        }else if(arr[mid] == arr[mid + 1]){\n            if(mid % 2 == 0){\n                i = mid + 2;\n            }else{\n                j = mid - 1;\n            }\n        }else{\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    for(var i=0;i<arr.length;i++){\n        if(arr[i]!=arr[i+1] && arr[i]!=arr[i-1]){\n            return arr[i];\n        }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    let i = 0;\n    let j = arr.length - 1;\n    while(i < j){\n        let mid = Math.floor((i + j) / 2);\n        if(arr[mid] == arr[mid - 1]){\n            if(mid % 2 == 0){\n                j = mid - 2;\n            }else{\n                i = mid + 1;\n            }\n        }else if(arr[mid] == arr[mid + 1]){\n            if(mid % 2 == 0){\n                i = mid + 2;\n            }else{\n                j = mid - 1;\n            }\n        }else{\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i=0;\n    var j=arr.length-1;\n    while(i<j){\n        var mid=Math.floor((i+j)/2);\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        else if(arr[mid]==arr[mid-1]){\n            if((mid-1)%2==0){\n                i=mid+1;\n            }\n            else{\n                j=mid-2;\n            }\n        }\n        else if(arr[mid]==arr[mid+1]){\n            if((mid+1)%2==0){\n                i=mid+2;\n            }\n            else{\n                j=mid-1;\n            }\n        }\n    }\n    return arr[i];\n}\nvar arr=[1,1,2,2,3,3,4,50,50,65,65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665510198,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpn17_8rwt.js:35:10)\n    at Object.<anonymous> (/tmp/tmpn17_8rwt.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i = 0;\n    while(i < arr.length){\n        if(arr[i] == arr[i+1]){\n            i = i + 2;\n        }\n        else{\n            return arr[i];\n        }\n    }\n}\nvar arr = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,35,35,36,36,37,37,38,38,39,39,40,40,41,41,42,42,43,43,44,44,45,45,46,46,47,47,48,48,49,49,50,50,51,51,52,52,53,53,54,54,55,55,56,56,57,57,58,58,59,59,60,60,61,61,62,62,63,63,64,64,65,65,66,66,67,67,68,68,69,69,70,70,71,71,72,72,73,73,74,74,75,75,76,76,77,77,78,78,79,79,80,80,81,81,82,82,83,83,84,84,85,85,86,86,87,87,88,88,89,89,90,90,91,91,92,92,93,93,94,94,95,95,96,96,97,97,98,98,99,99,100,100,101,101,102,102,103,103,104,104,105,105,106,106,107,107,108,108,109,109,110,110,111,111,\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "/tmp/tmpe4qmxe4r.js:14\nconst assert = require('node:assert');\n^^^^^\n\nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var n = arr.length;\n    var i = 0;\n    while(i < n){\n        if(arr[i] == arr[i+1]){\n            i = i + 2;\n        }\n        else{\n            return arr[i];\n        }\n    }\n    return -1;\n}\n\nvar arr = [1,1,2,2,3,3,4,50,50,65,65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    let i = 0;\n    let j = arr.length - 1;\n    while(i < j){\n        let mid = Math.floor((i + j) / 2);\n        if(arr[mid] === arr[mid - 1]){\n            if(mid % 2 === 0){\n                j = mid - 2;\n            }else{\n                i = mid + 1;\n            }\n        }else if(arr[mid] === arr[mid + 1]){\n            if(mid % 2 === 0){\n                i = mid + 2;\n            }else{\n                j = mid - 1;\n            }\n        }else{\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i = 0;\n    while(i < arr.length){\n        if(arr[i] == arr[i+1]){\n            i = i + 2;\n        }\n        else{\n            return arr[i];\n        }\n    }\n}\nvar arr = [1,1,2,2,3,3,4,50,50,65,65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    let start = 0;\n    let end = arr.length - 1;\n    while(start <= end){\n        let mid = Math.floor((start + end) / 2);\n        if(arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]){\n            return arr[mid];\n        }\n        else if(arr[mid] == arr[mid - 1]){\n            if(mid % 2 == 0){\n                end = mid - 2;\n            }\n            else{\n                start = mid + 1;\n            }\n        }\n        else if(arr[mid] == arr[mid + 1]){\n            if(mid % 2 == 0){\n                start = mid + 2;\n            }\n            else{\n                end = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665510198,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    let result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] !== arr[i+1]){\n            result.push(arr[i]);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp5up5cv0r.js:16:10)\n    at Object.<anonymous> (/tmp/tmp5up5cv0r.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3 ],\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    let i = 0;\n    let j = arr.length - 1;\n    while(i < j){\n        let m = Math.floor((i + j) / 2);\n        if(arr[m] == arr[m - 1]){\n            if((m - i) % 2 == 0){\n                i = m + 1;\n            }else{\n                j = m - 1;\n            }\n        }else if(arr[m] == arr[m + 1]){\n            if((j - m) % 2 == 0){\n                j = m - 1;\n            }else{\n                i = m + 1;\n            }\n        }else{\n            return arr[m];\n        }\n    }\n    return arr[i];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpkbcrqo_h.js:31:10)\n    at Object.<anonymous> (/tmp/tmpkbcrqo_h.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i=0;\n    var j=arr.length-1;\n    while(i<j){\n        var mid=Math.floor((i+j)/2);\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        else if(arr[mid]==arr[mid-1]){\n            if((mid-1)%2==0){\n                i=mid+1;\n            }\n            else{\n                j=mid-2;\n            }\n        }\n        else if(arr[mid]==arr[mid+1]){\n            if((mid+1)%2==0){\n                i=mid+2;\n            }\n            else{\n                j=mid-1;\n            }\n        }\n    }\n    return arr[i];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp1dior3c7.js:34:10)\n    at Object.<anonymous> (/tmp/tmp1dior3c7.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i=0;\n    while(i<arr.length){\n        if(arr[i]!=arr[i+1] && arr[i]!=arr[i-1]){\n            return arr[i];\n        }\n        i++;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665510198,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i = 0;\n    var j = arr.length - 1;\n    while(i < j){\n        var mid = Math.floor((i + j)/2);\n        if(arr[mid] == arr[mid - 1]){\n            if(mid % 2 == 0){\n                j = mid - 2;\n            }else{\n                i = mid + 1;\n            }\n        }else if(arr[mid] == arr[mid + 1]){\n            if(mid % 2 == 0){\n                i = mid + 2;\n            }else{\n                j = mid - 1;\n            }\n        }else{\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i=0;\n    var j=arr.length-1;\n    while(i<j){\n        var mid=Math.floor((i+j)/2);\n        if(arr[mid]==arr[mid+1]){\n            if(mid%2==0){\n                i=mid+2;\n            }\n            else{\n                j=mid-1;\n            }\n        }\n        else if(arr[mid]==arr[mid-1]){\n            if(mid%2==0){\n                j=mid-2;\n            }\n            else{\n                i=mid+1;\n            }\n        }\n        else{\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\nvar arr=[1,1,2,2,3,3,4,50,50,65,65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    let i = 0;\n    let j = arr.length - 1;\n    while(i < j){\n        let mid = Math.floor((i + j) / 2);\n        if(arr[mid] == arr[mid + 1]){\n            if(mid % 2 == 0){\n                i = mid + 2;\n            }\n            else{\n                j = mid - 1;\n            }\n        }\n        else if(arr[mid] == arr[mid - 1]){\n            if(mid % 2 == 0){\n                j = mid - 2;\n            }\n            else{\n                i = mid + 1;\n            }\n        }\n        else{\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    let i=0;\n    let j=arr.length-1;\n    while(i<j){\n        let mid=Math.floor((i+j)/2);\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        else if(arr[mid]==arr[mid-1]){\n            if((mid-1)%2==0){\n                i=mid+1;\n            }\n            else{\n                j=mid-2;\n            }\n        }\n        else if(arr[mid]==arr[mid+1]){\n            if((mid+1)%2==0){\n                i=mid+2;\n            }\n            else{\n                j=mid-1;\n            }\n        }\n    }\n    return arr[i];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpfw6mnr1k.js:34:10)\n    at Object.<anonymous> (/tmp/tmpfw6mnr1k.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    let i = 0;\n    let j = arr.length - 1;\n    while(i < j){\n        let mid = Math.floor((i + j) / 2);\n        if(arr[mid] == arr[mid - 1]){\n            if((mid - i) % 2 == 0){\n                i = mid + 1;\n            }else{\n                j = mid - 2;\n            }\n        }else if(arr[mid] == arr[mid + 1]){\n            if((j - mid) % 2 == 0){\n                j = mid - 1;\n            }else{\n                i = mid + 2;\n            }\n        }else{\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp0zonpvs3.js:31:10)\n    at Object.<anonymous> (/tmp/tmp0zonpvs3.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i=0;\n    var j=arr.length-1;\n    while(i<j){\n        var mid=Math.floor((i+j)/2);\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        else if(arr[mid]==arr[mid-1]){\n            if((mid-1)%2==0){\n                i=mid+1;\n            }\n            else{\n                j=mid-2;\n            }\n        }\n        else if(arr[mid]==arr[mid+1]){\n            if((mid+1)%2==0){\n                i=mid+2;\n            }\n            else{\n                j=mid-1;\n            }\n        }\n    }\n    return arr[i];\n}\nvar arr=[1,1,2,2,3,3,4,50,50,65,65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665510198,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpn17_8rwt.js:35:10)\n    at Object.<anonymous> (/tmp/tmpn17_8rwt.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    let i = 0;\n    let j = arr.length - 1;\n    while(i < j){\n        let mid = Math.floor((i + j) / 2);\n        if(arr[mid] == arr[mid + 1]){\n            if(mid % 2 == 0){\n                i = mid + 2;\n            }else{\n                j = mid - 1;\n            }\n        }else if(arr[mid] == arr[mid - 1]){\n            if(mid % 2 == 0){\n                j = mid - 2;\n            }else{\n                i = mid + 1;\n            }\n        }else{\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    let i = 0;\n    let j = arr.length - 1;\n    while(i < j){\n        let mid = Math.floor((i + j) / 2);\n        if(arr[mid] === arr[mid - 1]){\n            if(mid % 2 === 0){\n                j = mid - 2;\n            }\n            else{\n                i = mid + 1;\n            }\n        }\n        else if(arr[mid] === arr[mid + 1]){\n            if(mid % 2 === 0){\n                i = mid + 2;\n            }\n            else{\n                j = mid - 1;\n            }\n        }\n        else{\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i = 0;\n    while(i < arr.length){\n        if(arr[i] !== arr[i+1] && arr[i] !== arr[i-1]){\n            return arr[i];\n        }\n        i++;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    let count = 0;\n    let result = 0;\n    for(let i = 0; i < arr.length; i++){\n        count = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[i] === arr[j]){\n                count++;\n            }\n        }\n        if(count === 1){\n            result = arr[i];\n            break;\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    let i=0;\n    let j=arr.length-1;\n    while(i<j){\n        let mid=Math.floor((i+j)/2);\n        if(arr[mid]==arr[mid-1]){\n            if(mid%2==0){\n                j=mid-2;\n            }else{\n                i=mid+1;\n            }\n        }else if(arr[mid]==arr[mid+1]){\n            if(mid%2==0){\n                i=mid+2;\n            }else{\n                j=mid-1;\n            }\n        }else{\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i=0;\n    while(i<arr.length){\n        if(arr[i]==arr[i+1]){\n            i=i+2;\n        }\n        else{\n            return arr[i];\n        }\n    }\n}\nvar arr=[1,1,2,2,3,3,4,50,50,65,65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i = 0;\n    while(i < arr.length){\n        if(arr[i] == arr[i+1]){\n            i = i + 2;\n        }\n        else{\n            return arr[i];\n        }\n    }\n}\n\nvar arr = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,35,35,36,36,37,37,38,38,39,39,40,40,41,41,42,42,43,43,44,44,45,45,46,46,47,47,48,48,49,49,50,50,51,51,52,52,53,53,54,54,55,55,56,56,57,57,58,58,59,59,60,60,61,61,62,62,63,63,64,64,65,65,66,66,67,67,68,68,69,69,70,70,71,71,72,72,73,73,74,74,75,75,76,76,77,77,78,78,79,79,80,80,81,81,82,82,83,83,84,84,85,85,86,86,87,87,88,88,89,89,90,90,91,91,92,92,93,93,94,94,95,95,96,96,97,97,98,98,99,99,100,100,101,101,102,102,103,103,104,104,105,105,106,106,107,107,108,108,109,109,110,110,111,111\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "/tmp/tmpuxq34rcf.js:15\nconst assert = require('node:assert');\n^^^^^\n\nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var result = [];\n    for(var i=0; i<arr.length; i++){\n        if(arr[i] !== arr[i+1]){\n            result.push(arr[i]);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmprbtndcli.js:16:10)\n    at Object.<anonymous> (/tmp/tmprbtndcli.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3 ],\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i = 0;\n    var j = arr.length - 1;\n    while(i < j){\n        var mid = Math.floor((i + j) / 2);\n        if(arr[mid] == arr[mid - 1]){\n            if(mid % 2 == 0){\n                j = mid - 2;\n            }else{\n                i = mid + 1;\n            }\n        }else if(arr[mid] == arr[mid + 1]){\n            if(mid % 2 == 0){\n                i = mid + 2;\n            }else{\n                j = mid - 1;\n            }\n        }else{\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var result = [];\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] !== arr[i+1]){\n            result.push(arr[i]);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp8bepcpuj.js:16:10)\n    at Object.<anonymous> (/tmp/tmp8bepcpuj.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3 ],\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var start = 0;\n    var end = arr.length - 1;\n    while(start <= end){\n        var mid = Math.floor((start + end) / 2);\n        if(arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]){\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid - 1]){\n            if(mid % 2 == 0){\n                start = mid + 1;\n            }else{\n                end = mid - 1;\n            }\n        }else{\n            if(mid % 2 == 0){\n                end = mid - 1;\n            }else{\n                start = mid + 1;\n            }\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpogfexnjn.js:32:10)\n    at Object.<anonymous> (/tmp/tmpogfexnjn.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    let i = 0;\n    let j = arr.length - 1;\n    while(i < j){\n        let mid = Math.floor((i + j) / 2);\n        if(arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]){\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid - 1]){\n            if((mid - 1) % 2 == 0){\n                i = mid + 1;\n            }else{\n                j = mid - 2;\n            }\n        }else{\n            if((mid - 1) % 2 == 0){\n                j = mid - 1;\n            }else{\n                i = mid + 2;\n            }\n        }\n    }\n    return arr[i];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i=0;\n    while(i<arr.length){\n        if(arr[i]==arr[i+1]){\n            i=i+2;\n        }\n        else{\n            return arr[i];\n        }\n    }\n}\nvar arr=[1,1,2,2,3,3,4,50,50,65,65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    let i=0;\n    let j=arr.length-1;\n    while(i<j){\n        let mid=Math.floor((i+j)/2);\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid]==arr[mid-1]){\n            if(mid%2==0){\n                j=mid-2;\n            }else{\n                i=mid+1;\n            }\n        }\n        if(arr[mid]==arr[mid+1]){\n            if(mid%2==0){\n                i=mid+2;\n            }else{\n                j=mid-1;\n            }\n        }\n    }\n    return arr[i];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var low = 0;\n    var high = arr.length - 1;\n    while(low <= high){\n        var mid = Math.floor((low + high)/2);\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]){\n            if(mid % 2 == 0){\n                low = mid + 1;\n            }else{\n                high = mid - 1;\n            }\n        }else if(arr[mid] == arr[mid+1]){\n            if(mid % 2 == 0){\n                high = mid - 1;\n            }else{\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpfc259f_6.js:32:10)\n    at Object.<anonymous> (/tmp/tmpfc259f_6.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i = 0;\n    while(i < arr.length){\n        if(arr[i] === arr[i+1]){\n            i += 2;\n        }else{\n            return arr[i];\n        }\n    }\n}\n\nvar arr = [1,1,2,2,3,3,4,50,50,65,65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    let i = 0;\n    let j = arr.length - 1;\n    while(i < j){\n        let mid = Math.floor((i + j) / 2);\n        if(arr[mid] == arr[mid - 1]){\n            if((mid - i) % 2 == 0){\n                i = mid + 1;\n            }\n            else{\n                j = mid - 2;\n            }\n        }\n        else if(arr[mid] == arr[mid + 1]){\n            if((j - mid) % 2 == 0){\n                j = mid - 1;\n            }\n            else{\n                i = mid + 2;\n            }\n        }\n        else{\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpnes4y6nb.js:35:10)\n    at Object.<anonymous> (/tmp/tmpnes4y6nb.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    for(var i=0;i<arr.length;i++){\n        if(arr[i]!=arr[i+1] && arr[i]!=arr[i-1]){\n            return arr[i];\n        }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i = 0;\n    var j = arr.length - 1;\n    while(i < j){\n        var mid = Math.floor((i + j) / 2);\n        if(arr[mid] == arr[mid - 1]){\n            if((mid - i) % 2 == 0){\n                i = mid + 1;\n            }\n            else{\n                j = mid - 2;\n            }\n        }\n        else if(arr[mid] == arr[mid + 1]){\n            if((j - mid) % 2 == 0){\n                j = mid - 1;\n            }\n            else{\n                i = mid + 2;\n            }\n        }\n        else{\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpuczgrz8o.js:35:10)\n    at Object.<anonymous> (/tmp/tmpuczgrz8o.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var start = 0;\n    var end = arr.length - 1;\n    var mid = Math.floor((start + end) / 2);\n    while(start < end){\n        if(arr[mid] == arr[mid - 1]){\n            if(mid % 2 == 0){\n                start = mid + 1;\n            }else{\n                end = mid - 2;\n            }\n        }else if(arr[mid] == arr[mid + 1]){\n            if(mid % 2 == 0){\n                end = mid - 1;\n            }else{\n                start = mid + 2;\n            }\n        }else{\n            return arr[mid];\n        }\n        mid = Math.floor((start + end) / 2);\n    }\n    return arr[start];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp5nsn6hq1.js:32:10)\n    at Object.<anonymous> (/tmp/tmp5nsn6hq1.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i=0;\n    var j=arr.length-1;\n    while(i<j){\n        var mid=Math.floor((i+j)/2);\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        else if(arr[mid]==arr[mid-1]){\n            if((mid-1)%2==0){\n                i=mid+1;\n            }\n            else{\n                j=mid-2;\n            }\n        }\n        else if(arr[mid]==arr[mid+1]){\n            if((mid+1)%2==0){\n                i=mid+2;\n            }\n            else{\n                j=mid-1;\n            }\n        }\n    }\n    return arr[i];\n}\nvar arr=[1,1,2,2,3,3,4,50,50,65,65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665510198,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpn17_8rwt.js:35:10)\n    at Object.<anonymous> (/tmp/tmpn17_8rwt.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i = 0;\n    while(i < arr.length){\n        if(arr[i] === arr[i+1]){\n            i = i + 2;\n        }else{\n            return arr[i];\n        }\n    }\n    return -1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i = 0;\n    var j = arr.length - 1;\n    while(i < j){\n        var m = Math.floor((i + j) / 2);\n        if(arr[m] == arr[m - 1]){\n            if((m - i + 1) % 2 == 0){\n                i = m + 1;\n            }else{\n                j = m - 2;\n            }\n        }else if(arr[m] == arr[m + 1]){\n            if((j - m + 1) % 2 == 0){\n                j = m - 1;\n            }else{\n                i = m + 2;\n            }\n        }else{\n            return arr[m];\n        }\n    }\n    return arr[i];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i=0;\n    while(i<arr.length){\n        if(arr[i]==arr[i+1]){\n            i=i+2;\n        }\n        else{\n            return arr[i];\n        }\n    }\n}\nvar arr=[1,1,2,2,3,3,4,50,50,65,65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    let i = 0;\n    let j = arr.length - 1;\n    while(i < j){\n        let mid = Math.floor((i + j) / 2);\n        if(arr[mid] === arr[mid + 1]){\n            if(mid % 2 === 0){\n                i = mid + 2;\n            }else{\n                j = mid - 1;\n            }\n        }else if(arr[mid] === arr[mid - 1]){\n            if(mid % 2 === 0){\n                j = mid - 2;\n            }else{\n                i = mid + 1;\n            }\n        }else{\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var count = 0;\n    for(var i = 0; i < arr.length; i++){\n        for(var j = 0; j < arr.length; j++){\n            if(arr[i] === arr[j]){\n                count++;\n            }\n        }\n        if(count === 1){\n            return arr[i];\n        }\n        count = 0;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    let i = 0;\n    let j = arr.length - 1;\n    while(i < j){\n        let mid = Math.floor((i + j) / 2);\n        if(arr[mid] == arr[mid - 1]){\n            if(mid % 2 == 0){\n                j = mid - 2;\n            }\n            else{\n                i = mid + 1;\n            }\n        }\n        else if(arr[mid] == arr[mid + 1]){\n            if(mid % 2 == 0){\n                i = mid + 2;\n            }\n            else{\n                j = mid - 1;\n            }\n        }\n        else{\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    let i = 0;\n    let j = arr.length - 1;\n    while(i < j){\n        let mid = Math.floor((i + j) / 2);\n        if(arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]){\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid - 1]){\n            if((mid - i) % 2 == 0){\n                i = mid + 1;\n            }\n            else{\n                j = mid - 2;\n            }\n        }\n        else{\n            if((j - mid) % 2 == 0){\n                j = mid - 1;\n            }\n            else{\n                i = mid + 2;\n            }\n        }\n    }\n    return arr[i];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp_w9yfhdm.js:35:10)\n    at Object.<anonymous> (/tmp/tmp_w9yfhdm.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var result = [];\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] !== arr[i + 1]){\n            result.push(arr[i]);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpzx8kmld1.js:16:10)\n    at Object.<anonymous> (/tmp/tmpzx8kmld1.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3 ],\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i = 0;\n    var j = arr.length - 1;\n    while(i < j){\n        var mid = Math.floor((i + j) / 2);\n        if(arr[mid] == arr[mid - 1]){\n            if((mid - i) % 2 == 0){\n                i = mid + 1;\n            }else{\n                j = mid - 2;\n            }\n        }else if(arr[mid] == arr[mid + 1]){\n            if((j - mid) % 2 == 0){\n                j = mid - 1;\n            }else{\n                i = mid + 2;\n            }\n        }else{\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp24ltma0i.js:31:10)\n    at Object.<anonymous> (/tmp/tmp24ltma0i.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i=0;\n    while(i<arr.length){\n        if(arr[i]!=arr[i+1] && arr[i]!=arr[i-1]){\n            return arr[i];\n        }\n        i++;\n    }\n}\nvar arr=[1,1,2,2,3,3,4,50,50,65,65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    let i = 0;\n    let j = arr.length - 1;\n    while(i < j){\n        let mid = Math.floor((i + j) / 2);\n        if(arr[mid] == arr[mid - 1]){\n            if(mid % 2 == 0){\n                j = mid - 2;\n            }else{\n                i = mid + 1;\n            }\n        }else if(arr[mid] == arr[mid + 1]){\n            if(mid % 2 == 0){\n                i = mid + 2;\n            }else{\n                j = mid - 1;\n            }\n        }else{\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    let i=0;\n    while(i<arr.length){\n        if(arr[i]!=arr[i+1] && arr[i]!=arr[i-1]){\n            return arr[i];\n        }\n        i++;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i = 0;\n    var j = arr.length - 1;\n    while(i < j){\n        var mid = Math.floor((i+j)/2);\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]){\n            if((mid-1)%2 == 0){\n                i = mid + 1;\n            }else{\n                j = mid - 2;\n            }\n        }else if(arr[mid] == arr[mid+1]){\n            if((mid+1)%2 == 0){\n                i = mid + 2;\n            }else{\n                j = mid - 1;\n            }\n        }\n    }\n    return arr[i];\n}\n\nvar arr = [1,1,2,2,3,3,4,50,50,65,65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpyiivtrqk.js:33:10)\n    at Object.<anonymous> (/tmp/tmpyiivtrqk.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var l = 0;\n    var r = arr.length-1;\n    while(l<r){\n        var mid = Math.floor((l+r)/2);\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid]==arr[mid-1]){\n            if(mid%2==0){\n                r = mid-2;\n            }\n            else{\n                l = mid+1;\n            }\n        }\n        if(arr[mid]==arr[mid+1]){\n            if(mid%2==0){\n                l = mid+2;\n            }\n            else{\n                r = mid-1;\n            }\n        }\n    }\n    return arr[l];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    for(var i=0; i<arr.length; i++){\n        if(arr[i]!=arr[i+1] && arr[i]!=arr[i-1]){\n            return arr[i];\n        }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    for(var i=0;i<arr.length;i++){\n        if(arr[i]!=arr[i+1] && arr[i]!=arr[i-1]){\n            return arr[i];\n        }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i = 0;\n    var j = arr.length - 1;\n    while(i < j){\n        var mid = Math.floor((i + j) / 2);\n        if(arr[mid] == arr[mid - 1]){\n            if(mid % 2 == 0){\n                j = mid - 2;\n            }\n            else{\n                i = mid + 1;\n            }\n        }\n        else if(arr[mid] == arr[mid + 1]){\n            if(mid % 2 == 0){\n                i = mid + 2;\n            }\n            else{\n                j = mid - 1;\n            }\n        }\n        else{\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\nvar arr = [1,1,2,2,3,3,4,50,50,65,65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    let start = 0;\n    let end = arr.length - 1;\n    while(start <= end){\n        let mid = Math.floor((start + end)/2);\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]){\n            return arr[mid];\n        }\n        else if(arr[mid] == arr[mid-1]){\n            if((mid-1)%2 == 0){\n                start = mid+1;\n            }\n            else{\n                end = mid-2;\n            }\n        }\n        else if(arr[mid] == arr[mid+1]){\n            if((mid+1)%2 == 0){\n                start = mid+2;\n            }\n            else{\n                end = mid-1;\n            }\n        }\n    }\n    return -1;\n}\n\nlet arr = [1,1,2,2,3,3,4,50,50,65,65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp9_h2g2_r.js:36:10)\n    at Object.<anonymous> (/tmp/tmp9_h2g2_r.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i=0;\n    while(i<arr.length){\n        if(arr[i]!=arr[i+1] && arr[i]!=arr[i-1]){\n            return arr[i];\n        }\n        i++;\n    }\n}\nvar arr=[1,1,2,2,3,3,4,50,50,65,65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i=0;\n    while(i<arr.length){\n        if(arr[i]!=arr[i+1] && arr[i]!=arr[i-1]){\n            return arr[i];\n        }\n        i++;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665510198,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    for(var i=0;i<arr.length;i++){\n        if(arr[i]!=arr[i+1] && arr[i]!=arr[i-1]){\n            return arr[i];\n        }\n    }\n}\nvar arr=[1,1,2,2,3,3,4,50,50,65,65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    for(var i=0; i<arr.length; i++){\n        if(arr[i] != arr[i+1]){\n            return arr[i];\n        }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpih0b4lz9.js:14:10)\n    at Object.<anonymous> (/tmp/tmpih0b4lz9.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i=0;\n    while(i<arr.length){\n        if(arr[i]==arr[i+1]){\n            i=i+2;\n        }\n        else{\n            return arr[i];\n        }\n    }\n}\nvar arr=[1,1,2,2,3,3,4,50,50,65,65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i = 0;\n    var j = arr.length-1;\n    while(i<j){\n        var mid = Math.floor((i+j)/2);\n        if(arr[mid] == arr[mid-1]){\n            if(mid%2 == 0){\n                j = mid-2;\n            }else{\n                i = mid+1;\n            }\n        }else if(arr[mid] == arr[mid+1]){\n            if(mid%2 == 0){\n                i = mid+2;\n            }else{\n                j = mid-1;\n            }\n        }else{\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i = 0;\n    var j = arr.length - 1;\n    while(i < j){\n        var mid = Math.floor((i + j) / 2);\n        if(arr[mid] == arr[mid - 1]){\n            if(mid % 2 == 0){\n                j = mid - 2;\n            }else{\n                i = mid + 1;\n            }\n        }else if(arr[mid] == arr[mid + 1]){\n            if(mid % 2 == 0){\n                i = mid + 2;\n            }else{\n                j = mid - 1;\n            }\n        }else{\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var n = arr.length;\n    var i = 0;\n    while(i < n){\n        if(arr[i] == arr[i+1]){\n            i = i + 2;\n        }\n        else{\n            return arr[i];\n        }\n    }\n    return -1;\n}\nvar arr = [1,1,2,2,3,3,4,50,50,65,65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i=0;\n    var j=arr.length-1;\n    while(i<j){\n        var mid=Math.floor((i+j)/2);\n        if(arr[mid]==arr[mid-1]){\n            if(mid%2==0){\n                j=mid-2;\n            }\n            else{\n                i=mid+1;\n            }\n        }\n        else if(arr[mid]==arr[mid+1]){\n            if(mid%2==0){\n                i=mid+2;\n            }\n            else{\n                j=mid-1;\n            }\n        }\n        else{\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var count = 0;\n    var result = 0;\n    for(var i = 0; i < arr.length; i++){\n        for(var j = 0; j < arr.length; j++){\n            if(arr[i] == arr[j]){\n                count++;\n            }\n        }\n        if(count == 1){\n            result = arr[i];\n        }\n        count = 0;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    let i = 0;\n    while(i < arr.length){\n        if(arr[i] !== arr[i+1] && arr[i] !== arr[i-1]){\n            return arr[i];\n        }\n        i++;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    let start = 0;\n    let end = arr.length - 1;\n    while(start <= end){\n        let mid = Math.floor((start + end) / 2);\n        if(arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]){\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid - 1]){\n            if(mid % 2 == 0){\n                end = mid - 2;\n            }\n            else{\n                start = mid + 1;\n            }\n        }\n        if(arr[mid] == arr[mid + 1]){\n            if(mid % 2 == 0){\n                start = mid + 2;\n            }\n            else{\n                end = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i = 0;\n    while(i<arr.length){\n        if(arr[i]!=arr[i+1] && arr[i]!=arr[i-1]){\n            return arr[i];\n        }\n        i++;\n    }\n}\nvar arr = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    var i=0;\n    var j=arr.length-1;\n    while(i<j){\n        var mid=Math.floor((i+j)/2);\n        if(arr[mid]==arr[mid-1]){\n            if(mid%2==0){\n                j=mid-2;\n            }\n            else{\n                i=mid+1;\n            }\n        }\n        else if(arr[mid]==arr[mid+1]){\n            if(mid%2==0){\n                i=mid+2;\n            }\n            else{\n                j=mid-1;\n            }\n        }\n        else{\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\nvar arr=[1,1,2,2,3,3,4,50,50,65,65];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to find the element that appears only once in a sorted array.\nfunction search(arr){\n    let i = 0;\n    let j = arr.length - 1;\n    while(i < j){\n        let mid = Math.floor((i + j) / 2);\n        if(arr[mid] === arr[mid - 1]){\n            if((mid - 1) % 2 === 0){\n                j = mid - 2;\n            }else{\n                i = mid + 1;\n            }\n        }else if(arr[mid] === arr[mid + 1]){\n            if(mid % 2 === 0){\n                j = mid - 1;\n            }else{\n                i = mid + 2;\n            }\n        }else{\n            return arr[mid];\n        }\n    }\n    return arr[i];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp7bkt2mqn.js:31:10)\n    at Object.<anonymous> (/tmp/tmp7bkt2mqn.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    }
  ]
}