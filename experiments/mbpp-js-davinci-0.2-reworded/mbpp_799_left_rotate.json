{
  "name": "mbpp_799_left_rotate",
  "language": "js",
  "prompt": "//Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate(n, d){\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_799_left_rotate.py",
  "prompt_terminology": "reworded",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_rotate;\n  assert.deepEqual(candidate(16, 2),64);\n  assert.deepEqual(candidate(10, 2),40);\n  assert.deepEqual(candidate(99, 3),792);\n  assert.deepEqual(candidate(99, 3),792);\n  assert.deepEqual(candidate(1, 3),8);\n  assert.deepEqual(candidate(5, 3),40);\n  assert.deepEqual(candidate(29, 3),232);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    var x = n >> d;\n    var y = n << (32 - d);\n    return x | y;\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    var temp = n.toString(2);\n    var temp2 = temp.substring(d, temp.length);\n    var temp3 = temp.substring(0, d);\n    var temp4 = temp2 + temp3;\n    return parseInt(temp4, 2);\n}\n",
    "\treturn (n << d) | (n >> (32 - d));\n}\n",
    "    var a = n.toString(2);\n    var b = a.slice(d) + a.slice(0, d);\n    return parseInt(b, 2);\n}\n",
    "\tvar x = (n << d) | (n >> (32 - d));\n\treturn x;\n}\n",
    "\treturn (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    var temp = n.toString(2);\n    var temp2 = temp.slice(d, temp.length);\n    var temp3 = temp.slice(0, d);\n    var temp4 = temp2.concat(temp3);\n    var temp5 = parseInt(temp4, 2);\n    return temp5;\n}\n",
    "    var a = n.toString(2);\n    var b = a.substring(d, a.length);\n    var c = a.substring(0, d);\n    var d = b + c;\n    return parseInt(d, 2);\n}\n",
    "\tvar result = n << d;\n\tresult = result | (n >> (32 - d));\n\treturn result;\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    var a = n.toString(2);\n    var b = a.slice(d);\n    var c = a.slice(0, d);\n    var d = b + c;\n    return parseInt(d, 2);\n}\n",
    "\tvar mask = ~(~0 << d);\n\tvar left = n << d;\n\tvar right = n & mask;\n\treturn left | right;\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    var left_shift = n << d;\n    var right_shift = n >> (32 - d);\n    var result = left_shift | right_shift;\n    return result;\n}\n",
    "\treturn (n << d) | (n >> (32 - d));\n}\n",
    "\tvar a = n.toString(2);\n\tvar b = a.slice(d);\n\tvar c = a.slice(0,d);\n\tvar d = b.concat(c);\n\treturn parseInt(d,2);\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n"
  ]
}