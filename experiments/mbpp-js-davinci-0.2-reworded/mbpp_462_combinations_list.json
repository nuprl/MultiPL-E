{
  "name": "mbpp_462_combinations_list",
  "language": "js",
  "prompt": "//Write a function to find all possible combinations of the elements of a given array.\nfunction combinations_list(list1){\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_462_combinations_list.py",
  "prompt_terminology": "reworded",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = combinations_list;\n  assert.deepEqual(candidate([\"orange\", \"red\", \"green\", \"blue\"]),[[], [\"orange\"], [\"red\"], [\"red\", \"orange\"], [\"green\"], [\"green\", \"orange\"], [\"green\", \"red\"], [\"green\", \"red\", \"orange\"], [\"blue\"], [\"blue\", \"orange\"], [\"blue\", \"red\"], [\"blue\", \"red\", \"orange\"], [\"blue\", \"green\"], [\"blue\", \"green\", \"orange\"], [\"blue\", \"green\", \"red\"], [\"blue\", \"green\", \"red\", \"orange\"]]);\n  assert.deepEqual(candidate([\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"]),[[], [\"red\"], [\"green\"], [\"green\", \"red\"], [\"blue\"], [\"blue\", \"red\"], [\"blue\", \"green\"], [\"blue\", \"green\", \"red\"], [\"white\"], [\"white\", \"red\"], [\"white\", \"green\"], [\"white\", \"green\", \"red\"], [\"white\", \"blue\"], [\"white\", \"blue\", \"red\"], [\"white\", \"blue\", \"green\"], [\"white\", \"blue\", \"green\", \"red\"], [\"black\"], [\"black\", \"red\"], [\"black\", \"green\"], [\"black\", \"green\", \"red\"], [\"black\", \"blue\"], [\"black\", \"blue\", \"red\"], [\"black\", \"blue\", \"green\"], [\"black\", \"blue\", \"green\", \"red\"], [\"black\", \"white\"], [\"black\", \"white\", \"red\"], [\"black\", \"white\", \"green\"], [\"black\", \"white\", \"green\", \"red\"], [\"black\", \"white\", \"blue\"], [\"black\", \"white\", \"blue\", \"red\"], [\"black\", \"white\", \"blue\", \"green\"], [\"black\", \"white\", \"blue\", \"green\", \"red\"], [\"orange\"], [\"orange\", \"red\"], [\"orange\", \"green\"], [\"orange\", \"green\", \"red\"], [\"orange\", \"blue\"], [\"orange\", \"blue\", \"red\"], [\"orange\", \"blue\", \"green\"], [\"orange\", \"blue\", \"green\", \"red\"], [\"orange\", \"white\"], [\"orange\", \"white\", \"red\"], [\"orange\", \"white\", \"green\"], [\"orange\", \"white\", \"green\", \"red\"], [\"orange\", \"white\", \"blue\"], [\"orange\", \"white\", \"blue\", \"red\"], [\"orange\", \"white\", \"blue\", \"green\"], [\"orange\", \"white\", \"blue\", \"green\", \"red\"], [\"orange\", \"black\"], [\"orange\", \"black\", \"red\"], [\"orange\", \"black\", \"green\"], [\"orange\", \"black\", \"green\", \"red\"], [\"orange\", \"black\", \"blue\"], [\"orange\", \"black\", \"blue\", \"red\"], [\"orange\", \"black\", \"blue\", \"green\"], [\"orange\", \"black\", \"blue\", \"green\", \"red\"], [\"orange\", \"black\", \"white\"], [\"orange\", \"black\", \"white\", \"red\"], [\"orange\", \"black\", \"white\", \"green\"], [\"orange\", \"black\", \"white\", \"green\", \"red\"], [\"orange\", \"black\", \"white\", \"blue\"], [\"orange\", \"black\", \"white\", \"blue\", \"red\"], [\"orange\", \"black\", \"white\", \"blue\", \"green\"], [\"orange\", \"black\", \"white\", \"blue\", \"green\", \"red\"]]);\n  assert.deepEqual(candidate([\"red\", \"green\", \"black\", \"orange\"]),[[], [\"red\"], [\"green\"], [\"green\", \"red\"], [\"black\"], [\"black\", \"red\"], [\"black\", \"green\"], [\"black\", \"green\", \"red\"], [\"orange\"], [\"orange\", \"red\"], [\"orange\", \"green\"], [\"orange\", \"green\", \"red\"], [\"orange\", \"black\"], [\"orange\", \"black\", \"red\"], [\"orange\", \"black\", \"green\"], [\"orange\", \"black\", \"green\", \"red\"]]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    var result = [];\n    var f = function(prefix, list1){\n        for(var i = 0; i < list1.length; i++){\n            result.push(prefix.concat(list1[i]));\n            f(prefix.concat(list1[i]), list1.slice(i + 1));\n        }\n    }\n    f([], list1);\n    return result;\n}\n",
    "    var list2 = [];\n    for(var i = 0; i < list1.length; i++){\n        for(var j = i + 1; j < list1.length; j++){\n            list2.push(list1[i] + list1[j]);\n        }\n    }\n    return list2;\n}\n",
    "    var list2 = [];\n    for(var i = 0; i < list1.length; i++){\n        for(var j = i+1; j < list1.length; j++){\n            list2.push(list1[i] + \" \" + list1[j]);\n        }\n    }\n    return list2;\n}",
    "    var result = [];\n    for(var i = 0; i < list1.length; i++){\n        for(var j = i+1; j < list1.length; j++){\n            result.push([list1[i], list1[j]]);\n        }\n    }\n    return result;\n}",
    "    var result = [];\n    for(var i = 0; i < list1.length; i++){\n        for(var j = i + 1; j < list1.length; j++){\n            result.push([list1[i], list1[j]]);\n        }\n    }\n    return result;\n}",
    "    var result = [];\n    for(var i = 0; i < list1.length; i++){\n        for(var j = i+1; j < list1.length; j++){\n            result.push(list1[i] + \" \" + list1[j]);\n        }\n    }\n    return result;\n}",
    "    var list2 = [];\n    for(var i = 0; i < list1.length; i++){\n        for(var j = i + 1; j < list1.length; j++){\n            list2.push(list1[i] + list1[j]);\n        }\n    }\n    return list2;\n}\n",
    "    var list2 = [];\n    for(var i = 0; i < list1.length; i++){\n        for(var j = i+1; j < list1.length; j++){\n            list2.push(list1[i] + ',' + list1[j]);\n        }\n    }\n    return list2;\n}",
    "    var list2 = [];\n    for (var i = 0; i < list1.length; i++) {\n        for (var j = i + 1; j < list1.length; j++) {\n            list2.push(list1[i] + \" \" + list1[j]);\n        }\n    }\n    return list2;\n}\n",
    "    var result = [];\n    for(var i = 0; i < list1.length; i++){\n        for(var j = i + 1; j < list1.length; j++){\n            result.push(list1[i] + \" \" + list1[j]);\n        }\n    }\n    return result;\n}",
    "    var list2 = [];\n    for(var i = 0; i < list1.length; i++){\n        for(var j = i + 1; j < list1.length; j++){\n            list2.push(list1[i] + \",\" + list1[j]);\n        }\n    }\n    return list2;\n}",
    "    var result = [];\n    for(var i = 0; i < list1.length; i++){\n        for(var j = i + 1; j < list1.length; j++){\n            result.push([list1[i], list1[j]]);\n        }\n    }\n    return result;\n}",
    "    var list2 = [];\n    for (var i = 0; i < list1.length; i++){\n        for (var j = i+1; j < list1.length; j++){\n            list2.push(list1[i] + \",\" + list1[j]);\n        }\n    }\n    return list2;\n}",
    "    var result = [];\n    for(var i = 0; i < list1.length; i++){\n        var temp = list1.slice(i+1);\n        for(var j = 0; j < temp.length; j++){\n            result.push(list1[i] + temp[j]);\n        }\n    }\n    return result;\n}",
    "    var list2 = [];\n    for(var i = 0; i < list1.length; i++){\n        for(var j = i + 1; j < list1.length; j++){\n            list2.push(list1[i] + list1[j]);\n        }\n    }\n    return list2;\n}\n",
    "    var result = [];\n    for(var i = 0; i < list1.length; i++){\n        for(var j = i+1; j < list1.length; j++){\n            result.push(list1[i] + \" \" + list1[j]);\n        }\n    }\n    return result;\n}",
    "    var result = [];\n    for(var i = 0; i < list1.length; i++){\n        for(var j = i + 1; j < list1.length; j++){\n            result.push([list1[i], list1[j]]);\n        }\n    }\n    return result;\n}",
    "    var list2 = [];\n    for(var i = 0; i < list1.length; i++){\n        for(var j = i; j < list1.length; j++){\n            if(list1[i] != list1[j]){\n                list2.push(list1[i] + list1[j]);\n            }\n        }\n    }\n    return list2;\n}",
    "    var result = [];\n    for(var i = 0; i < list1.length; i++){\n        for(var j = i + 1; j < list1.length; j++){\n            result.push(list1[i] + \" \" + list1[j]);\n        }\n    }\n    return result;\n}",
    "    var list2 = [];\n    for(var i=0;i<list1.length;i++){\n        for(var j=i+1;j<list1.length;j++){\n            list2.push(list1[i]+list1[j]);\n        }\n    }\n    return list2;\n}"
  ]
}