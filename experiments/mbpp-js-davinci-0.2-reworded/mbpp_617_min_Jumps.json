{
  "name": "mbpp_617_min_Jumps",
  "language": "js",
  "prompt": "//Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\nfunction min_Jumps(steps, d){\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_617_min_Jumps.py",
  "prompt_terminology": "reworded",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_Jumps;\n  assert.deepEqual(candidate([3, 4], 11),3.5);\n  assert.deepEqual(candidate([3, 4], 0),0);\n  assert.deepEqual(candidate([11, 14], 11),1);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    var jumps = 0;\n    var current = 0;\n    while(current < d){\n        jumps++;\n        current += steps;\n        if(current == d){\n            return jumps;\n        }\n        else if(current > d){\n            return jumps - 1;\n        }\n    }\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    let min = Number.MAX_VALUE;\n    for(let i = 1; i <= steps; i++){\n        let jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps < min) min = jumps;\n    }\n    return min + 1;\n}\n",
    "    let jumps = 0;\n    let curr = 0;\n    while(curr < d){\n        jumps++;\n        curr += steps;\n    }\n    return jumps;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d-i);\n        if(jumps != -1 && jumps < min) min = jumps + 1;\n    }\n    return min;\n}\n",
    "    let jumps = 0;\n    let current = 0;\n    while(current < d){\n        current += steps;\n        jumps++;\n    }\n    return jumps;\n}\n",
    "    var jumps = 0;\n    var current = 0;\n    while(current < d){\n        jumps++;\n        current += steps;\n    }\n    return jumps;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = min_Jumps(steps-1, d-1);\n    var min2 = min_Jumps(steps-1, d+1);\n    if(min == -1 && min2 == -1) return -1;\n    if(min == -1) return min2+1;\n    if(min2 == -1) return min+1;\n    return Math.min(min, min2)+1;\n}\n",
    "    var jumps = 0;\n    var current_pos = 0;\n    while(current_pos < d){\n        jumps++;\n        current_pos += steps;\n    }\n    return jumps;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return Infinity;\n    if(d == steps) return 1;\n    return Math.min(min_Jumps(steps-1, d-1), min_Jumps(steps-1, d));\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps < min)\n            min = jumps + 1;\n    }\n    return min;\n}\n",
    "    if(d==0) return 0;\n    if(steps == 0) return -1;\n    var min = min_Jumps(steps-1, d-1);\n    if(d-2 >= 0){\n        var min2 = min_Jumps(steps-1, d-2);\n        if(min2 != -1 && (min == -1 || min > min2)){\n            min = min2;\n        }\n    }\n    if(d-3 >= 0){\n        var min3 = min_Jumps(steps-1, d-3);\n        if(min3 != -1 && (min == -1 || min > min3)){\n            min = min3;\n        }\n    }\n    if(min == -1) return -1;\n    return min+1;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Math.min(min_Jumps(steps-1, d-1), min_Jumps(steps-1, d+1));\n    if(min != -1) return min+1;\n    else return -1;\n}\n",
    "    if(steps == 0){\n        return 0;\n    }\n    if(steps == 1){\n        return 1;\n    }\n    if(steps == 2){\n        return 2;\n    }\n    if(steps == 3){\n        return 4;\n    }\n    if(steps == 4){\n        return 7;\n    }\n    if(steps == 5){\n        return 13;\n    }\n    if(steps == 6){\n        return 24;\n    }\n    if(steps == 7){\n        return 44;\n    }\n    if(steps == 8){\n        return 81;\n    }\n    if(steps == 9){\n        return 149;\n    }\n    if(steps == 10){\n        return 274;\n    }\n    if(steps == 11){\n        return 504;\n    }\n    if(steps == 12){\n        return 927;\n    }\n    if(steps == 13){\n        return 1705;\n    }\n    if(steps == 14){\n        return 3136;\n    }\n    if(steps == 15){\n        return 5768;\n    }\n    if(steps == 16){\n        return 10609;\n    }\n    if(steps == 17){\n        return 19513;\n    }\n    if(steps == 18){\n        return 35890;\n    }\n    if(steps == 19){\n        return 66012;\n    }\n    if(steps == 20){\n        return 121415;\n    }\n    if(steps == 21){\n        return 223317;\n    }\n    if(steps == 22){\n        return 410744;\n    }\n    if(steps == 23){\n        return 755476;\n    }\n    if(steps == 24){\n        return 1389537;\n    }\n    if(steps == 25){\n        return 2555757;\n    }\n    if(steps == 26){\n        return 4700770;\n    }\n    if(steps == 27){\n        return 8646064;\n    }\n    if(steps == 28){\n        return 15902591;\n    }\n    if(steps == 29){\n        return 29249425;\n    }\n",
    "    if(d == 0)\n        return 0;\n    if(steps == 0)\n        return -1;\n    var jumps = min_Jumps(steps-1, d-1);\n    if(jumps != -1)\n        return jumps + 1;\n    jumps = min_Jumps(steps-1, d+1);\n    if(jumps != -1)\n        return jumps + 1;\n    return -1;\n}",
    "  if(d == 0) return 0;\n  if(steps == 0) return -1;\n  var jumps = min_Jumps(steps-1, d-1);\n  if(jumps != -1) jumps++;\n  var jumps = min_Jumps(steps-1, d+1);\n  if(jumps != -1) jumps++;\n  return jumps;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = min_Jumps(steps-1, d-1);\n    if(d-2 >= 0){\n        min = Math.min(min, min_Jumps(steps-1, d-2));\n    }\n    if(d-3 >= 0){\n        min = Math.min(min, min_Jumps(steps-1, d-3));\n    }\n    if(min != -1){\n        return min+1;\n    }\n    return -1;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps + 1 < min) min = jumps + 1;\n    }\n    return min;\n}\n",
    "    var jumps = 0;\n    var pos = 0;\n    while(pos < d){\n        pos += steps;\n        jumps++;\n    }\n    return jumps;\n}\n",
    "\tif(d == 0)\n\t\treturn 0;\n\tif(d == 1)\n\t\treturn 1;\n\tif(steps[d] != 0)\n\t\treturn steps[d];\n\tvar min = Number.MAX_VALUE;\n\tfor(var i = 1; i <= d; i++){\n\t\tvar jumps = min_Jumps(steps, d - i) + 1;\n\t\tif(jumps < min)\n\t\t\tmin = jumps;\n\t}\n\tsteps[d] = min;\n\treturn min;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var jump = min_Jumps(steps-1, d-1);\n    var jump2 = min_Jumps(steps-1, d-2);\n    var jump3 = min_Jumps(steps-1, d-3);\n    if(jump == -1 && jump2 == -1 && jump3 == -1) return -1;\n    return 1 + Math.max(jump, jump2, jump3);\n}\n",
    "    var jumps = 0;\n    var i = 0;\n    while(i < d){\n        i = i + steps;\n        jumps++;\n    }\n    return jumps;\n}\n",
    "    if(d == 0)\n        return 0;\n    if(steps == 0)\n        return -1;\n    var min = min_Jumps(steps - 1, d - 1);\n    if(min != -1)\n        min = min + 1;\n    var min2 = min_Jumps(steps - 1, d + 1);\n    if(min2 != -1)\n        min2 = min2 + 1;\n    if(min == -1 && min2 == -1)\n        return -1;\n    if(min == -1)\n        return min2;\n    if(min2 == -1)\n        return min;\n    return Math.min(min, min2);\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Math.min(min_Jumps(steps-1, d-1), min_Jumps(steps-1, d+1));\n    if(min != -1) return min+1;\n    else return -1;\n}\n",
    "    if(d==0) return 0;\n    if(steps==0) return -1;\n    let min = Math.min(min_Jumps(steps-1, d-1), min_Jumps(steps-1, d+1));\n    if(min==-1) return -1;\n    return min+1;\n}\n",
    "    var jumps = 0;\n    var current_pos = 0;\n    while(current_pos < d){\n        current_pos += steps;\n        jumps++;\n    }\n    return jumps;\n}\n",
    "\tvar jumps = 0;\n\tvar pos = 0;\n\twhile(pos < d){\n\t\tpos += steps;\n\t\tjumps++;\n\t}\n\treturn jumps;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return 0;\n    if(steps >= d) return 1;\n    return 1 + min_Jumps(steps, d - steps);\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps < min)\n            min = jumps + 1;\n    }\n    return min;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var jumps = min_Jumps(steps-1, d-1);\n    if(jumps != -1) jumps = 1 + jumps;\n    var jumps2 = min_Jumps(steps-1, d-2);\n    if(jumps2 != -1) jumps2 = 1 + jumps2;\n    var jumps3 = min_Jumps(steps-1, d-3);\n    if(jumps3 != -1) jumps3 = 1 + jumps3;\n    if(jumps == -1 && jumps2 == -1 && jumps3 == -1) return -1;\n    else if(jumps == -1) return jumps2;\n    else if(jumps2 == -1) return jumps;\n    else if(jumps3 == -1) return Math.min(jumps, jumps2);\n    else return Math.min(jumps, jumps2, jumps3);\n}",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = min_Jumps(steps-1, d-1);\n    if(min != -1) min++;\n    var min2 = min_Jumps(steps-1, d+1);\n    if(min2 != -1) min2++;\n    if(min == -1 && min2 == -1) return -1;\n    if(min == -1) return min2;\n    if(min2 == -1) return min;\n    return Math.min(min, min2);\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps < min) min = jumps + 1;\n    }\n    return min;\n}\n",
    "    var jumps = 0;\n    var i = 0;\n    while(i < d){\n        jumps++;\n        i += steps;\n    }\n    return jumps;\n}\n\nvar steps = 3;\nvar d = 10;",
    "    let jumps = 0;\n    let current = 0;\n    while(current < d){\n        jumps++;\n        current += steps;\n    }\n    return jumps;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    let min = Number.MAX_VALUE;\n    for(let i = 1; i <= steps; i++){\n        let jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps < min)\n            min = jumps + 1;\n    }\n    return min;\n}\n",
    "    var jumps = 0;\n    var current = 0;\n    while(current < d){\n        current += steps;\n        jumps++;\n    }\n    return jumps;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var jumps = min_Jumps(steps-1, d-1);\n    if(jumps != -1) jumps = min_Jumps(steps, d-1);\n    if(jumps != -1) jumps = min_Jumps(steps-1, d-2);\n    if(jumps != -1) return jumps+1;\n    else return -1;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var smallStep = min_Jumps(steps-1, d-1);\n    var bigStep = min_Jumps(steps-1, d+1);\n    if(smallStep == -1 && bigStep == -1) return -1;\n    if(smallStep == -1) return bigStep+1;\n    if(bigStep == -1) return smallStep+1;\n    return Math.min(smallStep, bigStep)+1;\n}\n",
    "\tif(d == 0) return 0;\n\tif(steps == 0) return -1;\n\tvar min = min_Jumps(steps-1, d-1);\n\tif(d-2 >= 0){\n\t\tvar min2 = min_Jumps(steps-1, d-2);\n\t\tif(min2 != -1 && (min == -1 || min2 < min)){\n\t\t\tmin = min2;\n\t\t}\n\t}\n\tif(d-3 >= 0){\n\t\tvar min3 = min_Jumps(steps-1, d-3);\n\t\tif(min3 != -1 && (min == -1 || min3 < min)){\n\t\t\tmin = min3;\n\t\t}\n\t}\n\tif(min == -1) return -1;\n\treturn min+1;\n}\n",
    "    var count = 0;\n    var x = 0;\n    var y = 0;\n    while(x < d){\n        if(x + steps < d){\n            x += steps;\n            count++;\n        }\n        else{\n            y = d - x;\n            count++;\n            break;\n        }\n    }\n    while(y < d){\n        if(y + steps < d){\n            y += steps;\n            count++;\n        }\n        else{\n            x = d - y;\n            count++;\n            break;\n        }\n    }\n    return count;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var jumps = min_Jumps(steps-1, d-1);\n    if(jumps != -1) jumps++;\n    var jumps = min_Jumps(steps-1, d+1);\n    if(jumps != -1) jumps++;\n    return jumps;\n}\n",
    "    var jumps = 0;\n    var curr_pos = 0;\n    while(curr_pos < d){\n        curr_pos += steps;\n        jumps++;\n    }\n    return jumps;\n}\n",
    "    var jumps = 0;\n    var current = 0;\n    while(current < d){\n        jumps++;\n        current += steps;\n    }\n    return jumps;\n}\n",
    "    var jumps = 0;\n    var current = 0;\n    while(current < d){\n        jumps++;\n        current += steps;\n        if(current == d){\n            return jumps;\n        }\n        else if(current > d){\n            return jumps - 1;\n        }\n    }\n}",
    "    if(d==0) return 0;\n    if(steps==0) return -1;\n    let min = Math.min(min_Jumps(steps-1, d-1), min_Jumps(steps-1, d+1));\n    if(min==-1) return -1;\n    return min+1;\n}",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var jumps = min_Jumps(steps - 1, d - 1);\n    if(jumps != -1) jumps++;\n    var jumps = min_Jumps(steps - 1, d + 1);\n    if(jumps != -1) jumps++;\n    return jumps;\n}\n",
    "\tif(d==0)\n\t\treturn 0;\n\tif(steps==0)\n\t\treturn -1;\n\tvar min = min_Jumps(steps-1, d-1);\n\tif(min!=-1)\n\t\tmin = min+1;\n\tvar min2 = min_Jumps(steps-1, d-2);\n\tif(min2!=-1)\n\t\tmin2 = min2+1;\n\tif(min==-1 && min2==-1)\n\t\treturn -1;\n\telse if(min==-1)\n\t\treturn min2;\n\telse if(min2==-1)\n\t\treturn min;\n\telse\n\t\treturn Math.min(min, min2);\n}\n",
    "    if(steps == 0){\n        return 0;\n    }\n    if(steps == 1){\n        return 1;\n    }\n    if(steps == 2){\n        return 2;\n    }\n    if(steps == 3){\n        return 4;\n    }\n    let jumps = new Array(steps+1);\n    jumps[0] = 0;\n    jumps[1] = 1;\n    jumps[2] = 2;\n    jumps[3] = 4;\n    for(let i = 4; i <= steps; i++){\n        jumps[i] = jumps[i-1] + jumps[i-2] + jumps[i-3];\n    }\n    return jumps[steps];\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    let min = Number.MAX_VALUE;\n    for(let i = 1; i <= steps; i++){\n        let jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps < min) min = jumps;\n    }\n    return min + 1;\n}\n",
    "    if(d==0) return 0;\n    if(steps==0) return -1;\n    let maxReach = steps[0];\n    let jumps = 1;\n    let steps_taken = steps[0];\n    for(let i=1; i<steps.length; i++){\n        if(i==steps.length-1) return jumps;\n        maxReach = Math.max(maxReach, i+steps[i]);\n        steps_taken--;\n        if(steps_taken==0){\n            jumps++;\n            if(i>=maxReach) return -1;\n            steps_taken = maxReach - i;\n        }\n    }\n    return -1;\n}\n",
    "  if(d==0) return 0;\n  if(steps==1) return d;\n  if(steps>=d) return 1;\n  return Math.min(min_Jumps(steps+1, d-steps), min_Jumps(steps+1, d));\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    let min = Number.MAX_VALUE;\n    for(let i=1; i<=steps; i++){\n        let jumps = min_Jumps(steps, d-i);\n        if(jumps != -1 && jumps < min) min = jumps;\n    }\n    if(min != Number.MAX_VALUE) return min+1;\n    else return -1;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Math.min(min_Jumps(steps-1, d-1), min_Jumps(steps-1, d+1));\n    if(min != -1) return min+1;\n    else return -1;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = min_Jumps(steps-1, d-1);\n    if(min != -1) min++;\n    var min2 = min_Jumps(steps-1, d+1);\n    if(min2 != -1) min2++;\n    if(min == -1 && min2 == -1) return -1;\n    if(min == -1) return min2;\n    if(min2 == -1) return min;\n    return Math.min(min, min2);\n}\n",
    "  if(d == 0) return 0;\n  if(steps == 0) return -1;\n  var min = Number.MAX_VALUE;\n  for(var i = 1; i <= steps; i++){\n    var jumps = min_Jumps(steps, d - i);\n    if(jumps != -1 && jumps < min)\n      min = jumps + 1;\n  }\n  return min;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var jump = min_Jumps(steps-1, d-1);\n    var jump1 = min_Jumps(steps-1, d-2);\n    var jump2 = min_Jumps(steps-1, d-3);\n    if(jump == -1 && jump1 == -1 && jump2 == -1) return -1;\n    if(jump == -1) jump = Number.MAX_VALUE;\n    if(jump1 == -1) jump1 = Number.MAX_VALUE;\n    if(jump2 == -1) jump2 = Number.MAX_VALUE;\n    return 1 + Math.min(jump, jump1, jump2);\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Number.MAX_SAFE_INTEGER;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps + 1 < min)\n            min = jumps + 1;\n    }\n    return min;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps + 1 < min)\n            min = jumps + 1;\n    }\n    return min;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return Infinity;\n    var min = Infinity;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps - i, d - i);\n        if(jumps != Infinity && jumps + 1 < min)\n            min = jumps + 1;\n    }\n    return min;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d-i);\n        if(jumps != -1 && jumps < min)\n            min = jumps + 1;\n    }\n    return min;\n}\n",
    "  if(d == 0) return 0;\n  if(steps == 0) return Infinity;\n  var min = Infinity;\n  for(var i = 1; i <= steps; i++){\n    min = Math.min(min, min_Jumps(steps - i, d - i) + 1);\n  }\n  return min;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps < min)\n            min = jumps + 1;\n    }\n    return min;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Math.min(min_Jumps(steps-1, d-1), min_Jumps(steps-1, d+1));\n    if(min != -1) return min + 1;\n    else return -1;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Math.min(min_Jumps(steps-1, d-1), min_Jumps(steps-1, d+1));\n    if(min != -1) return min+1;\n    else return -1;\n}\n",
    "\tvar jumps = 0;\n\tvar curr_pos = 0;\n\twhile(curr_pos < d){\n\t\tcurr_pos += steps;\n\t\tjumps++;\n\t}\n\treturn jumps;\n}\n",
    "    var jumps = 0;\n    var current = 0;\n    while(current < d){\n        jumps++;\n        current += steps;\n    }\n    return jumps;\n}\n",
    "\tif(d == 0) return 0;\n\tif(steps == 0) return -1;\n\tvar min = Number.MAX_VALUE;\n\tfor(var i = 1; i <= steps; i++){\n\t\tvar jumps = min_Jumps(steps, d - i);\n\t\tif(jumps != -1 && jumps < min)\n\t\t\tmin = jumps + 1;\n\t}\n\treturn min;\n}\n",
    "    var jumps = 0;\n    var curr_pos = 0;\n    var i = 0;\n    while(curr_pos < d){\n        if(steps[i] + curr_pos >= d){\n            jumps++;\n            break;\n        }\n        curr_pos += steps[i];\n        jumps++;\n        i++;\n    }\n    return jumps;\n}\n\nvar steps = [1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9];\nvar d = 10;",
    "    if(d==0) return 0;\n    if(steps==0) return -1;\n    let min = Math.min(min_Jumps(steps-1, d-1), min_Jumps(steps-1, d+1));\n    if(min==-1) return -1;\n    return min+1;\n}\n",
    "    if(d == 0){\n        return 0;\n    }\n    if(steps == 0){\n        return -1;\n    }\n    let min = Number.MAX_VALUE;\n    for(let i = 1; i <= steps; i++){\n        let jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps + 1 < min){\n            min = jumps + 1;\n        }\n    }\n    return min;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps < min)\n            min = jumps + 1;\n    }\n    return min;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = min_Jumps(steps-1, d-1);\n    if(min != -1) min++;\n    var min = Math.min(min, min_Jumps(steps-1, d+1));\n    if(min != -1) min++;\n    return min;\n}\n",
    "    if(d == 0)\n        return 0;\n    if(steps == 0)\n        return -1;\n    var jumps = min_Jumps(steps-1, d-1);\n    if(jumps != -1)\n        jumps++;\n    var jumps2 = min_Jumps(steps-1, d+1);\n    if(jumps2 != -1)\n        jumps2++;\n    if(jumps == -1 && jumps2 == -1)\n        return -1;\n    else if(jumps == -1)\n        return jumps2;\n    else if(jumps2 == -1)\n        return jumps;\n    else\n        return Math.min(jumps, jumps2);\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var jump1 = min_Jumps(steps-1, d-1);\n    var jump2 = min_Jumps(steps-1, d-2);\n    var jump3 = min_Jumps(steps-1, d-3);\n    if(jump1 == -1 && jump2 == -1 && jump3 == -1) return -1;\n    return 1 + Math.max(jump1, jump2, jump3);\n}\n",
    "    if(d == 0)\n        return 0;\n    if(steps == 0)\n        return -1;\n    var jump1 = min_Jumps(steps-1, d-1);\n    var jump2 = min_Jumps(steps-1, d-2);\n    var jump3 = min_Jumps(steps-1, d-3);\n    if(jump1 == -1 && jump2 == -1 && jump3 == -1)\n        return -1;\n    else\n        return Math.max(jump1, jump2, jump3) + 1;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps < min)\n            min = jumps + 1;\n    }\n    return min;\n}\n",
    "\tif(d == 0) return 0;\n\tif(steps == 0) return -1;\n\tvar jumps = min_Jumps(steps-1, d-1);\n\tif(jumps != -1) jumps = min_Jumps(steps-1, d-1);\n\tif(jumps != -1) jumps = min_Jumps(steps-1, d-2);\n\tif(jumps != -1) jumps = min_Jumps(steps-1, d-3);\n\tif(jumps != -1) jumps = min_Jumps(steps-1, d-4);\n\tif(jumps != -1) jumps = min_Jumps(steps-1, d-5);\n\tif(jumps != -1) jumps = min_Jumps(steps-1, d-6);\n\tif(jumps != -1) jumps = min_Jumps(steps-1, d-7);\n\tif(jumps != -1) jumps = min_Jumps(steps-1, d-8);\n\tif(jumps != -1) jumps = min_Jumps(steps-1, d-9);\n\tif(jumps != -1) jumps = min_Jumps(steps-1, d-10);\n\tif(jumps != -1) jumps = min_Jumps(steps-1, d-11);\n\tif(jumps != -1) jumps = min_Jumps(steps-1, d-12);\n\tif(jumps != -1) jumps = min_Jumps(steps-1, d-13);\n\tif(jumps != -1) jumps = min_Jumps(steps-1, d-14);\n\tif(jumps != -1) jumps = min_Jumps(steps-1, d-15);\n\tif(jumps != -1) jumps = min_Jumps(steps-1, d-16);\n\tif(jumps != -1) jumps = min_Jumps(steps-1, d-17);\n\tif(jumps != -1) jumps = min_Jumps(steps-1, d-18);\n\tif(jumps != -1) jumps = min_Jumps(steps-1,",
    "  if(d == 0) return 0;\n  if(steps == 0) return -1;\n  var jumps = min_Jumps(steps-1, d-1);\n  if(jumps != -1) jumps++;\n  var jumps = min_Jumps(steps-1, d+1);\n  if(jumps != -1) jumps++;\n  return jumps;\n}\n",
    "\tif(d == 0) return 0;\n\tif(steps == 0) return -1;\n\tvar jumps = min_Jumps(steps-1, d-1);\n\tif(jumps != -1) jumps = min_Jumps(steps, d-1);\n\tif(jumps != -1) jumps = min_Jumps(steps-1, d-2);\n\tif(jumps != -1) jumps = min_Jumps(steps, d-2);\n\tif(jumps != -1) jumps = min_Jumps(steps-1, d-3);\n\tif(jumps != -1) jumps = min_Jumps(steps, d-3);\n\tif(jumps != -1) jumps = min_Jumps(steps-1, d-4);\n\tif(jumps != -1) jumps = min_Jumps(steps, d-4);\n\tif(jumps != -1) jumps = min_Jumps(steps-1, d-5);\n\tif(jumps != -1) jumps = min_Jumps(steps, d-5);\n\tif(jumps != -1) jumps = min_Jumps(steps-1, d-6);\n\tif(jumps != -1) jumps = min_Jumps(steps, d-6);\n\tif(jumps != -1) jumps = min_Jumps(steps-1, d-7);\n\tif(jumps != -1) jumps = min_Jumps(steps, d-7);\n\tif(jumps != -1) jumps = min_Jumps(steps-1, d-8);\n\tif(jumps != -1) jumps = min_Jumps(steps, d-8);\n\tif(jumps != -1) jumps = min_Jumps(steps-1, d-9);\n\tif(jumps != -1) jumps = min_Jumps(steps, d-9);\n\tif(jumps != -1) jumps = min_Jumps(steps-1, d-10);\n\tif(jumps != -1) jumps = min_Jumps(steps, d-10);\n\tif(jumps != -1) jumps = min_Jumps",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i<=steps; i++){\n        var jumps = min_Jumps(steps, d-i);\n        if(jumps != -1 && jumps < min)\n            min = jumps + 1;\n    }\n    return min;\n}\n",
    "    var jumps = 0;\n    var pos = 0;\n    while(pos < d){\n        pos += steps;\n        jumps++;\n    }\n    return jumps;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    let min = Number.MAX_VALUE;\n    for(let i = 1; i <= steps; i++){\n        let jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps < min) min = jumps + 1;\n    }\n    return min;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    let min = min_Jumps(steps-1, d-1);\n    if(min != -1) min++;\n    let min1 = min_Jumps(steps-1, d+1);\n    if(min1 != -1) min1++;\n    if(min == -1 && min1 == -1) return -1;\n    if(min == -1) return min1;\n    if(min1 == -1) return min;\n    return Math.min(min, min1);\n}\n",
    "    if(d==0) return 0;\n    if(steps==0) return -1;\n    var min_jumps = min_Jumps(steps-1, d-1);\n    if(d-1==0) return 1;\n    if(min_jumps!=-1) min_jumps = Math.min(min_jumps, min_Jumps(steps-1, d-2));\n    if(d-2==0) return 2;\n    if(min_jumps!=-1) min_jumps = Math.min(min_jumps, min_Jumps(steps-1, d-3));\n    if(d-3==0) return 3;\n    if(min_jumps!=-1) return min_jumps+1;\n    return -1;\n}\n",
    "    var jumps = 0;\n    var i = 0;\n    while(i < d){\n        i += steps;\n        jumps++;\n    }\n    return jumps;\n}\n",
    "    if(d == 0){\n        return 0;\n    }\n    if(d == 1){\n        return 1;\n    }\n    if(steps == 1){\n        return d;\n    }\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= d; i++){\n        var jumps = Math.max(min_Jumps(steps - 1, i - 1), min_Jumps(steps, d - i));\n        if(jumps < min){\n            min = jumps;\n        }\n    }\n    return min + 1;\n}\n",
    "    var jumps = 0;\n    var current_pos = 0;\n    while(current_pos < d){\n        current_pos += steps;\n        jumps++;\n    }\n    return jumps;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps < min)\n            min = jumps + 1;\n    }\n    return min;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps + 1 < min)\n            min = jumps + 1;\n    }\n    return min;\n}\n",
    "\tvar jumps = 0;\n\tvar current_pos = 0;\n\twhile(current_pos < d){\n\t\tjumps++;\n\t\tcurrent_pos += steps;\n\t}\n\treturn jumps;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps + 1 < min)\n            min = jumps + 1;\n    }\n    return min;\n}\n",
    "    var jumps = 0;\n    var curr = 0;\n    while(curr < d){\n        jumps++;\n        curr += steps;\n    }\n    return jumps;\n}\n",
    "    let jumps = 0;\n    let curr = 0;\n    while(curr < d){\n        curr += steps;\n        jumps++;\n    }\n    return jumps;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var jump1 = min_Jumps(steps-1, d-1);\n    var jump2 = min_Jumps(steps-1, d-2);\n    var jump3 = min_Jumps(steps-1, d-3);\n    if(jump1 == -1 && jump2 == -1 && jump3 == -1) return -1;\n    return 1 + Math.max(jump1, jump2, jump3);\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = min_Jumps(steps-1, d-1);\n    if(min != -1) min++;\n    var min = Math.min(min, min_Jumps(steps-1, d+1));\n    if(min != -1) min++;\n    var min = Math.min(min, min_Jumps(steps-1, d));\n    if(min != -1) min++;\n    return min;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    if(d <= steps) return 1;\n    let min = Number.MAX_VALUE;\n    for(let i = 1; i <= steps; i++){\n        let jumps = min_Jumps(steps, d-i);\n        if(jumps != -1 && jumps < min) min = jumps;\n    }\n    return min + 1;\n}\n",
    "\tif(d == 0)\n\t\treturn 0;\n\tif(d == 1)\n\t\treturn 1;\n\tif(steps[d] != 0)\n\t\treturn steps[d];\n\tvar min = Number.MAX_VALUE;\n\tfor(var i = 1; i <= d; i++){\n\t\tvar jumps = min_Jumps(steps, d - i);\n\t\tif(jumps != Number.MAX_VALUE && jumps + 1 < min)\n\t\t\tmin = jumps + 1;\n\t}\n\tsteps[d] = min;\n\treturn min;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var jump1 = min_Jumps(steps-1, d-1);\n    var jump2 = min_Jumps(steps-1, d-2);\n    var jump3 = min_Jumps(steps-1, d-3);\n    if(jump1 == -1 && jump2 == -1 && jump3 == -1) return -1;\n    return 1 + Math.max(jump1, jump2, jump3);\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var jumps = min_Jumps(steps-1, d-1);\n    if(jumps != -1) jumps = 1 + jumps;\n    var jumps2 = min_Jumps(steps-1, d+1);\n    if(jumps2 != -1) jumps2 = 1 + jumps2;\n    if(jumps == -1 && jumps2 == -1) return -1;\n    if(jumps == -1) return jumps2;\n    if(jumps2 == -1) return jumps;\n    return Math.min(jumps, jumps2);\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps < min) min = jumps;\n    }\n    return min + 1;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d-i);\n        if(jumps != -1 && jumps < min)\n            min = jumps + 1;\n    }\n    return min;\n}\n",
    "    if(d==0) return 0;\n    if(steps==0) return -1;\n    var jump1 = min_Jumps(steps-1, d-1);\n    var jump2 = min_Jumps(steps-1, d-2);\n    var jump3 = min_Jumps(steps-1, d-3);\n    if(jump1==-1 && jump2==-1 && jump3==-1) return -1;\n    return Math.max(jump1, jump2, jump3) + 1;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps < min)\n            min = jumps + 1;\n    }\n    return min;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d-i);\n        if(jumps != -1 && jumps < min)\n            min = jumps + 1;\n    }\n    return min;\n}\n",
    "    var jumps = 0;\n    var current = 0;\n    while(current < d){\n        jumps++;\n        current += steps;\n    }\n    return jumps;\n}\n",
    "    if(d==0) return 0;\n    if(steps==0) return -1;\n    var jumps = min_Jumps(steps-1, d-1);\n    if(jumps!=-1) jumps = min_Jumps(steps, d-1);\n    if(jumps!=-1) jumps = min_Jumps(steps-1, d-2);\n    if(jumps==-1) return -1;\n    return jumps+1;\n}\n",
    "    //base case\n    if(d==0) return 0;\n    if(steps==0) return Infinity;\n    //recursive case\n    var min_jumps = Infinity;\n    for(var i=1; i<=steps; i++){\n        min_jumps = Math.min(min_jumps, 1+min_Jumps(steps-i, d-i));\n    }\n    return min_jumps;\n}",
    "    var jumps = 0;\n    var current = 0;\n    while(current < d){\n        jumps++;\n        current += steps;\n    }\n    return jumps;\n}",
    "    var jumps = 0;\n    var current = 0;\n    while(current < d){\n        current += steps;\n        jumps++;\n    }\n    return jumps;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps < min) min = jumps;\n    }\n    return min + 1;\n}\n",
    "    if(steps == 0)\n        return 0;\n    if(steps == 1)\n        return 1;\n    if(steps == 2)\n        return 2;\n    if(steps == 3)\n        return 4;\n    if(steps == 4)\n        return 7;\n    if(steps == 5)\n        return 13;\n    if(steps == 6)\n        return 24;\n    if(steps == 7)\n        return 44;\n    if(steps == 8)\n        return 81;\n    if(steps == 9)\n        return 149;\n    if(steps == 10)\n        return 274;\n    if(steps == 11)\n        return 504;\n    if(steps == 12)\n        return 927;\n    if(steps == 13)\n        return 1705;\n    if(steps == 14)\n        return 3136;\n    if(steps == 15)\n        return 5768;\n    if(steps == 16)\n        return 10609;\n    if(steps == 17)\n        return 19513;\n    if(steps == 18)\n        return 35890;\n    if(steps == 19)\n        return 66012;\n    if(steps == 20)\n        return 121415;\n    if(steps == 21)\n        return 223317;\n    if(steps == 22)\n        return 410744;\n    if(steps == 23)\n        return 755476;\n    if(steps == 24)\n        return 1389537;\n    if(steps == 25)\n        return 2555757;\n    if(steps == 26)\n        return 4700770;\n    if(steps == 27)\n        return 8646064;\n    if(steps == 28)\n        return 15902591;\n    if(steps == 29)\n        return 29249425;\n    if(steps == 30)\n        return 53798080;\n    if(steps == 31)\n        return 98950096;\n    if(steps == 32)\n        return 181997601;\n    if(steps == 33)\n        return 334745777;\n    if(steps == 34)\n        return 615693474;\n    if(steps == 35)\n        return",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps < min) min = jumps;\n    }\n    return min + 1;\n}\n",
    "    let jumps = 0;\n    let pos = 0;\n    while(pos < d){\n        pos += steps;\n        jumps++;\n    }\n    return jumps;\n}\n",
    "    var jumps = 0;\n    var current_pos = 0;\n    while(current_pos < d){\n        jumps++;\n        current_pos += steps;\n    }\n    return jumps;\n}",
    "    if(d == 0) return 0;\n    if(steps == 0) return Infinity;\n    if(d == steps) return 1;\n    var min = Infinity;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d - i);\n        if(jumps != Infinity && jumps + 1 < min) min = jumps + 1;\n    }\n    return min;\n}\n",
    "\tif(d == 0) return 0;\n\tif(steps == 0) return -1;\n\tvar jump1 = min_Jumps(steps - 1, d - 1);\n\tvar jump2 = min_Jumps(steps - 1, d - 2);\n\tvar jump3 = min_Jumps(steps - 1, d - 3);\n\tif(jump1 == -1 && jump2 == -1 && jump3 == -1) return -1;\n\treturn 1 + Math.max(jump1, Math.max(jump2, jump3));\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min_jumps = min_Jumps(steps - 1, d - 1);\n    if(min_jumps != -1){\n        min_jumps = 1 + min_jumps;\n    }\n    var min_jumps_h = min_Jumps(steps - 1, d);\n    if(min_jumps_h != -1){\n        min_jumps_h = 1 + min_jumps_h;\n    }\n    if(min_jumps == -1 && min_jumps_h == -1){\n        return -1;\n    }\n    if(min_jumps == -1){\n        return min_jumps_h;\n    }\n    if(min_jumps_h == -1){\n        return min_jumps;\n    }\n    return Math.min(min_jumps, min_jumps_h);\n}\n",
    "    let jumps = 0;\n    let current = 0;\n    while(current < d){\n        current += steps;\n        jumps++;\n    }\n    return jumps;\n}\n",
    "    var jumps = 0;\n    var current = 0;\n    while(current < d){\n        jumps++;\n        current += steps;\n    }\n    return jumps;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    let min = Number.MAX_VALUE;\n    for(let i = 1; i <= steps; i++){\n        let jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps < min) min = jumps;\n    }\n    return min + 1;\n}\n",
    "    if(steps == 0){\n        return 0;\n    }\n    if(steps == 1){\n        return 1;\n    }\n    if(steps == 2){\n        return 2;\n    }\n    if(steps == 3){\n        return 4;\n    }\n    if(steps == 4){\n        return 7;\n    }\n    if(steps == 5){\n        return 13;\n    }\n    if(steps == 6){\n        return 24;\n    }\n    if(steps == 7){\n        return 44;\n    }\n    if(steps == 8){\n        return 81;\n    }\n    if(steps == 9){\n        return 149;\n    }\n    if(steps == 10){\n        return 274;\n    }\n    if(steps == 11){\n        return 504;\n    }\n    if(steps == 12){\n        return 927;\n    }\n    if(steps == 13){\n        return 1705;\n    }\n    if(steps == 14){\n        return 3136;\n    }\n    if(steps == 15){\n        return 5768;\n    }\n    if(steps == 16){\n        return 10609;\n    }\n    if(steps == 17){\n        return 19513;\n    }\n    if(steps == 18){\n        return 35890;\n    }\n    if(steps == 19){\n        return 66012;\n    }\n    if(steps == 20){\n        return 121415;\n    }\n    if(steps == 21){\n        return 223317;\n    }\n    if(steps == 22){\n        return 410744;\n    }\n    if(steps == 23){\n        return 755476;\n    }\n    if(steps == 24){\n        return 1389537;\n    }\n    if(steps == 25){\n        return 2555757;\n    }\n    if(steps == 26){\n        return 4700770;\n    }\n    if(steps == 27){\n        return 8646064;\n    }\n    if(steps == 28){\n        return 15902591;\n    }\n    if(steps == 29){\n        return 29249425;\n    }\n",
    "    if(d==0) return 0;\n    if(steps==0) return -1;\n    var min = min_Jumps(steps-1, d-1);\n    if(d-2>=0){\n        var min2 = min_Jumps(steps-1, d-2);\n        if(min2!=-1 && (min==-1 || min2<min)) min = min2;\n    }\n    if(d-3>=0){\n        var min3 = min_Jumps(steps-1, d-3);\n        if(min3!=-1 && (min==-1 || min3<min)) min = min3;\n    }\n    return min+1;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    let min_jumps = Number.MAX_VALUE;\n    for(let i = 1; i <= steps; i++){\n        let jumps = min_Jumps(steps, d-i);\n        if(jumps != -1 && jumps < min_jumps)\n            min_jumps = jumps + 1;\n    }\n    return min_jumps;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return Infinity;\n    if(d == steps) return 1;\n    var min = Infinity;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d - i);\n        if(jumps != Infinity && jumps + 1 < min){\n            min = jumps + 1;\n        }\n    }\n    return min;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return Infinity;\n    if(d == steps) return 1;\n    return Math.min(min_Jumps(steps-1, d-1), min_Jumps(steps-1, d));\n}\n",
    "    if(d == 0)\n        return 0;\n    if(steps == 0)\n        return -1;\n    var jump1 = min_Jumps(steps - 1, d - 1);\n    var jump2 = min_Jumps(steps - 1, d - 2);\n    var jump3 = min_Jumps(steps - 1, d - 3);\n    if(jump1 == -1 && jump2 == -1 && jump3 == -1)\n        return -1;\n    else\n        return Math.max(jump1, jump2, jump3) + 1;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var jumps = min_Jumps(steps-1, d-1);\n    if(jumps != -1) jumps = min_Jumps(steps, d-1);\n    if(jumps != -1) jumps = min_Jumps(steps, d-2);\n    if(jumps != -1) return jumps+1;\n    else return -1;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = min_Jumps(steps-1, d-1);\n    if(min != -1) min++;\n    var min2 = min_Jumps(steps-1, d-2);\n    if(min2 != -1) min2++;\n    if(min == -1 && min2 == -1) return -1;\n    if(min == -1) return min2;\n    if(min2 == -1) return min;\n    return Math.min(min, min2);\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    if(d <= steps) return 1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d-i);\n        if(jumps != -1 && jumps < min)\n            min = jumps + 1;\n    }\n    return min;\n}\n",
    "    if(d==0)\n        return 0;\n    if(steps==0)\n        return -1;\n    var min = min_Jumps(steps-1, d-1);\n    if(d-2>=0)\n        min = Math.min(min, min_Jumps(steps-1, d-2));\n    if(d-3>=0)\n        min = Math.min(min, min_Jumps(steps-1, d-3));\n    if(min==-1)\n        return -1;\n    return min+1;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = min_Jumps(steps-1, d-1);\n    var min2 = min_Jumps(steps-1, d+1);\n    if(min == -1 && min2 == -1) return -1;\n    if(min == -1) return min2+1;\n    if(min2 == -1) return min+1;\n    return Math.min(min, min2)+1;\n}",
    "    let jumps = 0;\n    let current = 0;\n    while(current < d){\n        current += steps;\n        jumps++;\n    }\n    return jumps;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = min_Jumps(steps-1, d-1);\n    if(d-2 >= 0){\n        var min2 = min_Jumps(steps-1, d-2);\n        if(min2 != -1 && (min == -1 || min2 < min)){\n            min = min2;\n        }\n    }\n    if(d-3 >= 0){\n        var min3 = min_Jumps(steps-1, d-3);\n        if(min3 != -1 && (min == -1 || min3 < min)){\n            min = min3;\n        }\n    }\n    if(min == -1) return -1;\n    return min+1;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    let min = Math.min(min_Jumps(steps-1, d-1), min_Jumps(steps-1, d+1));\n    if(min != -1) return min+1;\n    else return -1;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps < min) min = jumps;\n    }\n    return min + 1;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Math.min(min_Jumps(steps-1, d-1), min_Jumps(steps-1, d+1));\n    if(min == -1) return -1;\n    return min + 1;\n}\n",
    "    var jumps = 0;\n    var current = 0;\n    while(current < d){\n        jumps++;\n        current += steps;\n    }\n    return jumps;\n}\n",
    "\tif(d == 0) return 0;\n\tif(steps == 0) return Infinity;\n\tvar min = Infinity;\n\tfor(var i = 1; i <= steps; i++){\n\t\tvar jumps = min_Jumps(steps - i, d - i);\n\t\tif(jumps != Infinity && jumps + 1 < min)\n\t\t\tmin = jumps + 1;\n\t}\n\treturn min;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = min_Jumps(steps-1, d-1);\n    var min2 = min_Jumps(steps-1, d-2);\n    var min3 = min_Jumps(steps-1, d-3);\n    if(min == -1 && min2 == -1 && min3 == -1) return -1;\n    return 1 + Math.max(min, min2, min3);\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return Infinity;\n    var min = Infinity;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d - i);\n        if(jumps != Infinity && jumps + 1 < min)\n            min = jumps + 1;\n    }\n    return min;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = min_Jumps(steps-1, d-1);\n    var min2 = min_Jumps(steps-1, d-2);\n    var min3 = min_Jumps(steps-1, d-3);\n    if(min == -1 && min2 == -1 && min3 == -1) return -1;\n    return 1 + Math.max(min, min2, min3);\n}\n",
    "    var jumps = 0;\n    var current = 0;\n    while(current < d){\n        current += steps;\n        jumps++;\n    }\n    return jumps;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps + 1 < min)\n            min = jumps + 1;\n    }\n    return min;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps < min)\n            min = jumps + 1;\n    }\n    return min;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps < min)\n            min = jumps + 1;\n    }\n    return min;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var jumps = min_Jumps(steps-1, d-1);\n    if(jumps != -1) jumps += 1;\n    var jumps1 = min_Jumps(steps-1, d+1);\n    if(jumps1 != -1) jumps1 += 1;\n    if(jumps == -1 && jumps1 == -1) return -1;\n    else if(jumps == -1) return jumps1;\n    else if(jumps1 == -1) return jumps;\n    else return Math.min(jumps, jumps1);\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps < min)\n            min = jumps + 1;\n    }\n    return min;\n}\n",
    "    let jumps = 0;\n    let curr_pos = 0;\n    let i = 0;\n    while(curr_pos < d){\n        if(i >= steps.length){\n            return -1;\n        }\n        curr_pos += steps[i];\n        jumps++;\n        i++;\n    }\n    return jumps;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return 0;\n    if(steps == 1) return 1;\n    if(steps == 2) return 2;\n    if(steps == 3) return 3;\n    if(steps == 4) return 4;\n    if(steps == 5) return 5;\n    if(steps == 6) return 6;\n    if(steps == 7) return 7;\n    if(steps == 8) return 8;\n    if(steps == 9) return 9;\n    if(steps == 10) return 10;\n    if(steps == 11) return 11;\n    if(steps == 12) return 12;\n    if(steps == 13) return 13;\n    if(steps == 14) return 14;\n    if(steps == 15) return 15;\n    if(steps == 16) return 16;\n    if(steps == 17) return 17;\n    if(steps == 18) return 18;\n    if(steps == 19) return 19;\n    if(steps == 20) return 20;\n    if(steps == 21) return 21;\n    if(steps == 22) return 22;\n    if(steps == 23) return 23;\n    if(steps == 24) return 24;\n    if(steps == 25) return 25;\n    if(steps == 26) return 26;\n    if(steps == 27) return 27;\n    if(steps == 28) return 28;\n    if(steps == 29) return 29;\n    if(steps == 30) return 30;\n    if(steps == 31) return 31;\n    if(steps == 32) return 32;\n    if(steps == 33) return 33;\n    if(steps == 34) return 34;\n    if(steps == 35) return 35;\n    if(steps == 36) return 36;\n    if(steps == 37) return 37;\n    if(steps == 38) return 38;\n    if(steps == 39) return 39;\n    if(steps == 40) return 40;\n    if(steps == 41) return 41;\n    if(steps == 42) return 42;\n    if(steps == 43) return 43;\n    if(steps == 44) return 44;\n    if(steps ==",
    "    var jumps = 0;\n    var i = 0;\n    while(i < d){\n        i += steps;\n        jumps++;\n    }\n    return jumps;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var jumps = min_Jumps(steps-1, d-1);\n    if(jumps != -1) jumps++;\n    var jumps = min_Jumps(steps-1, d+1);\n    if(jumps != -1) jumps++;\n    return jumps;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps < min)\n            min = jumps + 1;\n    }\n    return min;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    if(d <= steps) return 1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps < min) min = jumps;\n    }\n    return min + 1;\n}\n",
    "    let jumps = 0;\n    let current_pos = 0;\n    while(current_pos < d){\n        if(current_pos + steps >= d){\n            jumps++;\n            break;\n        }\n        current_pos += steps;\n        jumps++;\n    }\n    return jumps;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Math.min(min_Jumps(steps-1, d-1), min_Jumps(steps-1, d+1));\n    if(min != -1) return min+1;\n    else return -1;\n}\n",
    "    var jumps = 0;\n    var curr_pos = 0;\n    while(curr_pos < d){\n        curr_pos += steps;\n        jumps++;\n    }\n    return jumps;\n}\n",
    "    if(d == 0)\n        return 0;\n    if(steps == 0)\n        return -1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps + 1 < min)\n            min = jumps + 1;\n    }\n    return min;\n}\n",
    "    if(d == 0)\n        return 0;\n    if(steps == 0)\n        return -1;\n    let min = Number.MAX_VALUE;\n    for(let i = 1; i <= steps; i++){\n        let jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps < min)\n            min = jumps + 1;\n    }\n    return min;\n}\n",
    "    if(d == 0){\n        return 0;\n    }\n    if(steps == 0){\n        return Infinity;\n    }\n    if(steps >= d){\n        return 1;\n    }\n    var min = Infinity;\n    for(var i = 1; i <= steps; i++){\n        var jumps = 1 + min_Jumps(steps - i, d - i);\n        if(jumps < min){\n            min = jumps;\n        }\n    }\n    return min;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps < min)\n            min = jumps + 1;\n    }\n    return min;\n}\n",
    "    if(d==0) return 0;\n    if(steps==0) return -1;\n    var min = min_Jumps(steps-1, d-1);\n    if(min!=-1) min++;\n    var min2 = min_Jumps(steps-1, d+1);\n    if(min2!=-1) min2++;\n    if(min==-1 && min2==-1) return -1;\n    if(min==-1) return min2;\n    if(min2==-1) return min;\n    return Math.min(min, min2);\n}\n",
    "    if(steps == 0)\n        return 0;\n    if(steps == 1)\n        return 1;\n    if(steps == 2)\n        return 2;\n    if(steps == 3)\n        return 4;\n    if(steps == 4)\n        return 7;\n    if(steps == 5)\n        return 13;\n    if(steps == 6)\n        return 24;\n    if(steps == 7)\n        return 44;\n    if(steps == 8)\n        return 81;\n    if(steps == 9)\n        return 149;\n    if(steps == 10)\n        return 274;\n    if(steps == 11)\n        return 504;\n    if(steps == 12)\n        return 927;\n    if(steps == 13)\n        return 1705;\n    if(steps == 14)\n        return 3136;\n    if(steps == 15)\n        return 5768;\n    if(steps == 16)\n        return 10609;\n    if(steps == 17)\n        return 19513;\n    if(steps == 18)\n        return 35890;\n    if(steps == 19)\n        return 66012;\n    if(steps == 20)\n        return 121415;\n    if(steps == 21)\n        return 223317;\n    if(steps == 22)\n        return 410744;\n    if(steps == 23)\n        return 755476;\n    if(steps == 24)\n        return 1389537;\n    if(steps == 25)\n        return 2555757;\n    if(steps == 26)\n        return 4700770;\n    if(steps == 27)\n        return 8646064;\n    if(steps == 28)\n        return 15902591;\n    if(steps == 29)\n        return 29249425;\n    if(steps == 30)\n        return 53798080;\n    if(steps == 31)\n        return 98950096;\n    if(steps == 32)\n        return 181997601;\n    if(steps == 33)\n        return 334745777;\n    if(steps == 34)\n        return 615693474;\n    if(steps == 35)\n        return",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps + 1 < min)\n            min = jumps + 1;\n    }\n    return min;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps < min)\n            min = jumps + 1;\n    }\n    return min;\n}\n",
    "    if(d == 0)\n        return 0;\n    if(steps == 0)\n        return -1;\n    var min = min_Jumps(steps-1, d-1);\n    var min2 = min_Jumps(steps-1, d-2);\n    var min3 = min_Jumps(steps-1, d-3);\n    if(min == -1 && min2 == -1 && min3 == -1)\n        return -1;\n    else\n        return 1 + Math.max(min, min2, min3);\n}\n",
    "    if(d == 0)\n        return 0;\n    if(steps == 0)\n        return -1;\n    let min = Number.MAX_VALUE;\n    for(let i = 1; i <= steps; i++){\n        let jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps + 1 < min)\n            min = jumps + 1;\n    }\n    return min;\n}\n",
    "    if(steps == 0) return 0;\n    if(steps == 1) return 1;\n    if(steps == 2) return 2;\n    if(steps == 3) return 3;\n    if(steps == 4) return 4;\n    if(steps == 5) return 5;\n    if(steps == 6) return 6;\n    if(steps == 7) return 7;\n    if(steps == 8) return 8;\n    if(steps == 9) return 9;\n    if(steps == 10) return 10;\n    if(steps == 11) return 11;\n    if(steps == 12) return 12;\n    if(steps == 13) return 13;\n    if(steps == 14) return 14;\n    if(steps == 15) return 15;\n    if(steps == 16) return 16;\n    if(steps == 17) return 17;\n    if(steps == 18) return 18;\n    if(steps == 19) return 19;\n    if(steps == 20) return 20;\n    if(steps == 21) return 21;\n    if(steps == 22) return 22;\n    if(steps == 23) return 23;\n    if(steps == 24) return 24;\n    if(steps == 25) return 25;\n    if(steps == 26) return 26;\n    if(steps == 27) return 27;\n    if(steps == 28) return 28;\n    if(steps == 29) return 29;\n    if(steps == 30) return 30;\n    if(steps == 31) return 31;\n    if(steps == 32) return 32;\n    if(steps == 33) return 33;\n    if(steps == 34) return 34;\n    if(steps == 35) return 35;\n    if(steps == 36) return 36;\n    if(steps == 37) return 37;\n    if(steps == 38) return 38;\n    if(steps == 39) return 39;\n    if(steps == 40) return 40;\n    if(steps == 41) return 41;\n    if(steps == 42) return 42;\n    if(steps == 43) return 43;\n    if(steps == 44) return 44;\n    if(steps == 45) return 45;\n    if(steps ==",
    "\tvar jumps = 0;\n\tvar current = 0;\n\twhile(current < d){\n\t\tcurrent += steps;\n\t\tjumps++;\n\t}\n\treturn jumps;\n}\n",
    "    if(d==0) return 0;\n    if(steps==0) return -1;\n    var min = min_Jumps(steps-1, d-1);\n    if(min!=-1) min++;\n    var min2 = min_Jumps(steps-1, d+1);\n    if(min2!=-1) min2++;\n    if(min==-1) return min2;\n    if(min2==-1) return min;\n    return Math.min(min, min2);\n}\n",
    "    if(d == 0){\n        return 0;\n    }\n    if(steps == 0){\n        return -1;\n    }\n    let min = Number.MAX_VALUE;\n    for(let i = 1; i <= steps; i++){\n        let jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps + 1 < min){\n            min = jumps + 1;\n        }\n    }\n    return min;\n}\n",
    "    if(d == 0){\n        return 0;\n    }\n    if(steps == 0){\n        return -1;\n    }\n    var a = min_Jumps(steps-1, d-1);\n    var b = min_Jumps(steps-1, d-2);\n    var c = min_Jumps(steps-1, d-3);\n    if(a == -1 && b == -1 && c == -1){\n        return -1;\n    }\n    return 1 + Math.max(a, Math.max(b, c));\n}\n",
    "    if(d==0) return 0;\n    if(steps==0) return -1;\n    var jumps = min_Jumps(steps-1, d-1);\n    if(jumps!=-1) jumps = min_Jumps(steps, d-1);\n    if(jumps!=-1) jumps = min_Jumps(steps-1, d-2);\n    if(jumps==-1) return -1;\n    else return jumps+1;\n}\n",
    "    let jumps = 0;\n    let curr_pos = 0;\n    while(curr_pos < d){\n        jumps++;\n        curr_pos += steps;\n    }\n    return jumps;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps < min)\n            min = jumps + 1;\n    }\n    return min;\n}\n",
    "  var jumps = 0;\n  var current = 0;\n  while(current < d){\n    current += steps;\n    jumps++;\n  }\n  return jumps;\n}\n",
    "    var jumps = 0;\n    var i = 0;\n    while(i < d){\n        jumps++;\n        i = i + steps;\n    }\n    return jumps;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps + 1 < min)\n            min = jumps + 1;\n    }\n    return min;\n}\n",
    "    if(d==0)\n        return 0;\n    if(d<=steps)\n        return 1;\n    return 1 + min_Jumps(steps, d-steps);\n}\n",
    "    var jumps = 0;\n    var current = 0;\n    while(current < d){\n        jumps++;\n        current += steps;\n        if(current == d){\n            return jumps;\n        }\n        else if(current > d){\n            return -1;\n        }\n        else{\n            current -= 1;\n        }\n    }\n}",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps + 1 < min)\n            min = jumps + 1;\n    }\n    return min;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var jumps = min_Jumps(steps-1, d-1);\n    if(jumps != -1) jumps = min_Jumps(steps, d-1);\n    if(jumps != -1) jumps = min_Jumps(steps, d-2);\n    if(jumps != -1) jumps = min_Jumps(steps, d-3);\n    if(jumps != -1) jumps = min_Jumps(steps, d-4);\n    if(jumps != -1) jumps = min_Jumps(steps, d-5);\n    if(jumps != -1) jumps = min_Jumps(steps, d-6);\n    if(jumps != -1) jumps = min_Jumps(steps, d-7);\n    if(jumps != -1) jumps = min_Jumps(steps, d-8);\n    if(jumps != -1) jumps = min_Jumps(steps, d-9);\n    if(jumps != -1) jumps = min_Jumps(steps, d-10);\n    if(jumps != -1) jumps = min_Jumps(steps, d-11);\n    if(jumps != -1) jumps = min_Jumps(steps, d-12);\n    if(jumps != -1) jumps = min_Jumps(steps, d-13);\n    if(jumps != -1) jumps = min_Jumps(steps, d-14);\n    if(jumps != -1) jumps = min_Jumps(steps, d-15);\n    if(jumps != -1) jumps = min_Jumps(steps, d-16);\n    if(jumps != -1) jumps = min_Jumps(steps, d-17);\n    if(jumps != -1) jumps = min_Jumps(steps, d-18);\n    if(jumps != -1) jumps = min_Jumps(steps, d-19);\n    if(jumps != -1) jumps = min_Jumps(steps, d-20);\n    if(jumps != -1) jumps",
    "    if(d==0) return 0;\n    if(steps==0) return -1;\n    let min = Number.MAX_VALUE;\n    for(let i=1; i<=steps; i++){\n        let jumps = min_Jumps(steps, d-i);\n        if(jumps!=-1 && jumps<min)\n            min = jumps;\n    }\n    return min+1;\n}\n",
    "    if(d == 0)\n        return 0;\n    if(steps == 1)\n        return d;\n    if(steps == 2)\n        return d/2 + d%2;\n    return Math.ceil(d/2);\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps < min)\n            min = jumps + 1;\n    }\n    return min;\n}\n",
    "    if(d==0) return 0;\n    if(steps==0) return -1;\n    var jumps = min_Jumps(steps-1, d-1);\n    if(jumps!=-1) jumps++;\n    var jumps = min_Jumps(steps-1, d+1);\n    if(jumps!=-1) jumps++;\n    return jumps;\n}\n",
    "    var jumps = 0;\n    var i = 0;\n    while(i < d){\n        if(i + steps >= d){\n            jumps++;\n            break;\n        }\n        else{\n            i = i + steps;\n            jumps++;\n        }\n    }\n    return jumps;\n}",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    let min = Number.MAX_VALUE;\n    for(let i = 1; i <= steps; i++){\n        let jumps = min_Jumps(steps, d-i);\n        if(jumps != -1 && jumps < min)\n            min = jumps + 1;\n    }\n    return min;\n}\n",
    "    if(d == 0)\n        return 0;\n    if(steps == 0)\n        return -1;\n    var min = Number.MAX_VALUE;\n    for(var i = 1; i <= steps; i++){\n        var jumps = min_Jumps(steps, d - i);\n        if(jumps != -1 && jumps + 1 < min)\n            min = jumps + 1;\n    }\n    return min;\n}\n",
    "    if(steps == 0){\n        return 0;\n    }\n    if(steps == 1){\n        return 1;\n    }\n    if(steps == 2){\n        return 2;\n    }\n    if(steps == 3){\n        return 4;\n    }\n    let jumps = new Array(steps+1);\n    jumps[0] = 0;\n    jumps[1] = 1;\n    jumps[2] = 2;\n    jumps[3] = 4;\n    for(let i = 4; i <= steps; i++){\n        jumps[i] = jumps[i-1] + jumps[i-2] + jumps[i-3];\n    }\n    return jumps[steps];\n}\n",
    "    if(d<=steps){\n        return 1;\n    }\n    else{\n        return min_Jumps(steps, d-steps) + 1;\n    }\n}\n",
    "    if(d == 0){\n        return 0;\n    }\n    if(steps == 0){\n        return Infinity;\n    }\n    if(d == steps){\n        return 1;\n    }\n    return Math.min(min_Jumps(steps-1, d-1), min_Jumps(steps-1, d), min_Jumps(steps-1, d+1)) + 1;\n}\n",
    "    if(d == 0){\n        return 0;\n    }\n    if(steps == 0){\n        return -1;\n    }\n    var min = min_Jumps(steps-1, d-1);\n    if(min != -1){\n        min = 1 + min;\n    }\n    var min2 = min_Jumps(steps-1, d-2);\n    if(min2 != -1){\n        min2 = 1 + min2;\n    }\n    var min3 = min_Jumps(steps-1, d-3);\n    if(min3 != -1){\n        min3 = 1 + min3;\n    }\n    if(min == -1 && min2 == -1 && min3 == -1){\n        return -1;\n    }\n    return Math.min(min, min2, min3);\n}\n",
    "    var jumps = 0;\n    var position = 0;\n    while(position < d){\n        position += steps;\n        jumps++;\n    }\n    return jumps;\n}\n",
    "    var jumps = 0;\n    var steps_taken = 0;\n    while(steps_taken < d){\n        steps_taken += steps;\n        jumps++;\n    }\n    return jumps;\n}\n",
    "    if(d==0){\n        return 0;\n    }\n    if(steps == 0){\n        return Number.MAX_VALUE;\n    }\n    var min = Number.MAX_VALUE;\n    for(var i=1; i<=steps; i++){\n        var jumps = min_Jumps(steps-i, d-i);\n        if(jumps != Number.MAX_VALUE && jumps+1 < min){\n            min = jumps+1;\n        }\n    }\n    return min;\n}\n",
    "    var jumps = 0;\n    var current = 0;\n    while(current < d){\n        current += steps;\n        jumps++;\n    }\n    return jumps;\n}\n",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var jumps = min_Jumps(steps-1, d-1);\n    if(jumps != -1) jumps = min_Jumps(steps, d-1);\n    if(jumps != -1) jumps = min_Jumps(steps, d-2);\n    if(jumps == -1) return -1;\n    else return jumps+1;\n}\n",
    "    var jumps = 0;\n    var curr_pos = 0;\n    for(var i=0; i<steps.length; i++){\n        if(curr_pos + steps[i] >= d){\n            jumps++;\n            break;\n        }\n        else{\n            curr_pos += steps[i];\n            jumps++;\n        }\n    }\n    return jumps;\n}\n\nvar steps = [1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9];\nvar d = 10;",
    "    if(d == 0) return 0;\n    if(steps == 0) return 0;\n    if(steps == 1) return 1;\n    if(steps == 2) return 2;\n    if(steps == 3) return 3;\n    if(steps >= d) return 1;\n    return 1 + min_Jumps(steps - 1, d - 1) + min_Jumps(steps - 2, d - 2) + min_Jumps(steps - 3, d - 3);\n}\n",
    "    var jumps = 0;\n    var current_pos = 0;\n    var i = 0;\n    while(current_pos < d){\n        current_pos += steps[i];\n        jumps++;\n        i++;\n    }\n    return jumps;\n}\n\nvar steps = [1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9];\nvar d = 10;",
    "    if(d == 0) return 0;\n    if(steps == 0) return -1;\n    var min = min_Jumps(steps-1, d-1);\n    if(d-2 >= 0)\n        min = Math.min(min, min_Jumps(steps-1, d-2));\n    if(d-3 >= 0)\n        min = Math.min(min, min_Jumps(steps-1, d-3));\n    if(min != -1)\n        return min+1;\n    else\n        return -1;\n}\n"
  ]
}