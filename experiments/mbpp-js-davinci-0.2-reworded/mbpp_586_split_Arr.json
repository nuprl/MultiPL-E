{
  "name": "mbpp_586_split_Arr",
  "language": "js",
  "prompt": "//Write a jsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_586_split_Arr.py",
  "prompt_terminology": "reworded",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    var arr1 = l.slice(0, n);\n    var arr2 = l.slice(n);\n    var arr3 = arr2.concat(arr1);\n    return arr3;\n}",
    "    var arr = [];\n    for(var i = n; i < l.length; i++){\n        arr.push(l[i]);\n    }\n    return arr;\n}\n",
    "\tvar first = l.slice(0, n);\n\tvar second = l.slice(n);\n\treturn second.concat(first);\n}\n",
    "    var first = l.slice(0, n);\n    var second = l.slice(n);\n    return second.concat(first);\n}\n",
    "    var arr1 = l.slice(0, n);\n    var arr2 = l.slice(n);\n    var arr3 = arr2.concat(arr1);\n    return arr3;\n}",
    "    var arr = l.slice(n);\n    var arr2 = l.slice(0, n);\n    var arr3 = arr.concat(arr2);\n    return arr3;\n}",
    "    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    return l2.concat(l1);\n}\n",
    "    var arr1 = l.slice(0, n);\n    var arr2 = l.slice(n);\n    return arr2.concat(arr1);\n}",
    "    var arr = [];\n    for(var i = n; i < l.length; i++){\n        arr.push(l[i]);\n    }\n    return arr;\n}\n",
    "    var first = l.slice(0, n);\n    var second = l.slice(n);\n    return second.concat(first);\n}\n",
    "    var first_part = l.slice(0, n);\n    var second_part = l.slice(n);\n    return second_part.concat(first_part);\n}",
    "\tvar l1 = l.slice(0,n);\n\tvar l2 = l.slice(n);\n\treturn l2.concat(l1);\n}\n",
    "    var arr = l.slice(n);\n    var arr1 = l.slice(0, n);\n    var arr2 = arr.concat(arr1);\n    return arr2;\n}",
    "    var firstPart = l.slice(0, n);\n    var secondPart = l.slice(n);\n    return secondPart.concat(firstPart);\n}\n",
    "    var arr = [];\n    for(var i = n; i < l.length; i++){\n        arr.push(l[i]);\n    }\n    return arr;\n}\n",
    "    var arr1 = l.slice(0, n);\n    var arr2 = l.slice(n);\n    return arr2.concat(arr1);\n}",
    "    var arr = l.slice(n);\n    var arr2 = l.slice(0, n);\n    var arr3 = arr.concat(arr2);\n    return arr3;\n}",
    "    var arr = [];\n    for(var i = n; i < l.length; i++){\n        arr.push(l[i]);\n    }\n    return arr;\n}\n",
    "    var arr = [];\n    for(var i = n; i < l.length; i++){\n        arr.push(l[i]);\n    }\n    return arr;\n}\n",
    "    var arr = [];\n    for(var i = n; i < l.length; i++){\n        arr.push(l[i]);\n    }\n    for(var i = 0; i < n; i++){\n        arr.push(l[i]);\n    }\n    return arr;\n}\n"
  ]
}