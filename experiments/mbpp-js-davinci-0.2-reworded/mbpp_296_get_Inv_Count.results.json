{
  "name": "mbpp_296_get_Inv_Count",
  "language": "js",
  "prompt": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_296_get_Inv_Count.py",
  "prompt_terminology": "reworded",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "results": [
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var count = 0;\n    for(var i=0; i<arr.length; i++){\n        for(var j=i+1; j<arr.length; j++){\n            if(arr[i] > arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nvar arr = [1, 20, 6, 4, 5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var count = 0;\n    for(var i=0; i<arr.length; i++){\n        for(var j=i+1; j<arr.length; j++){\n            if(arr[i] > arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nvar arr = [1, 20, 6, 4, 5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    let count = 0;\n    for(let i=0; i<arr.length; i++){\n        for(let j=i+1; j<arr.length; j++){\n            if(arr[i]>arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var count = 0;\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length - 1; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length - 1; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length - 1; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length - 1; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var count = 0;\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var count = 0;\n    for(var i=0;i<arr.length;i++){\n        for(var j=i+1;j<arr.length;j++){\n            if(arr[i]>arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nvar arr = [1,20,6,4,5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i=0; i<arr.length; i++){\n        for(var j=i+1; j<arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length - 1; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var count = 0;\n    for(var i=0;i<arr.length;i++){\n        for(var j=i+1;j<arr.length;j++){\n            if(arr[i]>arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length - 1; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nvar arr = [1, 20, 6, 4, 5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var count = 0;\n    for(var i=0; i<arr.length; i++){\n        for(var j=i+1; j<arr.length; j++){\n            if(arr[i] > arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nvar arr = [1, 20, 6, 4, 5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        for(let j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i=0; i<arr.length; i++){\n        for(var j=i+1; j<arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nvar arr = [1,20,6,4,5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i=0; i<arr.length; i++){\n        for(var j=i+1; j<arr.length; j++){\n            if(arr[i]>arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length - 1; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var count = 0;\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var count = 0;\n    for(var i=0;i<arr.length;i++){\n        for(var j=i+1;j<arr.length;j++){\n            if(arr[i]>arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length - 1; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i=0;i<arr.length;i++){\n        for(var j=i+1;j<arr.length;j++){\n            if(arr[i]>arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n  var count = 0;\n  for(var i=0;i<arr.length;i++){\n    for(var j=i+1;j<arr.length;j++){\n      if(arr[i]>arr[j]){\n        count++;\n      }\n    }\n  }\n  return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n\tvar count = 0;\n\tfor(var i = 0; i < arr.length; i++){\n\t\tfor(var j = i+1; j < arr.length; j++){\n\t\t\tif(arr[i] > arr[j]){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var count = 0;\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nvar arr = [1, 20, 6, 4, 5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i=0;i<arr.length;i++){\n        for(var j=i+1;j<arr.length;j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length - 1; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n\tvar count = 0;\n\tfor(var i=0; i<arr.length; i++){\n\t\tfor(var j=i+1; j<arr.length; j++){\n\t\t\tif(arr[i] > arr[j]){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length - 1; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length - 1; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for (var i = 0; i < arr.length - 1; i++)\n        for (var j = i+1; j < arr.length; j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var count = 0;\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var count = 0;\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length - 1; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nvar arr = [1, 20, 6, 4, 5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var count = 0;\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var count = 0;\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var count = 0;\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nvar arr = [1, 20, 6, 4, 5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length - 1; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i=0; i<arr.length; i++){\n        for(var j=i+1; j<arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i=0;i<arr.length-1;i++){\n        for(var j=i+1;j<arr.length;j++){\n            if(arr[i]>arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i=0;i<arr.length;i++){\n        for(var j=i+1;j<arr.length;j++){\n            if(arr[i]>arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i=0; i<arr.length-1; i++){\n        for(var j=i+1; j<arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var count = 0;\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var count = 0;\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nvar arr = [1, 20, 6, 4, 5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var count = 0;\n    for(var i=0; i<arr.length; i++){\n        for(var j=i+1; j<arr.length; j++){\n            if(arr[i]>arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nvar arr = [1, 20, 6, 4, 5];\nvar inv_count = get_Inv_Count(arr);\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i=0;i<arr.length;i++){\n        for(var j=i+1;j<arr.length;j++){\n            if(arr[i]>arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length - 1; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length - 1; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i=0;i<arr.length;i++){\n        for(var j=i+1;j<arr.length;j++){\n            if(arr[i]>arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length - 1; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nvar arr = [1, 20, 6, 4, 5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var count = 0;\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length - 1; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nvar arr = [1, 20, 6, 4, 5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var count = 0;\n    for(var i=0;i<arr.length;i++){\n        for(var j=i+1;j<arr.length;j++){\n            if(arr[i]>arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var count = 0;\n    for(var i=0; i<arr.length; i++){\n        for(var j=i+1; j<arr.length; j++){\n            if(arr[i] > arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nvar arr = [1, 20, 6, 4, 5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n\tvar count = 0;\n\tfor(var i = 0; i < arr.length; i++){\n\t\tfor(var j = i+1; j < arr.length; j++){\n\t\t\tif(arr[i] > arr[j]){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nvar arr = [1, 20, 6, 4, 5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i=0;i<arr.length;i++){\n        for(var j=i+1;j<arr.length;j++){\n            if(arr[i]>arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nvar arr = [1, 20, 6, 4, 5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var count = 0;\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nvar arr = [1, 20, 6, 4, 5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length - 1; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var count = 0;\n    for(var i=0;i<arr.length;i++){\n        for(var j=i+1;j<arr.length;j++){\n            if(arr[i] > arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i=0;i<arr.length-1;i++){\n        for(var j=i+1;j<arr.length;j++){\n            if(arr[i]>arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nvar arr = [1,20,6,4,5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var count = 0;\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nvar arr = [1,20,6,4,5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length - 1; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length - 1; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length - 1; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length - 1; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        for(let j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nlet arr = [1, 20, 6, 4, 5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i=0;i<arr.length;i++){\n        for(var j=i+1;j<arr.length;j++){\n            if(arr[i]>arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i=0;i<arr.length;i++){\n        for(var j=i+1;j<arr.length;j++){\n            if(arr[i]>arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i=0;i<arr.length;i++){\n        for(var j=i+1;j<arr.length;j++){\n            if(arr[i]>arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i=0;i<arr.length-1;i++){\n        for(var j=i+1;j<arr.length;j++){\n            if(arr[i]>arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i=0; i<arr.length; i++){\n        for(var j=i+1; j<arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    let count = 0;\n    for(let i=0;i<arr.length;i++){\n        for(let j=i+1;j<arr.length;j++){\n            if(arr[i] > arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var count = 0;\n    for(var i=0;i<arr.length;i++){\n        for(var j=i+1;j<arr.length;j++){\n            if(arr[i]>arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nvar arr = [1,3,5,2,4,6];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var count = 0;\n    for(var i = 0; i < arr.length - 1; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var count = 0;\n    for(var i=0;i<arr.length;i++){\n        for(var j=i+1;j<arr.length;j++){\n            if(arr[i]>arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length - 1; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    let count = 0;\n    for(let i=0; i<arr.length; i++){\n        for(let j=i+1; j<arr.length; j++){\n            if(arr[i] > arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length - 1; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i=0;i<arr.length;i++){\n        for(var j=i+1;j<arr.length;j++){\n            if(arr[i]>arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nvar arr = [1,20,6,4,5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i=0;i<arr.length;i++){\n        for(var j=i+1;j<arr.length;j++){\n            if(arr[i]>arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var count = 0;\n    for(var i=0; i<arr.length; i++){\n        for(var j=i+1; j<arr.length; j++){\n            if(arr[i]>arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nvar arr = [2,4,1,3,5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var count = 0;\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length - 1; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i=0;i<arr.length;i++){\n        for(var j=i+1;j<arr.length;j++){\n            if(arr[i]>arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var count = 0;\n    for(var i=0;i<arr.length;i++){\n        for(var j=i+1;j<arr.length;j++){\n            if(arr[i] > arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var count = 0;\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nvar arr = [1, 20, 6, 4, 5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length - 1; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nvar arr = [1, 20, 6, 4, 5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length - 1; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    let count = 0;\n    for(let i=0;i<arr.length;i++){\n        for(let j=i+1;j<arr.length;j++){\n            if(arr[i]>arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nlet arr = [2,4,1,3,5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i=0; i<arr.length-1; i++){\n        for(var j=i+1; j<arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nvar arr = [1, 20, 6, 4, 5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i=0; i<arr.length; i++){\n        for(var j=i+1; j<arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n\tvar inv_count = 0;\n\tfor(var i=0;i<arr.length;i++){\n\t\tfor(var j=i+1;j<arr.length;j++){\n\t\t\tif(arr[i]>arr[j]){\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i=0; i<arr.length-1; i++){\n        for(var j=i+1; j<arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length - 1; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i=0;i<arr.length-1;i++){\n        for(var j=i+1;j<arr.length;j++){\n            if(arr[i]>arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var count = 0;\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i=0;i<arr.length-1;i++){\n        for(var j=i+1;j<arr.length;j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length - 1; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length - 1; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length - 1; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i=0;i<arr.length;i++){\n        for(var j=i+1;j<arr.length;j++){\n            if(arr[i]>arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length - 1; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nvar arr = [1, 20, 6, 4, 5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i=0;i<arr.length;i++){\n        for(var j=i+1;j<arr.length;j++){\n            if(arr[i]>arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var count = 0;\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var count = 0;\n    for(var i=0;i<arr.length;i++){\n        for(var j=i+1;j<arr.length;j++){\n            if(arr[i]>arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length - 1; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length - 1; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length - 1; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i=0;i<arr.length;i++){\n        for(var j=i+1;j<arr.length;j++){\n            if(arr[i]>arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i=0;i<arr.length;i++){\n        for(var j=i+1;j<arr.length;j++){\n            if(arr[i]>arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    let inv_count = 0;\n    for(let i=0;i<arr.length;i++){\n        for(let j=i+1;j<arr.length;j++){\n            if(arr[i]>arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var count = 0;\n    for(var i=0; i<arr.length; i++){\n        for(var j=i+1; j<arr.length; j++){\n            if(arr[i] > arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length - 1; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        for(let j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length - 1; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i=0;i<arr.length-1;i++){\n        for(var j=i+1;j<arr.length;j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nvar arr = [1,20,6,4,5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length - 1; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i=0; i<arr.length; i++){\n        for(var j=i+1; j<arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nvar arr = [2, 4, 1, 3, 5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i=0;i<arr.length;i++){\n        for(var j=i+1;j<arr.length;j++){\n            if(arr[i]>arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nvar arr = [1,20,6,4,5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i=0;i<arr.length;i++){\n        for(var j=i+1;j<arr.length;j++){\n            if(arr[i]>arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nvar arr = [1,20,6,4,5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i=0;i<arr.length-1;i++){\n        for(var j=i+1;j<arr.length;j++){\n            if(arr[i]>arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var count = 0;\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nvar arr = [1, 20, 6, 4, 5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i=0;i<arr.length;i++){\n        for(var j=i+1;j<arr.length;j++){\n            if(arr[i]>arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i=0;i<arr.length;i++){\n        for(var j=i+1;j<arr.length;j++){\n            if(arr[i]>arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var count = 0;\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length - 1; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length - 1; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i=0; i<arr.length; i++){\n        for(var j=i+1; j<arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length - 1; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i=0;i<arr.length;i++){\n        for(var j=i+1;j<arr.length;j++){\n            if(arr[i]>arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length - 1; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length - 1; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nvar arr = [1, 20, 6, 4, 5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var count = 0;\n    for(var i=0;i<arr.length;i++){\n        for(var j=i+1;j<arr.length;j++){\n            if(arr[i]>arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length - 1; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length - 1; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var count = 0;\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nvar arr = [1, 20, 6, 4, 5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length - 1; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i=0;i<arr.length;i++){\n        for(var j=i+1;j<arr.length;j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var count = 0;\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nvar arr = [1, 20, 6, 4, 5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i=0;i<arr.length;i++){\n        for(var j=i+1;j<arr.length;j++){\n            if(arr[i]>arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var count = 0;\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length - 1; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nvar arr = [1, 20, 6, 4, 5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var count = 0;\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nvar arr = [1, 20, 6, 4, 5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i=0;i<arr.length;i++){\n        for(var j=i+1;j<arr.length;j++){\n            if(arr[i]>arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i=0;i<arr.length;i++){\n        for(var j=i+1;j<arr.length;j++){\n            if(arr[i]>arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n\tvar count = 0;\n\tfor(var i=0;i<arr.length;i++){\n\t\tfor(var j=i+1;j<arr.length;j++){\n\t\t\tif(arr[i]>arr[j]){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for (var i = 0; i < arr.length - 1; i++)\n        for (var j = i+1; j < arr.length; j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var count = 0;\n    for(var i=0; i<arr.length; i++){\n        for(var j=i+1; j<arr.length; j++){\n            if(arr[i] > arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length - 1; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        for(let j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nlet arr = [1, 20, 6, 4, 5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var count = 0;\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var count = 0;\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var count = 0;\n    for(var i=0;i<arr.length;i++){\n        for(var j=i+1;j<arr.length;j++){\n            if(arr[i]>arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nvar arr = [1,20,6,4,5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var count = 0;\n    for(var i=0;i<arr.length;i++){\n        for(var j=i+1;j<arr.length;j++){\n            if(arr[i]>arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var count = 0;\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length - 1; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nvar arr = [1, 20, 6, 4, 5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i=0; i<arr.length; i++){\n        for(var j=i+1; j<arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i=0;i<arr.length;i++){\n        for(var j=i+1;j<arr.length;j++){\n            if(arr[i]>arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n\tvar count = 0;\n\tfor(var i = 0; i < arr.length; i++){\n\t\tfor(var j = i + 1; j < arr.length; j++){\n\t\t\tif(arr[i] > arr[j]){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n\nvar arr = [1, 20, 6, 4, 5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length - 1; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length - 1; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n\tvar count = 0;\n\tfor(var i=0; i<arr.length; i++){\n\t\tfor(var j=i+1; j<arr.length; j++){\n\t\t\tif(arr[i]>arr[j]){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n\tvar inv_count = 0;\n\tfor(var i = 0; i < arr.length - 1; i++){\n\t\tfor(var j = i + 1; j < arr.length; j++){\n\t\t\tif(arr[i] > arr[j]){\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length - 1; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var count = 0;\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nvar arr = [1, 20, 6, 4, 5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i=0;i<arr.length;i++){\n        for(var j=i+1;j<arr.length;j++){\n            if(arr[i]>arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nvar arr = [1,20,6,4,5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var count = 0;\n    for(var i=0; i<arr.length; i++){\n        for(var j=i+1; j<arr.length; j++){\n            if(arr[i] > arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nvar arr = [1, 20, 6, 4, 5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    let count = 0;\n    for(let i=0;i<arr.length;i++){\n        for(let j=i+1;j<arr.length;j++){\n            if(arr[i]>arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i=0;i<arr.length;i++){\n        for(var j=i+1;j<arr.length;j++){\n            if(arr[i]>arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nvar arr = [1, 20, 6, 4, 5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length - 1; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        for(let j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length - 1; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nvar arr = [2,4,1,3,5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length - 1; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var count = 0;\n    for(var i=0; i<arr.length-1; i++){\n        for(var j=i+1; j<arr.length; j++){\n            if(arr[i] > arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i=0; i<arr.length; i++){\n        for(var j=i+1; j<arr.length; j++){\n            if(arr[i]>arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length - 1; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n\tvar inv_count = 0;\n\tfor(var i = 0; i < arr.length; i++){\n\t\tfor(var j = i+1; j < arr.length; j++){\n\t\t\tif(arr[i] > arr[j]){\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length - 1; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i=0;i<arr.length-1;i++){\n        for(var j=i+1;j<arr.length;j++){\n            if(arr[i]>arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nvar arr = [1,20,6,4,5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var count = 0;\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count=0;\n    for(var i=0;i<arr.length-1;i++){\n        for(var j=i+1;j<arr.length;j++){\n            if(arr[i]>arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i=0;i<arr.length-1;i++){\n        for(var j=i+1;j<arr.length;j++){\n            if(arr[i]>arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nvar arr = [1,20,6,4,5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i=0;i<arr.length;i++){\n        for(var j=i+1;j<arr.length;j++){\n            if(arr[i]>arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length - 1; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i = 0; i < arr.length - 1; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i=0;i<arr.length;i++){\n        for(var j=i+1;j<arr.length;j++){\n            if(arr[i] > arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var inv_count = 0;\n    for(var i=0;i<arr.length;i++){\n        for(var j=i+1;j<arr.length;j++){\n            if(arr[i]>arr[j]){\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to count inversions in an array.\nfunction get_Inv_Count(arr){\n    var count = 0;\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] > arr[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_Inv_Count;\n  assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);\n  assert.deepEqual(candidate([1, 2, 1]),1);\n  assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);\n}\n\ntest();",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}