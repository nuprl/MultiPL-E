{
  "name": "mbpp_750_add_tuple",
  "language": "js",
  "prompt": "//Write a function to add the given array to the given array.\nfunction add_tuple(test_list, test_tup){\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_750_add_tuple.py",
  "prompt_terminology": "reworded",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_tuple;\n  assert.deepEqual(candidate([5, 6, 7], [9, 10]),[5, 6, 7, 9, 10]);\n  assert.deepEqual(candidate([6, 7, 8], [10, 11]),[6, 7, 8, 10, 11]);\n  assert.deepEqual(candidate([7, 8, 9], [11, 12]),[7, 8, 9, 11, 12]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    var temp_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        temp_list.push(test_list[i]);\n    }\n    for (var i = 0; i < test_tup.length; i++){\n        temp_list.push(test_tup[i]);\n    }\n    return temp_list;\n}",
    "    var res = [];\n    var i;\n    for (i = 0; i < test_list.length; i++){\n        res.push(test_list[i] + test_tup[i]);\n    }\n    return res;\n}\n",
    "    var res = [];\n    var i = 0;\n    for (i = 0; i < test_list.length; i++){\n        res.push(test_list[i] + test_tup[i]);\n    }\n    return res;\n}",
    "    var result = [];\n    for (var i = 0; i < test_list.length; i++){\n        result.push(test_list[i] + test_tup[i]);\n    }\n    return result;\n}",
    "    var new_list = [];\n    var new_tup = [];\n    for(var i = 0; i < test_list.length; i++){\n        new_list.push(test_list[i]);\n    }\n    for(var i = 0; i < test_tup.length; i++){\n        new_tup.push(test_tup[i]);\n    }\n    var new_list = new_list.concat(new_tup);\n    return new_list;\n}",
    "    var new_list = [];\n    for(var i=0; i<test_list.length; i++){\n        new_list.push(test_list[i] + test_tup[i]);\n    }\n    return new_list;\n}\n",
    "    var temp = test_list.concat(test_tup);\n    return temp;\n}\n\nvar test_list = [1, 2, 3, 4, 5];\nvar test_tup = [6, 7, 8, 9, 10];",
    "    var temp = test_list.slice();\n    temp.push(test_tup);\n    return temp;\n}\n",
    "    var temp = test_list.concat(test_tup);\n    return temp;\n}\n\nvar test_list = [1, 2, 3, 4];\nvar test_tup = [5, 6, 7, 8];",
    "    var temp_list = test_list.slice();\n    temp_list.push(test_tup);\n    return temp_list;\n}\n",
    "    var temp_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        temp_list.push(test_list[i] + test_tup[i]);\n    }\n    return temp_list;\n}\n",
    "    var result = [];\n    var len = test_list.length;\n    for (var i = 0; i < len; i++){\n        result.push(test_list[i] + test_tup[i]);\n    }\n    return result;\n}",
    "    var result = [];\n    for (var i = 0; i < test_list.length; i++){\n        result.push(test_list[i] + test_tup[i]);\n    }\n    return result;\n}\n",
    "    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        new_list.push(test_list[i] + test_tup[i]);\n    }\n    return new_list;\n}\n",
    "    var temp_list = test_list.slice();\n    temp_list.push(test_tup);\n    return temp_list;\n}\n",
    "    var result = test_list.concat(test_tup);\n    return result;\n}",
    "    var result = test_list.concat(test_tup);\n    return result;\n}\n",
    "    var temp = test_list.slice();\n    temp.push(test_tup);\n    return temp;\n}\n",
    "    var res = [];\n    for(var i = 0; i < test_list.length; i++){\n        res.push(test_list[i] + test_tup[i]);\n    }\n    return res;\n}\n",
    "    var temp_list = test_list.slice();\n    temp_list.push(test_tup);\n    return temp_list;\n}\n"
  ]
}