{
  "name": "mbpp_432_median_trapezium",
  "language": "js",
  "prompt": "//Write a function to find the median length of a trapezium.\nfunction median_trapezium(base1, base2, height){\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_432_median_trapezium.py",
  "prompt_terminology": "reworded",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median_trapezium;\n  assert.deepEqual(candidate(15, 25, 35),20);\n  assert.deepEqual(candidate(10, 20, 30),15);\n  assert.deepEqual(candidate(6, 9, 4),7.5);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "  return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "\treturn (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) / 2 * height\n}",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) * height / 2;\n}",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "\treturn (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) * height / 2;\n}",
    "    return (base1 + base2) * height / 2;\n}",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}",
    "    return (base1 + base2) * height / 2;\n}",
    "    return (base1 + base2) / 2 * height;\n}",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    var median = (base1 + base2) / 2;\n    var area = median * height;\n    return area;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "\treturn (base1 + base2) * height / 2;\n}\n",
    "    var median = (base1 + base2) / 2;\n    var area = median * height;\n    return area;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}",
    "    return (base1 + base2) * height / 2;\n}",
    "    return (base1 + base2) / 2 * height;\n}",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}",
    "    return (base1 + base2) * height / 2;\n}",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}",
    "    return (base1 + base2) / 2 * height;\n}",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) * height / 2;\n}",
    "    return (base1 + base2) / 2 * height;\n}",
    "    var median = (base1 + base2) / 2;\n    var area = median * height;\n    return area;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    var median = (base1 + base2) / 2;\n    var area = median * height;\n    return area;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "\treturn (base1 + base2)/2 * height;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "\treturn (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}",
    "    return (base1 + base2) * height / 2;\n}",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    var median = (base1 + base2) / 2;\n    return median * height;\n}\n",
    "  return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "\tvar median = (base1 + base2) / 2;\n\treturn median * height;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1+base2)/2*height;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    let median = (base1 + base2) / 2;\n    return median * height;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) * height / 2;\n}",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n",
    "\treturn (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) * height / 2;\n}",
    "\treturn (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}\n",
    "    return (base1 + base2) / 2 * height;\n}",
    "    return (base1 + base2) * height / 2;\n}\n",
    "    return (base1 + base2) / 2;\n}\n",
    "    return (base1 + base2) * height / 2;\n}\n"
  ]
}