{
  "name": "mbpp_736_left_insertion",
  "language": "js",
  "prompt": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_736_left_insertion.py",
  "prompt_terminology": "reworded",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "results": [
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    let left = 0;\n    let right = a.length - 1;\n    let mid = 0;\n    while(left < right){\n        mid = Math.floor((left + right) / 2);\n        if(x > a[mid]){\n            left = mid + 1;\n        }\n        else{\n            right = mid;\n        }\n    }\n    return left;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpvyo6zvss.js:23:10)\n    at Object.<anonymous> (/tmp/tmpvyo6zvss.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    let low = 0;\n    let high = a.length - 1;\n    let mid;\n    while(low <= high){\n        mid = Math.floor((low + high) / 2);\n        if(x > a[mid]){\n            low = mid + 1;\n        }\n        else if(x < a[mid]){\n            high = mid - 1;\n        }\n        else{\n            return mid;\n        }\n    }\n    return low;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    let low = 0;\n    let high = a.length - 1;\n    let mid = 0;\n    while(low <= high){\n        mid = Math.floor((low + high) / 2);\n        if(x > a[mid]){\n            low = mid + 1;\n        }else{\n            high = mid - 1;\n        }\n    }\n    return low;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n\tvar i = 0;\n\twhile(i < a.length){\n\t\tif(a[i] > x){\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var l = 0, r = a.length - 1;\n    while (l <= r){\n        var m = Math.floor((l + r) / 2);\n        if (a[m] < x){\n            l = m + 1;\n        }\n        else{\n            r = m - 1;\n        }\n    }\n    return l;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    let l = 0;\n    let r = a.length - 1;\n    let m = 0;\n    while(l <= r){\n        m = Math.floor((l + r)/2);\n        if(a[m] < x){\n            l = m + 1;\n        }\n        else{\n            r = m - 1;\n        }\n    }\n    return l;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var l = 0, r = a.length - 1;\n    while(l < r){\n        var m = Math.floor((l + r) / 2);\n        if(a[m] < x){\n            l = m + 1;\n        }else{\n            r = m;\n        }\n    }\n    return l;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpw55ctkbb.js:20:10)\n    at Object.<anonymous> (/tmp/tmpw55ctkbb.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    let i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    for(var i = 0; i < a.length; i++){\n        if(a[i] > x){\n            return i;\n        }\n    }\n    return a.length;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    let left = 0;\n    let right = a.length - 1;\n    let mid;\n    while(left <= right){\n        mid = Math.floor((left + right) / 2);\n        if(a[mid] < x){\n            left = mid + 1;\n        }\n        else{\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var low = 0;\n    var high = a.length - 1;\n    var mid = 0;\n    while(low <= high){\n        mid = Math.floor((low + high) / 2);\n        if(a[mid] < x){\n            low = mid + 1;\n        }\n        else{\n            high = mid - 1;\n        }\n    }\n    return low;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var left = 0;\n    var right = a.length - 1;\n    while (left <= right){\n        var mid = Math.floor((left + right) / 2);\n        if (a[mid] < x){\n            left = mid + 1;\n        }\n        else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    let i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n\tvar i = 0;\n\twhile(i < a.length && a[i] < x){\n\t\ti++;\n\t}\n\treturn i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var l = 0, r = a.length - 1;\n    while (l < r){\n        var m = Math.floor((l + r) / 2);\n        if (a[m] < x) l = m + 1;\n        else r = m;\n    }\n    return l;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmplvpux8ud.js:17:10)\n    at Object.<anonymous> (/tmp/tmplvpux8ud.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    let left = 0;\n    let right = a.length - 1;\n    while(left <= right){\n        let mid = Math.floor((left + right) / 2);\n        if(a[mid] < x){\n            left = mid + 1;\n        }\n        else{\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n\tvar i = 0;\n\twhile(i < a.length && a[i] < x){\n\t\ti++;\n\t}\n\treturn i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    let l = 0, r = a.length - 1;\n    while(l < r){\n        let m = Math.floor((l + r) / 2);\n        if(a[m] < x){\n            l = m + 1;\n        }\n        else{\n            r = m;\n        }\n    }\n    return l;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpurx7xcwt.js:21:10)\n    at Object.<anonymous> (/tmp/tmpurx7xcwt.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var l = 0;\n    var r = a.length - 1;\n    var m = 0;\n    while(l < r){\n        m = Math.floor((l + r) / 2);\n        if(a[m] < x){\n            l = m + 1;\n        }else{\n            r = m;\n        }\n    }\n    return l;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpza47xwef.js:22:10)\n    at Object.<anonymous> (/tmp/tmpza47xwef.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while (i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    let low = 0;\n    let high = a.length - 1;\n    let mid = 0;\n    while(low <= high){\n        mid = Math.floor((low + high) / 2);\n        if(a[mid] < x){\n            low = mid + 1;\n        }\n        else{\n            high = mid - 1;\n        }\n    }\n    return low;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var l = 0;\n    var r = a.length - 1;\n    var m = 0;\n    while (l < r){\n        m = Math.floor((l + r) / 2);\n        if (a[m] < x){\n            l = m + 1;\n        }\n        else{\n            r = m;\n        }\n    }\n    return l;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpt7rmcow2.js:23:10)\n    at Object.<anonymous> (/tmp/tmpt7rmcow2.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var l = 0, r = a.length - 1;\n    while (l < r) {\n        var m = Math.floor((l + r) / 2);\n        if (a[m] < x) {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    return l;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpld4tc7ev.js:20:10)\n    at Object.<anonymous> (/tmp/tmpld4tc7ev.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var low = 0;\n    var high = a.length - 1;\n    var mid;\n    while (low <= high){\n        mid = Math.floor((low + high) / 2);\n        if (x > a[mid]){\n            low = mid + 1;\n        }\n        else if (x < a[mid]){\n            high = mid - 1;\n        }\n        else{\n            return mid;\n        }\n    }\n    return low;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    let i = 0;\n    while(a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var l = 0, r = a.length - 1;\n    while (l < r) {\n        var m = Math.floor((l + r) / 2);\n        if (a[m] < x) l = m + 1;\n        else r = m;\n    }\n    return l;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpn45jt2cp.js:17:10)\n    at Object.<anonymous> (/tmp/tmpn45jt2cp.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var left = 0;\n    var right = a.length - 1;\n    while(left <= right){\n        var mid = Math.floor((left + right) / 2);\n        if(a[mid] < x){\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    let low = 0;\n    let high = a.length - 1;\n    let mid;\n    while(low <= high){\n        mid = Math.floor((low + high) / 2);\n        if(a[mid] < x){\n            low = mid + 1;\n        }\n        else{\n            high = mid - 1;\n        }\n    }\n    return low;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n\tvar i = 0;\n\twhile(i < a.length){\n\t\tif(a[i] > x){\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    let i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n\tvar i = 0;\n\twhile(i < a.length && a[i] < x){\n\t\ti++;\n\t}\n\treturn i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    let left = 0;\n    let right = a.length - 1;\n    while(left <= right){\n        let mid = Math.floor((left + right)/2);\n        if(a[mid] < x){\n            left = mid + 1;\n        }\n        else{\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    let l = 0;\n    let r = a.length - 1;\n    while(l < r){\n        let m = Math.floor((l + r) / 2);\n        if(a[m] < x){\n            l = m + 1;\n        }\n        else{\n            r = m;\n        }\n    }\n    return l;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpoj1hnxzz.js:22:10)\n    at Object.<anonymous> (/tmp/tmpoj1hnxzz.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    let i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while (i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    let i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while (i < a.length && a[i] < x) {\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    let l = 0;\n    let r = a.length - 1;\n    while(l < r){\n        let m = Math.floor((l + r) / 2);\n        if(a[m] < x){\n            l = m + 1;\n        }else{\n            r = m;\n        }\n    }\n    return l;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmplu3m15nn.js:21:10)\n    at Object.<anonymous> (/tmp/tmplu3m15nn.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    let i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    let left = 0;\n    let right = a.length - 1;\n    while(left < right){\n        let mid = Math.floor((left + right) / 2);\n        if(a[mid] < x){\n            left = mid + 1;\n        }\n        else{\n            right = mid;\n        }\n    }\n    return left;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmppwlg0sci.js:22:10)\n    at Object.<anonymous> (/tmp/tmppwlg0sci.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var l = 0;\n    var r = a.length - 1;\n    while(l < r){\n        var m = Math.floor((l + r) / 2);\n        if(a[m] < x){\n            l = m + 1;\n        }else{\n            r = m;\n        }\n    }\n    return l;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpfvprkc4x.js:21:10)\n    at Object.<anonymous> (/tmp/tmpfvprkc4x.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var l = 0, r = a.length - 1;\n    while (l < r) {\n        var m = Math.floor((l + r) / 2);\n        if (a[m] < x) {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    return l;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpld4tc7ev.js:20:10)\n    at Object.<anonymous> (/tmp/tmpld4tc7ev.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    let i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var left = 0;\n    var right = a.length - 1;\n    var mid;\n    while(left < right){\n        mid = Math.floor((left + right)/2);\n        if(a[mid] < x){\n            left = mid + 1;\n        }else{\n            right = mid;\n        }\n    }\n    return left;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpydw3c50g.js:22:10)\n    at Object.<anonymous> (/tmp/tmpydw3c50g.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var l = 0, r = a.length - 1;\n    while(l < r){\n        var mid = Math.floor((l + r) / 2);\n        if(a[mid] < x){\n            l = mid + 1;\n        }\n        else{\n            r = mid;\n        }\n    }\n    return l;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpf38_rmqd.js:21:10)\n    at Object.<anonymous> (/tmp/tmpf38_rmqd.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    let i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var l = 0, r = a.length - 1;\n    while (l < r) {\n        var m = Math.floor((l + r) / 2);\n        if (a[m] < x) {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    return l;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpld4tc7ev.js:20:10)\n    at Object.<anonymous> (/tmp/tmpld4tc7ev.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    let left = 0;\n    let right = a.length - 1;\n    while(left <= right){\n        let mid = Math.floor((left + right) / 2);\n        if(a[mid] < x){\n            left = mid + 1;\n        }else{\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var l = 0, r = a.length - 1;\n    while(l < r){\n        var m = Math.floor((l + r) / 2);\n        if(a[m] < x){\n            l = m + 1;\n        }\n        else{\n            r = m;\n        }\n    }\n    return l;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpk0oikk_8.js:21:10)\n    at Object.<anonymous> (/tmp/tmpk0oikk_8.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var l = 0, r = a.length - 1;\n    while(l < r){\n        var m = Math.floor((l + r) / 2);\n        if(x <= a[m]){\n            r = m;\n        }else{\n            l = m + 1;\n        }\n    }\n    return l;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpdzqn13ml.js:20:10)\n    at Object.<anonymous> (/tmp/tmpdzqn13ml.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var l = 0;\n    var r = a.length - 1;\n    while(l < r){\n        var m = Math.floor((l + r) / 2);\n        if(a[m] < x){\n            l = m + 1;\n        }\n        else{\n            r = m;\n        }\n    }\n    return l;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpxlgkek1p.js:22:10)\n    at Object.<anonymous> (/tmp/tmpxlgkek1p.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length){\n        if(a[i] > x){\n            break;\n        }\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    let left = 0;\n    let right = a.length - 1;\n    while(left <= right){\n        let mid = Math.floor((left + right) / 2);\n        if(a[mid] < x){\n            left = mid + 1;\n        }else{\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    let i = 0;\n    while (i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var l = 0;\n    var r = a.length - 1;\n    while (l < r){\n        var m = Math.floor((l + r) / 2);\n        if (a[m] < x){\n            l = m + 1;\n        }\n        else{\n            r = m;\n        }\n    }\n    return l;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp90_gqro8.js:22:10)\n    at Object.<anonymous> (/tmp/tmp90_gqro8.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var l = 0, r = a.length-1;\n    while(l<r){\n        var m = Math.floor((l+r)/2);\n        if(a[m]<x){\n            l = m+1;\n        }\n        else{\n            r = m;\n        }\n    }\n    return l;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpb5onlwvc.js:21:10)\n    at Object.<anonymous> (/tmp/tmpb5onlwvc.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var l = 0;\n    var r = a.length - 1;\n    while (l < r) {\n        var m = Math.floor((l + r) / 2);\n        if (a[m] < x) {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    return l;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpzpofrto6.js:21:10)\n    at Object.<anonymous> (/tmp/tmpzpofrto6.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    let left = 0;\n    let right = a.length - 1;\n    while(left < right){\n        let mid = Math.floor((left + right) / 2);\n        if(a[mid] < x){\n            left = mid + 1;\n        }else{\n            right = mid;\n        }\n    }\n    return left;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpaa22ght1.js:20:10)\n    at Object.<anonymous> (/tmp/tmpaa22ght1.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\nvar a = [1, 2, 4, 5];\nvar x = 3;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var l = 0;\n    var r = a.length - 1;\n    while(l < r){\n        var m = Math.floor((l + r) / 2);\n        if(a[m] < x){\n            l = m + 1;\n        }\n        else{\n            r = m;\n        }\n    }\n    return l;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpxlgkek1p.js:22:10)\n    at Object.<anonymous> (/tmp/tmpxlgkek1p.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    let l = 0, r = a.length - 1;\n    while (l <= r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] < x) {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return l;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var l = 0, r = a.length - 1;\n    while (l < r) {\n        var m = Math.floor((l + r) / 2);\n        if (a[m] < x) {\n            l = m + 1;\n        }\n        else {\n            r = m;\n        }\n    }\n    return l;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp15_rirww.js:21:10)\n    at Object.<anonymous> (/tmp/tmp15_rirww.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var l = 0;\n    var r = a.length - 1;\n    while(l < r){\n        var m = Math.floor((l + r) / 2);\n        if(a[m] < x){\n            l = m + 1;\n        }\n        else{\n            r = m;\n        }\n    }\n    return l;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpxlgkek1p.js:22:10)\n    at Object.<anonymous> (/tmp/tmpxlgkek1p.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    let i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    let l = 0;\n    let r = a.length - 1;\n    while(l < r){\n        let m = Math.floor((l + r) / 2);\n        if(a[m] < x){\n            l = m + 1;\n        }else{\n            r = m;\n        }\n    }\n    return l;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmplu3m15nn.js:21:10)\n    at Object.<anonymous> (/tmp/tmplu3m15nn.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    let i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    let i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    let l = 0;\n    let r = a.length - 1;\n    let m = 0;\n    while(l < r){\n        m = Math.floor((l + r) / 2);\n        if(a[m] < x){\n            l = m + 1;\n        }\n        else{\n            r = m;\n        }\n    }\n    return l;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpv7ye_zwv.js:23:10)\n    at Object.<anonymous> (/tmp/tmpv7ye_zwv.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    let left = 0;\n    let right = a.length - 1;\n    let mid = Math.floor((left + right) / 2);\n    while(left < right){\n        if(a[mid] < x){\n            left = mid + 1;\n        }\n        else{\n            right = mid;\n        }\n        mid = Math.floor((left + right) / 2);\n    }\n    return left;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp_laais2z.js:23:10)\n    at Object.<anonymous> (/tmp/tmp_laais2z.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var low = 0;\n    var high = a.length - 1;\n    var mid = 0;\n    while (low <= high){\n        mid = Math.floor((low + high)/2);\n        if (x > a[mid]){\n            low = mid + 1;\n        }\n        else if (x < a[mid]){\n            high = mid - 1;\n        }\n        else{\n            return mid;\n        }\n    }\n    return low;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while (i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n\tvar i = 0;\n\twhile(i < a.length && a[i] < x){\n\t\ti++;\n\t}\n\treturn i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    let i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n  var l = 0, r = a.length - 1;\n  while(l < r){\n    var m = Math.floor((l + r) / 2);\n    if(a[m] < x){\n      l = m + 1;\n    }\n    else{\n      r = m;\n    }\n  }\n  return l;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp5jsp8kei.js:21:10)\n    at Object.<anonymous> (/tmp/tmp5jsp8kei.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var l = 0;\n    var r = a.length - 1;\n    var m = 0;\n    while (l < r){\n        m = Math.floor((l + r) / 2);\n        if (a[m] < x){\n            l = m + 1;\n        }\n        else{\n            r = m;\n        }\n    }\n    return l;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpt7rmcow2.js:23:10)\n    at Object.<anonymous> (/tmp/tmpt7rmcow2.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    let i = 0;\n    while(i < a.length){\n        if(a[i] >= x){\n            return i;\n        }\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var low = 0;\n    var high = a.length - 1;\n    var mid;\n    while(low <= high){\n        mid = Math.floor((low + high)/2);\n        if(x > a[mid]){\n            low = mid + 1;\n        }\n        else if(x < a[mid]){\n            high = mid - 1;\n        }\n        else{\n            return mid;\n        }\n    }\n    return low;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    let i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    let i = 0;\n    let j = a.length - 1;\n    while (i < j){\n        let m = Math.floor((i + j) / 2);\n        if (x <= a[m]){\n            j = m;\n        } else {\n            i = m + 1;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp53a4tknc.js:21:10)\n    at Object.<anonymous> (/tmp/tmp53a4tknc.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var l = 0, r = a.length - 1;\n    while (l < r){\n        var m = Math.floor((l + r) / 2);\n        if (a[m] < x){\n            l = m + 1;\n        }\n        else{\n            r = m;\n        }\n    }\n    return l;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpr0iadtpf.js:21:10)\n    at Object.<anonymous> (/tmp/tmpr0iadtpf.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var low = 0, high = a.length - 1;\n    while (low <= high) {\n        var mid = Math.floor((low + high) / 2);\n        if (a[mid] < x) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return low;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    let i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    let i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    let left = 0;\n    let right = a.length - 1;\n    let mid;\n    while(left < right){\n        mid = Math.floor((left + right) / 2);\n        if(x <= a[mid]){\n            right = mid;\n        }\n        else{\n            left = mid + 1;\n        }\n    }\n    return left;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpuzl_5cc3.js:23:10)\n    at Object.<anonymous> (/tmp/tmpuzl_5cc3.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    var j = a.length - 1;\n    while(i < j){\n        var m = Math.floor((i + j) / 2);\n        if(x <= a[m]){\n            j = m;\n        }\n        else{\n            i = m + 1;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpz__497bh.js:22:10)\n    at Object.<anonymous> (/tmp/tmpz__497bh.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var l = 0, r = a.length - 1, m;\n    while (l <= r){\n        m = Math.floor((l + r) / 2);\n        if (a[m] < x) l = m + 1;\n        else r = m - 1;\n    }\n    return l;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    let i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while (i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    let i = 0;\n    while(a[i] < x){\n        i++;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    let l = 0, r = a.length - 1;\n    while(l < r){\n        let mid = Math.floor((l + r) / 2);\n        if(a[mid] < x){\n            l = mid + 1;\n        }else{\n            r = mid;\n        }\n    }\n    return l;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpf4i9s68p.js:20:10)\n    at Object.<anonymous> (/tmp/tmpf4i9s68p.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    let i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    let left = 0;\n    let right = a.length - 1;\n    let mid;\n    while(left < right){\n        mid = Math.floor((left + right) / 2);\n        if(a[mid] < x){\n            left = mid + 1;\n        }else{\n            right = mid;\n        }\n    }\n    return left;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp9dqkzvku.js:21:10)\n    at Object.<anonymous> (/tmp/tmp9dqkzvku.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    let l = 0;\n    let r = a.length - 1;\n    while(l < r){\n        let mid = Math.floor((l + r) / 2);\n        if(a[mid] < x){\n            l = mid + 1;\n        }\n        else{\n            r = mid;\n        }\n    }\n    return l;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpr0kkg5bu.js:22:10)\n    at Object.<anonymous> (/tmp/tmpr0kkg5bu.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    for(var i = 0; i < a.length; i++){\n        if(a[i] > x){\n            return i;\n        }\n    }\n    return a.length;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    let low = 0;\n    let high = a.length - 1;\n    let mid;\n    while(low <= high){\n        mid = Math.floor((low + high) / 2);\n        if(a[mid] < x){\n            low = mid + 1;\n        }\n        else if(a[mid] > x){\n            high = mid - 1;\n        }\n        else{\n            return mid;\n        }\n    }\n    return low;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while (i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var l = 0, r = a.length - 1;\n    while(l < r){\n        var m = Math.floor((l + r) / 2);\n        if(a[m] < x){\n            l = m + 1;\n        }else{\n            r = m;\n        }\n    }\n    return l;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpw55ctkbb.js:20:10)\n    at Object.<anonymous> (/tmp/tmpw55ctkbb.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var l = 0, r = a.length - 1;\n    while (l <= r){\n        var m = Math.floor((l + r) / 2);\n        if (a[m] < x){\n            l = m + 1;\n        }\n        else{\n            r = m - 1;\n        }\n    }\n    return l;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var l = 0, r = a.length - 1;\n    while (l <= r) {\n        var m = Math.floor((l + r) / 2);\n        if (a[m] < x) {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return l;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while (i < a.length && a[i] < x) {\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    for(var i = 0; i < a.length; i++){\n        if(a[i] >= x){\n            return i;\n        }\n    }\n    return a.length;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n\tvar i = 0;\n\twhile(i < a.length && a[i] < x){\n\t\ti++;\n\t}\n\treturn i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    let low = 0;\n    let high = a.length - 1;\n    while(low <= high){\n        let mid = Math.floor((low + high) / 2);\n        if(x < a[mid]){\n            high = mid - 1;\n        }\n        else{\n            low = mid + 1;\n        }\n    }\n    return low;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n\tvar i = 0;\n\twhile(i < a.length && a[i] < x){\n\t\ti++;\n\t}\n\treturn i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    let left = 0;\n    let right = a.length - 1;\n    let mid;\n    while(left <= right){\n        mid = Math.floor((left + right) / 2);\n        if(a[mid] < x){\n            left = mid + 1;\n        }\n        else{\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    let i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var l = 0, r = a.length - 1;\n    while(l < r){\n        var m = Math.floor((l + r) / 2);\n        if(a[m] < x){\n            l = m + 1;\n        }else{\n            r = m;\n        }\n    }\n    return l;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpw55ctkbb.js:20:10)\n    at Object.<anonymous> (/tmp/tmpw55ctkbb.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while (i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var l = 0;\n    var r = a.length - 1;\n    var m = Math.floor((l + r) / 2);\n    while(l <= r){\n        if(a[m] < x){\n            l = m + 1;\n        }\n        else if(a[m] > x){\n            r = m - 1;\n        }\n        else{\n            return m;\n        }\n        m = Math.floor((l + r) / 2);\n    }\n    return l;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while (i < a.length && a[i] < x) {\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var l = 0;\n    var r = a.length - 1;\n    while(l < r){\n        var mid = Math.floor((l + r) / 2);\n        if(a[mid] < x){\n            l = mid + 1;\n        }\n        else{\n            r = mid;\n        }\n    }\n    return l;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpned4rrsm.js:22:10)\n    at Object.<anonymous> (/tmp/tmpned4rrsm.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    for (var i = 0; i < a.length; i++){\n        if (a[i] >= x){\n            return i;\n        }\n    }\n    return a.length;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    let l = 0;\n    let r = a.length - 1;\n    while(l < r){\n        let m = Math.floor((l + r) / 2);\n        if(a[m] < x){\n            l = m + 1;\n        }\n        else{\n            r = m;\n        }\n    }\n    return l;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpoj1hnxzz.js:22:10)\n    at Object.<anonymous> (/tmp/tmpoj1hnxzz.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    let left = 0;\n    let right = a.length - 1;\n    while(left <= right){\n        let mid = Math.floor((left + right) / 2);\n        if(x < a[mid]){\n            right = mid - 1;\n        }\n        else{\n            left = mid + 1;\n        }\n    }\n    return left;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    let i = 0;\n    while(a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var low = 0;\n    var high = a.length - 1;\n    var mid;\n    while(low <= high){\n        mid = Math.floor((low + high)/2);\n        if(a[mid] < x){\n            low = mid + 1;\n        }\n        else{\n            high = mid - 1;\n        }\n    }\n    return low;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    let i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var l = 0, r = a.length - 1;\n    while(l < r){\n        var m = Math.floor((l + r) / 2);\n        if(a[m] < x) l = m + 1;\n        else r = m;\n    }\n    return l;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpnfjs7yhw.js:17:10)\n    at Object.<anonymous> (/tmp/tmpnfjs7yhw.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var l = 0;\n    var r = a.length - 1;\n    while(l < r){\n        var m = Math.floor((l + r) / 2);\n        if(a[m] < x){\n            l = m + 1;\n        }\n        else{\n            r = m;\n        }\n    }\n    return l;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpxlgkek1p.js:22:10)\n    at Object.<anonymous> (/tmp/tmpxlgkek1p.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    let i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    for(var i = 0; i < a.length; i++){\n        if(a[i] > x){\n            return i;\n        }\n    }\n    return a.length;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665509802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    let l = 0;\n    let r = a.length - 1;\n    let m = 0;\n    while(l < r){\n        m = Math.floor((l + r) / 2);\n        if(a[m] < x){\n            l = m + 1;\n        }\n        else{\n            r = m;\n        }\n    }\n    return l;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpv7ye_zwv.js:23:10)\n    at Object.<anonymous> (/tmp/tmpv7ye_zwv.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    let i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n    for(let i = 0; i < a.length; i++){\n        if(x <= a[i]){\n            return i;\n        }\n    }\n    return a.length;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}