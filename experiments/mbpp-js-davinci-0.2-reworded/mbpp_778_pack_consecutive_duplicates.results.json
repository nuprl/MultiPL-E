{
  "name": "mbpp_778_pack_consecutive_duplicates",
  "language": "js",
  "prompt": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_778_pack_consecutive_duplicates.py",
  "prompt_terminology": "reworded",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "results": [
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i=0; i<list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var temp = [];\n    for(var i=0; i<list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            temp.push(list1[i]);\n        }\n        else{\n            temp.push(list1[i]);\n            list2.push(temp);\n            temp = [];\n        }\n    }\n    return list2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i=0; i<list1.length; i++){\n        if(list1[i] === list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    var list5 = [];\n    var list6 = [];\n    var list7 = [];\n    var list8 = [];\n    var list9 = [];\n    var list10 = [];\n    var list11 = [];\n    var list12 = [];\n    var list13 = [];\n    var list14 = [];\n    var list15 = [];\n    var list16 = [];\n    var list17 = [];\n    var list18 = [];\n    var list19 = [];\n    var list20 = [];\n    var list21 = [];\n    var list22 = [];\n    var list23 = [];\n    var list24 = [];\n    var list25 = [];\n    var list26 = [];\n    var list27 = [];\n    var list28 = [];\n    var list29 = [];\n    var list30 = [];\n    var list31 = [];\n    var list32 = [];\n    var list33 = [];\n    var list34 = [];\n    var list35 = [];\n    var list36 = [];\n    var list37 = [];\n    var list38 = [];\n    var list39 = [];\n    var list40 = [];\n    var list41 = [];\n    var list42 = [];\n    var list43 = [];\n    var list44 = [];\n    var list45 = [];\n    var list46 = [];\n    var list47 = [];\n    var list48 = [];\n    var list49 = [];\n    var list50 = [];\n    var list51 = [];\n    var list52 = [];\n    var list53 = [];\n    var list54 = [];\n    var list55 = [];\n    var list56 = [];\n    var list57 = [];\n    var list58 = [];\n    var list59 = [];\n    var list60 = [];\n    var list61 = [];\n    var list62 = [];\n    var list63 = [];\n    var list64 = [];\n    var list65 = [];\n    var list66 = [];\n    var list67 = [];\n    var list68 = [];\n    var list69 = [];\n    var list70 = [];\n    var list71 = [];\n    var list72 = [];\n    var list73 = [];\n    var list74 = [];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "/tmp/tmpyaznvg9c.js:87\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var temp = [];\n    var len = list1.length;\n    for(var i = 0; i < len; i++){\n        if(list1[i] === list1[i+1]){\n            temp.push(list1[i]);\n        }\n        else{\n            temp.push(list1[i]);\n            list2.push(temp);\n            temp = [];\n        }\n    }\n    return list2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    var list5 = [];\n    var list6 = [];\n    var list7 = [];\n    var list8 = [];\n    var list9 = [];\n    var list10 = [];\n    var list11 = [];\n    var list12 = [];\n    var list13 = [];\n    var list14 = [];\n    var list15 = [];\n    var list16 = [];\n    var list17 = [];\n    var list18 = [];\n    var list19 = [];\n    var list20 = [];\n    var list21 = [];\n    var list22 = [];\n    var list23 = [];\n    var list24 = [];\n    var list25 = [];\n    var list26 = [];\n    var list27 = [];\n    var list28 = [];\n    var list29 = [];\n    var list30 = [];\n    var list31 = [];\n    var list32 = [];\n    var list33 = [];\n    var list34 = [];\n    var list35 = [];\n    var list36 = [];\n    var list37 = [];\n    var list38 = [];\n    var list39 = [];\n    var list40 = [];\n    var list41 = [];\n    var list42 = [];\n    var list43 = [];\n    var list44 = [];\n    var list45 = [];\n    var list46 = [];\n    var list47 = [];\n    var list48 = [];\n    var list49 = [];\n    var list50 = [];\n    var list51 = [];\n    var list52 = [];\n    var list53 = [];\n    var list54 = [];\n    var list55 = [];\n    var list56 = [];\n    var list57 = [];\n    var list58 = [];\n    var list59 = [];\n    var list60 = [];\n    var list61 = [];\n    var list62 = [];\n    var list63 = [];\n    var list64 = [];\n    var list65 = [];\n    var list66 = [];\n    var list67 = [];\n    var list68 = [];\n    var list69 = [];\n    var list70 = [];\n    var list71 = [];\n    var list72 = [];\n    var list73 = [];\n    var list74 = [];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "/tmp/tmpyaznvg9c.js:87\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n\tvar list2 = [];\n\tvar temp = [];\n\tfor(var i = 0; i < list1.length; i++){\n\t\tif(list1[i] == list1[i+1]){\n\t\t\ttemp.push(list1[i]);\n\t\t}\n\t\telse{\n\t\t\ttemp.push(list1[i]);\n\t\t\tlist2.push(temp);\n\t\t\ttemp = [];\n\t\t}\n\t}\n\treturn list2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    var list5 = [];\n    var list6 = [];\n    var list7 = [];\n    var list8 = [];\n    var list9 = [];\n    var list10 = [];\n    var list11 = [];\n    var list12 = [];\n    var list13 = [];\n    var list14 = [];\n    var list15 = [];\n    var list16 = [];\n    var list17 = [];\n    var list18 = [];\n    var list19 = [];\n    var list20 = [];\n    var list21 = [];\n    var list22 = [];\n    var list23 = [];\n    var list24 = [];\n    var list25 = [];\n    var list26 = [];\n    var list27 = [];\n    var list28 = [];\n    var list29 = [];\n    var list30 = [];\n    var list31 = [];\n    var list32 = [];\n    var list33 = [];\n    var list34 = [];\n    var list35 = [];\n    var list36 = [];\n    var list37 = [];\n    var list38 = [];\n    var list39 = [];\n    var list40 = [];\n    var list41 = [];\n    var list42 = [];\n    var list43 = [];\n    var list44 = [];\n    var list45 = [];\n    var list46 = [];\n    var list47 = [];\n    var list48 = [];\n    var list49 = [];\n    var list50 = [];\n    var list51 = [];\n    var list52 = [];\n    var list53 = [];\n    var list54 = [];\n    var list55 = [];\n    var list56 = [];\n    var list57 = [];\n    var list58 = [];\n    var list59 = [];\n    var list60 = [];\n    var list61 = [];\n    var list62 = [];\n    var list63 = [];\n    var list64 = [];\n    var list65 = [];\n    var list66 = [];\n    var list67 = [];\n    var list68 = [];\n    var list69 = [];\n    var list70 = [];\n    var list71 = [];\n    var list72 = [];\n    var list73 = [];\n    var list74 = [];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "/tmp/tmpyaznvg9c.js:87\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    var list5 = [];\n    var list6 = [];\n    var list7 = [];\n    var list8 = [];\n    var list9 = [];\n    var list10 = [];\n    var list11 = [];\n    var list12 = [];\n    var list13 = [];\n    var list14 = [];\n    var list15 = [];\n    var list16 = [];\n    var list17 = [];\n    var list18 = [];\n    var list19 = [];\n    var list20 = [];\n    var list21 = [];\n    var list22 = [];\n    var list23 = [];\n    var list24 = [];\n    var list25 = [];\n    var list26 = [];\n    var list27 = [];\n    var list28 = [];\n    var list29 = [];\n    var list30 = [];\n    var list31 = [];\n    var list32 = [];\n    var list33 = [];\n    var list34 = [];\n    var list35 = [];\n    var list36 = [];\n    var list37 = [];\n    var list38 = [];\n    var list39 = [];\n    var list40 = [];\n    var list41 = [];\n    var list42 = [];\n    var list43 = [];\n    var list44 = [];\n    var list45 = [];\n    var list46 = [];\n    var list47 = [];\n    var list48 = [];\n    var list49 = [];\n    var list50 = [];\n    var list51 = [];\n    var list52 = [];\n    var list53 = [];\n    var list54 = [];\n    var list55 = [];\n    var list56 = [];\n    var list57 = [];\n    var list58 = [];\n    var list59 = [];\n    var list60 = [];\n    var list61 = [];\n    var list62 = [];\n    var list63 = [];\n    var list64 = [];\n    var list65 = [];\n    var list66 = [];\n    var list67 = [];\n    var list68 = [];\n    var list69 = [];\n    var list70 = [];\n    var list71 = [];\n    var list72 = [];\n    var list73 = [];\n    var list74 = [];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "/tmp/tmpyaznvg9c.js:87\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var temp = [];\n    var count = 0;\n    for(var i=0;i<list1.length;i++){\n        if(list1[i] == list1[i+1]){\n            temp.push(list1[i]);\n            count++;\n        }\n        else{\n            temp.push(list1[i]);\n            list2.push(temp);\n            temp = [];\n        }\n    }\n    return list2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] === list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    var list5 = [];\n    var list6 = [];\n    var list7 = [];\n    var list8 = [];\n    var list9 = [];\n    var list10 = [];\n    var list11 = [];\n    var list12 = [];\n    var list13 = [];\n    var list14 = [];\n    var list15 = [];\n    var list16 = [];\n    var list17 = [];\n    var list18 = [];\n    var list19 = [];\n    var list20 = [];\n    var list21 = [];\n    var list22 = [];\n    var list23 = [];\n    var list24 = [];\n    var list25 = [];\n    var list26 = [];\n    var list27 = [];\n    var list28 = [];\n    var list29 = [];\n    var list30 = [];\n    var list31 = [];\n    var list32 = [];\n    var list33 = [];\n    var list34 = [];\n    var list35 = [];\n    var list36 = [];\n    var list37 = [];\n    var list38 = [];\n    var list39 = [];\n    var list40 = [];\n    var list41 = [];\n    var list42 = [];\n    var list43 = [];\n    var list44 = [];\n    var list45 = [];\n    var list46 = [];\n    var list47 = [];\n    var list48 = [];\n    var list49 = [];\n    var list50 = [];\n    var list51 = [];\n    var list52 = [];\n    var list53 = [];\n    var list54 = [];\n    var list55 = [];\n    var list56 = [];\n    var list57 = [];\n    var list58 = [];\n    var list59 = [];\n    var list60 = [];\n    var list61 = [];\n    var list62 = [];\n    var list63 = [];\n    var list64 = [];\n    var list65 = [];\n    var list66 = [];\n    var list67 = [];\n    var list68 = [];\n    var list69 = [];\n    var list70 = [];\n    var list71 = [];\n    var list72 = [];\n    var list73 = [];\n    var list74 = [];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "/tmp/tmpyaznvg9c.js:87\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] === list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    for(var i = 0; i < list1.length; i++){\n        var count = 0;\n        for(var j = i; j < list1.length; j++){\n            if(list1[i] == list1[j]){\n                count++;\n            }\n            else{\n                break;\n            }\n        }\n        list2.push(list1.slice(i, i + count));\n        i = i + count - 1;\n    }\n    return list2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    var list5 = [];\n    var list6 = [];\n    var list7 = [];\n    var list8 = [];\n    var list9 = [];\n    var list10 = [];\n    var list11 = [];\n    var list12 = [];\n    var list13 = [];\n    var list14 = [];\n    var list15 = [];\n    var list16 = [];\n    var list17 = [];\n    var list18 = [];\n    var list19 = [];\n    var list20 = [];\n    var list21 = [];\n    var list22 = [];\n    var list23 = [];\n    var list24 = [];\n    var list25 = [];\n    var list26 = [];\n    var list27 = [];\n    var list28 = [];\n    var list29 = [];\n    var list30 = [];\n    var list31 = [];\n    var list32 = [];\n    var list33 = [];\n    var list34 = [];\n    var list35 = [];\n    var list36 = [];\n    var list37 = [];\n    var list38 = [];\n    var list39 = [];\n    var list40 = [];\n    var list41 = [];\n    var list42 = [];\n    var list43 = [];\n    var list44 = [];\n    var list45 = [];\n    var list46 = [];\n    var list47 = [];\n    var list48 = [];\n    var list49 = [];\n    var list50 = [];\n    var list51 = [];\n    var list52 = [];\n    var list53 = [];\n    var list54 = [];\n    var list55 = [];\n    var list56 = [];\n    var list57 = [];\n    var list58 = [];\n    var list59 = [];\n    var list60 = [];\n    var list61 = [];\n    var list62 = [];\n    var list63 = [];\n    var list64 = [];\n    var list65 = [];\n    var list66 = [];\n    var list67 = [];\n    var list68 = [];\n    var list69 = [];\n    var list70 = [];\n    var list71 = [];\n    var list72 = [];\n    var list73 = [];\n    var list74 = [];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "/tmp/tmpyaznvg9c.js:87\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    var list5 = [];\n    var list6 = [];\n    var list7 = [];\n    var list8 = [];\n    var list9 = [];\n    var list10 = [];\n    var list11 = [];\n    var list12 = [];\n    var list13 = [];\n    var list14 = [];\n    var list15 = [];\n    var list16 = [];\n    var list17 = [];\n    var list18 = [];\n    var list19 = [];\n    var list20 = [];\n    var list21 = [];\n    var list22 = [];\n    var list23 = [];\n    var list24 = [];\n    var list25 = [];\n    var list26 = [];\n    var list27 = [];\n    var list28 = [];\n    var list29 = [];\n    var list30 = [];\n    var list31 = [];\n    var list32 = [];\n    var list33 = [];\n    var list34 = [];\n    var list35 = [];\n    var list36 = [];\n    var list37 = [];\n    var list38 = [];\n    var list39 = [];\n    var list40 = [];\n    var list41 = [];\n    var list42 = [];\n    var list43 = [];\n    var list44 = [];\n    var list45 = [];\n    var list46 = [];\n    var list47 = [];\n    var list48 = [];\n    var list49 = [];\n    var list50 = [];\n    var list51 = [];\n    var list52 = [];\n    var list53 = [];\n    var list54 = [];\n    var list55 = [];\n    var list56 = [];\n    var list57 = [];\n    var list58 = [];\n    var list59 = [];\n    var list60 = [];\n    var list61 = [];\n    var list62 = [];\n    var list63 = [];\n    var list64 = [];\n    var list65 = [];\n    var list66 = [];\n    var list67 = [];\n    var list68 = [];\n    var list69 = [];\n    var list70 = [];\n    var list71 = [];\n    var list72 = [];\n    var list73 = [];\n    var list74 = [];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "/tmp/tmpyaznvg9c.js:87\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    var list5 = [];\n    var list6 = [];\n    var list7 = [];\n    var list8 = [];\n    var list9 = [];\n    var list10 = [];\n    var list11 = [];\n    var list12 = [];\n    var list13 = [];\n    var list14 = [];\n    var list15 = [];\n    var list16 = [];\n    var list17 = [];\n    var list18 = [];\n    var list19 = [];\n    var list20 = [];\n    var list21 = [];\n    var list22 = [];\n    var list23 = [];\n    var list24 = [];\n    var list25 = [];\n    var list26 = [];\n    var list27 = [];\n    var list28 = [];\n    var list29 = [];\n    var list30 = [];\n    var list31 = [];\n    var list32 = [];\n    var list33 = [];\n    var list34 = [];\n    var list35 = [];\n    var list36 = [];\n    var list37 = [];\n    var list38 = [];\n    var list39 = [];\n    var list40 = [];\n    var list41 = [];\n    var list42 = [];\n    var list43 = [];\n    var list44 = [];\n    var list45 = [];\n    var list46 = [];\n    var list47 = [];\n    var list48 = [];\n    var list49 = [];\n    var list50 = [];\n    var list51 = [];\n    var list52 = [];\n    var list53 = [];\n    var list54 = [];\n    var list55 = [];\n    var list56 = [];\n    var list57 = [];\n    var list58 = [];\n    var list59 = [];\n    var list60 = [];\n    var list61 = [];\n    var list62 = [];\n    var list63 = [];\n    var list64 = [];\n    var list65 = [];\n    var list66 = [];\n    var list67 = [];\n    var list68 = [];\n    var list69 = [];\n    var list70 = [];\n    var list71 = [];\n    var list72 = [];\n    var list73 = [];\n    var list74 = [];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "/tmp/tmpyaznvg9c.js:87\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    for(var i=0;i<list3.length;i++){\n        if(list3[i].length > 1){\n            list4.push(list3[i]);\n        }\n    }\n    return list4;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    0,\n    0\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    6,\n    6,\n    6\n  ],\n  [\n    4,\n    4\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    0,\n    0\n  ],\n  [\n    1\n  ],\n  [\n    2\n  ],\n  [\n    3\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    5\n  ],\n  [\n    6,\n    6,\n    6\n  ],\n  [\n    7\n  ],\n  [\n    8\n  ],\n  [\n    9\n  ],\n  [\n    4,\n    4\n  ]\n]\n    at test (/tmp/tmp4amz5gyp.js:28:10)\n    at Object.<anonymous> (/tmp/tmp4amz5gyp.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 0, 0 ], [ 4, 4 ], [ 6, 6, 6 ], [ 4, 4 ] ],\n  expected: [\n    [ 0, 0 ],    [ 1 ],\n    [ 2 ],       [ 3 ],\n    [ 4, 4 ],    [ 5 ],\n    [ 6, 6, 6 ], [ 7 ],\n    [ 8 ],       [ 9 ],\n    [ 4, 4 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var temp = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] === list1[i+1]){\n            temp.push(list1[i]);\n        }\n        else{\n            temp.push(list1[i]);\n            list2.push(temp);\n            temp = [];\n        }\n    }\n    return list2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var temp = [];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i]!=list1[i+1]){\n            temp.push(list1[i]);\n            list2.push(temp);\n            temp = [];\n        }\n        else{\n            temp.push(list1[i]);\n        }\n    }\n    return list2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    var list5 = [];\n    var list6 = [];\n    var list7 = [];\n    var list8 = [];\n    var list9 = [];\n    var list10 = [];\n    var list11 = [];\n    var list12 = [];\n    var list13 = [];\n    var list14 = [];\n    var list15 = [];\n    var list16 = [];\n    var list17 = [];\n    var list18 = [];\n    var list19 = [];\n    var list20 = [];\n    var list21 = [];\n    var list22 = [];\n    var list23 = [];\n    var list24 = [];\n    var list25 = [];\n    var list26 = [];\n    var list27 = [];\n    var list28 = [];\n    var list29 = [];\n    var list30 = [];\n    var list31 = [];\n    var list32 = [];\n    var list33 = [];\n    var list34 = [];\n    var list35 = [];\n    var list36 = [];\n    var list37 = [];\n    var list38 = [];\n    var list39 = [];\n    var list40 = [];\n    var list41 = [];\n    var list42 = [];\n    var list43 = [];\n    var list44 = [];\n    var list45 = [];\n    var list46 = [];\n    var list47 = [];\n    var list48 = [];\n    var list49 = [];\n    var list50 = [];\n    var list51 = [];\n    var list52 = [];\n    var list53 = [];\n    var list54 = [];\n    var list55 = [];\n    var list56 = [];\n    var list57 = [];\n    var list58 = [];\n    var list59 = [];\n    var list60 = [];\n    var list61 = [];\n    var list62 = [];\n    var list63 = [];\n    var list64 = [];\n    var list65 = [];\n    var list66 = [];\n    var list67 = [];\n    var list68 = [];\n    var list69 = [];\n    var list70 = [];\n    var list71 = [];\n    var list72 = [];\n    var list73 = [];\n    var list74 = [];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "/tmp/tmpyaznvg9c.js:87\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] === list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var temp = [];\n    var j = 0;\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            temp[j] = list1[i];\n            j++;\n        }\n        else{\n            temp[j] = list1[i];\n            list2[list2.length] = temp;\n            temp = [];\n            j = 0;\n        }\n    }\n    return list2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] === list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    var list5 = [];\n    var list6 = [];\n    var list7 = [];\n    var list8 = [];\n    var list9 = [];\n    var list10 = [];\n    var list11 = [];\n    var list12 = [];\n    var list13 = [];\n    var list14 = [];\n    var list15 = [];\n    var list16 = [];\n    var list17 = [];\n    var list18 = [];\n    var list19 = [];\n    var list20 = [];\n    var list21 = [];\n    var list22 = [];\n    var list23 = [];\n    var list24 = [];\n    var list25 = [];\n    var list26 = [];\n    var list27 = [];\n    var list28 = [];\n    var list29 = [];\n    var list30 = [];\n    var list31 = [];\n    var list32 = [];\n    var list33 = [];\n    var list34 = [];\n    var list35 = [];\n    var list36 = [];\n    var list37 = [];\n    var list38 = [];\n    var list39 = [];\n    var list40 = [];\n    var list41 = [];\n    var list42 = [];\n    var list43 = [];\n    var list44 = [];\n    var list45 = [];\n    var list46 = [];\n    var list47 = [];\n    var list48 = [];\n    var list49 = [];\n    var list50 = [];\n    var list51 = [];\n    var list52 = [];\n    var list53 = [];\n    var list54 = [];\n    var list55 = [];\n    var list56 = [];\n    var list57 = [];\n    var list58 = [];\n    var list59 = [];\n    var list60 = [];\n    var list61 = [];\n    var list62 = [];\n    var list63 = [];\n    var list64 = [];\n    var list65 = [];\n    var list66 = [];\n    var list67 = [];\n    var list68 = [];\n    var list69 = [];\n    var list70 = [];\n    var list71 = [];\n    var list72 = [];\n    var list73 = [];\n    var list74 = [];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "/tmp/tmpyaznvg9c.js:87\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n  var list2 = [];\n  var temp = [];\n  for(var i=0;i<list1.length;i++){\n    if(list1[i] === list1[i+1]){\n      temp.push(list1[i]);\n    }\n    else{\n      temp.push(list1[i]);\n      list2.push(temp);\n      temp = [];\n    }\n  }\n  return list2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var sub_list = [];\n    var prev = null;\n    for(var i=0; i<list1.length; i++){\n        if(list1[i] != prev){\n            if(sub_list.length > 0){\n                list2.push(sub_list);\n            }\n            sub_list = [];\n        }\n        sub_list.push(list1[i]);\n        prev = list1[i];\n    }\n    list2.push(sub_list);\n    return list2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    var list5 = [];\n    var list6 = [];\n    var list7 = [];\n    var list8 = [];\n    var list9 = [];\n    var list10 = [];\n    var list11 = [];\n    var list12 = [];\n    var list13 = [];\n    var list14 = [];\n    var list15 = [];\n    var list16 = [];\n    var list17 = [];\n    var list18 = [];\n    var list19 = [];\n    var list20 = [];\n    var list21 = [];\n    var list22 = [];\n    var list23 = [];\n    var list24 = [];\n    var list25 = [];\n    var list26 = [];\n    var list27 = [];\n    var list28 = [];\n    var list29 = [];\n    var list30 = [];\n    var list31 = [];\n    var list32 = [];\n    var list33 = [];\n    var list34 = [];\n    var list35 = [];\n    var list36 = [];\n    var list37 = [];\n    var list38 = [];\n    var list39 = [];\n    var list40 = [];\n    var list41 = [];\n    var list42 = [];\n    var list43 = [];\n    var list44 = [];\n    var list45 = [];\n    var list46 = [];\n    var list47 = [];\n    var list48 = [];\n    var list49 = [];\n    var list50 = [];\n    var list51 = [];\n    var list52 = [];\n    var list53 = [];\n    var list54 = [];\n    var list55 = [];\n    var list56 = [];\n    var list57 = [];\n    var list58 = [];\n    var list59 = [];\n    var list60 = [];\n    var list61 = [];\n    var list62 = [];\n    var list63 = [];\n    var list64 = [];\n    var list65 = [];\n    var list66 = [];\n    var list67 = [];\n    var list68 = [];\n    var list69 = [];\n    var list70 = [];\n    var list71 = [];\n    var list72 = [];\n    var list73 = [];\n    var list74 = [];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "/tmp/tmpyaznvg9c.js:87\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var count = 0;\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            count++;\n        }\n        else{\n            list2.push(list1[i]);\n            count = 0;\n        }\n    }\n    return list2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    0,\n    0\n  ],\n  [\n    1\n  ],\n  [\n    2\n  ],\n  [\n    3\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    5\n  ],\n  [\n    6,\n    6,\n    6\n  ],\n  [\n    7\n  ],\n  [\n    8\n  ],\n  [\n    9\n  ],\n  [\n    4,\n    4\n  ]\n]\n    at test (/tmp/tmps4oqzwbj.js:21:10)\n    at Object.<anonymous> (/tmp/tmps4oqzwbj.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 2, 3, 4,\n    5, 6, 7, 8, 9,\n    4\n  ],\n  expected: [\n    [ 0, 0 ],    [ 1 ],\n    [ 2 ],       [ 3 ],\n    [ 4, 4 ],    [ 5 ],\n    [ 6, 6, 6 ], [ 7 ],\n    [ 8 ],       [ 9 ],\n    [ 4, 4 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var temp = [];\n    for(var i=0; i<list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            temp.push(list1[i]);\n        }\n        else{\n            temp.push(list1[i]);\n            list2.push(temp);\n            temp = [];\n        }\n    }\n    return list2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    var list5 = [];\n    var list6 = [];\n    var list7 = [];\n    var list8 = [];\n    var list9 = [];\n    var list10 = [];\n    var list11 = [];\n    var list12 = [];\n    var list13 = [];\n    var list14 = [];\n    var list15 = [];\n    var list16 = [];\n    var list17 = [];\n    var list18 = [];\n    var list19 = [];\n    var list20 = [];\n    var list21 = [];\n    var list22 = [];\n    var list23 = [];\n    var list24 = [];\n    var list25 = [];\n    var list26 = [];\n    var list27 = [];\n    var list28 = [];\n    var list29 = [];\n    var list30 = [];\n    var list31 = [];\n    var list32 = [];\n    var list33 = [];\n    var list34 = [];\n    var list35 = [];\n    var list36 = [];\n    var list37 = [];\n    var list38 = [];\n    var list39 = [];\n    var list40 = [];\n    var list41 = [];\n    var list42 = [];\n    var list43 = [];\n    var list44 = [];\n    var list45 = [];\n    var list46 = [];\n    var list47 = [];\n    var list48 = [];\n    var list49 = [];\n    var list50 = [];\n    var list51 = [];\n    var list52 = [];\n    var list53 = [];\n    var list54 = [];\n    var list55 = [];\n    var list56 = [];\n    var list57 = [];\n    var list58 = [];\n    var list59 = [];\n    var list60 = [];\n    var list61 = [];\n    var list62 = [];\n    var list63 = [];\n    var list64 = [];\n    var list65 = [];\n    var list66 = [];\n    var list67 = [];\n    var list68 = [];\n    var list69 = [];\n    var list70 = [];\n    var list71 = [];\n    var list72 = [];\n    var list73 = [];\n    var list74 = [];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "/tmp/tmpyaznvg9c.js:87\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    var list5 = [];\n    var list6 = [];\n    var list7 = [];\n    var list8 = [];\n    var list9 = [];\n    var list10 = [];\n    var list11 = [];\n    var list12 = [];\n    var list13 = [];\n    var list14 = [];\n    var list15 = [];\n    var list16 = [];\n    var list17 = [];\n    var list18 = [];\n    var list19 = [];\n    var list20 = [];\n    var list21 = [];\n    var list22 = [];\n    var list23 = [];\n    var list24 = [];\n    var list25 = [];\n    var list26 = [];\n    var list27 = [];\n    var list28 = [];\n    var list29 = [];\n    var list30 = [];\n    var list31 = [];\n    var list32 = [];\n    var list33 = [];\n    var list34 = [];\n    var list35 = [];\n    var list36 = [];\n    var list37 = [];\n    var list38 = [];\n    var list39 = [];\n    var list40 = [];\n    var list41 = [];\n    var list42 = [];\n    var list43 = [];\n    var list44 = [];\n    var list45 = [];\n    var list46 = [];\n    var list47 = [];\n    var list48 = [];\n    var list49 = [];\n    var list50 = [];\n    var list51 = [];\n    var list52 = [];\n    var list53 = [];\n    var list54 = [];\n    var list55 = [];\n    var list56 = [];\n    var list57 = [];\n    var list58 = [];\n    var list59 = [];\n    var list60 = [];\n    var list61 = [];\n    var list62 = [];\n    var list63 = [];\n    var list64 = [];\n    var list65 = [];\n    var list66 = [];\n    var list67 = [];\n    var list68 = [];\n    var list69 = [];\n    var list70 = [];\n    var list71 = [];\n    var list72 = [];\n    var list73 = [];\n    var list74 = [];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "/tmp/tmpyaznvg9c.js:87\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var temp = [];\n    for(var i=0; i<list1.length; i++){\n        if(list1[i] != list1[i+1]){\n            temp.push(list1[i]);\n            list2.push(temp);\n            temp = [];\n        }\n        else{\n            temp.push(list1[i]);\n        }\n    }\n    return list2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var temp = [];\n    var count = 0;\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] === list1[i+1]){\n            temp.push(list1[i]);\n            count++;\n        }\n        else{\n            temp.push(list1[i]);\n            list2.push(temp);\n            temp = [];\n        }\n    }\n    return list2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var count = 0;\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            count++;\n        }\n        else{\n            list2.push(list1[i]);\n            count = 0;\n        }\n    }\n    return list2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    0,\n    0\n  ],\n  [\n    1\n  ],\n  [\n    2\n  ],\n  [\n    3\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    5\n  ],\n  [\n    6,\n    6,\n    6\n  ],\n  [\n    7\n  ],\n  [\n    8\n  ],\n  [\n    9\n  ],\n  [\n    4,\n    4\n  ]\n]\n    at test (/tmp/tmps4oqzwbj.js:21:10)\n    at Object.<anonymous> (/tmp/tmps4oqzwbj.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 2, 3, 4,\n    5, 6, 7, 8, 9,\n    4\n  ],\n  expected: [\n    [ 0, 0 ],    [ 1 ],\n    [ 2 ],       [ 3 ],\n    [ 4, 4 ],    [ 5 ],\n    [ 6, 6, 6 ], [ 7 ],\n    [ 8 ],       [ 9 ],\n    [ 4, 4 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    var list5 = [];\n    var list6 = [];\n    var list7 = [];\n    var list8 = [];\n    var list9 = [];\n    var list10 = [];\n    var list11 = [];\n    var list12 = [];\n    var list13 = [];\n    var list14 = [];\n    var list15 = [];\n    var list16 = [];\n    var list17 = [];\n    var list18 = [];\n    var list19 = [];\n    var list20 = [];\n    var list21 = [];\n    var list22 = [];\n    var list23 = [];\n    var list24 = [];\n    var list25 = [];\n    var list26 = [];\n    var list27 = [];\n    var list28 = [];\n    var list29 = [];\n    var list30 = [];\n    var list31 = [];\n    var list32 = [];\n    var list33 = [];\n    var list34 = [];\n    var list35 = [];\n    var list36 = [];\n    var list37 = [];\n    var list38 = [];\n    var list39 = [];\n    var list40 = [];\n    var list41 = [];\n    var list42 = [];\n    var list43 = [];\n    var list44 = [];\n    var list45 = [];\n    var list46 = [];\n    var list47 = [];\n    var list48 = [];\n    var list49 = [];\n    var list50 = [];\n    var list51 = [];\n    var list52 = [];\n    var list53 = [];\n    var list54 = [];\n    var list55 = [];\n    var list56 = [];\n    var list57 = [];\n    var list58 = [];\n    var list59 = [];\n    var list60 = [];\n    var list61 = [];\n    var list62 = [];\n    var list63 = [];\n    var list64 = [];\n    var list65 = [];\n    var list66 = [];\n    var list67 = [];\n    var list68 = [];\n    var list69 = [];\n    var list70 = [];\n    var list71 = [];\n    var list72 = [];\n    var list73 = [];\n    var list74 = [];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "/tmp/tmpyaznvg9c.js:87\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    var list5 = [];\n    var list6 = [];\n    var list7 = [];\n    var list8 = [];\n    var list9 = [];\n    var list10 = [];\n    var list11 = [];\n    var list12 = [];\n    var list13 = [];\n    var list14 = [];\n    var list15 = [];\n    var list16 = [];\n    var list17 = [];\n    var list18 = [];\n    var list19 = [];\n    var list20 = [];\n    var list21 = [];\n    var list22 = [];\n    var list23 = [];\n    var list24 = [];\n    var list25 = [];\n    var list26 = [];\n    var list27 = [];\n    var list28 = [];\n    var list29 = [];\n    var list30 = [];\n    var list31 = [];\n    var list32 = [];\n    var list33 = [];\n    var list34 = [];\n    var list35 = [];\n    var list36 = [];\n    var list37 = [];\n    var list38 = [];\n    var list39 = [];\n    var list40 = [];\n    var list41 = [];\n    var list42 = [];\n    var list43 = [];\n    var list44 = [];\n    var list45 = [];\n    var list46 = [];\n    var list47 = [];\n    var list48 = [];\n    var list49 = [];\n    var list50 = [];\n    var list51 = [];\n    var list52 = [];\n    var list53 = [];\n    var list54 = [];\n    var list55 = [];\n    var list56 = [];\n    var list57 = [];\n    var list58 = [];\n    var list59 = [];\n    var list60 = [];\n    var list61 = [];\n    var list62 = [];\n    var list63 = [];\n    var list64 = [];\n    var list65 = [];\n    var list66 = [];\n    var list67 = [];\n    var list68 = [];\n    var list69 = [];\n    var list70 = [];\n    var list71 = [];\n    var list72 = [];\n    var list73 = [];\n    var list74 = [];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "/tmp/tmpyaznvg9c.js:87\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    var list5 = [];\n    var list6 = [];\n    var list7 = [];\n    var list8 = [];\n    var list9 = [];\n    var list10 = [];\n    var list11 = [];\n    var list12 = [];\n    var list13 = [];\n    var list14 = [];\n    var list15 = [];\n    var list16 = [];\n    var list17 = [];\n    var list18 = [];\n    var list19 = [];\n    var list20 = [];\n    var list21 = [];\n    var list22 = [];\n    var list23 = [];\n    var list24 = [];\n    var list25 = [];\n    var list26 = [];\n    var list27 = [];\n    var list28 = [];\n    var list29 = [];\n    var list30 = [];\n    var list31 = [];\n    var list32 = [];\n    var list33 = [];\n    var list34 = [];\n    var list35 = [];\n    var list36 = [];\n    var list37 = [];\n    var list38 = [];\n    var list39 = [];\n    var list40 = [];\n    var list41 = [];\n    var list42 = [];\n    var list43 = [];\n    var list44 = [];\n    var list45 = [];\n    var list46 = [];\n    var list47 = [];\n    var list48 = [];\n    var list49 = [];\n    var list50 = [];\n    var list51 = [];\n    var list52 = [];\n    var list53 = [];\n    var list54 = [];\n    var list55 = [];\n    var list56 = [];\n    var list57 = [];\n    var list58 = [];\n    var list59 = [];\n    var list60 = [];\n    var list61 = [];\n    var list62 = [];\n    var list63 = [];\n    var list64 = [];\n    var list65 = [];\n    var list66 = [];\n    var list67 = [];\n    var list68 = [];\n    var list69 = [];\n    var list70 = [];\n    var list71 = [];\n    var list72 = [];\n    var list73 = [];\n    var list74 = [];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "/tmp/tmpyaznvg9c.js:87\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    for (var i = 0; i < list1.length; i++){\n        if (list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    for (var i = 0; i < list3.length; i++){\n        list4.push(list3[i].length);\n    }\n    return list4;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n  1,\n  1,\n  2,\n  1,\n  3,\n  1,\n  1,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  [\n    0,\n    0\n  ],\n  [\n    1\n  ],\n  [\n    2\n  ],\n  [\n    3\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    5\n  ],\n  [\n    6,\n    6,\n    6\n  ],\n  [\n    7\n  ],\n  [\n    8\n  ],\n  [\n    9\n  ],\n  [\n    4,\n    4\n  ]\n]\n    at test (/tmp/tmp6wijdja5.js:26:10)\n    at Object.<anonymous> (/tmp/tmp6wijdja5.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 1, 1, 1, 2,\n    1, 3, 1, 1, 1,\n    2\n  ],\n  expected: [\n    [ 0, 0 ],    [ 1 ],\n    [ 2 ],       [ 3 ],\n    [ 4, 4 ],    [ 5 ],\n    [ 6, 6, 6 ], [ 7 ],\n    [ 8 ],       [ 9 ],\n    [ 4, 4 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var temp = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] === list1[i+1]){\n            temp.push(list1[i]);\n        }\n        else{\n            temp.push(list1[i]);\n            list2.push(temp);\n            temp = [];\n        }\n    }\n    return list2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n  var list2 = [];\n  var temp = [];\n  var j = 0;\n  for(var i = 0; i < list1.length; i++){\n    if(list1[i] == list1[i+1]){\n      temp[j] = list1[i];\n      j++;\n    }\n    else{\n      temp[j] = list1[i];\n      list2[list2.length] = temp;\n      temp = [];\n      j = 0;\n    }\n  }\n  return list2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i=0; i<list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var temp = [];\n    for(var i=0; i<list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            temp.push(list1[i]);\n        }\n        else{\n            temp.push(list1[i]);\n            list2.push(temp);\n            temp = [];\n        }\n    }\n    return list2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    for(var i = 0; i < list3.length; i++){\n        if(list3[i].length > 1){\n            list4.push(list3[i]);\n        }\n    }\n    return list4;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    0,\n    0\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    6,\n    6,\n    6\n  ],\n  [\n    4,\n    4\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    0,\n    0\n  ],\n  [\n    1\n  ],\n  [\n    2\n  ],\n  [\n    3\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    5\n  ],\n  [\n    6,\n    6,\n    6\n  ],\n  [\n    7\n  ],\n  [\n    8\n  ],\n  [\n    9\n  ],\n  [\n    4,\n    4\n  ]\n]\n    at test (/tmp/tmp043yvoll.js:28:10)\n    at Object.<anonymous> (/tmp/tmp043yvoll.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 0, 0 ], [ 4, 4 ], [ 6, 6, 6 ], [ 4, 4 ] ],\n  expected: [\n    [ 0, 0 ],    [ 1 ],\n    [ 2 ],       [ 3 ],\n    [ 4, 4 ],    [ 5 ],\n    [ 6, 6, 6 ], [ 7 ],\n    [ 8 ],       [ 9 ],\n    [ 4, 4 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] === list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var count = 0;\n    for(var i=0; i<list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            count++;\n        }\n        else{\n            list2.push(list1.slice(i-count, i+1));\n            count = 0;\n        }\n    }\n    return list2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    var list5 = [];\n    var list6 = [];\n    var list7 = [];\n    var list8 = [];\n    var list9 = [];\n    var list10 = [];\n    var list11 = [];\n    var list12 = [];\n    var list13 = [];\n    var list14 = [];\n    var list15 = [];\n    var list16 = [];\n    var list17 = [];\n    var list18 = [];\n    var list19 = [];\n    var list20 = [];\n    var list21 = [];\n    var list22 = [];\n    var list23 = [];\n    var list24 = [];\n    var list25 = [];\n    var list26 = [];\n    var list27 = [];\n    var list28 = [];\n    var list29 = [];\n    var list30 = [];\n    var list31 = [];\n    var list32 = [];\n    var list33 = [];\n    var list34 = [];\n    var list35 = [];\n    var list36 = [];\n    var list37 = [];\n    var list38 = [];\n    var list39 = [];\n    var list40 = [];\n    var list41 = [];\n    var list42 = [];\n    var list43 = [];\n    var list44 = [];\n    var list45 = [];\n    var list46 = [];\n    var list47 = [];\n    var list48 = [];\n    var list49 = [];\n    var list50 = [];\n    var list51 = [];\n    var list52 = [];\n    var list53 = [];\n    var list54 = [];\n    var list55 = [];\n    var list56 = [];\n    var list57 = [];\n    var list58 = [];\n    var list59 = [];\n    var list60 = [];\n    var list61 = [];\n    var list62 = [];\n    var list63 = [];\n    var list64 = [];\n    var list65 = [];\n    var list66 = [];\n    var list67 = [];\n    var list68 = [];\n    var list69 = [];\n    var list70 = [];\n    var list71 = [];\n    var list72 = [];\n    var list73 = [];\n    var list74 = [];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "/tmp/tmpyaznvg9c.js:87\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var temp = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] != list1[i+1]){\n            temp.push(list1[i]);\n            list2.push(temp);\n            temp = [];\n        }\n        else{\n            temp.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for (var i = 0; i < list1.length; i++){\n        if (list1[i] === list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var temp = [];\n    var j = 0;\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] != list1[i+1]){\n            temp.push(list1[i]);\n            list2[j] = temp;\n            temp = [];\n            j++;\n        }\n        else{\n            temp.push(list1[i]);\n        }\n    }\n    return list2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var result = [];\n    var current = null;\n    var count = 0;\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] != current) {\n            if (count > 0) {\n                result.push(list1.slice(i-count, i));\n            }\n            current = list1[i];\n            count = 1;\n        } else {\n            count++;\n        }\n    }\n    if (count > 0) {\n        result.push(list1.slice(list1.length-count, list1.length));\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    var list5 = [];\n    var list6 = [];\n    var list7 = [];\n    var list8 = [];\n    var list9 = [];\n    var list10 = [];\n    var list11 = [];\n    var list12 = [];\n    var list13 = [];\n    var list14 = [];\n    var list15 = [];\n    var list16 = [];\n    var list17 = [];\n    var list18 = [];\n    var list19 = [];\n    var list20 = [];\n    var list21 = [];\n    var list22 = [];\n    var list23 = [];\n    var list24 = [];\n    var list25 = [];\n    var list26 = [];\n    var list27 = [];\n    var list28 = [];\n    var list29 = [];\n    var list30 = [];\n    var list31 = [];\n    var list32 = [];\n    var list33 = [];\n    var list34 = [];\n    var list35 = [];\n    var list36 = [];\n    var list37 = [];\n    var list38 = [];\n    var list39 = [];\n    var list40 = [];\n    var list41 = [];\n    var list42 = [];\n    var list43 = [];\n    var list44 = [];\n    var list45 = [];\n    var list46 = [];\n    var list47 = [];\n    var list48 = [];\n    var list49 = [];\n    var list50 = [];\n    var list51 = [];\n    var list52 = [];\n    var list53 = [];\n    var list54 = [];\n    var list55 = [];\n    var list56 = [];\n    var list57 = [];\n    var list58 = [];\n    var list59 = [];\n    var list60 = [];\n    var list61 = [];\n    var list62 = [];\n    var list63 = [];\n    var list64 = [];\n    var list65 = [];\n    var list66 = [];\n    var list67 = [];\n    var list68 = [];\n    var list69 = [];\n    var list70 = [];\n    var list71 = [];\n    var list72 = [];\n    var list73 = [];\n    var list74 = [];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "/tmp/tmpyaznvg9c.js:87\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    for (var i = 0; i < list1.length; i++){\n        if (list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] === list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] !== list1[i+1]){\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n        else{\n            list2.push(list1[i]);\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i=0; i<list1.length; i++){\n        if(list1[i] === list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n  var result = [];\n  var last = null;\n  var count = 0;\n  for (var i = 0; i < list1.length; i++) {\n    if (list1[i] !== last) {\n      if (count > 0) {\n        result.push(count);\n      }\n      last = list1[i];\n      count = 1;\n    } else {\n      count += 1;\n    }\n  }\n  if (count > 0) {\n    result.push(count);\n  }\n  return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n  1,\n  1,\n  2,\n  1,\n  3,\n  1,\n  1,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  [\n    0,\n    0\n  ],\n  [\n    1\n  ],\n  [\n    2\n  ],\n  [\n    3\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    5\n  ],\n  [\n    6,\n    6,\n    6\n  ],\n  [\n    7\n  ],\n  [\n    8\n  ],\n  [\n    9\n  ],\n  [\n    4,\n    4\n  ]\n]\n    at test (/tmp/tmpzq6vp6h4.js:27:10)\n    at Object.<anonymous> (/tmp/tmpzq6vp6h4.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 1, 1, 1, 2,\n    1, 3, 1, 1, 1,\n    2\n  ],\n  expected: [\n    [ 0, 0 ],    [ 1 ],\n    [ 2 ],       [ 3 ],\n    [ 4, 4 ],    [ 5 ],\n    [ 6, 6, 6 ], [ 7 ],\n    [ 8 ],       [ 9 ],\n    [ 4, 4 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var result = [];\n    var prev = null;\n    var count = 0;\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] !== prev){\n            if(count > 0){\n                result.push(count);\n            }\n            prev = list1[i];\n            result.push(list1[i]);\n            count = 1;\n        }else{\n            count += 1;\n        }\n    }\n    if(count > 0){\n        result.push(count);\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  2,\n  1,\n  1,\n  2,\n  1,\n  3,\n  1,\n  4,\n  2,\n  5,\n  1,\n  6,\n  3,\n  7,\n  1,\n  8,\n  1,\n  9,\n  1,\n  4,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  [\n    0,\n    0\n  ],\n  [\n    1\n  ],\n  [\n    2\n  ],\n  [\n    3\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    5\n  ],\n  [\n    6,\n    6,\n    6\n  ],\n  [\n    7\n  ],\n  [\n    8\n  ],\n  [\n    9\n  ],\n  [\n    4,\n    4\n  ]\n]\n    at test (/tmp/tmpkmfaxnht.js:28:10)\n    at Object.<anonymous> (/tmp/tmpkmfaxnht.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 2, 1, 1, 2, 1, 3,\n    1, 4, 2, 5, 1, 6, 3,\n    7, 1, 8, 1, 9, 1, 4,\n    2\n  ],\n  expected: [\n    [ 0, 0 ],    [ 1 ],\n    [ 2 ],       [ 3 ],\n    [ 4, 4 ],    [ 5 ],\n    [ 6, 6, 6 ], [ 7 ],\n    [ 8 ],       [ 9 ],\n    [ 4, 4 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] === list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var count = 0;\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            count++;\n        }else{\n            list2.push(list1[i]);\n            count = 0;\n        }\n    }\n    return list2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    0,\n    0\n  ],\n  [\n    1\n  ],\n  [\n    2\n  ],\n  [\n    3\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    5\n  ],\n  [\n    6,\n    6,\n    6\n  ],\n  [\n    7\n  ],\n  [\n    8\n  ],\n  [\n    9\n  ],\n  [\n    4,\n    4\n  ]\n]\n    at test (/tmp/tmpb_xh8xsh.js:21:10)\n    at Object.<anonymous> (/tmp/tmpb_xh8xsh.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 2, 3, 4,\n    5, 6, 7, 8, 9,\n    4\n  ],\n  expected: [\n    [ 0, 0 ],    [ 1 ],\n    [ 2 ],       [ 3 ],\n    [ 4, 4 ],    [ 5 ],\n    [ 6, 6, 6 ], [ 7 ],\n    [ 8 ],       [ 9 ],\n    [ 4, 4 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var temp = [];\n    var j = 0;\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            temp[j] = list1[i];\n            j++;\n        }\n        else{\n            temp[j] = list1[i];\n            j++;\n            list2[list2.length] = temp;\n            temp = [];\n            j = 0;\n        }\n    }\n    return list2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] === list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    var list5 = [];\n    var list6 = [];\n    var list7 = [];\n    var list8 = [];\n    var list9 = [];\n    var list10 = [];\n    var list11 = [];\n    var list12 = [];\n    var list13 = [];\n    var list14 = [];\n    var list15 = [];\n    var list16 = [];\n    var list17 = [];\n    var list18 = [];\n    var list19 = [];\n    var list20 = [];\n    var list21 = [];\n    var list22 = [];\n    var list23 = [];\n    var list24 = [];\n    var list25 = [];\n    var list26 = [];\n    var list27 = [];\n    var list28 = [];\n    var list29 = [];\n    var list30 = [];\n    var list31 = [];\n    var list32 = [];\n    var list33 = [];\n    var list34 = [];\n    var list35 = [];\n    var list36 = [];\n    var list37 = [];\n    var list38 = [];\n    var list39 = [];\n    var list40 = [];\n    var list41 = [];\n    var list42 = [];\n    var list43 = [];\n    var list44 = [];\n    var list45 = [];\n    var list46 = [];\n    var list47 = [];\n    var list48 = [];\n    var list49 = [];\n    var list50 = [];\n    var list51 = [];\n    var list52 = [];\n    var list53 = [];\n    var list54 = [];\n    var list55 = [];\n    var list56 = [];\n    var list57 = [];\n    var list58 = [];\n    var list59 = [];\n    var list60 = [];\n    var list61 = [];\n    var list62 = [];\n    var list63 = [];\n    var list64 = [];\n    var list65 = [];\n    var list66 = [];\n    var list67 = [];\n    var list68 = [];\n    var list69 = [];\n    var list70 = [];\n    var list71 = [];\n    var list72 = [];\n    var list73 = [];\n    var list74 = [];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "/tmp/tmpyaznvg9c.js:87\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] === list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    for(var i = 0; i < list3.length; i++){\n        list4.push(list3[i].length);\n    }\n    return list4;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n  1,\n  1,\n  2,\n  1,\n  3,\n  1,\n  1,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  [\n    0,\n    0\n  ],\n  [\n    1\n  ],\n  [\n    2\n  ],\n  [\n    3\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    5\n  ],\n  [\n    6,\n    6,\n    6\n  ],\n  [\n    7\n  ],\n  [\n    8\n  ],\n  [\n    9\n  ],\n  [\n    4,\n    4\n  ]\n]\n    at test (/tmp/tmp1_pfpjcp.js:27:10)\n    at Object.<anonymous> (/tmp/tmp1_pfpjcp.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 1, 1, 1, 2,\n    1, 3, 1, 1, 1,\n    2\n  ],\n  expected: [\n    [ 0, 0 ],    [ 1 ],\n    [ 2 ],       [ 3 ],\n    [ 4, 4 ],    [ 5 ],\n    [ 6, 6, 6 ], [ 7 ],\n    [ 8 ],       [ 9 ],\n    [ 4, 4 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] === list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var count = 0;\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            count++;\n        }\n        else{\n            list2.push(list1[i]);\n            count = 0;\n        }\n    }\n    return list2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    0,\n    0\n  ],\n  [\n    1\n  ],\n  [\n    2\n  ],\n  [\n    3\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    5\n  ],\n  [\n    6,\n    6,\n    6\n  ],\n  [\n    7\n  ],\n  [\n    8\n  ],\n  [\n    9\n  ],\n  [\n    4,\n    4\n  ]\n]\n    at test (/tmp/tmps4oqzwbj.js:21:10)\n    at Object.<anonymous> (/tmp/tmps4oqzwbj.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 2, 3, 4,\n    5, 6, 7, 8, 9,\n    4\n  ],\n  expected: [\n    [ 0, 0 ],    [ 1 ],\n    [ 2 ],       [ 3 ],\n    [ 4, 4 ],    [ 5 ],\n    [ 6, 6, 6 ], [ 7 ],\n    [ 8 ],       [ 9 ],\n    [ 4, 4 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    var list5 = [];\n    var list6 = [];\n    var list7 = [];\n    var list8 = [];\n    var list9 = [];\n    var list10 = [];\n    var list11 = [];\n    var list12 = [];\n    var list13 = [];\n    var list14 = [];\n    var list15 = [];\n    var list16 = [];\n    var list17 = [];\n    var list18 = [];\n    var list19 = [];\n    var list20 = [];\n    var list21 = [];\n    var list22 = [];\n    var list23 = [];\n    var list24 = [];\n    var list25 = [];\n    var list26 = [];\n    var list27 = [];\n    var list28 = [];\n    var list29 = [];\n    var list30 = [];\n    var list31 = [];\n    var list32 = [];\n    var list33 = [];\n    var list34 = [];\n    var list35 = [];\n    var list36 = [];\n    var list37 = [];\n    var list38 = [];\n    var list39 = [];\n    var list40 = [];\n    var list41 = [];\n    var list42 = [];\n    var list43 = [];\n    var list44 = [];\n    var list45 = [];\n    var list46 = [];\n    var list47 = [];\n    var list48 = [];\n    var list49 = [];\n    var list50 = [];\n    var list51 = [];\n    var list52 = [];\n    var list53 = [];\n    var list54 = [];\n    var list55 = [];\n    var list56 = [];\n    var list57 = [];\n    var list58 = [];\n    var list59 = [];\n    var list60 = [];\n    var list61 = [];\n    var list62 = [];\n    var list63 = [];\n    var list64 = [];\n    var list65 = [];\n    var list66 = [];\n    var list67 = [];\n    var list68 = [];\n    var list69 = [];\n    var list70 = [];\n    var list71 = [];\n    var list72 = [];\n    var list73 = [];\n    var list74 = [];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "/tmp/tmpyaznvg9c.js:87\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    for(var i = 0; i < list1.length; i++){\n        var count = 0;\n        for(var j = i; j < list1.length; j++){\n            if(list1[i] == list1[j]){\n                count++;\n            }\n            else{\n                break;\n            }\n        }\n        list2.push(list1.slice(i, i + count));\n        i = i + count - 1;\n    }\n    return list2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] === list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i=0; i<list1.length; i++){\n        if(list1[i] === list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    for(var i=0; i<list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    for(var i=0; i<list3.length; i++){\n        if(list3[i].length > 1){\n            list4.push(list3[i]);\n        }\n    }\n    return list4;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    0,\n    0\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    6,\n    6,\n    6\n  ],\n  [\n    4,\n    4\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    0,\n    0\n  ],\n  [\n    1\n  ],\n  [\n    2\n  ],\n  [\n    3\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    5\n  ],\n  [\n    6,\n    6,\n    6\n  ],\n  [\n    7\n  ],\n  [\n    8\n  ],\n  [\n    9\n  ],\n  [\n    4,\n    4\n  ]\n]\n    at test (/tmp/tmpahyqcb7t.js:28:10)\n    at Object.<anonymous> (/tmp/tmpahyqcb7t.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 0, 0 ], [ 4, 4 ], [ 6, 6, 6 ], [ 4, 4 ] ],\n  expected: [\n    [ 0, 0 ],    [ 1 ],\n    [ 2 ],       [ 3 ],\n    [ 4, 4 ],    [ 5 ],\n    [ 6, 6, 6 ], [ 7 ],\n    [ 8 ],       [ 9 ],\n    [ 4, 4 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    for(var i=0; i<list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var temp = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] === list1[i+1]){\n            temp.push(list1[i]);\n        }\n        else{\n            temp.push(list1[i]);\n            list2.push(temp);\n            temp = [];\n        }\n    }\n    return list2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    var list5 = [];\n    var list6 = [];\n    var list7 = [];\n    var list8 = [];\n    var list9 = [];\n    var list10 = [];\n    var list11 = [];\n    var list12 = [];\n    var list13 = [];\n    var list14 = [];\n    var list15 = [];\n    var list16 = [];\n    var list17 = [];\n    var list18 = [];\n    var list19 = [];\n    var list20 = [];\n    var list21 = [];\n    var list22 = [];\n    var list23 = [];\n    var list24 = [];\n    var list25 = [];\n    var list26 = [];\n    var list27 = [];\n    var list28 = [];\n    var list29 = [];\n    var list30 = [];\n    var list31 = [];\n    var list32 = [];\n    var list33 = [];\n    var list34 = [];\n    var list35 = [];\n    var list36 = [];\n    var list37 = [];\n    var list38 = [];\n    var list39 = [];\n    var list40 = [];\n    var list41 = [];\n    var list42 = [];\n    var list43 = [];\n    var list44 = [];\n    var list45 = [];\n    var list46 = [];\n    var list47 = [];\n    var list48 = [];\n    var list49 = [];\n    var list50 = [];\n    var list51 = [];\n    var list52 = [];\n    var list53 = [];\n    var list54 = [];\n    var list55 = [];\n    var list56 = [];\n    var list57 = [];\n    var list58 = [];\n    var list59 = [];\n    var list60 = [];\n    var list61 = [];\n    var list62 = [];\n    var list63 = [];\n    var list64 = [];\n    var list65 = [];\n    var list66 = [];\n    var list67 = [];\n    var list68 = [];\n    var list69 = [];\n    var list70 = [];\n    var list71 = [];\n    var list72 = [];\n    var list73 = [];\n    var list74 = [];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "/tmp/tmpyaznvg9c.js:87\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var result = [];\n    var temp = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] === list1[i+1]){\n            temp.push(list1[i]);\n        }\n        else{\n            temp.push(list1[i]);\n            result.push(temp);\n            temp = [];\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] != list1[i+1]){\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n        else{\n            list2.push(list1[i]);\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    var list5 = [];\n    var list6 = [];\n    var list7 = [];\n    var list8 = [];\n    var list9 = [];\n    var list10 = [];\n    var list11 = [];\n    var list12 = [];\n    var list13 = [];\n    var list14 = [];\n    var list15 = [];\n    var list16 = [];\n    var list17 = [];\n    var list18 = [];\n    var list19 = [];\n    var list20 = [];\n    var list21 = [];\n    var list22 = [];\n    var list23 = [];\n    var list24 = [];\n    var list25 = [];\n    var list26 = [];\n    var list27 = [];\n    var list28 = [];\n    var list29 = [];\n    var list30 = [];\n    var list31 = [];\n    var list32 = [];\n    var list33 = [];\n    var list34 = [];\n    var list35 = [];\n    var list36 = [];\n    var list37 = [];\n    var list38 = [];\n    var list39 = [];\n    var list40 = [];\n    var list41 = [];\n    var list42 = [];\n    var list43 = [];\n    var list44 = [];\n    var list45 = [];\n    var list46 = [];\n    var list47 = [];\n    var list48 = [];\n    var list49 = [];\n    var list50 = [];\n    var list51 = [];\n    var list52 = [];\n    var list53 = [];\n    var list54 = [];\n    var list55 = [];\n    var list56 = [];\n    var list57 = [];\n    var list58 = [];\n    var list59 = [];\n    var list60 = [];\n    var list61 = [];\n    var list62 = [];\n    var list63 = [];\n    var list64 = [];\n    var list65 = [];\n    var list66 = [];\n    var list67 = [];\n    var list68 = [];\n    var list69 = [];\n    var list70 = [];\n    var list71 = [];\n    var list72 = [];\n    var list73 = [];\n    var list74 = [];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "/tmp/tmpyaznvg9c.js:87\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var temp = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            temp.push(list1[i]);\n        }\n        else{\n            temp.push(list1[i]);\n            list2.push(temp);\n            temp = [];\n        }\n    }\n    return list2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var count = 0;\n    var i = 0;\n    while(i < list1.length){\n        if(list1[i] == list1[i+1]){\n            count++;\n        }\n        else{\n            list2.push(list1[i]);\n            count = 0;\n        }\n        i++;\n    }\n    return list2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    0,\n    0\n  ],\n  [\n    1\n  ],\n  [\n    2\n  ],\n  [\n    3\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    5\n  ],\n  [\n    6,\n    6,\n    6\n  ],\n  [\n    7\n  ],\n  [\n    8\n  ],\n  [\n    9\n  ],\n  [\n    4,\n    4\n  ]\n]\n    at test (/tmp/tmpy2_wonap.js:23:10)\n    at Object.<anonymous> (/tmp/tmpy2_wonap.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 2, 3, 4,\n    5, 6, 7, 8, 9,\n    4\n  ],\n  expected: [\n    [ 0, 0 ],    [ 1 ],\n    [ 2 ],       [ 3 ],\n    [ 4, 4 ],    [ 5 ],\n    [ 6, 6, 6 ], [ 7 ],\n    [ 8 ],       [ 9 ],\n    [ 4, 4 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    var list5 = [];\n    var list6 = [];\n    var list7 = [];\n    var list8 = [];\n    var list9 = [];\n    var list10 = [];\n    var list11 = [];\n    var list12 = [];\n    var list13 = [];\n    var list14 = [];\n    var list15 = [];\n    var list16 = [];\n    var list17 = [];\n    var list18 = [];\n    var list19 = [];\n    var list20 = [];\n    var list21 = [];\n    var list22 = [];\n    var list23 = [];\n    var list24 = [];\n    var list25 = [];\n    var list26 = [];\n    var list27 = [];\n    var list28 = [];\n    var list29 = [];\n    var list30 = [];\n    var list31 = [];\n    var list32 = [];\n    var list33 = [];\n    var list34 = [];\n    var list35 = [];\n    var list36 = [];\n    var list37 = [];\n    var list38 = [];\n    var list39 = [];\n    var list40 = [];\n    var list41 = [];\n    var list42 = [];\n    var list43 = [];\n    var list44 = [];\n    var list45 = [];\n    var list46 = [];\n    var list47 = [];\n    var list48 = [];\n    var list49 = [];\n    var list50 = [];\n    var list51 = [];\n    var list52 = [];\n    var list53 = [];\n    var list54 = [];\n    var list55 = [];\n    var list56 = [];\n    var list57 = [];\n    var list58 = [];\n    var list59 = [];\n    var list60 = [];\n    var list61 = [];\n    var list62 = [];\n    var list63 = [];\n    var list64 = [];\n    var list65 = [];\n    var list66 = [];\n    var list67 = [];\n    var list68 = [];\n    var list69 = [];\n    var list70 = [];\n    var list71 = [];\n    var list72 = [];\n    var list73 = [];\n    var list74 = [];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "/tmp/tmpyaznvg9c.js:87\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    var list5 = [];\n    var list6 = [];\n    var list7 = [];\n    var list8 = [];\n    var list9 = [];\n    var list10 = [];\n    var list11 = [];\n    var list12 = [];\n    var list13 = [];\n    var list14 = [];\n    var list15 = [];\n    var list16 = [];\n    var list17 = [];\n    var list18 = [];\n    var list19 = [];\n    var list20 = [];\n    var list21 = [];\n    var list22 = [];\n    var list23 = [];\n    var list24 = [];\n    var list25 = [];\n    var list26 = [];\n    var list27 = [];\n    var list28 = [];\n    var list29 = [];\n    var list30 = [];\n    var list31 = [];\n    var list32 = [];\n    var list33 = [];\n    var list34 = [];\n    var list35 = [];\n    var list36 = [];\n    var list37 = [];\n    var list38 = [];\n    var list39 = [];\n    var list40 = [];\n    var list41 = [];\n    var list42 = [];\n    var list43 = [];\n    var list44 = [];\n    var list45 = [];\n    var list46 = [];\n    var list47 = [];\n    var list48 = [];\n    var list49 = [];\n    var list50 = [];\n    var list51 = [];\n    var list52 = [];\n    var list53 = [];\n    var list54 = [];\n    var list55 = [];\n    var list56 = [];\n    var list57 = [];\n    var list58 = [];\n    var list59 = [];\n    var list60 = [];\n    var list61 = [];\n    var list62 = [];\n    var list63 = [];\n    var list64 = [];\n    var list65 = [];\n    var list66 = [];\n    var list67 = [];\n    var list68 = [];\n    var list69 = [];\n    var list70 = [];\n    var list71 = [];\n    var list72 = [];\n    var list73 = [];\n    var list74 = [];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "/tmp/tmpyaznvg9c.js:87\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var count = 0;\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            count++;\n        }\n        else{\n            list2.push(list1[i]);\n            count = 0;\n        }\n    }\n    return list2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    0,\n    0\n  ],\n  [\n    1\n  ],\n  [\n    2\n  ],\n  [\n    3\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    5\n  ],\n  [\n    6,\n    6,\n    6\n  ],\n  [\n    7\n  ],\n  [\n    8\n  ],\n  [\n    9\n  ],\n  [\n    4,\n    4\n  ]\n]\n    at test (/tmp/tmps4oqzwbj.js:21:10)\n    at Object.<anonymous> (/tmp/tmps4oqzwbj.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 2, 3, 4,\n    5, 6, 7, 8, 9,\n    4\n  ],\n  expected: [\n    [ 0, 0 ],    [ 1 ],\n    [ 2 ],       [ 3 ],\n    [ 4, 4 ],    [ 5 ],\n    [ 6, 6, 6 ], [ 7 ],\n    [ 8 ],       [ 9 ],\n    [ 4, 4 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    var list5 = [];\n    var list6 = [];\n    var list7 = [];\n    var list8 = [];\n    var list9 = [];\n    var list10 = [];\n    var list11 = [];\n    var list12 = [];\n    var list13 = [];\n    var list14 = [];\n    var list15 = [];\n    var list16 = [];\n    var list17 = [];\n    var list18 = [];\n    var list19 = [];\n    var list20 = [];\n    var list21 = [];\n    var list22 = [];\n    var list23 = [];\n    var list24 = [];\n    var list25 = [];\n    var list26 = [];\n    var list27 = [];\n    var list28 = [];\n    var list29 = [];\n    var list30 = [];\n    var list31 = [];\n    var list32 = [];\n    var list33 = [];\n    var list34 = [];\n    var list35 = [];\n    var list36 = [];\n    var list37 = [];\n    var list38 = [];\n    var list39 = [];\n    var list40 = [];\n    var list41 = [];\n    var list42 = [];\n    var list43 = [];\n    var list44 = [];\n    var list45 = [];\n    var list46 = [];\n    var list47 = [];\n    var list48 = [];\n    var list49 = [];\n    var list50 = [];\n    var list51 = [];\n    var list52 = [];\n    var list53 = [];\n    var list54 = [];\n    var list55 = [];\n    var list56 = [];\n    var list57 = [];\n    var list58 = [];\n    var list59 = [];\n    var list60 = [];\n    var list61 = [];\n    var list62 = [];\n    var list63 = [];\n    var list64 = [];\n    var list65 = [];\n    var list66 = [];\n    var list67 = [];\n    var list68 = [];\n    var list69 = [];\n    var list70 = [];\n    var list71 = [];\n    var list72 = [];\n    var list73 = [];\n    var list74 = [];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "/tmp/tmpyaznvg9c.js:87\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] === list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    var list5 = [];\n    var list6 = [];\n    var list7 = [];\n    var list8 = [];\n    var list9 = [];\n    var list10 = [];\n    var list11 = [];\n    var list12 = [];\n    var list13 = [];\n    var list14 = [];\n    var list15 = [];\n    var list16 = [];\n    var list17 = [];\n    var list18 = [];\n    var list19 = [];\n    var list20 = [];\n    var list21 = [];\n    var list22 = [];\n    var list23 = [];\n    var list24 = [];\n    var list25 = [];\n    var list26 = [];\n    var list27 = [];\n    var list28 = [];\n    var list29 = [];\n    var list30 = [];\n    var list31 = [];\n    var list32 = [];\n    var list33 = [];\n    var list34 = [];\n    var list35 = [];\n    var list36 = [];\n    var list37 = [];\n    var list38 = [];\n    var list39 = [];\n    var list40 = [];\n    var list41 = [];\n    var list42 = [];\n    var list43 = [];\n    var list44 = [];\n    var list45 = [];\n    var list46 = [];\n    var list47 = [];\n    var list48 = [];\n    var list49 = [];\n    var list50 = [];\n    var list51 = [];\n    var list52 = [];\n    var list53 = [];\n    var list54 = [];\n    var list55 = [];\n    var list56 = [];\n    var list57 = [];\n    var list58 = [];\n    var list59 = [];\n    var list60 = [];\n    var list61 = [];\n    var list62 = [];\n    var list63 = [];\n    var list64 = [];\n    var list65 = [];\n    var list66 = [];\n    var list67 = [];\n    var list68 = [];\n    var list69 = [];\n    var list70 = [];\n    var list71 = [];\n    var list72 = [];\n    var list73 = [];\n    var list74 = [];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "/tmp/tmpyaznvg9c.js:87\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    var list5 = [];\n    var list6 = [];\n    var list7 = [];\n    var list8 = [];\n    var list9 = [];\n    var list10 = [];\n    var list11 = [];\n    var list12 = [];\n    var list13 = [];\n    var list14 = [];\n    var list15 = [];\n    var list16 = [];\n    var list17 = [];\n    var list18 = [];\n    var list19 = [];\n    var list20 = [];\n    var list21 = [];\n    var list22 = [];\n    var list23 = [];\n    var list24 = [];\n    var list25 = [];\n    var list26 = [];\n    var list27 = [];\n    var list28 = [];\n    var list29 = [];\n    var list30 = [];\n    var list31 = [];\n    var list32 = [];\n    var list33 = [];\n    var list34 = [];\n    var list35 = [];\n    var list36 = [];\n    var list37 = [];\n    var list38 = [];\n    var list39 = [];\n    var list40 = [];\n    var list41 = [];\n    var list42 = [];\n    var list43 = [];\n    var list44 = [];\n    var list45 = [];\n    var list46 = [];\n    var list47 = [];\n    var list48 = [];\n    var list49 = [];\n    var list50 = [];\n    var list51 = [];\n    var list52 = [];\n    var list53 = [];\n    var list54 = [];\n    var list55 = [];\n    var list56 = [];\n    var list57 = [];\n    var list58 = [];\n    var list59 = [];\n    var list60 = [];\n    var list61 = [];\n    var list62 = [];\n    var list63 = [];\n    var list64 = [];\n    var list65 = [];\n    var list66 = [];\n    var list67 = [];\n    var list68 = [];\n    var list69 = [];\n    var list70 = [];\n    var list71 = [];\n    var list72 = [];\n    var list73 = [];\n    var list74 = [];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "/tmp/tmpyaznvg9c.js:87\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    var list5 = [];\n    var list6 = [];\n    var list7 = [];\n    var list8 = [];\n    var list9 = [];\n    var list10 = [];\n    var list11 = [];\n    var list12 = [];\n    var list13 = [];\n    var list14 = [];\n    var list15 = [];\n    var list16 = [];\n    var list17 = [];\n    var list18 = [];\n    var list19 = [];\n    var list20 = [];\n    var list21 = [];\n    var list22 = [];\n    var list23 = [];\n    var list24 = [];\n    var list25 = [];\n    var list26 = [];\n    var list27 = [];\n    var list28 = [];\n    var list29 = [];\n    var list30 = [];\n    var list31 = [];\n    var list32 = [];\n    var list33 = [];\n    var list34 = [];\n    var list35 = [];\n    var list36 = [];\n    var list37 = [];\n    var list38 = [];\n    var list39 = [];\n    var list40 = [];\n    var list41 = [];\n    var list42 = [];\n    var list43 = [];\n    var list44 = [];\n    var list45 = [];\n    var list46 = [];\n    var list47 = [];\n    var list48 = [];\n    var list49 = [];\n    var list50 = [];\n    var list51 = [];\n    var list52 = [];\n    var list53 = [];\n    var list54 = [];\n    var list55 = [];\n    var list56 = [];\n    var list57 = [];\n    var list58 = [];\n    var list59 = [];\n    var list60 = [];\n    var list61 = [];\n    var list62 = [];\n    var list63 = [];\n    var list64 = [];\n    var list65 = [];\n    var list66 = [];\n    var list67 = [];\n    var list68 = [];\n    var list69 = [];\n    var list70 = [];\n    var list71 = [];\n    var list72 = [];\n    var list73 = [];\n    var list74 = [];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "/tmp/tmpyaznvg9c.js:87\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var count = 0;\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            count++;\n        }\n        else{\n            list2.push(list1[i]);\n            count = 0;\n        }\n    }\n    return list2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    0,\n    0\n  ],\n  [\n    1\n  ],\n  [\n    2\n  ],\n  [\n    3\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    5\n  ],\n  [\n    6,\n    6,\n    6\n  ],\n  [\n    7\n  ],\n  [\n    8\n  ],\n  [\n    9\n  ],\n  [\n    4,\n    4\n  ]\n]\n    at test (/tmp/tmpsexydwtf.js:22:10)\n    at Object.<anonymous> (/tmp/tmpsexydwtf.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 2, 3, 4,\n    5, 6, 7, 8, 9,\n    4\n  ],\n  expected: [\n    [ 0, 0 ],    [ 1 ],\n    [ 2 ],       [ 3 ],\n    [ 4, 4 ],    [ 5 ],\n    [ 6, 6, 6 ], [ 7 ],\n    [ 8 ],       [ 9 ],\n    [ 4, 4 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [],\n        list3 = [],\n        list4 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    for(var j = 0; j < list3.length; j++){\n        if(list3[j].length > 1){\n            list4.push(list3[j]);\n        }\n    }\n    return list4;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    0,\n    0\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    6,\n    6,\n    6\n  ],\n  [\n    4,\n    4\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    0,\n    0\n  ],\n  [\n    1\n  ],\n  [\n    2\n  ],\n  [\n    3\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    5\n  ],\n  [\n    6,\n    6,\n    6\n  ],\n  [\n    7\n  ],\n  [\n    8\n  ],\n  [\n    9\n  ],\n  [\n    4,\n    4\n  ]\n]\n    at test (/tmp/tmpkpxxpr70.js:28:10)\n    at Object.<anonymous> (/tmp/tmpkpxxpr70.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 0, 0 ], [ 4, 4 ], [ 6, 6, 6 ], [ 4, 4 ] ],\n  expected: [\n    [ 0, 0 ],    [ 1 ],\n    [ 2 ],       [ 3 ],\n    [ 4, 4 ],    [ 5 ],\n    [ 6, 6, 6 ], [ 7 ],\n    [ 8 ],       [ 9 ],\n    [ 4, 4 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    var list5 = [];\n    var list6 = [];\n    var list7 = [];\n    var list8 = [];\n    var list9 = [];\n    var list10 = [];\n    var list11 = [];\n    var list12 = [];\n    var list13 = [];\n    var list14 = [];\n    var list15 = [];\n    var list16 = [];\n    var list17 = [];\n    var list18 = [];\n    var list19 = [];\n    var list20 = [];\n    var list21 = [];\n    var list22 = [];\n    var list23 = [];\n    var list24 = [];\n    var list25 = [];\n    var list26 = [];\n    var list27 = [];\n    var list28 = [];\n    var list29 = [];\n    var list30 = [];\n    var list31 = [];\n    var list32 = [];\n    var list33 = [];\n    var list34 = [];\n    var list35 = [];\n    var list36 = [];\n    var list37 = [];\n    var list38 = [];\n    var list39 = [];\n    var list40 = [];\n    var list41 = [];\n    var list42 = [];\n    var list43 = [];\n    var list44 = [];\n    var list45 = [];\n    var list46 = [];\n    var list47 = [];\n    var list48 = [];\n    var list49 = [];\n    var list50 = [];\n    var list51 = [];\n    var list52 = [];\n    var list53 = [];\n    var list54 = [];\n    var list55 = [];\n    var list56 = [];\n    var list57 = [];\n    var list58 = [];\n    var list59 = [];\n    var list60 = [];\n    var list61 = [];\n    var list62 = [];\n    var list63 = [];\n    var list64 = [];\n    var list65 = [];\n    var list66 = [];\n    var list67 = [];\n    var list68 = [];\n    var list69 = [];\n    var list70 = [];\n    var list71 = [];\n    var list72 = [];\n    var list73 = [];\n    var list74 = [];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "/tmp/tmpyaznvg9c.js:87\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var result = [];\n    var temp = [];\n    var prev = null;\n    for(var i=0;i<list1.length;i++){\n        if(list1[i]!==prev){\n            if(temp.length>0){\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if(temp.length>0){\n        result.push(temp);\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    var list5 = [];\n    var list6 = [];\n    var list7 = [];\n    var list8 = [];\n    var list9 = [];\n    var list10 = [];\n    var list11 = [];\n    var list12 = [];\n    var list13 = [];\n    var list14 = [];\n    var list15 = [];\n    var list16 = [];\n    var list17 = [];\n    var list18 = [];\n    var list19 = [];\n    var list20 = [];\n    var list21 = [];\n    var list22 = [];\n    var list23 = [];\n    var list24 = [];\n    var list25 = [];\n    var list26 = [];\n    var list27 = [];\n    var list28 = [];\n    var list29 = [];\n    var list30 = [];\n    var list31 = [];\n    var list32 = [];\n    var list33 = [];\n    var list34 = [];\n    var list35 = [];\n    var list36 = [];\n    var list37 = [];\n    var list38 = [];\n    var list39 = [];\n    var list40 = [];\n    var list41 = [];\n    var list42 = [];\n    var list43 = [];\n    var list44 = [];\n    var list45 = [];\n    var list46 = [];\n    var list47 = [];\n    var list48 = [];\n    var list49 = [];\n    var list50 = [];\n    var list51 = [];\n    var list52 = [];\n    var list53 = [];\n    var list54 = [];\n    var list55 = [];\n    var list56 = [];\n    var list57 = [];\n    var list58 = [];\n    var list59 = [];\n    var list60 = [];\n    var list61 = [];\n    var list62 = [];\n    var list63 = [];\n    var list64 = [];\n    var list65 = [];\n    var list66 = [];\n    var list67 = [];\n    var list68 = [];\n    var list69 = [];\n    var list70 = [];\n    var list71 = [];\n    var list72 = [];\n    var list73 = [];\n    var list74 = [];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "/tmp/tmpyaznvg9c.js:87\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var count = 0;\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            count++;\n        }\n        else{\n            list2.push(list1[i]);\n            count = 0;\n        }\n    }\n    return list2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    0,\n    0\n  ],\n  [\n    1\n  ],\n  [\n    2\n  ],\n  [\n    3\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    5\n  ],\n  [\n    6,\n    6,\n    6\n  ],\n  [\n    7\n  ],\n  [\n    8\n  ],\n  [\n    9\n  ],\n  [\n    4,\n    4\n  ]\n]\n    at test (/tmp/tmps4oqzwbj.js:21:10)\n    at Object.<anonymous> (/tmp/tmps4oqzwbj.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 2, 3, 4,\n    5, 6, 7, 8, 9,\n    4\n  ],\n  expected: [\n    [ 0, 0 ],    [ 1 ],\n    [ 2 ],       [ 3 ],\n    [ 4, 4 ],    [ 5 ],\n    [ 6, 6, 6 ], [ 7 ],\n    [ 8 ],       [ 9 ],\n    [ 4, 4 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i] != list1[i+1]){\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n        else{\n            list2.push(list1[i]);\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] === list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    for(var j = 0; j < list3.length; j++){\n        if(list3[j].length > 1){\n            list4.push(list3[j]);\n        }\n    }\n    return list4;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    0,\n    0\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    6,\n    6,\n    6\n  ],\n  [\n    4,\n    4\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    0,\n    0\n  ],\n  [\n    1\n  ],\n  [\n    2\n  ],\n  [\n    3\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    5\n  ],\n  [\n    6,\n    6,\n    6\n  ],\n  [\n    7\n  ],\n  [\n    8\n  ],\n  [\n    9\n  ],\n  [\n    4,\n    4\n  ]\n]\n    at test (/tmp/tmpc6ndom74.js:28:10)\n    at Object.<anonymous> (/tmp/tmpc6ndom74.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 0, 0 ], [ 4, 4 ], [ 6, 6, 6 ], [ 4, 4 ] ],\n  expected: [\n    [ 0, 0 ],    [ 1 ],\n    [ 2 ],       [ 3 ],\n    [ 4, 4 ],    [ 5 ],\n    [ 6, 6, 6 ], [ 7 ],\n    [ 8 ],       [ 9 ],\n    [ 4, 4 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i=0; i<list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] === list1[i+1]){\n            list2.push(list1[i]);\n        }else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] === list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n\tvar list2 = [];\n\tvar list3 = [];\n\tfor(var i = 0; i < list1.length; i++){\n\t\tif(list1[i] == list1[i+1]){\n\t\t\tlist2.push(list1[i]);\n\t\t}\n\t\telse{\n\t\t\tlist2.push(list1[i]);\n\t\t\tlist3.push(list2);\n\t\t\tlist2 = [];\n\t\t}\n\t}\n\treturn list3;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    var list5 = [];\n    var list6 = [];\n    var list7 = [];\n    var list8 = [];\n    var list9 = [];\n    var list10 = [];\n    var list11 = [];\n    var list12 = [];\n    var list13 = [];\n    var list14 = [];\n    var list15 = [];\n    var list16 = [];\n    var list17 = [];\n    var list18 = [];\n    var list19 = [];\n    var list20 = [];\n    var list21 = [];\n    var list22 = [];\n    var list23 = [];\n    var list24 = [];\n    var list25 = [];\n    var list26 = [];\n    var list27 = [];\n    var list28 = [];\n    var list29 = [];\n    var list30 = [];\n    var list31 = [];\n    var list32 = [];\n    var list33 = [];\n    var list34 = [];\n    var list35 = [];\n    var list36 = [];\n    var list37 = [];\n    var list38 = [];\n    var list39 = [];\n    var list40 = [];\n    var list41 = [];\n    var list42 = [];\n    var list43 = [];\n    var list44 = [];\n    var list45 = [];\n    var list46 = [];\n    var list47 = [];\n    var list48 = [];\n    var list49 = [];\n    var list50 = [];\n    var list51 = [];\n    var list52 = [];\n    var list53 = [];\n    var list54 = [];\n    var list55 = [];\n    var list56 = [];\n    var list57 = [];\n    var list58 = [];\n    var list59 = [];\n    var list60 = [];\n    var list61 = [];\n    var list62 = [];\n    var list63 = [];\n    var list64 = [];\n    var list65 = [];\n    var list66 = [];\n    var list67 = [];\n    var list68 = [];\n    var list69 = [];\n    var list70 = [];\n    var list71 = [];\n    var list72 = [];\n    var list73 = [];\n    var list74 = [];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "/tmp/tmpyaznvg9c.js:87\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] !== list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    0\n  ],\n  [\n    0,\n    1,\n    2,\n    3,\n    4\n  ],\n  [\n    4,\n    5,\n    6\n  ],\n  [\n    6\n  ],\n  [\n    6,\n    7,\n    8,\n    9,\n    4\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    0,\n    0\n  ],\n  [\n    1\n  ],\n  [\n    2\n  ],\n  [\n    3\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    5\n  ],\n  [\n    6,\n    6,\n    6\n  ],\n  [\n    7\n  ],\n  [\n    8\n  ],\n  [\n    9\n  ],\n  [\n    4,\n    4\n  ]\n]\n    at test (/tmp/tmprhxryeor.js:22:10)\n    at Object.<anonymous> (/tmp/tmprhxryeor.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 0 ], [ 0, 1, 2, 3, 4 ], [ 4, 5, 6 ], [ 6 ], [ 6, 7, 8, 9, 4 ] ],\n  expected: [\n    [ 0, 0 ],    [ 1 ],\n    [ 2 ],       [ 3 ],\n    [ 4, 4 ],    [ 5 ],\n    [ 6, 6, 6 ], [ 7 ],\n    [ 8 ],       [ 9 ],\n    [ 4, 4 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\n\nvar list1 = [1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    var list5 = [];\n    var list6 = [];\n    var list7 = [];\n    var list8 = [];\n    var list9 = [];\n    var list10 = [];\n    var list11 = [];\n    var list12 = [];\n    var list13 = [];\n    var list14 = [];\n    var list15 = [];\n    var list16 = [];\n    var list17 = [];\n    var list18 = [];\n    var list19 = [];\n    var list20 = [];\n    var list21 = [];\n    var list22 = [];\n    var list23 = [];\n    var list24 = [];\n    var list25 = [];\n    var list26 = [];\n    var list27 = [];\n    var list28 = [];\n    var list29 = [];\n    var list30 = [];\n    var list31 = [];\n    var list32 = [];\n    var list33 = [];\n    var list34 = [];\n    var list35 = [];\n    var list36 = [];\n    var list37 = [];\n    var list38 = [];\n    var list39 = [];\n    var list40 = [];\n    var list41 = [];\n    var list42 = [];\n    var list43 = [];\n    var list44 = [];\n    var list45 = [];\n    var list46 = [];\n    var list47 = [];\n    var list48 = [];\n    var list49 = [];\n    var list50 = [];\n    var list51 = [];\n    var list52 = [];\n    var list53 = [];\n    var list54 = [];\n    var list55 = [];\n    var list56 = [];\n    var list57 = [];\n    var list58 = [];\n    var list59 = [];\n    var list60 = [];\n    var list61 = [];\n    var list62 = [];\n    var list63 = [];\n    var list64 = [];\n    var list65 = [];\n    var list66 = [];\n    var list67 = [];\n    var list68 = [];\n    var list69 = [];\n    var list70 = [];\n    var list71 = [];\n    var list72 = [];\n    var list73 = [];\n    var list74 = [];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "/tmp/tmpyaznvg9c.js:87\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    for(var i=0; i<list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    for(var j=0; j<list3.length; j++){\n        if(list3[j].length > 1){\n            list4.push(list3[j]);\n        }\n    }\n    return list4;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    0,\n    0\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    6,\n    6,\n    6\n  ],\n  [\n    4,\n    4\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    0,\n    0\n  ],\n  [\n    1\n  ],\n  [\n    2\n  ],\n  [\n    3\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    5\n  ],\n  [\n    6,\n    6,\n    6\n  ],\n  [\n    7\n  ],\n  [\n    8\n  ],\n  [\n    9\n  ],\n  [\n    4,\n    4\n  ]\n]\n    at test (/tmp/tmpq0eyahl5.js:28:10)\n    at Object.<anonymous> (/tmp/tmpq0eyahl5.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 0, 0 ], [ 4, 4 ], [ 6, 6, 6 ], [ 4, 4 ] ],\n  expected: [\n    [ 0, 0 ],    [ 1 ],\n    [ 2 ],       [ 3 ],\n    [ 4, 4 ],    [ 5 ],\n    [ 6, 6, 6 ], [ 7 ],\n    [ 8 ],       [ 9 ],\n    [ 4, 4 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i=0; i<list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    var list5 = [];\n    var list6 = [];\n    var list7 = [];\n    var list8 = [];\n    var list9 = [];\n    var list10 = [];\n    var list11 = [];\n    var list12 = [];\n    var list13 = [];\n    var list14 = [];\n    var list15 = [];\n    var list16 = [];\n    var list17 = [];\n    var list18 = [];\n    var list19 = [];\n    var list20 = [];\n    var list21 = [];\n    var list22 = [];\n    var list23 = [];\n    var list24 = [];\n    var list25 = [];\n    var list26 = [];\n    var list27 = [];\n    var list28 = [];\n    var list29 = [];\n    var list30 = [];\n    var list31 = [];\n    var list32 = [];\n    var list33 = [];\n    var list34 = [];\n    var list35 = [];\n    var list36 = [];\n    var list37 = [];\n    var list38 = [];\n    var list39 = [];\n    var list40 = [];\n    var list41 = [];\n    var list42 = [];\n    var list43 = [];\n    var list44 = [];\n    var list45 = [];\n    var list46 = [];\n    var list47 = [];\n    var list48 = [];\n    var list49 = [];\n    var list50 = [];\n    var list51 = [];\n    var list52 = [];\n    var list53 = [];\n    var list54 = [];\n    var list55 = [];\n    var list56 = [];\n    var list57 = [];\n    var list58 = [];\n    var list59 = [];\n    var list60 = [];\n    var list61 = [];\n    var list62 = [];\n    var list63 = [];\n    var list64 = [];\n    var list65 = [];\n    var list66 = [];\n    var list67 = [];\n    var list68 = [];\n    var list69 = [];\n    var list70 = [];\n    var list71 = [];\n    var list72 = [];\n    var list73 = [];\n    var list74 = [];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "/tmp/tmpyaznvg9c.js:87\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var temp = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            temp.push(list1[i]);\n        }\n        else{\n            temp.push(list1[i]);\n            list2.push(temp);\n            temp = [];\n        }\n    }\n    return list2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var temp = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] === list1[i+1]){\n            temp.push(list1[i]);\n        }\n        else{\n            temp.push(list1[i]);\n            list2.push(temp);\n            temp = [];\n        }\n    }\n    return list2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] === list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    var list5 = [];\n    var list6 = [];\n    var list7 = [];\n    var list8 = [];\n    var list9 = [];\n    var list10 = [];\n    var list11 = [];\n    var list12 = [];\n    var list13 = [];\n    var list14 = [];\n    var list15 = [];\n    var list16 = [];\n    var list17 = [];\n    var list18 = [];\n    var list19 = [];\n    var list20 = [];\n    var list21 = [];\n    var list22 = [];\n    var list23 = [];\n    var list24 = [];\n    var list25 = [];\n    var list26 = [];\n    var list27 = [];\n    var list28 = [];\n    var list29 = [];\n    var list30 = [];\n    var list31 = [];\n    var list32 = [];\n    var list33 = [];\n    var list34 = [];\n    var list35 = [];\n    var list36 = [];\n    var list37 = [];\n    var list38 = [];\n    var list39 = [];\n    var list40 = [];\n    var list41 = [];\n    var list42 = [];\n    var list43 = [];\n    var list44 = [];\n    var list45 = [];\n    var list46 = [];\n    var list47 = [];\n    var list48 = [];\n    var list49 = [];\n    var list50 = [];\n    var list51 = [];\n    var list52 = [];\n    var list53 = [];\n    var list54 = [];\n    var list55 = [];\n    var list56 = [];\n    var list57 = [];\n    var list58 = [];\n    var list59 = [];\n    var list60 = [];\n    var list61 = [];\n    var list62 = [];\n    var list63 = [];\n    var list64 = [];\n    var list65 = [];\n    var list66 = [];\n    var list67 = [];\n    var list68 = [];\n    var list69 = [];\n    var list70 = [];\n    var list71 = [];\n    var list72 = [];\n    var list73 = [];\n    var list74 = [];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "/tmp/tmpyaznvg9c.js:87\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var temp = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            temp.push(list1[i]);\n        }\n        else{\n            temp.push(list1[i]);\n            list2.push(temp);\n            temp = [];\n        }\n    }\n    return list2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var count = 0;\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            count++;\n        }\n        else{\n            list2.push(list1[i]);\n            count = 0;\n        }\n    }\n    return list2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    0,\n    0\n  ],\n  [\n    1\n  ],\n  [\n    2\n  ],\n  [\n    3\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    5\n  ],\n  [\n    6,\n    6,\n    6\n  ],\n  [\n    7\n  ],\n  [\n    8\n  ],\n  [\n    9\n  ],\n  [\n    4,\n    4\n  ]\n]\n    at test (/tmp/tmps4oqzwbj.js:21:10)\n    at Object.<anonymous> (/tmp/tmps4oqzwbj.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 2, 3, 4,\n    5, 6, 7, 8, 9,\n    4\n  ],\n  expected: [\n    [ 0, 0 ],    [ 1 ],\n    [ 2 ],       [ 3 ],\n    [ 4, 4 ],    [ 5 ],\n    [ 6, 6, 6 ], [ 7 ],\n    [ 8 ],       [ 9 ],\n    [ 4, 4 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    var list5 = [];\n    var list6 = [];\n    var list7 = [];\n    var list8 = [];\n    var list9 = [];\n    var list10 = [];\n    var list11 = [];\n    var list12 = [];\n    var list13 = [];\n    var list14 = [];\n    var list15 = [];\n    var list16 = [];\n    var list17 = [];\n    var list18 = [];\n    var list19 = [];\n    var list20 = [];\n    var list21 = [];\n    var list22 = [];\n    var list23 = [];\n    var list24 = [];\n    var list25 = [];\n    var list26 = [];\n    var list27 = [];\n    var list28 = [];\n    var list29 = [];\n    var list30 = [];\n    var list31 = [];\n    var list32 = [];\n    var list33 = [];\n    var list34 = [];\n    var list35 = [];\n    var list36 = [];\n    var list37 = [];\n    var list38 = [];\n    var list39 = [];\n    var list40 = [];\n    var list41 = [];\n    var list42 = [];\n    var list43 = [];\n    var list44 = [];\n    var list45 = [];\n    var list46 = [];\n    var list47 = [];\n    var list48 = [];\n    var list49 = [];\n    var list50 = [];\n    var list51 = [];\n    var list52 = [];\n    var list53 = [];\n    var list54 = [];\n    var list55 = [];\n    var list56 = [];\n    var list57 = [];\n    var list58 = [];\n    var list59 = [];\n    var list60 = [];\n    var list61 = [];\n    var list62 = [];\n    var list63 = [];\n    var list64 = [];\n    var list65 = [];\n    var list66 = [];\n    var list67 = [];\n    var list68 = [];\n    var list69 = [];\n    var list70 = [];\n    var list71 = [];\n    var list72 = [];\n    var list73 = [];\n    var list74 = [];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "/tmp/tmpyaznvg9c.js:87\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    var list5 = [];\n    var list6 = [];\n    var list7 = [];\n    var list8 = [];\n    var list9 = [];\n    var list10 = [];\n    var list11 = [];\n    var list12 = [];\n    var list13 = [];\n    var list14 = [];\n    var list15 = [];\n    var list16 = [];\n    var list17 = [];\n    var list18 = [];\n    var list19 = [];\n    var list20 = [];\n    var list21 = [];\n    var list22 = [];\n    var list23 = [];\n    var list24 = [];\n    var list25 = [];\n    var list26 = [];\n    var list27 = [];\n    var list28 = [];\n    var list29 = [];\n    var list30 = [];\n    var list31 = [];\n    var list32 = [];\n    var list33 = [];\n    var list34 = [];\n    var list35 = [];\n    var list36 = [];\n    var list37 = [];\n    var list38 = [];\n    var list39 = [];\n    var list40 = [];\n    var list41 = [];\n    var list42 = [];\n    var list43 = [];\n    var list44 = [];\n    var list45 = [];\n    var list46 = [];\n    var list47 = [];\n    var list48 = [];\n    var list49 = [];\n    var list50 = [];\n    var list51 = [];\n    var list52 = [];\n    var list53 = [];\n    var list54 = [];\n    var list55 = [];\n    var list56 = [];\n    var list57 = [];\n    var list58 = [];\n    var list59 = [];\n    var list60 = [];\n    var list61 = [];\n    var list62 = [];\n    var list63 = [];\n    var list64 = [];\n    var list65 = [];\n    var list66 = [];\n    var list67 = [];\n    var list68 = [];\n    var list69 = [];\n    var list70 = [];\n    var list71 = [];\n    var list72 = [];\n    var list73 = [];\n    var list74 = [];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "/tmp/tmpyaznvg9c.js:87\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] != list1[i+1]){\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n        else{\n            list2.push(list1[i]);\n        }\n    }\n    return list3;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2=[];\n    var list3=[];\n    var list4=[];\n    var list5=[];\n    var list6=[];\n    var list7=[];\n    var list8=[];\n    var list9=[];\n    var list10=[];\n    var list11=[];\n    var list12=[];\n    var list13=[];\n    var list14=[];\n    var list15=[];\n    var list16=[];\n    var list17=[];\n    var list18=[];\n    var list19=[];\n    var list20=[];\n    var list21=[];\n    var list22=[];\n    var list23=[];\n    var list24=[];\n    var list25=[];\n    var list26=[];\n    var list27=[];\n    var list28=[];\n    var list29=[];\n    var list30=[];\n    var list31=[];\n    var list32=[];\n    var list33=[];\n    var list34=[];\n    var list35=[];\n    var list36=[];\n    var list37=[];\n    var list38=[];\n    var list39=[];\n    var list40=[];\n    var list41=[];\n    var list42=[];\n    var list43=[];\n    var list44=[];\n    var list45=[];\n    var list46=[];\n    var list47=[];\n    var list48=[];\n    var list49=[];\n    var list50=[];\n    var list51=[];\n    var list52=[];\n    var list53=[];\n    var list54=[];\n    var list55=[];\n    var list56=[];\n    var list57=[];\n    var list58=[];\n    var list59=[];\n    var list60=[];\n    var list61=[];\n    var list62=[];\n    var list63=[];\n    var list64=[];\n    var list65=[];\n    var list66=[];\n    var list67=[];\n    var list68=[];\n    var list69=[];\n    var list70=[];\n    var list71=[];\n    var list72=[];\n    var list73=[];\n    var list74=[];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "/tmp/tmpmbhchp3v.js:87\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    for (var i = 0; i < list1.length; i++){\n        if (list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    for (var i = 0; i < list3.length; i++){\n        if (list3[i].length > 1){\n            list4.push(list3[i]);\n        }\n    }\n    return list4;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    0,\n    0\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    6,\n    6,\n    6\n  ],\n  [\n    4,\n    4\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    0,\n    0\n  ],\n  [\n    1\n  ],\n  [\n    2\n  ],\n  [\n    3\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    5\n  ],\n  [\n    6,\n    6,\n    6\n  ],\n  [\n    7\n  ],\n  [\n    8\n  ],\n  [\n    9\n  ],\n  [\n    4,\n    4\n  ]\n]\n    at test (/tmp/tmp76wk9sfs.js:28:10)\n    at Object.<anonymous> (/tmp/tmp76wk9sfs.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 0, 0 ], [ 4, 4 ], [ 6, 6, 6 ], [ 4, 4 ] ],\n  expected: [\n    [ 0, 0 ],    [ 1 ],\n    [ 2 ],       [ 3 ],\n    [ 4, 4 ],    [ 5 ],\n    [ 6, 6, 6 ], [ 7 ],\n    [ 8 ],       [ 9 ],\n    [ 4, 4 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n  var list2 = [];\n  var list3 = [];\n  var list4 = [];\n  var list5 = [];\n  var list6 = [];\n  var list7 = [];\n  var list8 = [];\n  var list9 = [];\n  var list10 = [];\n  var list11 = [];\n  var list12 = [];\n  var list13 = [];\n  var list14 = [];\n  var list15 = [];\n  var list16 = [];\n  var list17 = [];\n  var list18 = [];\n  var list19 = [];\n  var list20 = [];\n  var list21 = [];\n  var list22 = [];\n  var list23 = [];\n  var list24 = [];\n  var list25 = [];\n  var list26 = [];\n  var list27 = [];\n  var list28 = [];\n  var list29 = [];\n  var list30 = [];\n  var list31 = [];\n  var list32 = [];\n  var list33 = [];\n  var list34 = [];\n  var list35 = [];\n  var list36 = [];\n  var list37 = [];\n  var list38 = [];\n  var list39 = [];\n  var list40 = [];\n  var list41 = [];\n  var list42 = [];\n  var list43 = [];\n  var list44 = [];\n  var list45 = [];\n  var list46 = [];\n  var list47 = [];\n  var list48 = [];\n  var list49 = [];\n  var list50 = [];\n  var list51 = [];\n  var list52 = [];\n  var list53 = [];\n  var list54 = [];\n  var list55 = [];\n  var list56 = [];\n  var list57 = [];\n  var list58 = [];\n  var list59 = [];\n  var list60 = [];\n  var list61 = [];\n  var list62 = [];\n  var list63 = [];\n  var list64 = [];\n  var list65 = [];\n  var list66 = [];\n  var list67 = [];\n  var list68 = [];\n  var list69 = [];\n  var list70 = [];\n  var list71 = [];\n  var list72 = [];\n  var list73 = [];\n  var list74 = [];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "/tmp/tmpmy6iwcwh.js:87\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    var list5 = [];\n    var list6 = [];\n    var list7 = [];\n    var list8 = [];\n    var list9 = [];\n    var list10 = [];\n    var list11 = [];\n    var list12 = [];\n    var list13 = [];\n    var list14 = [];\n    var list15 = [];\n    var list16 = [];\n    var list17 = [];\n    var list18 = [];\n    var list19 = [];\n    var list20 = [];\n    var list21 = [];\n    var list22 = [];\n    var list23 = [];\n    var list24 = [];\n    var list25 = [];\n    var list26 = [];\n    var list27 = [];\n    var list28 = [];\n    var list29 = [];\n    var list30 = [];\n    var list31 = [];\n    var list32 = [];\n    var list33 = [];\n    var list34 = [];\n    var list35 = [];\n    var list36 = [];\n    var list37 = [];\n    var list38 = [];\n    var list39 = [];\n    var list40 = [];\n    var list41 = [];\n    var list42 = [];\n    var list43 = [];\n    var list44 = [];\n    var list45 = [];\n    var list46 = [];\n    var list47 = [];\n    var list48 = [];\n    var list49 = [];\n    var list50 = [];\n    var list51 = [];\n    var list52 = [];\n    var list53 = [];\n    var list54 = [];\n    var list55 = [];\n    var list56 = [];\n    var list57 = [];\n    var list58 = [];\n    var list59 = [];\n    var list60 = [];\n    var list61 = [];\n    var list62 = [];\n    var list63 = [];\n    var list64 = [];\n    var list65 = [];\n    var list66 = [];\n    var list67 = [];\n    var list68 = [];\n    var list69 = [];\n    var list70 = [];\n    var list71 = [];\n    var list72 = [];\n    var list73 = [];\n    var list74 = [];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "/tmp/tmpyaznvg9c.js:87\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    var list5 = [];\n    var list6 = [];\n    var list7 = [];\n    var list8 = [];\n    var list9 = [];\n    var list10 = [];\n    var list11 = [];\n    var list12 = [];\n    var list13 = [];\n    var list14 = [];\n    var list15 = [];\n    var list16 = [];\n    var list17 = [];\n    var list18 = [];\n    var list19 = [];\n    var list20 = [];\n    var list21 = [];\n    var list22 = [];\n    var list23 = [];\n    var list24 = [];\n    var list25 = [];\n    var list26 = [];\n    var list27 = [];\n    var list28 = [];\n    var list29 = [];\n    var list30 = [];\n    var list31 = [];\n    var list32 = [];\n    var list33 = [];\n    var list34 = [];\n    var list35 = [];\n    var list36 = [];\n    var list37 = [];\n    var list38 = [];\n    var list39 = [];\n    var list40 = [];\n    var list41 = [];\n    var list42 = [];\n    var list43 = [];\n    var list44 = [];\n    var list45 = [];\n    var list46 = [];\n    var list47 = [];\n    var list48 = [];\n    var list49 = [];\n    var list50 = [];\n    var list51 = [];\n    var list52 = [];\n    var list53 = [];\n    var list54 = [];\n    var list55 = [];\n    var list56 = [];\n    var list57 = [];\n    var list58 = [];\n    var list59 = [];\n    var list60 = [];\n    var list61 = [];\n    var list62 = [];\n    var list63 = [];\n    var list64 = [];\n    var list65 = [];\n    var list66 = [];\n    var list67 = [];\n    var list68 = [];\n    var list69 = [];\n    var list70 = [];\n    var list71 = [];\n    var list72 = [];\n    var list73 = [];\n    var list74 = [];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "/tmp/tmpyaznvg9c.js:87\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    var list5 = [];\n    var list6 = [];\n    var list7 = [];\n    var list8 = [];\n    var list9 = [];\n    var list10 = [];\n    var list11 = [];\n    var list12 = [];\n    var list13 = [];\n    var list14 = [];\n    var list15 = [];\n    var list16 = [];\n    var list17 = [];\n    var list18 = [];\n    var list19 = [];\n    var list20 = [];\n    var list21 = [];\n    var list22 = [];\n    var list23 = [];\n    var list24 = [];\n    var list25 = [];\n    var list26 = [];\n    var list27 = [];\n    var list28 = [];\n    var list29 = [];\n    var list30 = [];\n    var list31 = [];\n    var list32 = [];\n    var list33 = [];\n    var list34 = [];\n    var list35 = [];\n    var list36 = [];\n    var list37 = [];\n    var list38 = [];\n    var list39 = [];\n    var list40 = [];\n    var list41 = [];\n    var list42 = [];\n    var list43 = [];\n    var list44 = [];\n    var list45 = [];\n    var list46 = [];\n    var list47 = [];\n    var list48 = [];\n    var list49 = [];\n    var list50 = [];\n    var list51 = [];\n    var list52 = [];\n    var list53 = [];\n    var list54 = [];\n    var list55 = [];\n    var list56 = [];\n    var list57 = [];\n    var list58 = [];\n    var list59 = [];\n    var list60 = [];\n    var list61 = [];\n    var list62 = [];\n    var list63 = [];\n    var list64 = [];\n    var list65 = [];\n    var list66 = [];\n    var list67 = [];\n    var list68 = [];\n    var list69 = [];\n    var list70 = [];\n    var list71 = [];\n    var list72 = [];\n    var list73 = [];\n    var list74 = [];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "/tmp/tmpyaznvg9c.js:87\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var count = 0;\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            count++;\n        }\n        else{\n            list2.push(list1[i]);\n            count = 0;\n        }\n    }\n    return list2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    0,\n    0\n  ],\n  [\n    1\n  ],\n  [\n    2\n  ],\n  [\n    3\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    5\n  ],\n  [\n    6,\n    6,\n    6\n  ],\n  [\n    7\n  ],\n  [\n    8\n  ],\n  [\n    9\n  ],\n  [\n    4,\n    4\n  ]\n]\n    at test (/tmp/tmps4oqzwbj.js:21:10)\n    at Object.<anonymous> (/tmp/tmps4oqzwbj.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 2, 3, 4,\n    5, 6, 7, 8, 9,\n    4\n  ],\n  expected: [\n    [ 0, 0 ],    [ 1 ],\n    [ 2 ],       [ 3 ],\n    [ 4, 4 ],    [ 5 ],\n    [ 6, 6, 6 ], [ 7 ],\n    [ 8 ],       [ 9 ],\n    [ 4, 4 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    var list5 = [];\n    var list6 = [];\n    var list7 = [];\n    var list8 = [];\n    var list9 = [];\n    var list10 = [];\n    var list11 = [];\n    var list12 = [];\n    var list13 = [];\n    var list14 = [];\n    var list15 = [];\n    var list16 = [];\n    var list17 = [];\n    var list18 = [];\n    var list19 = [];\n    var list20 = [];\n    var list21 = [];\n    var list22 = [];\n    var list23 = [];\n    var list24 = [];\n    var list25 = [];\n    var list26 = [];\n    var list27 = [];\n    var list28 = [];\n    var list29 = [];\n    var list30 = [];\n    var list31 = [];\n    var list32 = [];\n    var list33 = [];\n    var list34 = [];\n    var list35 = [];\n    var list36 = [];\n    var list37 = [];\n    var list38 = [];\n    var list39 = [];\n    var list40 = [];\n    var list41 = [];\n    var list42 = [];\n    var list43 = [];\n    var list44 = [];\n    var list45 = [];\n    var list46 = [];\n    var list47 = [];\n    var list48 = [];\n    var list49 = [];\n    var list50 = [];\n    var list51 = [];\n    var list52 = [];\n    var list53 = [];\n    var list54 = [];\n    var list55 = [];\n    var list56 = [];\n    var list57 = [];\n    var list58 = [];\n    var list59 = [];\n    var list60 = [];\n    var list61 = [];\n    var list62 = [];\n    var list63 = [];\n    var list64 = [];\n    var list65 = [];\n    var list66 = [];\n    var list67 = [];\n    var list68 = [];\n    var list69 = [];\n    var list70 = [];\n    var list71 = [];\n    var list72 = [];\n    var list73 = [];\n    var list74 = [];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "/tmp/tmpyaznvg9c.js:87\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] === list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    for(var i=0;i<list3.length;i++){\n        if(list3[i].length > 1){\n            list4.push(list3[i]);\n        }\n    }\n    return list4;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    0,\n    0\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    6,\n    6,\n    6\n  ],\n  [\n    4,\n    4\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    0,\n    0\n  ],\n  [\n    1\n  ],\n  [\n    2\n  ],\n  [\n    3\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    5\n  ],\n  [\n    6,\n    6,\n    6\n  ],\n  [\n    7\n  ],\n  [\n    8\n  ],\n  [\n    9\n  ],\n  [\n    4,\n    4\n  ]\n]\n    at test (/tmp/tmp4amz5gyp.js:28:10)\n    at Object.<anonymous> (/tmp/tmp4amz5gyp.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 0, 0 ], [ 4, 4 ], [ 6, 6, 6 ], [ 4, 4 ] ],\n  expected: [\n    [ 0, 0 ],    [ 1 ],\n    [ 2 ],       [ 3 ],\n    [ 4, 4 ],    [ 5 ],\n    [ 6, 6, 6 ], [ 7 ],\n    [ 8 ],       [ 9 ],\n    [ 4, 4 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    for(var j = 0; j < list3.length; j++){\n        if(list3[j].length > 1){\n            list4.push(list3[j]);\n        }\n    }\n    return list4;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    0,\n    0\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    6,\n    6,\n    6\n  ],\n  [\n    4,\n    4\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    0,\n    0\n  ],\n  [\n    1\n  ],\n  [\n    2\n  ],\n  [\n    3\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    5\n  ],\n  [\n    6,\n    6,\n    6\n  ],\n  [\n    7\n  ],\n  [\n    8\n  ],\n  [\n    9\n  ],\n  [\n    4,\n    4\n  ]\n]\n    at test (/tmp/tmp6c_03ebl.js:28:10)\n    at Object.<anonymous> (/tmp/tmp6c_03ebl.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 0, 0 ], [ 4, 4 ], [ 6, 6, 6 ], [ 4, 4 ] ],\n  expected: [\n    [ 0, 0 ],    [ 1 ],\n    [ 2 ],       [ 3 ],\n    [ 4, 4 ],    [ 5 ],\n    [ 6, 6, 6 ], [ 7 ],\n    [ 8 ],       [ 9 ],\n    [ 4, 4 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var result = [];\n    var temp = [];\n    var count = 0;\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] === list1[i+1]){\n            temp.push(list1[i]);\n            count++;\n        }\n        else{\n            temp.push(list1[i]);\n            result.push(temp);\n            temp = [];\n            count = 0;\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n  var list2 = [];\n  var list3 = [];\n  var list4 = [];\n  for(var i = 0; i < list1.length; i++){\n    if(list1[i] == list1[i+1]){\n      list2.push(list1[i]);\n    }\n    else{\n      list2.push(list1[i]);\n      list3.push(list2);\n      list2 = [];\n    }\n  }\n  for(var i = 0; i < list3.length; i++){\n    if(list3[i].length > 1){\n      list4.push(list3[i]);\n    }\n  }\n  return list4;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    0,\n    0\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    6,\n    6,\n    6\n  ],\n  [\n    4,\n    4\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    0,\n    0\n  ],\n  [\n    1\n  ],\n  [\n    2\n  ],\n  [\n    3\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    5\n  ],\n  [\n    6,\n    6,\n    6\n  ],\n  [\n    7\n  ],\n  [\n    8\n  ],\n  [\n    9\n  ],\n  [\n    4,\n    4\n  ]\n]\n    at test (/tmp/tmp9t_dbsy6.js:28:10)\n    at Object.<anonymous> (/tmp/tmp9t_dbsy6.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 0, 0 ], [ 4, 4 ], [ 6, 6, 6 ], [ 4, 4 ] ],\n  expected: [\n    [ 0, 0 ],    [ 1 ],\n    [ 2 ],       [ 3 ],\n    [ 4, 4 ],    [ 5 ],\n    [ 6, 6, 6 ], [ 7 ],\n    [ 8 ],       [ 9 ],\n    [ 4, 4 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var temp = [];\n    var prev = null;\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] != prev){\n            if(temp.length > 0){\n                list2.push(temp);\n                temp = [];\n            }\n            prev = list1[i];\n        }\n        temp.push(list1[i]);\n    }\n    if(temp.length > 0){\n        list2.push(temp);\n    }\n    return list2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i] === list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] === list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    var list5 = [];\n    var list6 = [];\n    var list7 = [];\n    var list8 = [];\n    var list9 = [];\n    var list10 = [];\n    var list11 = [];\n    var list12 = [];\n    var list13 = [];\n    var list14 = [];\n    var list15 = [];\n    var list16 = [];\n    var list17 = [];\n    var list18 = [];\n    var list19 = [];\n    var list20 = [];\n    var list21 = [];\n    var list22 = [];\n    var list23 = [];\n    var list24 = [];\n    var list25 = [];\n    var list26 = [];\n    var list27 = [];\n    var list28 = [];\n    var list29 = [];\n    var list30 = [];\n    var list31 = [];\n    var list32 = [];\n    var list33 = [];\n    var list34 = [];\n    var list35 = [];\n    var list36 = [];\n    var list37 = [];\n    var list38 = [];\n    var list39 = [];\n    var list40 = [];\n    var list41 = [];\n    var list42 = [];\n    var list43 = [];\n    var list44 = [];\n    var list45 = [];\n    var list46 = [];\n    var list47 = [];\n    var list48 = [];\n    var list49 = [];\n    var list50 = [];\n    var list51 = [];\n    var list52 = [];\n    var list53 = [];\n    var list54 = [];\n    var list55 = [];\n    var list56 = [];\n    var list57 = [];\n    var list58 = [];\n    var list59 = [];\n    var list60 = [];\n    var list61 = [];\n    var list62 = [];\n    var list63 = [];\n    var list64 = [];\n    var list65 = [];\n    var list66 = [];\n    var list67 = [];\n    var list68 = [];\n    var list69 = [];\n    var list70 = [];\n    var list71 = [];\n    var list72 = [];\n    var list73 = [];\n    var list74 = [];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "/tmp/tmpyaznvg9c.js:87\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    for(var j = 0; j < list3.length; j++){\n        if(list3[j].length > 1){\n            list4.push(list3[j]);\n        }\n    }\n    return list4;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    0,\n    0\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    6,\n    6,\n    6\n  ],\n  [\n    4,\n    4\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    0,\n    0\n  ],\n  [\n    1\n  ],\n  [\n    2\n  ],\n  [\n    3\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    5\n  ],\n  [\n    6,\n    6,\n    6\n  ],\n  [\n    7\n  ],\n  [\n    8\n  ],\n  [\n    9\n  ],\n  [\n    4,\n    4\n  ]\n]\n    at test (/tmp/tmp6c_03ebl.js:28:10)\n    at Object.<anonymous> (/tmp/tmp6c_03ebl.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 0, 0 ], [ 4, 4 ], [ 6, 6, 6 ], [ 4, 4 ] ],\n  expected: [\n    [ 0, 0 ],    [ 1 ],\n    [ 2 ],       [ 3 ],\n    [ 4, 4 ],    [ 5 ],\n    [ 6, 6, 6 ], [ 7 ],\n    [ 8 ],       [ 9 ],\n    [ 4, 4 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    var list5 = [];\n    var list6 = [];\n    var list7 = [];\n    var list8 = [];\n    var list9 = [];\n    var list10 = [];\n    var list11 = [];\n    var list12 = [];\n    var list13 = [];\n    var list14 = [];\n    var list15 = [];\n    var list16 = [];\n    var list17 = [];\n    var list18 = [];\n    var list19 = [];\n    var list20 = [];\n    var list21 = [];\n    var list22 = [];\n    var list23 = [];\n    var list24 = [];\n    var list25 = [];\n    var list26 = [];\n    var list27 = [];\n    var list28 = [];\n    var list29 = [];\n    var list30 = [];\n    var list31 = [];\n    var list32 = [];\n    var list33 = [];\n    var list34 = [];\n    var list35 = [];\n    var list36 = [];\n    var list37 = [];\n    var list38 = [];\n    var list39 = [];\n    var list40 = [];\n    var list41 = [];\n    var list42 = [];\n    var list43 = [];\n    var list44 = [];\n    var list45 = [];\n    var list46 = [];\n    var list47 = [];\n    var list48 = [];\n    var list49 = [];\n    var list50 = [];\n    var list51 = [];\n    var list52 = [];\n    var list53 = [];\n    var list54 = [];\n    var list55 = [];\n    var list56 = [];\n    var list57 = [];\n    var list58 = [];\n    var list59 = [];\n    var list60 = [];\n    var list61 = [];\n    var list62 = [];\n    var list63 = [];\n    var list64 = [];\n    var list65 = [];\n    var list66 = [];\n    var list67 = [];\n    var list68 = [];\n    var list69 = [];\n    var list70 = [];\n    var list71 = [];\n    var list72 = [];\n    var list73 = [];\n    var list74 = [];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "/tmp/tmpyaznvg9c.js:87\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var temp = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            temp.push(list1[i]);\n        }\n        else{\n            temp.push(list1[i]);\n            list2.push(temp);\n            temp = [];\n        }\n    }\n    return list2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var i = 0;\n    while(i < list1.length){\n        if(list1[i] === list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n        i++;\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    var list5 = [];\n    var list6 = [];\n    var list7 = [];\n    var list8 = [];\n    var list9 = [];\n    var list10 = [];\n    var list11 = [];\n    var list12 = [];\n    var list13 = [];\n    var list14 = [];\n    var list15 = [];\n    var list16 = [];\n    var list17 = [];\n    var list18 = [];\n    var list19 = [];\n    var list20 = [];\n    var list21 = [];\n    var list22 = [];\n    var list23 = [];\n    var list24 = [];\n    var list25 = [];\n    var list26 = [];\n    var list27 = [];\n    var list28 = [];\n    var list29 = [];\n    var list30 = [];\n    var list31 = [];\n    var list32 = [];\n    var list33 = [];\n    var list34 = [];\n    var list35 = [];\n    var list36 = [];\n    var list37 = [];\n    var list38 = [];\n    var list39 = [];\n    var list40 = [];\n    var list41 = [];\n    var list42 = [];\n    var list43 = [];\n    var list44 = [];\n    var list45 = [];\n    var list46 = [];\n    var list47 = [];\n    var list48 = [];\n    var list49 = [];\n    var list50 = [];\n    var list51 = [];\n    var list52 = [];\n    var list53 = [];\n    var list54 = [];\n    var list55 = [];\n    var list56 = [];\n    var list57 = [];\n    var list58 = [];\n    var list59 = [];\n    var list60 = [];\n    var list61 = [];\n    var list62 = [];\n    var list63 = [];\n    var list64 = [];\n    var list65 = [];\n    var list66 = [];\n    var list67 = [];\n    var list68 = [];\n    var list69 = [];\n    var list70 = [];\n    var list71 = [];\n    var list72 = [];\n    var list73 = [];\n    var list74 = [];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "/tmp/tmpyaznvg9c.js:87\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    var list5 = [];\n    var list6 = [];\n    var list7 = [];\n    var list8 = [];\n    var list9 = [];\n    var list10 = [];\n    var list11 = [];\n    var list12 = [];\n    var list13 = [];\n    var list14 = [];\n    var list15 = [];\n    var list16 = [];\n    var list17 = [];\n    var list18 = [];\n    var list19 = [];\n    var list20 = [];\n    var list21 = [];\n    var list22 = [];\n    var list23 = [];\n    var list24 = [];\n    var list25 = [];\n    var list26 = [];\n    var list27 = [];\n    var list28 = [];\n    var list29 = [];\n    var list30 = [];\n    var list31 = [];\n    var list32 = [];\n    var list33 = [];\n    var list34 = [];\n    var list35 = [];\n    var list36 = [];\n    var list37 = [];\n    var list38 = [];\n    var list39 = [];\n    var list40 = [];\n    var list41 = [];\n    var list42 = [];\n    var list43 = [];\n    var list44 = [];\n    var list45 = [];\n    var list46 = [];\n    var list47 = [];\n    var list48 = [];\n    var list49 = [];\n    var list50 = [];\n    var list51 = [];\n    var list52 = [];\n    var list53 = [];\n    var list54 = [];\n    var list55 = [];\n    var list56 = [];\n    var list57 = [];\n    var list58 = [];\n    var list59 = [];\n    var list60 = [];\n    var list61 = [];\n    var list62 = [];\n    var list63 = [];\n    var list64 = [];\n    var list65 = [];\n    var list66 = [];\n    var list67 = [];\n    var list68 = [];\n    var list69 = [];\n    var list70 = [];\n    var list71 = [];\n    var list72 = [];\n    var list73 = [];\n    var list74 = [];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "/tmp/tmpyaznvg9c.js:87\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    for(var i = 0; i < list3.length; i++){\n        if(list3[i].length > 1){\n            list4.push(list3[i]);\n        }\n    }\n    return list4;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    0,\n    0\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    6,\n    6,\n    6\n  ],\n  [\n    4,\n    4\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    0,\n    0\n  ],\n  [\n    1\n  ],\n  [\n    2\n  ],\n  [\n    3\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    5\n  ],\n  [\n    6,\n    6,\n    6\n  ],\n  [\n    7\n  ],\n  [\n    8\n  ],\n  [\n    9\n  ],\n  [\n    4,\n    4\n  ]\n]\n    at test (/tmp/tmp043yvoll.js:28:10)\n    at Object.<anonymous> (/tmp/tmp043yvoll.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 0, 0 ], [ 4, 4 ], [ 6, 6, 6 ], [ 4, 4 ] ],\n  expected: [\n    [ 0, 0 ],    [ 1 ],\n    [ 2 ],       [ 3 ],\n    [ 4, 4 ],    [ 5 ],\n    [ 6, 6, 6 ], [ 7 ],\n    [ 8 ],       [ 9 ],\n    [ 4, 4 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i=0;i<list1.length;i++){\n        if(list1[i] === list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var temp = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] === list1[i+1]){\n            temp.push(list1[i]);\n        }\n        else{\n            temp.push(list1[i]);\n            list2.push(temp);\n            temp = [];\n        }\n    }\n    return list2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var temp = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            temp.push(list1[i]);\n        }\n        else{\n            temp.push(list1[i]);\n            list2.push(temp);\n            temp = [];\n        }\n    }\n    return list2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] === list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var sublist = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            sublist.push(list1[i]);\n        }\n        else{\n            sublist.push(list1[i]);\n            list2.push(sublist);\n            sublist = [];\n        }\n    }\n    return list2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var result = [];\n    var current = null;\n    var count = 0;\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] != current){\n            if(count > 0){\n                result.push(count);\n            }\n            current = list1[i];\n            count = 1;\n        }else{\n            count++;\n        }\n    }\n    if(count > 0){\n        result.push(count);\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n  1,\n  1,\n  2,\n  1,\n  3,\n  1,\n  1,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  [\n    0,\n    0\n  ],\n  [\n    1\n  ],\n  [\n    2\n  ],\n  [\n    3\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    5\n  ],\n  [\n    6,\n    6,\n    6\n  ],\n  [\n    7\n  ],\n  [\n    8\n  ],\n  [\n    9\n  ],\n  [\n    4,\n    4\n  ]\n]\n    at test (/tmp/tmppnjajm2s.js:27:10)\n    at Object.<anonymous> (/tmp/tmppnjajm2s.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 1, 1, 1, 2,\n    1, 3, 1, 1, 1,\n    2\n  ],\n  expected: [\n    [ 0, 0 ],    [ 1 ],\n    [ 2 ],       [ 3 ],\n    [ 4, 4 ],    [ 5 ],\n    [ 6, 6, 6 ], [ 7 ],\n    [ 8 ],       [ 9 ],\n    [ 4, 4 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var result = [];\n    var temp = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] === list1[i+1]){\n            temp.push(list1[i]);\n        }\n        else{\n            temp.push(list1[i]);\n            result.push(temp);\n            temp = [];\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    for(var j = 0; j < list3.length; j++){\n        if(list3[j].length > 1){\n            list4.push(list3[j]);\n        }\n    }\n    return list4;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    0,\n    0\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    6,\n    6,\n    6\n  ],\n  [\n    4,\n    4\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    0,\n    0\n  ],\n  [\n    1\n  ],\n  [\n    2\n  ],\n  [\n    3\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    5\n  ],\n  [\n    6,\n    6,\n    6\n  ],\n  [\n    7\n  ],\n  [\n    8\n  ],\n  [\n    9\n  ],\n  [\n    4,\n    4\n  ]\n]\n    at test (/tmp/tmp6c_03ebl.js:28:10)\n    at Object.<anonymous> (/tmp/tmp6c_03ebl.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 0, 0 ], [ 4, 4 ], [ 6, 6, 6 ], [ 4, 4 ] ],\n  expected: [\n    [ 0, 0 ],    [ 1 ],\n    [ 2 ],       [ 3 ],\n    [ 4, 4 ],    [ 5 ],\n    [ 6, 6, 6 ], [ 7 ],\n    [ 8 ],       [ 9 ],\n    [ 4, 4 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var temp = [];\n    var prev = null;\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] != prev){\n            if(temp.length > 0){\n                list2.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if(temp.length > 0){\n        list2.push(temp);\n    }\n    return list2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var temp = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] != list1[i+1]){\n            temp.push(list1[i]);\n            list2.push(temp);\n            temp = [];\n        }\n        else{\n            temp.push(list1[i]);\n        }\n    }\n    return list2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var result = [];\n    var temp = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            temp.push(list1[i]);\n        }\n        else{\n            temp.push(list1[i]);\n            result.push(temp);\n            temp = [];\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var temp = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] === list1[i+1]){\n            temp.push(list1[i]);\n        }\n        else{\n            temp.push(list1[i]);\n            list2.push(temp);\n            temp = [];\n        }\n    }\n    return list2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] != list1[i+1]){\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n        else{\n            list2.push(list1[i]);\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    for(var i=0; i<list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var count = 1;\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            count++;\n        }\n        else{\n            list2.push(list1[i]);\n            list2.push(count);\n            count = 1;\n        }\n    }\n    return list2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  2,\n  1,\n  1,\n  2,\n  1,\n  3,\n  1,\n  4,\n  2,\n  5,\n  1,\n  6,\n  3,\n  7,\n  1,\n  8,\n  1,\n  9,\n  1,\n  4,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  [\n    0,\n    0\n  ],\n  [\n    1\n  ],\n  [\n    2\n  ],\n  [\n    3\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    5\n  ],\n  [\n    6,\n    6,\n    6\n  ],\n  [\n    7\n  ],\n  [\n    8\n  ],\n  [\n    9\n  ],\n  [\n    4,\n    4\n  ]\n]\n    at test (/tmp/tmphm1jughf.js:22:10)\n    at Object.<anonymous> (/tmp/tmphm1jughf.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 2, 1, 1, 2, 1, 3,\n    1, 4, 2, 5, 1, 6, 3,\n    7, 1, 8, 1, 9, 1, 4,\n    2\n  ],\n  expected: [\n    [ 0, 0 ],    [ 1 ],\n    [ 2 ],       [ 3 ],\n    [ 4, 4 ],    [ 5 ],\n    [ 6, 6, 6 ], [ 7 ],\n    [ 8 ],       [ 9 ],\n    [ 4, 4 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var temp = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list1[i+1]){\n            temp.push(list1[i]);\n        }\n        else{\n            temp.push(list1[i]);\n            list2.push(temp);\n            temp = [];\n        }\n    }\n    return list2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1){\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    var list5 = [];\n    var list6 = [];\n    var list7 = [];\n    var list8 = [];\n    var list9 = [];\n    var list10 = [];\n    var list11 = [];\n    var list12 = [];\n    var list13 = [];\n    var list14 = [];\n    var list15 = [];\n    var list16 = [];\n    var list17 = [];\n    var list18 = [];\n    var list19 = [];\n    var list20 = [];\n    var list21 = [];\n    var list22 = [];\n    var list23 = [];\n    var list24 = [];\n    var list25 = [];\n    var list26 = [];\n    var list27 = [];\n    var list28 = [];\n    var list29 = [];\n    var list30 = [];\n    var list31 = [];\n    var list32 = [];\n    var list33 = [];\n    var list34 = [];\n    var list35 = [];\n    var list36 = [];\n    var list37 = [];\n    var list38 = [];\n    var list39 = [];\n    var list40 = [];\n    var list41 = [];\n    var list42 = [];\n    var list43 = [];\n    var list44 = [];\n    var list45 = [];\n    var list46 = [];\n    var list47 = [];\n    var list48 = [];\n    var list49 = [];\n    var list50 = [];\n    var list51 = [];\n    var list52 = [];\n    var list53 = [];\n    var list54 = [];\n    var list55 = [];\n    var list56 = [];\n    var list57 = [];\n    var list58 = [];\n    var list59 = [];\n    var list60 = [];\n    var list61 = [];\n    var list62 = [];\n    var list63 = [];\n    var list64 = [];\n    var list65 = [];\n    var list66 = [];\n    var list67 = [];\n    var list68 = [];\n    var list69 = [];\n    var list70 = [];\n    var list71 = [];\n    var list72 = [];\n    var list73 = [];\n    var list74 = [];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "/tmp/tmpyaznvg9c.js:87\ntest();\n       \n\nSyntaxError: Unexpected end of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}