{
  "name": "mbpp_745_divisible_by_digits",
  "language": "js",
  "prompt": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_745_divisible_by_digits.py",
  "prompt_terminology": "reworded",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "results": [
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i=startnum; i<=endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j=0; j<num.length; j++){\n            if(i%num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag)\n            arr.push(i);\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString().split(\"\");\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] !== 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var divisible = true;\n        for(var j = 0; j < num.length; j++){\n            if(num[j] != 0 && i % num[j] != 0){\n                divisible = false;\n                break;\n            }\n        }\n        if(divisible){\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10,\n  11,\n  12,\n  15,\n  20,\n  22\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  11,\n  12,\n  15,\n  22\n]\n    at test (/tmp/tmpmna04hzj.js:25:10)\n    at Object.<anonymous> (/tmp/tmpmna04hzj.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n     1,  2,  3,  4,  5,  6,\n     7,  8,  9, 10, 11, 12,\n    15, 20, 22\n  ],\n  expected: [\n     1, 2, 3,  4,  5,  6,\n     7, 8, 9, 11, 12, 15,\n    22\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        var digits = i.toString().split('');\n        var isDivisible = true;\n        for(var j = 0; j < digits.length; j++){\n            if(i % digits[j] !== 0){\n                isDivisible = false;\n                break;\n            }\n        }\n        if(isDivisible){\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var isDivisible = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                isDivisible = false;\n                break;\n            }\n        }\n        if(isDivisible){\n            result.push(i);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for (var i = startnum; i <= endnum; i++){\n        var digits = i.toString().split('');\n        var divisible = true;\n        for (var j = 0; j < digits.length; j++){\n            if (i % digits[j] != 0){\n                divisible = false;\n                break;\n            }\n        }\n        if (divisible){\n            result.push(i);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i=startnum; i<=endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j=0; j<num.length; j++){\n            if(i%num[j]!=0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag)\n            arr.push(i);\n    }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i=startnum; i<=endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j=0; j<num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            result.push(i);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var divisible = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] !== 0){\n                divisible = false;\n                break;\n            }\n        }\n        if(divisible){\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString().split(\"\");\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for (var i = startnum; i <= endnum; i++){\n        if (i.toString().split('').every(function(x){return i % x == 0})){\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var divisible = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                divisible = false;\n                break;\n            }\n        }\n        if(divisible){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i=startnum; i<=endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j=0; j<num.length; j++){\n            if(i%num[j]!=0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var nums = [];\n    for(var i = startnum; i <= endnum; i++){\n        var digits = i.toString().split(\"\");\n        var divisible = true;\n        for(var j = 0; j < digits.length; j++){\n            if(i % digits[j] != 0){\n                divisible = false;\n                break;\n            }\n        }\n        if(divisible){\n            nums.push(i);\n        }\n    }\n    return nums;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        var digits = i.toString().split('');\n        var isDivisible = true;\n        for(var j = 0; j < digits.length; j++){\n            if(i % digits[j] != 0){\n                isDivisible = false;\n                break;\n            }\n        }\n        if(isDivisible){\n            result.push(i);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        if(i.toString().split('').every(x => i % x == 0)){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i < endnum; i++){\n        var digits = i.toString().split(\"\");\n        var isDivisible = true;\n        for(var j = 0; j < digits.length; j++){\n            if(i % digits[j] != 0){\n                isDivisible = false;\n            }\n        }\n        if(isDivisible){\n            result.push(i);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  11,\n  12,\n  15\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  11,\n  12,\n  15,\n  22\n]\n    at test (/tmp/tmph_c1xcy3.js:23:10)\n    at Object.<anonymous> (/tmp/tmph_c1xcy3.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n     1,  2, 3, 4,  5,\n     6,  7, 8, 9, 11,\n    12, 15\n  ],\n  expected: [\n     1, 2, 3,  4,  5,  6,\n     7, 8, 9, 11, 12, 15,\n    22\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i=startnum; i<=endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j=0; j<num.length; j++){\n            if(i%num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for (var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for (var j = 0; j < num.length; j++){\n            if (i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if (flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    let result = [];\n    for(let i = startnum; i <= endnum; i++){\n        let num = i.toString();\n        let flag = true;\n        for(let j = 0; j < num.length; j++){\n            if(i % num[j] !== 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            result.push(i);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % parseInt(num[j]) != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag == true){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % parseInt(num[j]) != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag) arr.push(i);\n    }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    let arr = [];\n    for(let i = startnum; i <= endnum; i++){\n        let str = i.toString();\n        let flag = true;\n        for(let j = 0; j < str.length; j++){\n            if(i % parseInt(str[j]) !== 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            result.push(i);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var digits = num.split('');\n        var flag = true;\n        for(var j = 0; j < digits.length; j++){\n            if(i % digits[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            result.push(i);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var divisible = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] !== 0){\n                divisible = false;\n                break;\n            }\n        }\n        if(divisible){\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            result.push(i);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] !== 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var is_divisible = true;\n        for(var j = 0; j < num.length; j++){\n            if(num[j] != 0 && i % num[j] != 0){\n                is_divisible = false;\n                break;\n            }\n        }\n        if(is_divisible){\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10,\n  11,\n  12,\n  15,\n  20,\n  22\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  11,\n  12,\n  15,\n  22\n]\n    at test (/tmp/tmphlqcaj5q.js:25:10)\n    at Object.<anonymous> (/tmp/tmphlqcaj5q.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n     1,  2,  3,  4,  5,  6,\n     7,  8,  9, 10, 11, 12,\n    15, 20, 22\n  ],\n  expected: [\n     1, 2, 3,  4,  5,  6,\n     7, 8, 9, 11, 12, 15,\n    22\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString().split(\"\");\n        var divisible = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                divisible = false;\n                break;\n            }\n        }\n        if(divisible){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i;\n        var digits = [];\n        while(num > 0){\n            digits.push(num % 10);\n            num = Math.floor(num / 10);\n        }\n        var isDivisible = true;\n        for(var j = 0; j < digits.length; j++){\n            if(i % digits[j] != 0){\n                isDivisible = false;\n                break;\n            }\n        }\n        if(isDivisible){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var divisible = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                divisible = false;\n                break;\n            }\n        }\n        if(divisible){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        var digits = i.toString().split('');\n        var divisible = true;\n        for(var j = 0; j < digits.length; j++){\n            if(i % digits[j] != 0){\n                divisible = false;\n                break;\n            }\n        }\n        if(divisible){\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var divisible = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                divisible = false;\n            }\n        }\n        if(divisible){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n\tvar result = [];\n\tfor(var i = startnum; i <= endnum; i++){\n\t\tvar num = i.toString();\n\t\tvar divisible = true;\n\t\tfor(var j = 0; j < num.length; j++){\n\t\t\tif(i % num[j] != 0){\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(divisible){\n\t\t\tresult.push(i);\n\t\t}\n\t}\n\treturn result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = 0;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = 1;\n                break;\n            }\n        }\n        if(flag == 0){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var divisible = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] !== 0){\n                divisible = false;\n            }\n        }\n        if(divisible){\n            result.push(i);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        var digits = i.toString().split('');\n        var divisible = true;\n        for(var j = 0; j < digits.length; j++){\n            if(i % digits[j] !== 0){\n                divisible = false;\n                break;\n            }\n        }\n        if(divisible){\n            result.push(i);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString().split('');\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString().split('');\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            result.push(i);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        var digits = i.toString().split('');\n        var divisible = true;\n        for(var j = 0; j < digits.length; j++){\n            if(i % digits[j] !== 0){\n                divisible = false;\n            }\n        }\n        if(divisible){\n            result.push(i);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var divisible = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                divisible = false;\n                break;\n            }\n        }\n        if(divisible) arr.push(i);\n    }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag)\n            arr.push(i);\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var nums = [];\n    for(var i = startnum; i <= endnum; i++){\n        var digits = i.toString().split('');\n        var isDivisible = true;\n        for(var j = 0; j < digits.length; j++){\n            if(i % digits[j] != 0){\n                isDivisible = false;\n                break;\n            }\n        }\n        if(isDivisible){\n            nums.push(i);\n        }\n    }\n    return nums;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for (var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var divisible = true;\n        for (var j = 0; j < num.length; j++){\n            if (i % num[j] != 0){\n                divisible = false;\n                break;\n            }\n        }\n        if (divisible){\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            result.push(i);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for (var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var divisible = true;\n        for (var j = 0; j < num.length; j++){\n            if (i % num[j] != 0){\n                divisible = false;\n                break;\n            }\n        }\n        if (divisible){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % parseInt(num[j]) != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString().split(\"\");\n        var divisible = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                divisible = false;\n                break;\n            }\n        }\n        if(divisible){\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num_str = i.toString();\n        var divisible = true;\n        for(var j = 0; j < num_str.length; j++){\n            if(i % parseInt(num_str[j]) !== 0){\n                divisible = false;\n                break;\n            }\n        }\n        if(divisible){\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        var digits = i.toString().split('');\n        var is_divisible = true;\n        for(var j = 0; j < digits.length; j++){\n            if(i % digits[j] != 0){\n                is_divisible = false;\n                break;\n            }\n        }\n        if(is_divisible){\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] !== 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            result.push(i);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var divisible = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] !== 0){\n                divisible = false;\n                break;\n            }\n        }\n        if(divisible){\n            result.push(i);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i=startnum; i<=endnum; i++){\n        var num = i.toString().split(\"\");\n        var flag = true;\n        for(var j=0; j<num.length; j++){\n            if(i%num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        if(i % i.toString().split(\"\").reduce((a,b) => a * b) == 0){\n            result.push(i);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  11,\n  12,\n  15\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  11,\n  12,\n  15,\n  22\n]\n    at test (/tmp/tmpegwxh5qc.js:16:10)\n    at Object.<anonymous> (/tmp/tmpegwxh5qc.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n     1,  2, 3, 4,  5,\n     6,  7, 8, 9, 11,\n    12, 15\n  ],\n  expected: [\n     1, 2, 3,  4,  5,  6,\n     7, 8, 9, 11, 12, 15,\n    22\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var divisible = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                divisible = false;\n            }\n        }\n        if(divisible){\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i=startnum; i<=endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j=0; j<num.length; j++){\n            if(i%num[j]!=0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString().split('');\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    let result = [];\n    for(let i = startnum; i <= endnum; i++){\n        let digits = i.toString().split('');\n        let divisible = digits.every(digit => i % digit == 0);\n        if(divisible){\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i=startnum; i<=endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j=0; j<num.length; j++){\n            if(i%num[j]!=0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            result.push(i);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i=startnum; i<=endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j=0; j<num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        var str = i.toString();\n        var flag = true;\n        for(var j = 0; j < str.length; j++){\n            if(i % parseInt(str[j]) != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            result.push(i);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i=startnum; i<=endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j=0; j<num.length; j++){\n            if(num[j] != 0 && i%num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            result.push(i);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10,\n  11,\n  12,\n  15,\n  20,\n  22\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  11,\n  12,\n  15,\n  22\n]\n    at test (/tmp/tmpx9lyevno.js:24:10)\n    at Object.<anonymous> (/tmp/tmpx9lyevno.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n     1,  2,  3,  4,  5,  6,\n     7,  8,  9, 10, 11, 12,\n    15, 20, 22\n  ],\n  expected: [\n     1, 2, 3,  4,  5,  6,\n     7, 8, 9, 11, 12, 15,\n    22\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag)\n            arr.push(i);\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString().split(\"\");\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var temp = i.toString().split('');\n        var flag = true;\n        for(var j = 0; j < temp.length; j++){\n            if(i % temp[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i=startnum; i<=endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j=0; j<num.length; j++){\n            if(i%num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % parseInt(num[j]) != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag)\n            arr.push(i);\n    }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i=startnum; i<=endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j=0; j<num.length; j++){\n            if(i%num[j]!=0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString().split('');\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % parseInt(num[j]) != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        var digits = i.toString().split('');\n        var divisible = true;\n        for(var j = 0; j < digits.length; j++){\n            if(i % digits[j] != 0){\n                divisible = false;\n                break;\n            }\n        }\n        if(divisible){\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        var digits = i.toString().split('');\n        var flag = true;\n        for(var j = 0; j < digits.length; j++){\n            if(i % digits[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var temp = i.toString().split('');\n        var flag = true;\n        for(var j = 0; j < temp.length; j++){\n            if(i % temp[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var str = i.toString();\n        var flag = true;\n        for(var j = 0; j < str.length; j++){\n            if(i % parseInt(str[j]) != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i=startnum; i<=endnum; i++){\n        var digits = i.toString().split('');\n        var flag = true;\n        for(var j=0; j<digits.length; j++){\n            if(i%digits[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            result.push(i);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for (var i = startnum; i <= endnum; i++){\n        var digits = i.toString().split('');\n        var divisible = true;\n        for (var j = 0; j < digits.length; j++){\n            if (i % digits[j] != 0){\n                divisible = false;\n                break;\n            }\n        }\n        if (divisible){\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString().split('');\n        var bool = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                bool = false;\n            }\n        }\n        if(bool){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    let arr = [];\n    for(let i = startnum; i <= endnum; i++){\n        let str = i.toString();\n        let flag = true;\n        for(let j = 0; j < str.length; j++){\n            if(i % parseInt(str[j]) !== 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        var digits = i.toString().split('');\n        if(digits.every(function(digit){\n            return i % digit == 0;\n        })){\n            result.push(i);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag)\n            arr.push(i);\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var divisible = true;\n        for(var j = 0; j < num.length; j++){\n            if(num[j] != 0 && i % num[j] != 0){\n                divisible = false;\n                break;\n            }\n        }\n        if(divisible){\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10,\n  11,\n  12,\n  15,\n  20,\n  22\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  11,\n  12,\n  15,\n  22\n]\n    at test (/tmp/tmpmna04hzj.js:25:10)\n    at Object.<anonymous> (/tmp/tmpmna04hzj.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n     1,  2,  3,  4,  5,  6,\n     7,  8,  9, 10, 11, 12,\n    15, 20, 22\n  ],\n  expected: [\n     1, 2, 3,  4,  5,  6,\n     7, 8, 9, 11, 12, 15,\n    22\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var divisible = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                divisible = false;\n                break;\n            }\n        }\n        if(divisible){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var divisible = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                divisible = false;\n                break;\n            }\n        }\n        if(divisible){\n            result.push(i);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString().split('');\n        var divisible = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] !== 0){\n                divisible = false;\n                break;\n            }\n        }\n        if(divisible){\n            result.push(i);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var divisible = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                divisible = false;\n                break;\n            }\n        }\n        if(divisible){\n            result.push(i);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % parseInt(num[j]) != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var digits = i.toString().split('');\n        var flag = true;\n        for(var j = 0; j < digits.length; j++){\n            if(i % digits[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        if(i.toString().split(\"\").every(x => i % x == 0)){\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for (var i = startnum; i <= endnum; i++){\n        var str = i.toString();\n        var flag = true;\n        for (var j = 0; j < str.length; j++){\n            if (i % parseInt(str[j]) != 0){\n                flag = false;\n                break;\n            }\n        }\n        if (flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i=startnum; i<=endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j=0; j<num.length; j++){\n            if(i%num[j]!=0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i<=endnum; i++){\n        var num = i;\n        var flag = true;\n        while(num > 0){\n            var digit = num % 10;\n            if(i % digit != 0){\n                flag = false;\n                break;\n            }\n            num = Math.floor(num/10);\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] !== 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var divisible = true;\n        for(var j = 0; j < num.length; j++){\n            if(num[j] != 0 && i % num[j] != 0){\n                divisible = false;\n                break;\n            }\n        }\n        if(divisible){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10,\n  11,\n  12,\n  15,\n  20,\n  22\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  11,\n  12,\n  15,\n  22\n]\n    at test (/tmp/tmpfzwy3pui.js:24:10)\n    at Object.<anonymous> (/tmp/tmpfzwy3pui.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n     1,  2,  3,  4,  5,  6,\n     7,  8,  9, 10, 11, 12,\n    15, 20, 22\n  ],\n  expected: [\n     1, 2, 3,  4,  5,  6,\n     7, 8, 9, 11, 12, 15,\n    22\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    return Array.from(Array(endnum-startnum+1), (x,i) => i+startnum).filter(x => x.toString().split('').map(y => parseInt(y)).every(y => x % y == 0));\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var str = i.toString();\n        var flag = true;\n        for(var j = 0; j < str.length; j++){\n            if(i % parseInt(str[j]) != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag)\n            arr.push(i);\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for (var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var divisible = true;\n        for (var j = 0; j < num.length; j++){\n            if (i % parseInt(num[j]) !== 0){\n                divisible = false;\n                break;\n            }\n        }\n        if (divisible){\n            result.push(i);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString().split(\"\");\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var divisible = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                divisible = false;\n            }\n        }\n        if(divisible){\n            result.push(i);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var divisible = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                divisible = false;\n                break;\n            }\n        }\n        if(divisible){\n            result.push(i);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        var digits = i.toString().split('');\n        var divisible = digits.every(function(digit){\n            return i % digit == 0;\n        });\n        if(divisible){\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        var digits = i.toString().split('');\n        var isDivisible = true;\n        for(var j = 0; j < digits.length; j++){\n            if(i % digits[j] !== 0){\n                isDivisible = false;\n                break;\n            }\n        }\n        if(isDivisible){\n            result.push(i);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var divisible = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                divisible = false;\n                break;\n            }\n        }\n        if(divisible){\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var isDivisible = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % parseInt(num[j]) !== 0){\n                isDivisible = false;\n                break;\n            }\n        }\n        if(isDivisible){\n            result.push(i);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        var digits = i.toString().split('');\n        var isDivisible = true;\n        for(var j = 0; j < digits.length; j++){\n            if(i % parseInt(digits[j]) != 0){\n                isDivisible = false;\n                break;\n            }\n        }\n        if(isDivisible){\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            result.push(i);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        var digits = i.toString().split(\"\");\n        var divisible = true;\n        for(var j = 0; j < digits.length; j++){\n            if(i % digits[j] != 0){\n                divisible = false;\n                break;\n            }\n        }\n        if(divisible){\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var divisible = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                divisible = false;\n                break;\n            }\n        }\n        if(divisible){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var str = i.toString();\n        var flag = true;\n        for(var j = 0; j < str.length; j++){\n            if(i % parseInt(str[j]) != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        var digits = i.toString().split('');\n        var isDivisible = true;\n        for(var j = 0; j < digits.length; j++){\n            if(i % digits[j] != 0){\n                isDivisible = false;\n                break;\n            }\n        }\n        if(isDivisible){\n            result.push(i);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var nums = [];\n    for(var i=startnum; i<=endnum; i++){\n        var num = i.toString().split(\"\");\n        var flag = true;\n        for(var j=0; j<num.length; j++){\n            if(i%num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag == true){\n            nums.push(i);\n        }\n    }\n    return nums;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        if(i % i.toString().split('').reduce((a,b) => a * b) == 0){\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  11,\n  12,\n  15\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  11,\n  12,\n  15,\n  22\n]\n    at test (/tmp/tmps7pfqw8x.js:17:10)\n    at Object.<anonymous> (/tmp/tmps7pfqw8x.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n     1,  2, 3, 4,  5,\n     6,  7, 8, 9, 11,\n    12, 15\n  ],\n  expected: [\n     1, 2, 3,  4,  5,  6,\n     7, 8, 9, 11, 12, 15,\n    22\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i=startnum; i<=endnum; i++){\n        var num = i;\n        var digits = num.toString().split('');\n        var flag = true;\n        for(var j=0; j<digits.length; j++){\n            if(num%digits[j]!=0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(num);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var divisible = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                divisible = false;\n                break;\n            }\n        }\n        if(divisible){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] !== 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag) arr.push(i);\n    }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var divisible = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                divisible = false;\n                break;\n            }\n        }\n        if(divisible){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var divisible = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                divisible = false;\n                break;\n            }\n        }\n        if(divisible){\n            result.push(i);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    let nums = [];\n    for(let i = startnum; i <= endnum; i++){\n        let digits = i.toString().split('');\n        let divisible = true;\n        for(let j = 0; j < digits.length; j++){\n            if(i % digits[j] !== 0){\n                divisible = false;\n                break;\n            }\n        }\n        if(divisible){\n            nums.push(i);\n        }\n    }\n    return nums;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var digits = i.toString().split(\"\");\n        var divisible = true;\n        for(var j = 0; j < digits.length; j++){\n            if(i % digits[j] != 0){\n                divisible = false;\n                break;\n            }\n        }\n        if(divisible){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i;\n        var digits = [];\n        while(num > 0){\n            digits.push(num % 10);\n            num = Math.floor(num / 10);\n        }\n        var divisible = true;\n        for(var j = 0; j < digits.length; j++){\n            if(i % digits[j] != 0){\n                divisible = false;\n                break;\n            }\n        }\n        if(divisible){\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % parseInt(num[j]) != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var divisible = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                divisible = false;\n                break;\n            }\n        }\n        if(divisible){\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i;\n        var digits = [];\n        while(num > 0){\n            digits.push(num % 10);\n            num = Math.floor(num / 10);\n        }\n        if(digits.every(function(digit){\n            return i % digit == 0;\n        })){\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i=startnum; i<=endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j=0; j<num.length; j++){\n            if(i%num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var isDivisible = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                isDivisible = false;\n                break;\n            }\n        }\n        if(isDivisible){\n            result.push(i);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var divisible = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] !== 0){\n                divisible = false;\n                break;\n            }\n        }\n        if(divisible){\n            result.push(i);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] !== 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            result.push(i);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % parseInt(num[j]) != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        var digits = i.toString().split('');\n        var isDivisible = true;\n        for(var j = 0; j < digits.length; j++){\n            if(i % digits[j] != 0){\n                isDivisible = false;\n                break;\n            }\n        }\n        if(isDivisible){\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var digits = i.toString().split('');\n        var divisible = true;\n        for(var j = 0; j < digits.length; j++){\n            if(i % digits[j] != 0){\n                divisible = false;\n                break;\n            }\n        }\n        if(divisible){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var divisible = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                divisible = false;\n                break;\n            }\n        }\n        if(divisible){\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n\tvar result = [];\n\tfor(var i = startnum; i <= endnum; i++){\n\t\tvar digits = i.toString().split(\"\");\n\t\tvar divisible = true;\n\t\tfor(var j = 0; j < digits.length; j++){\n\t\t\tif(i % digits[j] != 0){\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(divisible){\n\t\t\tresult.push(i);\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var divisible = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] !== 0){\n                divisible = false;\n                break;\n            }\n        }\n        if(divisible){\n            result.push(i);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] !== 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag)\n            arr.push(i);\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        var digits = i.toString().split('');\n        var isDivisible = true;\n        for(var j = 0; j < digits.length; j++){\n            if(i % digits[j] != 0){\n                isDivisible = false;\n                break;\n            }\n        }\n        if(isDivisible){\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString().split('');\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag)\n            arr.push(i);\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var digits = num.split(\"\");\n        var isDivisible = true;\n        for(var j = 0; j < digits.length; j++){\n            if(i % parseInt(digits[j]) != 0){\n                isDivisible = false;\n                break;\n            }\n        }\n        if(isDivisible){\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for (var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for (var j = 0; j < num.length; j++){\n            if (i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if (flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var digits = i.toString().split('');\n        var flag = true;\n        for(var j = 0; j < digits.length; j++){\n            if(i % digits[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString().split('');\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(num[j] != 0 && i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10,\n  11,\n  12,\n  15,\n  20,\n  22\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  11,\n  12,\n  15,\n  22\n]\n    at test (/tmp/tmp80ki8qj3.js:24:10)\n    at Object.<anonymous> (/tmp/tmp80ki8qj3.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n     1,  2,  3,  4,  5,  6,\n     7,  8,  9, 10, 11, 12,\n    15, 20, 22\n  ],\n  expected: [\n     1, 2, 3,  4,  5,  6,\n     7, 8, 9, 11, 12, 15,\n    22\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var digits = i.toString().split('');\n        var flag = true;\n        for(var j = 0; j < digits.length; j++){\n            if(i % digits[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var divisible = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] !== 0){\n                divisible = false;\n            }\n        }\n        if(divisible){\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n\tvar arr = [];\n\tfor(var i = startnum; i <= endnum; i++){\n\t\tvar temp = i.toString().split('');\n\t\tvar flag = true;\n\t\tfor(var j = 0; j < temp.length; j++){\n\t\t\tif(i % temp[j] != 0){\n\t\t\t\tflag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(flag) arr.push(i);\n\t}\n\treturn arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var isDivisible = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % parseInt(num[j]) != 0){\n                isDivisible = false;\n                break;\n            }\n        }\n        if(isDivisible){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        var digits = i.toString().split('');\n        var divisible = true;\n        for(var j = 0; j < digits.length; j++){\n            if(i % digits[j] != 0){\n                divisible = false;\n                break;\n            }\n        }\n        if(divisible){\n            result.push(i);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var digits = i.toString().split('');\n        var isDivisible = true;\n        for(var j = 0; j < digits.length; j++){\n            if(i % digits[j] !== 0){\n                isDivisible = false;\n                break;\n            }\n        }\n        if(isDivisible){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % parseInt(num[j]) != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag)\n            arr.push(i);\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        var digits = i.toString().split('');\n        var isDivisible = true;\n        for(var j = 0; j < digits.length; j++){\n            if(i % digits[j] !== 0){\n                isDivisible = false;\n                break;\n            }\n        }\n        if(isDivisible){\n            result.push(i);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        if(i % parseInt(i.toString().split(\"\").join(\"\")) == 0){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10,\n  11,\n  12,\n  13,\n  14,\n  15,\n  16,\n  17,\n  18,\n  19,\n  20,\n  21,\n  22\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  11,\n  12,\n  15,\n  22\n]\n    at test (/tmp/tmpiotvhqom.js:16:10)\n    at Object.<anonymous> (/tmp/tmpiotvhqom.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n     1,  2,  3,  4,  5,  6,  7,\n     8,  9, 10, 11, 12, 13, 14,\n    15, 16, 17, 18, 19, 20, 21,\n    22\n  ],\n  expected: [\n     1, 2, 3,  4,  5,  6,\n     7, 8, 9, 11, 12, 15,\n    22\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(num[j] != 0 && i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            result.push(i);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10,\n  11,\n  12,\n  15,\n  20,\n  22\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  11,\n  12,\n  15,\n  22\n]\n    at test (/tmp/tmpndw2thpu.js:24:10)\n    at Object.<anonymous> (/tmp/tmpndw2thpu.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n     1,  2,  3,  4,  5,  6,\n     7,  8,  9, 10, 11, 12,\n    15, 20, 22\n  ],\n  expected: [\n     1, 2, 3,  4,  5,  6,\n     7, 8, 9, 11, 12, 15,\n    22\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i=startnum; i<=endnum; i++){\n        var digits = i.toString().split('');\n        var is_divisible = true;\n        for(var j=0; j<digits.length; j++){\n            if(i%digits[j] !== 0){\n                is_divisible = false;\n                break;\n            }\n        }\n        if(is_divisible){\n            result.push(i);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var flag = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] != 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        if(i % 2 == 0 && i % 3 == 0 && i % 5 == 0 && i % 6 == 0 && i % 7 == 0 && i % 8 == 0 && i % 9 == 0){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  11,\n  12,\n  15,\n  22\n]\n    at test (/tmp/tmpel52441v.js:16:10)\n    at Object.<anonymous> (/tmp/tmpel52441v.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [\n     1, 2, 3,  4,  5,  6,\n     7, 8, 9, 11, 12, 15,\n    22\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum, endnum){\n    var arr = [];\n    for(var i = startnum; i <= endnum; i++){\n        var num = i.toString();\n        var divisible = true;\n        for(var j = 0; j < num.length; j++){\n            if(i % num[j] !== 0){\n                divisible = false;\n                break;\n            }\n        }\n        if(divisible){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = divisible_by_digits;\n  assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n  assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n  assert.deepEqual(candidate(20, 25),[22, 24]);\n}\n\ntest();",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}