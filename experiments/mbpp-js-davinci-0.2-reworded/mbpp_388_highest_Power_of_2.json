{
  "name": "mbpp_388_highest_Power_of_2",
  "language": "js",
  "prompt": "//Write a jsthon function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n){\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_388_highest_Power_of_2.py",
  "prompt_terminology": "reworded",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = highest_Power_of_2;\n  assert.deepEqual(candidate(10),8);\n  assert.deepEqual(candidate(19),16);\n  assert.deepEqual(candidate(32),32);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    var i = 0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}",
    "    var i = 1;\n    while(i<=n){\n        i = i*2;\n    }\n    return i/2;\n}",
    "    var i = 0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}",
    "    var i = 0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}",
    "    var i = 0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}",
    "    var i=1;\n    while(i<=n){\n        i=i*2;\n    }\n    return i/2;\n}",
    "    var p = 0;\n    if (n < 1)\n        return 0;\n    while (n > 1) {\n        n /= 2;\n        p++;\n    }\n    return Math.pow(2, p);\n}",
    "    var i = 0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}",
    "    var i = 0;\n    while(Math.pow(2,i) <= n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}",
    "    var i = 1;\n    while(i<=n){\n        i = i*2;\n    }\n    return i/2;\n}",
    "    var i = 0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}",
    "    var i = 1;\n    while(i<=n){\n        i = i*2;\n    }\n    return i/2;\n}",
    "    var i = 0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}",
    "    var i = 1;\n    while(i<=n){\n        i = i*2;\n    }\n    return i/2;\n}",
    "    var i = 0;\n    while(Math.pow(2,i)<=n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}",
    "    var i = 0;\n    while(Math.pow(2,i) <= n){\n        i++;\n    }\n    return Math.pow(2,i-1);\n}",
    "    var i = 0;\n    while(Math.pow(2, i) <= n){\n        i++;\n    }\n    return Math.pow(2, i-1);\n}",
    "    var i = 1;\n    while(i<=n){\n        i = i*2;\n    }\n    return i/2;\n}",
    "    var result = 0;\n    for(var i=0; i<=n; i++){\n        if(Math.pow(2,i)<=n){\n            result = Math.pow(2,i);\n        }\n    }\n    return result;\n}",
    "    var i = 1;\n    while(i < n){\n        i = i * 2;\n    }\n    return i;\n}"
  ]
}