{
  "name": "mbpp_773_occurance_substring",
  "language": "js",
  "prompt": "//Write a function to find the occurrence and position of the substrings within a string. Return undefined if there is no match.\nfunction occurance_substring(text, pattern){\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_773_occurance_substring.py",
  "prompt_terminology": "reworded",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = occurance_substring;\n  assert.deepEqual(candidate(\"python programming, python language\", \"python\"),[\"python\", 0, 6]);\n  assert.deepEqual(candidate(\"python programming,programming language\", \"programming\"),[\"programming\", 7, 18]);\n  assert.deepEqual(candidate(\"python programming,programming language\", \"language\"),[\"language\", 31, 39]);\n  assert.deepEqual(candidate(\"c++ programming, c++ language\", \"python\"),undefined);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    var result = [];\n    var i = 0;\n    while(i < text.length){\n        var j = 0;\n        var k = i;\n        while(j < pattern.length && k < text.length && text[k] == pattern[j]){\n            k++;\n            j++;\n        }\n        if(j == pattern.length){\n            result.push(i);\n        }\n        i++;\n    }\n    return result;\n}\n",
    "    let result = [];\n    let i = 0;\n    while(i < text.length){\n        let j = 0;\n        while(j < pattern.length){\n            if(text[i+j] !== pattern[j]){\n                break;\n            }\n            j++;\n        }\n        if(j === pattern.length){\n            result.push(i);\n        }\n        i++;\n    }\n    return result;\n}\n",
    "    var count = 0;\n    var pos = [];\n    for(var i = 0; i < text.length; i++){\n        if(text.substring(i, i + pattern.length) == pattern){\n            count++;\n            pos.push(i);\n        }\n    }\n    if(count == 0){\n        return undefined;\n    }\n    else{\n        return {\n            count: count,\n            pos: pos\n        };\n    }\n}\n",
    "    var result = [];\n    var index = text.indexOf(pattern);\n    while(index != -1){\n        result.push(index);\n        index = text.indexOf(pattern, index + 1);\n    }\n    return result;\n}\n",
    "    var count = 0;\n    var index = [];\n    for(var i = 0; i < text.length; i++){\n        if(text.substring(i, i + pattern.length) == pattern){\n            count++;\n            index.push(i);\n        }\n    }\n    if(count == 0){\n        return undefined;\n    }\n    else{\n        return [count, index];\n    }\n}\n",
    "  var result = [];\n  var index = 0;\n  while(index < text.length){\n    var index_of_pattern = text.indexOf(pattern, index);\n    if(index_of_pattern === -1){\n      break;\n    }\n    result.push(index_of_pattern);\n    index = index_of_pattern + 1;\n  }\n  return result;\n}\n",
    "    var pos = text.indexOf(pattern);\n    var count = 0;\n    while(pos > -1){\n        count++;\n        pos = text.indexOf(pattern, pos + 1);\n    }\n    return count;\n}",
    "    var pos = text.indexOf(pattern);\n    if(pos == -1){\n        return undefined;\n    }\n    var count = 0;\n    while(pos != -1){\n        count++;\n        pos = text.indexOf(pattern, pos + 1);\n    }\n    return count;\n}\n",
    "    var result = [];\n    var index = 0;\n    var i = 0;\n    while(i < text.length){\n        if(text[i] == pattern[index]){\n            index++;\n            if(index == pattern.length){\n                result.push(i - index + 1);\n                index = 0;\n            }\n        }\n        else{\n            index = 0;\n        }\n        i++;\n    }\n    return result;\n}",
    "    let result = [];\n    let index = 0;\n    while(index < text.length){\n        let index_of_pattern = text.indexOf(pattern, index);\n        if(index_of_pattern === -1){\n            break;\n        }\n        result.push(index_of_pattern);\n        index = index_of_pattern + 1;\n    }\n    return result;\n}\n",
    "    var pos = 0;\n    var count = 0;\n    var result = [];\n    while(true){\n        pos = text.indexOf(pattern, pos);\n        if(pos >= 0){\n            count++;\n            result.push(pos);\n            pos += pattern.length;\n        }else{\n            break;\n        }\n    }\n    if(count > 0){\n        return result;\n    }else{\n        return undefined;\n    }\n}\n",
    "    var pos = text.indexOf(pattern);\n    var count = 0;\n    while(pos > -1){\n        count++;\n        pos = text.indexOf(pattern, pos + 1);\n    }\n    return count;\n}",
    "    var result = [];\n    var index = text.indexOf(pattern);\n    while(index >= 0){\n        result.push(index);\n        index = text.indexOf(pattern, index + 1);\n    }\n    return result;\n}",
    "    var result = [];\n    var index = 0;\n    while(index < text.length){\n        index = text.indexOf(pattern, index);\n        if(index != -1){\n            result.push(index);\n            index += pattern.length;\n        }\n        else{\n            break;\n        }\n    }\n    return result;\n}",
    "    var count = 0;\n    var index = 0;\n    var result = [];\n    while(index < text.length){\n        index = text.indexOf(pattern, index);\n        if(index == -1){\n            break;\n        }\n        count++;\n        result.push(index);\n        index++;\n    }\n    return count == 0 ? undefined : result;\n}",
    "    let result = [];\n    let index = text.indexOf(pattern);\n    while(index != -1){\n        result.push(index);\n        index = text.indexOf(pattern, index + 1);\n    }\n    return result.length ? result : undefined;\n}\n",
    "    var count = 0;\n    var position = [];\n    for(var i = 0; i < text.length; i++){\n        if(text[i] === pattern[0]){\n            for(var j = 0; j < pattern.length; j++){\n                if(text[i+j] !== pattern[j]){\n                    break;\n                }\n                if(j === pattern.length - 1){\n                    count++;\n                    position.push(i);\n                }\n            }\n        }\n    }\n    if(count === 0){\n        return undefined;\n    }\n    return {count: count, position: position};\n}",
    "    var result = [];\n    var index = text.indexOf(pattern);\n    while(index >= 0){\n        result.push(index);\n        index = text.indexOf(pattern, index + 1);\n    }\n    return result;\n}",
    "    var pos = 0;\n    var count = 0;\n    var result = [];\n    while(pos < text.length){\n        var index = text.indexOf(pattern, pos);\n        if(index == -1){\n            break;\n        }\n        count++;\n        result.push(index);\n        pos = index + 1;\n    }\n    if(count == 0){\n        return undefined;\n    }\n    return result;\n}\n",
    "  var result = [];\n  var index = text.indexOf(pattern);\n  while(index >= 0){\n    result.push(index);\n    index = text.indexOf(pattern, index + 1);\n  }\n  return result;\n}\n"
  ]
}