{
  "name": "mbpp_611_max_of_nth",
  "language": "js",
  "prompt": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_611_max_of_nth.py",
  "prompt_terminology": "reworded",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "results": [
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 1; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for (var i = 0; i < test_list.length; i++){\n        if (test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n\tvar max = test_list[0][N];\n\tfor(var i = 0; i < test_list.length; i++){\n\t\tif(test_list[i][N] > max){\n\t\t\tmax = test_list[i][N];\n\t\t}\n\t}\n\treturn max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 1; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = 0;\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 1; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n\tvar max = test_list[0][N];\n\tfor(var i = 0; i < test_list.length; i++){\n\t\tif(test_list[i][N] > max){\n\t\t\tmax = test_list[i][N];\n\t\t}\n\t}\n\treturn max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = 0;\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for (var i = 1; i < test_list.length; i++){\n        if (test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = 0;\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 1; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n  var max = test_list[0][N];\n  for (var i = 1; i < test_list.length; i++){\n    if (test_list[i][N] > max){\n      max = test_list[i][N];\n    }\n  }\n  return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = 0;\n    for (var i = 0; i < test_list.length; i++){\n        if (test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 1; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for (var i = 0; i < test_list.length; i++){\n        if (test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = 0;\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n\tvar max = test_list[0][N];\n\tfor(var i = 0; i < test_list.length; i++){\n\t\tif(test_list[i][N] > max){\n\t\t\tmax = test_list[i][N];\n\t\t}\n\t}\n\treturn max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = 0;\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n\tvar max = test_list[0][N];\n\tfor(var i = 1; i < test_list.length; i++){\n\t\tif(test_list[i][N] > max){\n\t\t\tmax = test_list[i][N];\n\t\t}\n\t}\n\treturn max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = 0;\n    for (var i = 0; i < test_list.length; i++){\n        if (test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 1; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n  var max = test_list[0][N];\n  for (var i = 0; i < test_list.length; i++){\n    if (test_list[i][N] > max){\n      max = test_list[i][N];\n    }\n  }\n  return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 1; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 1; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n  var max = test_list[0][N];\n  for(var i = 0; i < test_list.length; i++){\n    if(test_list[i][N] > max){\n      max = test_list[i][N];\n    }\n  }\n  return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for (var i = 0; i < test_list.length; i++){\n        if (test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = 0;\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 1; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 1; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n  var max = test_list[0][N];\n  for(var i = 0; i < test_list.length; i++){\n    if(test_list[i][N] > max){\n      max = test_list[i][N];\n    }\n  }\n  return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n  var max = 0;\n  for(var i = 0; i < test_list.length; i++){\n    if(test_list[i][N] > max){\n      max = test_list[i][N];\n    }\n  }\n  return max;\n}\n\nvar test_list = [[1,2,3], [4,5,6], [7,8,9]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = 0;\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 1; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n\tvar max = test_list[0][N];\n\tfor(var i = 0; i < test_list.length; i++){\n\t\tif(test_list[i][N] > max){\n\t\t\tmax = test_list[i][N];\n\t\t}\n\t}\n\treturn max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = 0;\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for (var i = 0; i < test_list.length; i++){\n        if (test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n\tvar max = test_list[0][N];\n\tfor(var i = 0; i < test_list.length; i++){\n\t\tif(test_list[i][N] > max){\n\t\t\tmax = test_list[i][N];\n\t\t}\n\t}\n\treturn max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = 0;\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = -Infinity;\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n\tvar max = test_list[0][N];\n\tfor(var i = 0; i < test_list.length; i++){\n\t\tif(test_list[i][N] > max){\n\t\t\tmax = test_list[i][N];\n\t\t}\n\t}\n\treturn max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n\tvar max = 0;\n\tfor(var i = 0; i < test_list.length; i++){\n\t\tif(test_list[i][N] > max){\n\t\t\tmax = test_list[i][N];\n\t\t}\n\t}\n\treturn max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n  var max = 0;\n  for (var i = 0; i < test_list.length; i++){\n    if (test_list[i][N] > max){\n      max = test_list[i][N];\n    }\n  }\n  return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n  var max = test_list[0][N];\n  for(var i = 0; i < test_list.length; i++){\n    if(test_list[i][N] > max){\n      max = test_list[i][N];\n    }\n  }\n  return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 1; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = 0;\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 1; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n  var max = 0;\n  for(var i = 0; i < test_list.length; i++){\n    if(test_list[i][N] > max){\n      max = test_list[i][N];\n    }\n  }\n  return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for (var i = 0; i < test_list.length; i++){\n        if (test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 1; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n  var max = test_list[0][N];\n  for (var i = 0; i < test_list.length; i++){\n    if (test_list[i][N] > max){\n      max = test_list[i][N];\n    }\n  }\n  return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n  var max = test_list[0][N];\n  for (var i = 0; i < test_list.length; i++){\n    if (test_list[i][N] > max){\n      max = test_list[i][N];\n    }\n  }\n  return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = 0;\n    for (var i = 0; i < test_list.length; i++){\n        if (test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nvar test_list = [[1,2,3,4,5], [2,3,4,5,6], [3,4,5,6,7], [4,5,6,7,8], [5,6,7,8,9]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = 0;\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n\tvar max = test_list[0][N];\n\tfor(var i = 0; i < test_list.length; i++){\n\t\tif(test_list[i][N] > max){\n\t\t\tmax = test_list[i][N];\n\t\t}\n\t}\n\treturn max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n  var max = test_list[0][N];\n  for(var i = 0; i < test_list.length; i++){\n    if(test_list[i][N] > max){\n      max = test_list[i][N];\n    }\n  }\n  return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 1; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 1; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n  var max = test_list[0][N];\n  for(var i = 0; i < test_list.length; i++){\n    if(test_list[i][N] > max){\n      max = test_list[i][N];\n    }\n  }\n  return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n  var max = test_list[0][N];\n  for (var i = 0; i < test_list.length; i++){\n    if (test_list[i][N] > max){\n      max = test_list[i][N];\n    }\n  }\n  return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n  var max = test_list[0][N];\n  for(var i = 0; i < test_list.length; i++){\n    if(test_list[i][N] > max){\n      max = test_list[i][N];\n    }\n  }\n  return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n  var max = 0;\n  for(var i = 0; i < test_list.length; i++){\n    if(test_list[i][N] > max){\n      max = test_list[i][N];\n    }\n  }\n  return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 1; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 1; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 1; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n  var max = test_list[0][N];\n  for(var i = 0; i < test_list.length; i++){\n    if(test_list[i][N] > max){\n      max = test_list[i][N];\n    }\n  }\n  return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n  var max = 0;\n  for(var i = 0; i < test_list.length; i++){\n    if(test_list[i][N] > max){\n      max = test_list[i][N];\n    }\n  }\n  return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for (var i = 1; i < test_list.length; i++){\n        if (test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n  var max = test_list[0][N];\n  for(var i = 1; i < test_list.length; i++){\n    if(test_list[i][N] > max){\n      max = test_list[i][N];\n    }\n  }\n  return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for (var i = 0; i < test_list.length; i++){\n        if (test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n  var max = test_list[0][N];\n  for(var i = 0; i < test_list.length; i++){\n    if(test_list[i][N] > max){\n      max = test_list[i][N];\n    }\n  }\n  return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 1; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for (var i = 0; i < test_list.length; i++){\n        if (test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n  var max = test_list[0][N];\n  for (var i = 0; i < test_list.length; i++){\n    if (test_list[i][N] > max){\n      max = test_list[i][N];\n    }\n  }\n  return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n  var max = test_list[0][N];\n  for(var i = 0; i < test_list.length; i++){\n    if(test_list[i][N] > max){\n      max = test_list[i][N];\n    }\n  }\n  return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n\tvar max = 0;\n\tfor(var i = 0; i < test_list.length; i++){\n\t\tif(test_list[i][N] > max){\n\t\t\tmax = test_list[i][N];\n\t\t}\n\t}\n\treturn max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = 0;\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n\tvar max = test_list[0][N];\n\tfor(var i = 1; i < test_list.length; i++){\n\t\tif(test_list[i][N] > max){\n\t\t\tmax = test_list[i][N];\n\t\t}\n\t}\n\treturn max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for (var i = 0; i < test_list.length; i++){\n        if (test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = 0;\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 1; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n  var max = 0;\n  for(var i = 0; i < test_list.length; i++){\n    if(test_list[i][N] > max){\n      max = test_list[i][N];\n    }\n  }\n  return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max_value = test_list[0][N];\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max_value){\n            max_value = test_list[i][N];\n        }\n    }\n    return max_value;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = 0;\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = 0;\n    for(var i=0; i<test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 1; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n  var max = test_list[0][N];\n  for (var i = 0; i < test_list.length; i++){\n    if (test_list[i][N] > max){\n      max = test_list[i][N];\n    }\n  }\n  return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n  var max = test_list[0][N];\n  for(var i = 1; i < test_list.length; i++){\n    if(test_list[i][N] > max){\n      max = test_list[i][N];\n    }\n  }\n  return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = 0;\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = 0;\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n\tvar max = test_list[0][N];\n\tfor(var i = 0; i < test_list.length; i++){\n\t\tif(test_list[i][N] > max){\n\t\t\tmax = test_list[i][N];\n\t\t}\n\t}\n\treturn max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 1; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n  var max = 0;\n  for (var i = 0; i < test_list.length; i++) {\n    if (test_list[i][N] > max) {\n      max = test_list[i][N];\n    }\n  }\n  return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = 0;\n    for (var i = 0; i < test_list.length; i++){\n        if (test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 1; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 1; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 1; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = 0;\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for (var i = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n\tvar max = 0;\n\tfor(var i = 0; i < test_list.length; i++){\n\t\tif(test_list[i][N] > max){\n\t\t\tmax = test_list[i][N];\n\t\t}\n\t}\n\treturn max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 1; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = 0;\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = 0;\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = 0;\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = 0;\n    for (var i = 0; i < test_list.length; i++){\n        if (test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for (var i = 0; i < test_list.length; i++){\n        if (test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 1; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = 0;\n    for (var i = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for (var i = 0; i < test_list.length; i++){\n        if (test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for (var i = 0; i < test_list.length; i++){\n        if (test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = 0;\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 1; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n  var max = 0;\n  for(var i = 0; i < test_list.length; i++){\n    if(test_list[i][N] > max){\n      max = test_list[i][N];\n    }\n  }\n  return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = 0;\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n  var max = test_list[0][N];\n  for(var i = 0; i < test_list.length; i++){\n    if(test_list[i][N] > max){\n      max = test_list[i][N];\n    }\n  }\n  return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n  var max = test_list[0][N];\n  for(var i = 0; i < test_list.length; i++){\n    if(test_list[i][N] > max){\n      max = test_list[i][N];\n    }\n  }\n  return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max_value = test_list[0][N];\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max_value){\n            max_value = test_list[i][N];\n        }\n    }\n    return max_value;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n\tvar max = test_list[0][N];\n\tfor (var i = 0; i < test_list.length; i++){\n\t\tif (test_list[i][N] > max){\n\t\t\tmax = test_list[i][N];\n\t\t}\n\t}\n\treturn max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n  var max = 0;\n  for (var i = 0; i < test_list.length; i++){\n    if (test_list[i][N] > max){\n      max = test_list[i][N];\n    }\n  }\n  return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n  var max = test_list[0][N];\n  for (var i = 0; i < test_list.length; i++){\n    if (test_list[i][N] > max){\n      max = test_list[i][N];\n    }\n  }\n  return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for (var i = 0; i < test_list.length; i++){\n        if (test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = 0;\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n  var max = test_list[0][N];\n  for (var i = 0; i < test_list.length; i++) {\n    if (test_list[i][N] > max) {\n      max = test_list[i][N];\n    }\n  }\n  return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 1; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for (var i = 1; i < test_list.length; i++){\n        if (test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n  var max = test_list[0][N];\n  for (var i = 0; i < test_list.length; i++){\n    if (test_list[i][N] > max){\n      max = test_list[i][N];\n    }\n  }\n  return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n\tvar max = 0;\n\tfor (var i = 0; i < test_list.length; i++){\n\t\tif (test_list[i][N] > max){\n\t\t\tmax = test_list[i][N];\n\t\t}\n\t}\n\treturn max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = 0;\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nvar test_list = [[1,2,3], [4,5,6], [7,8,9]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for (var i = 0; i < test_list.length; i++){\n        if (test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = 0;\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nvar test_list = [[1,2,3],[4,5,6],[7,8,9]];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n  var max = test_list[0][N];\n  for (var i = 0; i < test_list.length; i++){\n    if (test_list[i][N] > max){\n      max = test_list[i][N];\n    }\n  }\n  return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n  var max = 0;\n  for (var i = 0; i < test_list.length; i++){\n    if (test_list[i][N] > max){\n      max = test_list[i][N];\n    }\n  }\n  return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = 0;\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n  var max = 0;\n  for(var i = 0; i < test_list.length; i++){\n    if(test_list[i][N] > max){\n      max = test_list[i][N];\n    }\n  }\n  return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 1; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n  var max = test_list[0][N];\n  for(var i = 0; i < test_list.length; i++){\n    if(test_list[i][N] > max){\n      max = test_list[i][N];\n    }\n  }\n  return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = 0;\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 1; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = 0;\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 0; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n  var max = test_list[0][N];\n  for(var i = 0; i < test_list.length; i++){\n    if(test_list[i][N] > max){\n      max = test_list[i][N];\n    }\n  }\n  return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n    var max = test_list[0][N];\n    for(var i = 1; i < test_list.length; i++){\n        if(test_list[i][N] > max){\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nfunction max_of_nth(test_list, N){\n  var max = test_list[0][N];\n  for (var i = 0; i < test_list.length; i++){\n    if (test_list[i][N] > max){\n      max = test_list[i][N];\n    }\n  }\n  return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}