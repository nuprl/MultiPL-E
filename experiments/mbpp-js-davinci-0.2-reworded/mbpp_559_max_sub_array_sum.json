{
  "name": "mbpp_559_max_sub_array_sum",
  "language": "js",
  "prompt": "//Write a function to find the sum of the largest contiguous subarray in the given array.\nfunction max_sub_array_sum(a, size){\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_559_max_sub_array_sum.py",
  "prompt_terminology": "reworded",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sub_array_sum;\n  assert.deepEqual(candidate([-2, -3, 4, -1, -2, 1, 5, -3], 8),7);\n  assert.deepEqual(candidate([-3, -4, 5, -2, -3, 2, 6, -4], 8),8);\n  assert.deepEqual(candidate([-4, -5, 6, -3, -4, 3, 7, -5], 8),10);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    var max_so_far = 0, max_ending_here = 0;\n    for (var i = 0; i < size; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    return max_so_far;\n}\n",
    "    var max_so_far = 0, max_ending_here = 0;\n    for (var i = 0; i < size; i++)\n    {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    return max_so_far;\n}\n",
    "    var max_so_far = 0, max_ending_here = 0;\n    for (var i = 0; i < size; i++){\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    return max_so_far;\n}\n",
    "    var max_so_far = Number.NEGATIVE_INFINITY,\n        max_ending_here = 0,\n        start = 0,\n        end = 0,\n        s = 0;\n \n    for (var i = 0; i < size; i++){\n        max_ending_here += a[i];\n \n        if (max_so_far < max_ending_here){\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n \n        if (max_ending_here < 0){\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    console.log(\"Maximum contiguous sum is \" + max_so_far);\n    console.log(\"Starting index \" + start);\n    console.log(\"Ending index \" + end);\n}\n ",
    "    let max_so_far = a[0];\n    let curr_max = a[0];\n    for (let i = 1; i < size; i++) {\n        curr_max = Math.max(a[i], curr_max+a[i]);\n        max_so_far = Math.max(max_so_far, curr_max);\n    }\n    return max_so_far;\n}\n",
    "    var max_so_far = 0, max_ending_here = 0;\n    for (var i = 0; i < size; i++){\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    return max_so_far;\n}\n",
    "    let max_so_far = 0, max_ending_here = 0;\n    for (let i = 0; i < size; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    return max_so_far;\n}\n",
    "    var max_so_far = 0, max_ending_here = 0;\n    for (var i = 0; i < size; i++){\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    return max_so_far;\n}\n",
    "  let max_so_far = 0, max_ending_here = 0;\n  for (let i = 0; i < size; i++) {\n    max_ending_here = max_ending_here + a[i];\n    if (max_ending_here < 0)\n      max_ending_here = 0;\n    if (max_so_far < max_ending_here)\n      max_so_far = max_ending_here;\n  }\n  return max_so_far;\n}",
    "    var max_so_far = 0, max_ending_here = 0;\n    for (var i = 0; i < size; i++){\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    return max_so_far;\n}\n",
    "    var max_so_far = 0, max_ending_here = 0;\n    for (var i = 0; i < size; i++){\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    return max_so_far;\n}\n",
    "  let max_so_far = 0, max_ending_here = 0;\n \n  for (let i = 0; i < size; i++)\n  {\n    max_ending_here = max_ending_here + a[i];\n    if (max_ending_here < 0)\n        max_ending_here = 0;\n \n    /* Do not compare for all elements. Compare only    \n       when  max_ending_here > 0 */\n    else if (max_so_far < max_ending_here)\n        max_so_far = max_ending_here;\n  }\n  return max_so_far;\n}\n",
    "    let max_so_far = 0, max_ending_here = 0;\n    for (let i = 0; i < size; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    return max_so_far;\n}\n",
    "    var max_so_far = 0, max_ending_here = 0;\n    for (var i = 0; i < size; i++){\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    return max_so_far;\n}\n",
    "    var max_so_far = 0, max_ending_here = 0;\n    for (var i = 0; i < size; i++){\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    return max_so_far;\n}\n",
    "    let max_so_far = 0, max_ending_here = 0;\n    for (let i = 0; i < size; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    return max_so_far;\n}\n",
    "    var max_so_far = 0, max_ending_here = 0;\n    for (var i = 0; i < size; i++){\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    return max_so_far;\n}\n",
    "    var max_so_far = 0, max_ending_here = 0;\n    for (var i = 0; i < size; i++)\n    {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    return max_so_far;\n}\nvar a = [-2, -3, 4, -1, -2, 1, 5, -3];\nvar n = a.length;\nvar max_sum = max_sub_array_sum(a, n);",
    "    let max_so_far = 0, max_ending_here = 0;\n    for (let i = 0; i < size; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        /* Do not compare for all elements. Compare only\n           when  max_ending_here > 0 */\n        else if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    return max_so_far;\n}\n",
    "    let max_so_far = 0, max_ending_here = 0;\n    for (let i = 0; i < size; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    return max_so_far;\n}\n"
  ]
}