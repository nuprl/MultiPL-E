{
  "name": "mbpp_806_max_run_uppercase",
  "language": "js",
  "prompt": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_806_max_run_uppercase.py",
  "prompt_terminology": "reworded",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "results": [
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_count = 0;\n    var count = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            count++;\n        }\n        else{\n            if(count > max_count){\n                max_count = count;\n            }\n            count = 0;\n        }\n    }\n    return max_count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpgca_aagb.js:24:10)\n    at Object.<anonymous> (/tmp/tmpgca_aagb.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            cur_run++;\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n        }\n        else{\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i=0; i<test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            run++;\n        }\n        else{\n            if(run > max_run){\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpch107uog.js:25:10)\n    at Object.<anonymous> (/tmp/tmpch107uog.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var count = 0;\n    var max_count = 0;\n    for(var i=0; i<test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            count++;\n            if(count > max_count){\n                max_count = count;\n            }\n        }\n        else{\n            count = 0;\n        }\n    }\n    return max_count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n\tvar max_run = 0;\n\tvar current_run = 0;\n\tfor (var i = 0; i < test_str.length; i++){\n\t\tif (test_str[i] === test_str[i].toUpperCase()){\n\t\t\tcurrent_run += 1;\n\t\t\tif (current_run > max_run){\n\t\t\t\tmax_run = current_run;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tcurrent_run = 0;\n\t\t}\n\t}\n\treturn max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max = 0;\n    var count = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] === test_str[i].toUpperCase()){\n            count++;\n        }\n        else{\n            count = 0;\n        }\n        if(count > max){\n            max = count;\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            cur_run++;\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n        }\n        else{\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if(curr_run > max_run){\n        max_run = curr_run;\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            run++;\n        }\n        else{\n            if(run > max_run){\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpch107uog.js:25:10)\n    at Object.<anonymous> (/tmp/tmpch107uog.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            cur_run++;\n        }\n        else{\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmprfgxdske.js:25:10)\n    at Object.<anonymous> (/tmp/tmprfgxdske.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] === test_str[i].toUpperCase()){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if(curr_run > max_run){\n        max_run = curr_run;\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_count = 0;\n    var curr_count = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            curr_count++;\n        }\n        else{\n            if(curr_count > max_count){\n                max_count = curr_count;\n            }\n            curr_count = 0;\n        }\n    }\n    if(curr_count > max_count){\n        max_count = curr_count;\n    }\n    return max_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if(curr_run > max_run){\n        max_run = curr_run;\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpu14_2hvy.js:25:10)\n    at Object.<anonymous> (/tmp/tmpu14_2hvy.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] === test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            run++;\n        }\n        else{\n            if(run > max_run){\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpgexpxjzb.js:24:10)\n    at Object.<anonymous> (/tmp/tmpgexpxjzb.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    var i;\n    for(i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_count = 0;\n    var count = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            count++;\n        }\n        else{\n            if(count > max_count){\n                max_count = count;\n            }\n            count = 0;\n        }\n    }\n    if(count > max_count){\n        max_count = count;\n    }\n    return max_count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] === test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            run++;\n        }\n        else{\n            if(run > max_run){\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if(run > max_run){\n        max_run = run;\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] === test_str[i].toUpperCase()){\n            run++;\n        }\n        else{\n            if(run > max_run){\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if(run > max_run){\n        max_run = run;\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n        }\n        else{\n            curr_run = 0;\n        }\n        if(curr_run > max_run){\n            max_run = curr_run;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            curr_run++;\n        }\n        else{\n            curr_run = 0;\n        }\n        if(curr_run > max_run){\n            max_run = curr_run;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] === test_str[i].toUpperCase()){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpk49xn3fj.js:25:10)\n    at Object.<anonymous> (/tmp/tmpk49xn3fj.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    let max_count = 0;\n    let count = 0;\n    for(let i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            count++;\n        }\n        else{\n            if(count > max_count){\n                max_count = count;\n            }\n            count = 0;\n        }\n    }\n    return max_count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpjhigg5jj.js:24:10)\n    at Object.<anonymous> (/tmp/tmpjhigg5jj.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpu14_2hvy.js:25:10)\n    at Object.<anonymous> (/tmp/tmpu14_2hvy.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            cur_run++;\n        }\n        else{\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    if(cur_run > max_run){\n        max_run = cur_run;\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i=0; i<test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            cur_run++;\n        }\n        else{\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmp3mscfcv5.js:25:10)\n    at Object.<anonymous> (/tmp/tmp3mscfcv5.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i=0; i<test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            run++;\n            if(run > max_run){\n                max_run = run;\n            }\n        }\n        else{\n            run = 0;\n        }\n    }\n    return max_run;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpu14_2hvy.js:25:10)\n    at Object.<anonymous> (/tmp/tmpu14_2hvy.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var current_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            current_run++;\n            if(current_run > max_run){\n                max_run = current_run;\n            }\n        }\n        else{\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    var i;\n    for(i=0; i<test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmp6ito3w1h.js:26:10)\n    at Object.<anonymous> (/tmp/tmp6ito3w1h.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i=0; i<test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            cur_run++;\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n        }\n        else{\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\nvar test_strnconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpq_x936wj.js:19\nvar test_str = \"AAABBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC\nn\nSyntaxError: Invalid or unexpected token\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_count = 0;\n    var count = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            count++;\n            if(count > max_count){\n                max_count = count;\n            }\n        }else{\n            count = 0;\n        }\n    }\n    return max_count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpu14_2hvy.js:25:10)\n    at Object.<anonymous> (/tmp/tmpu14_2hvy.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i=0; i<test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] === test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var current_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] === test_str[i].toUpperCase()){\n            current_run++;\n            if(current_run > max_run){\n                max_run = current_run;\n            }\n        }else{\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_count = 0;\n    var count = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            count++;\n        }\n        else{\n            if(count > max_count){\n                max_count = count;\n            }\n            count = 0;\n        }\n    }\n    return max_count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpgca_aagb.js:24:10)\n    at Object.<anonymous> (/tmp/tmpgca_aagb.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] === test_str[i].toUpperCase()){\n            run++;\n            if(run > max_run){\n                max_run = run;\n            }\n        }\n        else{\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n        }\n        else{\n            curr_run = 0;\n        }\n        if(curr_run > max_run){\n            max_run = curr_run;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if(curr_run > max_run){\n        max_run = curr_run;\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] === test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] === test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] === test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max = 0;\n    var count = 0;\n    var str = test_str.split(\"\");\n    for(var i = 0; i < str.length; i++){\n        if(str[i] == str[i].toUpperCase()){\n            count++;\n            if(count > max){\n                max = count;\n            }\n        }\n        else{\n            count = 0;\n        }\n    }\n    return max;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            cur_run++;\n        }\n        else{\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    if(cur_run > max_run){\n        max_run = cur_run;\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            curr_run += 1;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if(curr_run > max_run){\n        max_run = curr_run;\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var count = 0;\n    var max_count = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            count++;\n            if(count > max_count){\n                max_count = count;\n            }\n        }\n        else{\n            count = 0;\n        }\n    }\n    return max_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_count = 0;\n    var count = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            count++;\n            if(count > max_count){\n                max_count = count;\n            }\n        }\n        else{\n            count = 0;\n        }\n    }\n    return max_count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] === test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i=0; i<test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            cur_run++;\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n        }else{\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            run++;\n            if(run > max_run){\n                max_run = run;\n            }\n        }else{\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if(curr_run > max_run){\n        max_run = curr_run;\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            cur_run++;\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n        }\n        else{\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] === test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_count = 0;\n    var count = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            count++;\n            if(count > max_count){\n                max_count = count;\n            }\n        }\n        else{\n            count = 0;\n        }\n    }\n    return max_count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            run++;\n            if(run > max_run){\n                max_run = run;\n            }\n        }\n        else{\n            run = 0;\n        }\n    }\n    return max_run;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] === test_str[i].toUpperCase()){\n            run++;\n        }\n        else{\n            if(run > max_run){\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmp4xbdltmr.js:25:10)\n    at Object.<anonymous> (/tmp/tmp4xbdltmr.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if(curr_run > max_run){\n        max_run = curr_run;\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpu14_2hvy.js:25:10)\n    at Object.<anonymous> (/tmp/tmpu14_2hvy.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] === test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i=0; i<test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if(curr_run > max_run){\n        max_run = curr_run;\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpu14_2hvy.js:25:10)\n    at Object.<anonymous> (/tmp/tmpu14_2hvy.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            run++;\n            if(run > max_run){\n                max_run = run;\n            }\n        }\n        else{\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            cur_run++;\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n        }\n        else{\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] === test_str[i].toUpperCase()){\n            run++;\n            if(run > max_run){\n                max_run = run;\n            }\n        }\n        else{\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            cur_run++;\n        }\n        else{\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    if(cur_run > max_run){\n        max_run = cur_run;\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            cur_run++;\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n        }\n        else{\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i].match(/[A-Z]/)){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            cur_run++;\n        }\n        else{\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpk3kmja61.js:24:10)\n    at Object.<anonymous> (/tmp/tmpk3kmja61.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    let max_run = 0;\n    let current_run = 0;\n    for(let i = 0; i < test_str.length; i++){\n        if(test_str[i] === test_str[i].toUpperCase()){\n            current_run++;\n            if(current_run > max_run){\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var count = 0;\n    var max_count = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            count++;\n            if(count > max_count){\n                max_count = count;\n            }\n        }\n        else{\n            count = 0;\n        }\n    }\n    return max_count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    var i;\n    for(i=0;i<test_str.length;i++){\n        if(test_str[i]>='A' && test_str[i]<='Z'){\n            curr_run++;\n        }\n        else{\n            if(curr_run>max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if(curr_run>max_run){\n        max_run = curr_run;\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for (var i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            curr_run++;\n        } else {\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpb3_f519p.js:24:10)\n    at Object.<anonymous> (/tmp/tmpb3_f519p.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for (var i = 0; i < test_str.length; i++){\n        if (test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n            if (curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var count = 0;\n    var max_count = 0;\n    for(var i=0; i<test_str.length; i++){\n        if(test_str[i] === test_str[i].toUpperCase()){\n            count++;\n        }\n        else{\n            if(count > max_count){\n                max_count = count;\n            }\n            count = 0;\n        }\n    }\n    if(count > max_count){\n        max_count = count;\n    }\n    return max_count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for (var i = 0; i < test_str.length; i++){\n        if (test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n        }\n        else{\n            if (curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if (curr_run > max_run){\n        max_run = curr_run;\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if(curr_run > max_run){\n        max_run = curr_run;\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            run++;\n        }\n        else{\n            run = 0;\n        }\n        if(run > max_run){\n            max_run = run;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] === test_str[i].toUpperCase()){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if(curr_run > max_run){\n        max_run = curr_run;\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            cur_run++;\n        }\n        else{\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpb8i8o8uu.js:25:10)\n    at Object.<anonymous> (/tmp/tmpb8i8o8uu.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] === test_str[i].toUpperCase()){\n            curr_run += 1;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for (var i = 0; i < test_str.length; i++){\n        if (test_str[i] === test_str[i].toUpperCase()){\n            curr_run += 1;\n            if (curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var run = 0;\n    for(var i=0; i<test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            run++;\n            if(run > max_run){\n                max_run = run;\n            }\n        }\n        else{\n            run = 0;\n        }\n    }\n    return max_run;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if(curr_run > max_run){\n        max_run = curr_run;\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            run++;\n            if(run > max_run){\n                max_run = run;\n            }\n        }\n        else{\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] === test_str[i].toUpperCase()){\n            run++;\n        }\n        else{\n            if(run > max_run){\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmp4xbdltmr.js:25:10)\n    at Object.<anonymous> (/tmp/tmp4xbdltmr.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if(curr_run > max_run){\n        max_run = curr_run;\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            cur_run++;\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n        }\n        else{\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpu14_2hvy.js:25:10)\n    at Object.<anonymous> (/tmp/tmpu14_2hvy.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            run++;\n        }\n        else{\n            if(run > max_run){\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpgexpxjzb.js:24:10)\n    at Object.<anonymous> (/tmp/tmpgexpxjzb.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if(curr_run > max_run){\n        max_run = curr_run;\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_count = 0;\n    var count = 0;\n    for(var i=0; i<test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            count++;\n            if(count > max_count){\n                max_count = count;\n            }\n        }\n        else{\n            count = 0;\n        }\n    }\n    return max_count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            cur_run++;\n        }\n        else{\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpb8i8o8uu.js:25:10)\n    at Object.<anonymous> (/tmp/tmpb8i8o8uu.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_count = 0;\n    var count = 0;\n    for(var i=0; i<test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            count++;\n            if(count > max_count){\n                max_count = count;\n            }\n        }\n        else{\n            count = 0;\n        }\n    }\n    return max_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            cur_run++;\n        }\n        else{\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmprfgxdske.js:25:10)\n    at Object.<anonymous> (/tmp/tmprfgxdske.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i=0; i<test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for (var i = 0; i < test_str.length; i++){\n        if (test_str[i] === test_str[i].toUpperCase()){\n            curr_run++;\n            if (curr_run > max_run){\n                max_run = curr_run;\n            }\n        } else {\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] === test_str[i].toUpperCase()){\n            run++;\n            if(run > max_run){\n                max_run = run;\n            }\n        }else{\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            run++;\n            if(run > max_run){\n                max_run = run;\n            }\n        }\n        else{\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] === test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n        }\n        else{\n            curr_run = 0;\n        }\n        if(curr_run > max_run){\n            max_run = curr_run;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            run++;\n        }\n        else{\n            if(run > max_run){\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if(run > max_run){\n        max_run = run;\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            curr_run++;\n        }else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpmgoez6w1.js:24:10)\n    at Object.<anonymous> (/tmp/tmpmgoez6w1.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] === test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n        }\n        else{\n            curr_run = 0;\n        }\n        if(curr_run > max_run){\n            max_run = curr_run;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for (var i = 0; i < test_str.length; i++){\n        if (test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n            if (curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for (var i = 0; i < test_str.length; i++){\n        if (test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n            if (curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            run++;\n        }\n        else{\n            if(run > max_run){\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if(run > max_run){\n        max_run = run;\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var current_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            current_run++;\n            if(current_run > max_run){\n                max_run = current_run;\n            }\n        }\n        else{\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if(curr_run > max_run){\n        max_run = curr_run;\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            run++;\n            if(run > max_run){\n                max_run = run;\n            }\n        }\n        else{\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var count = 0;\n    var max_count = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            count++;\n        }\n        else{\n            if(count > max_count){\n                max_count = count;\n            }\n            count = 0;\n        }\n    }\n    return max_count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpqomiduai.js:24:10)\n    at Object.<anonymous> (/tmp/tmpqomiduai.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            cur_run++;\n        }\n        else{\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    if(cur_run > max_run){\n        max_run = cur_run;\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] === test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        } else {\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_count = 0;\n    var count = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            count++;\n        }\n        else{\n            if(count > max_count){\n                max_count = count;\n            }\n            count = 0;\n        }\n    }\n    if(count > max_count){\n        max_count = count;\n    }\n    return max_count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] === test_str[i].toUpperCase()){\n            cur_run++;\n        }\n        else{\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpuoa5tr3y.js:25:10)\n    at Object.<anonymous> (/tmp/tmpuoa5tr3y.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max = 0;\n    var count = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            count++;\n            if(count > max){\n                max = count;\n            }\n        }\n        else{\n            count = 0;\n        }\n    }\n    return max;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            cur_run++;\n        }\n        else{\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpb8i8o8uu.js:25:10)\n    at Object.<anonymous> (/tmp/tmpb8i8o8uu.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var current_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            current_run += 1;\n        }\n        else{\n            if(current_run > max_run){\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpnya58n67.js:25:10)\n    at Object.<anonymous> (/tmp/tmpnya58n67.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpu14_2hvy.js:25:10)\n    at Object.<anonymous> (/tmp/tmpu14_2hvy.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if(curr_run > max_run){\n        max_run = curr_run;\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            cur_run++;\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n        }\n        else{\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if(curr_run > max_run){\n        max_run = curr_run;\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] === test_str[i].toUpperCase()){\n            run++;\n            if(run > max_run){\n                max_run = run;\n            }\n        }\n        else{\n            run = 0;\n        }\n    }\n    return max_run;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] === test_str[i].toUpperCase()){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpk49xn3fj.js:25:10)\n    at Object.<anonymous> (/tmp/tmpk49xn3fj.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            cur_run++;\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n        }\n        else{\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            cur_run++;\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n        }\n        else{\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            cur_run++;\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n        }\n        else{\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            cur_run++;\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n        }\n        else{\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] === test_str[i].toUpperCase()){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpk49xn3fj.js:25:10)\n    at Object.<anonymous> (/tmp/tmpk49xn3fj.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_count = 0;\n    var count = 0;\n    for(var i=0; i<test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            count++;\n        }\n        else{\n            if(count > max_count){\n                max_count = count;\n            }\n            count = 0;\n        }\n    }\n    return max_count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmp9ois7nl9.js:24:10)\n    at Object.<anonymous> (/tmp/tmp9ois7nl9.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            cur_run++;\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n        }\n        else{\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var run = 0;\n    for (var i = 0; i < test_str.length; i++){\n        if (test_str[i] === test_str[i].toUpperCase()){\n            run++;\n            if (run > max_run){\n                max_run = run;\n            }\n        }\n        else {\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            cur_run++;\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n        }\n        else{\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            cur_run++;\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n        }\n        else{\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_count = 0;\n    var count = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            count++;\n            if(count > max_count){\n                max_count = count;\n            }\n        }\n        else{\n            count = 0;\n        }\n    }\n    return max_count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] === test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] === test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            run++;\n        }\n        else{\n            if(run > max_run){\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if(run > max_run){\n        max_run = run;\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i=0; i<test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpmd0tzxk4.js:25:10)\n    at Object.<anonymous> (/tmp/tmpmd0tzxk4.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] === test_str[i].toUpperCase()){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            run++;\n            if(run > max_run){\n                max_run = run;\n            }\n        }else{\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i=0; i<test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var count = 0;\n    var max = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            count++;\n        }else{\n            if(count > max){\n                max = count;\n            }\n            count = 0;\n        }\n    }\n    return max;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpyku654it.js:23:10)\n    at Object.<anonymous> (/tmp/tmpyku654it.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            cur_run++;\n        }\n        else{\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmprfgxdske.js:25:10)\n    at Object.<anonymous> (/tmp/tmprfgxdske.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if(curr_run > max_run){\n        max_run = curr_run;\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_count = 0;\n    var count = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            count++;\n            if(count > max_count){\n                max_count = count;\n            }\n        }\n        else{\n            count = 0;\n        }\n    }\n    return max_count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_count = 0;\n    var count = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            count++;\n            if(count > max_count){\n                max_count = count;\n            }\n        }\n        else{\n            count = 0;\n        }\n    }\n    return max_count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            cur_run++;\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n        }\n        else{\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var cur_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            cur_run++;\n            if(cur_run > max_run){\n                max_run = cur_run;\n            }\n        }\n        else{\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            run++;\n            if(run > max_run){\n                max_run = run;\n            }\n        }\n        else{\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_count = 0;\n    var count = 0;\n    var i = 0;\n    while(i < test_str.length){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            count++;\n        }\n        else{\n            if(count > max_count){\n                max_count = count;\n            }\n            count = 0;\n        }\n        i++;\n    }\n    if(count > max_count){\n        max_count = count;\n    }\n    return max_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i=0; i<test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            curr_run++;\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z'){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if(curr_run > max_run){\n        max_run = curr_run;\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for (var i = 0; i < test_str.length; i++){\n        if (test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n            if (curr_run > max_run){\n                max_run = curr_run;\n            }\n        }\n        else{\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var max_run = 0;\n    var curr_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            curr_run++;\n        }\n        else{\n            if(curr_run > max_run){\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510545,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpu14_2hvy.js:25:10)\n    at Object.<anonymous> (/tmp/tmpu14_2hvy.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str){\n    var count = 0;\n    var max_count = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] === test_str[i].toUpperCase()){\n            count++;\n            if(count > max_count){\n                max_count = count;\n            }\n        }else{\n            count = 0;\n        }\n    }\n    return max_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}