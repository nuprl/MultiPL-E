{
  "name": "mbpp_760_unique_Element",
  "language": "js",
  "prompt": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_760_unique_Element.py",
  "prompt_terminology": "reworded",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "results": [
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = [];\n    for(var i = 0; i < arr.length; i++){\n        if(unique.indexOf(arr[i]) == -1){\n            unique.push(arr[i]);\n        }\n    }\n    if(unique.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item,index,array){\n        return array.indexOf(item) == index;\n    });\n    if(unique.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index, array){\n        return array.indexOf(item) === index;\n    });\n    if(unique.length === 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(elem, index, self) {\n        return index === self.indexOf(elem);\n    });\n    if(unique.length === 1){\n        return true;\n    }else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    if(unique.length == 1){\n        return true;\n    }\n    return false;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, i, ar){ return ar.indexOf(item) === i; });\n    if(unique.length === 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = [];\n    for(var i = 0; i < arr.length; i++){\n        if(unique.indexOf(arr[i]) == -1){\n            unique.push(arr[i]);\n        }\n    }\n    if(unique.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(elem, index, self) {\n        return index === self.indexOf(elem);\n    });\n    if(unique.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    return unique.length == 1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = [];\n    for(var i = 0; i < arr.length; i++){\n        if(unique.indexOf(arr[i]) == -1){\n            unique.push(arr[i]);\n        }\n    }\n    if(unique.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    return unique.length == 1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    let unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    if(unique.length == 1){\n        return true;\n    }else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    if(unique.length == 1){\n        return true;\n    }else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    if(unique.length === 1){\n        return true;\n    }\n    return false;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = [];\n    for(var i = 0; i < arr.length; i++){\n        if(unique.indexOf(arr[i]) == -1){\n            unique.push(arr[i]);\n        }\n    }\n    if(unique.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item,i,allItems){\n        return i == allItems.indexOf(item);\n    });\n    if(unique.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(elem, index, self) {\n        return index === self.indexOf(elem);\n    });\n    if(unique.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    return unique.length == 1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index, array){\n        return array.indexOf(item) === index;\n    });\n    if(unique.length === 1){\n        return true;\n    }else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    return unique.length === 1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = [];\n    for(var i = 0; i < arr.length; i++){\n        if(unique.indexOf(arr[i]) == -1){\n            unique.push(arr[i]);\n        }\n    }\n    if(unique.length == 1){\n        return true;\n    }else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    return unique.length == 1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    return unique.length == 1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    let unique = true;\n    for(let i = 0; i < arr.length; i++){\n        for(let j = i + 1; j < arr.length; j++){\n            if(arr[i] === arr[j]){\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpbeeuejhk.js:19:10)\n    at Object.<anonymous> (/tmp/tmpbeeuejhk.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique_arr = [];\n    for(var i = 0;i < arr.length; i++){\n        if(unique_arr.indexOf(arr[i]) == -1){\n            unique_arr.push(arr[i])\n        }\n    }\n    if(unique_arr.length == 1){\n        return true\n    }\n    else{\n        return false\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item,index){\n        return arr.indexOf(item) == index;\n    });\n    if(unique.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index, array){\n        return array.indexOf(item) === index;\n    });\n    return unique.length === 1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index, array){\n        return array.indexOf(item) === index;\n    });\n    return unique.length === 1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = [];\n    for(var i = 0; i < arr.length; i++){\n        if(unique.indexOf(arr[i]) == -1){\n            unique.push(arr[i]);\n        }\n    }\n    if(unique.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index, array){\n        return array.indexOf(item) === index;\n    });\n    if(unique.length === 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = [];\n    for(var i = 0; i < arr.length; i++){\n        if(unique.indexOf(arr[i]) == -1){\n            unique.push(arr[i]);\n        }\n    }\n    if(unique.length == 1){\n        return true;\n    }else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    if(unique.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(elem, index, self) {\n        return index === self.indexOf(elem);\n    });\n    if(unique.length === 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    return unique;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpfc_bxlqx.js:13:10)\n    at Object.<anonymous> (/tmp/tmpfc_bxlqx.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    return unique.length == 1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item,index,array){\n        return array.indexOf(item) === index;\n    });\n    if(unique.length === 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index, array){\n        return array.indexOf(item) === index;\n    });\n    if(unique.length === 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = [];\n    for(var i = 0; i < arr.length; i++){\n        if(unique.indexOf(arr[i]) == -1){\n            unique.push(arr[i]);\n        }\n    }\n    if(unique.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(elem, index, self) {\n        return index === self.indexOf(elem);\n    });\n    if(unique.length == 1){\n        console.log(\"The array contains only one distinct element\");\n    }\n    else{\n        console.log(\"The array contains more than one distinct element\");\n    }\n}\nunique_Element([1,2,3,4,5,6,7,8,9,9]);\nunique_Element([1,2,3,4,5,6,7,8,9,9,9]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "The array contains more than one distinct element\nThe array contains more than one distinct element\nThe array contains only one distinct element\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpm85xx_zj.js:21:10)\n    at Object.<anonymous> (/tmp/tmpm85xx_zj.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    if(unique.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index, array){\n        return array.indexOf(item) === index;\n    });\n    if(unique.length === 1){\n        return true;\n    }else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = [];\n    for(var i = 0; i < arr.length; i++){\n        if(unique.indexOf(arr[i]) == -1){\n            unique.push(arr[i]);\n        }\n    }\n    if(unique.length == 1){\n        return true;\n    }else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(elem, index, self) {\n        return index === self.indexOf(elem);\n    });\n    if(unique.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    return unique.length == 1;\n}\nvar result = unique_Element([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "/tmp/tmpg6ocnm_9.js:9\nconst assert = require('node:assert');\n^^^^^\n\nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = [];\n    for(var i = 0; i < arr.length; i++){\n        if(unique.indexOf(arr[i]) == -1){\n            unique.push(arr[i]);\n        }\n    }\n    if(unique.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = [];\n    for(var i = 0; i < arr.length; i++){\n        if(unique.indexOf(arr[i]) == -1){\n            unique.push(arr[i]);\n        }\n    }\n    if(unique.length == 1){\n        return true;\n    }else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = [];\n    for(var i=0; i<arr.length; i++){\n        if(unique.indexOf(arr[i]) == -1){\n            unique.push(arr[i]);\n        }\n    }\n    if(unique.length == 1){\n        return true;\n    }else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index, array){\n        return array.indexOf(item) === index;\n    });\n    if(unique.length === 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    if(unique.length === 1){\n        return true;\n    }else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = [];\n    for(var i = 0; i < arr.length; i++){\n        if(unique.indexOf(arr[i]) == -1){\n            unique.push(arr[i]);\n        }\n    }\n    if(unique.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item,index){\n        return arr.indexOf(item) >= index;\n    });\n    return unique.length === 1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    if(unique.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(elem, index, self) {\n        return index === self.indexOf(elem);\n    });\n    if(unique.length === 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = [];\n    for(var i = 0; i < arr.length; i++){\n        if(unique.indexOf(arr[i]) == -1){\n            unique.push(arr[i]);\n        }\n    }\n    if(unique.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    if(unique.length == 1){\n        return true;\n    }else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    if(unique.length == 1){\n        return true;\n    }else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    return unique.length == 1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = [];\n    for(var i = 0; i < arr.length; i++){\n        if(unique.indexOf(arr[i]) == -1){\n            unique.push(arr[i]);\n        }\n    }\n    if(unique.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(elem, index, self) {\n        return index === self.indexOf(elem);\n    });\n    if(unique.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = [];\n    for(var i = 0; i < arr.length; i++){\n        if(unique.indexOf(arr[i]) == -1){\n            unique.push(arr[i]);\n        }\n    }\n    if(unique.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    return unique.length == 1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = [];\n    for(var i = 0; i < arr.length; i++){\n        if(unique.indexOf(arr[i]) == -1){\n            unique.push(arr[i]);\n        }\n    }\n    if(unique.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    return unique.length == 1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = [];\n    for(var i = 0; i < arr.length; i++){\n        if(unique.indexOf(arr[i]) == -1){\n            unique.push(arr[i]);\n        }\n    }\n    if(unique.length == 1){\n        return true;\n    }else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = [];\n    for(var i = 0; i < arr.length; i++){\n        if(unique.indexOf(arr[i]) == -1){\n            unique.push(arr[i]);\n        }\n    }\n    if(unique.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index, array){\n        return array.indexOf(item) === index;\n    });\n    if(unique.length === 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = [];\n    for(var i = 0; i < arr.length; i++){\n        if(unique.indexOf(arr[i]) == -1){\n            unique.push(arr[i]);\n        }\n    }\n    if(unique.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index, array){\n        return array.indexOf(item) === index;\n    });\n    if(unique.length === 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    return unique.length == 1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var result = [];\n    for(var i = 0; i < arr.length; i++){\n        if(result.indexOf(arr[i]) === -1){\n            result.push(arr[i]);\n        }\n    }\n    if(result.length === 1){\n        return true;\n    }else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    return unique.length == 1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    if(unique.length === 1){\n        return true;\n    }else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = [];\n    for(var i = 0; i < arr.length; i++){\n        if(unique.indexOf(arr[i]) == -1){\n            unique.push(arr[i]);\n        }\n    }\n    if(unique.length == 1){\n        return true;\n    }else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    return unique.length == 1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    return unique.length == 1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = [];\n    for(var i = 0; i < arr.length; i++){\n        if(unique.indexOf(arr[i]) == -1){\n            unique.push(arr[i]);\n        }\n    }\n    if(unique.length == 1){\n        return true;\n    }else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = [];\n    for(var i = 0; i < arr.length; i++){\n        if(unique.indexOf(arr[i]) == -1){\n            unique.push(arr[i]);\n        }\n    }\n    if(unique.length == 1){\n        return true;\n    }else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    if(unique.length === 1){\n        return true;\n    }else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    return unique.length == 1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    return unique.length == 1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = [];\n    for(var i = 0; i < arr.length; i++){\n        if(unique.indexOf(arr[i]) == -1){\n            unique.push(arr[i]);\n        }\n    }\n    if(unique.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = [];\n    for(var i = 0; i < arr.length; i++){\n        if(unique.indexOf(arr[i]) == -1){\n            unique.push(arr[i]);\n        }\n    }\n    if(unique.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    return unique.length == 1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = [];\n    for(var i = 0; i < arr.length; i++){\n        if(unique.indexOf(arr[i]) == -1){\n            unique.push(arr[i]);\n        }\n    }\n    if(unique.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = [];\n    for(var i = 0; i < arr.length; i++){\n        if(unique.indexOf(arr[i]) == -1){\n            unique.push(arr[i]);\n        }\n    }\n    if(unique.length == 1){\n        return true;\n    }else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = [];\n    for(var i = 0; i < arr.length; i++){\n        if(unique.indexOf(arr[i]) == -1){\n            unique.push(arr[i]);\n        }\n    }\n    if(unique.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    if(unique.length === 1){\n        return true;\n    }else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(value, index, self){\n        return self.indexOf(value) === index;\n    })\n    if(unique.length === 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(elem, index, self) {\n        return index === self.indexOf(elem);\n    });\n    if(unique.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    let unique = arr.filter(function(item,index){\n        return arr.indexOf(item) >= index;\n    });\n    if(unique.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = [];\n    for(var i = 0; i < arr.length; i++){\n        if(unique.indexOf(arr[i]) == -1){\n            unique.push(arr[i]);\n        }\n    }\n    if(unique.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = [];\n    for(var i = 0; i < arr.length; i++){\n        if(unique.indexOf(arr[i]) == -1){\n            unique.push(arr[i]);\n        }\n    }\n    if(unique.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var count = 0;\n    for(var i = 0; i < arr.length; i++){\n        for(var j = 0; j < arr.length; j++){\n            if(arr[i] == arr[j]){\n                count++;\n            }\n        }\n        if(count == 1){\n            return arr[i];\n        }\n        count = 0;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmptj7sjqvi.js:21:10)\n    at Object.<anonymous> (/tmp/tmptj7sjqvi.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    return unique.length == 1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index, array){\n        return array.indexOf(item) === index;\n    });\n    if(unique.length === 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    if(unique.length === 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(elem, index, self) {\n        return index === self.indexOf(elem);\n    });\n    if(unique.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = [];\n    for(var i = 0; i < arr.length; i++){\n        if(unique.indexOf(arr[i]) == -1){\n            unique.push(arr[i]);\n        }\n    }\n    return unique.length == 1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = [];\n    for(var i = 0; i < arr.length; i++){\n        if(unique.indexOf(arr[i]) == -1){\n            unique.push(arr[i]);\n        }\n    }\n    if(unique.length == 1){\n        return true;\n    }else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    return unique.length == 1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    return unique.length == 1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    return unique.length == 1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index, array){\n        return array.indexOf(item) === index;\n    });\n    if(unique.length === 1){\n        return true;\n    }else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = [];\n    for(var i = 0; i < arr.length; i++){\n        if(unique.indexOf(arr[i]) == -1){\n            unique.push(arr[i]);\n        }\n    }\n    if(unique.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(elem, index, self) {\n        return index === self.indexOf(elem);\n    });\n    if(unique.length === 1){\n        return true;\n    }else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(value,index,self){\n        return self.indexOf(value) === index;\n    });\n    if(unique.length === 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = [];\n    for(var i = 0; i < arr.length; i++){\n        if(unique.indexOf(arr[i]) == -1){\n            unique.push(arr[i]);\n        }\n    }\n    if(unique.length == 1){\n        return true;\n    }else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(elem, index, self) {\n        return index === self.indexOf(elem);\n    });\n    if(unique.length === 1){\n        return true;\n    }else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    return unique.length == 1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var count = 0;\n    for(var i = 0; i < arr.length; i++){\n        for(var j = 0; j < arr.length; j++){\n            if(arr[i] == arr[j]){\n                count++;\n            }\n        }\n    }\n    if(count == arr.length){\n        console.log(\"Array contains only one distinct element\");\n    }\n    else{\n        console.log(\"Array contains more than one distinct element\");\n    }\n}\nunique_Element([1,2,3,4,5,6,7,8,9,9]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "Array contains more than one distinct element\nArray contains more than one distinct element\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpq2fwz5i1.js:25:10)\n    at Object.<anonymous> (/tmp/tmpq2fwz5i1.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    if(unique.length == 1){\n        return true;\n    }else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(elem, index, self) {\n        return index === self.indexOf(elem);\n    });\n    if(unique.length == 1){\n        return true;\n    }else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(elem, index, self) {\n        return index === self.indexOf(elem);\n    });\n    if(unique.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(elem, index, self) {\n        return index === self.indexOf(elem);\n    });\n    if(unique.length === 1){\n        return true;\n    }else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(elem, index, self) {\n        return index === self.indexOf(elem);\n    });\n    if(unique.length === 1){\n        return true;\n    }else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    return unique.length == 1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(elem, index, self) {\n        return index === self.indexOf(elem);\n    });\n    if(unique.length === 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    return unique.length == 1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    let unique = [];\n    for(let i = 0; i < arr.length; i++){\n        if(unique.indexOf(arr[i]) === -1){\n            unique.push(arr[i]);\n        }\n    }\n    if(unique.length === 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(elem, index, self) {\n        return index === self.indexOf(elem);\n    });\n    if(unique.length === 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    return unique.length == 1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = [];\n    for(var i = 0; i < arr.length; i++){\n        if(unique.indexOf(arr[i]) == -1){\n            unique.push(arr[i]);\n        }\n    }\n    if(unique.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(elem, index, self) {\n        return index === self.indexOf(elem);\n    });\n    if(unique.length==1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(elem, index, self) {\n        return index == self.indexOf(elem);\n    });\n    if(unique.length == 1){\n        return true;\n    }else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(elem, index, self) {\n        return index === self.indexOf(elem);\n    });\n    if(unique.length === 1){\n        return true;\n    }else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var count = 0;\n    for(var i = 0; i < arr.length; i++){\n        for(var j = 0; j < arr.length; j++){\n            if(arr[i] == arr[j]){\n                count++;\n            }\n        }\n        if(count == 1){\n            return arr[i];\n        }\n        count = 0;\n    }\n    return false;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpaufnsfi7.js:22:10)\n    at Object.<anonymous> (/tmp/tmpaufnsfi7.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var arr1 = [];\n    for(var i = 0; i < arr.length; i++){\n        if(arr1.indexOf(arr[i]) == -1){\n            arr1.push(arr[i]);\n        }\n    }\n    if(arr1.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    if(unique.length === 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(elem, index, self) {\n        return index == self.indexOf(elem);\n    })\n    if(unique.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    return unique.length == 1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique_arr = [];\n    for(var i = 0; i < arr.length; i++){\n        if(unique_arr.indexOf(arr[i]) == -1){\n            unique_arr.push(arr[i])\n        }\n    }\n    if(unique_arr.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(elem, index, self) {\n        return index === self.indexOf(elem);\n    });\n    if(unique.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = [];\n    for(var i = 0; i < arr.length; i++){\n        if(unique.indexOf(arr[i]) == -1){\n            unique.push(arr[i]);\n        }\n    }\n    if(unique.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    if(unique.length === 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    if(unique.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    if(unique.length === 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = [];\n    for(var i = 0; i < arr.length; i++){\n        if(unique.indexOf(arr[i]) == -1){\n            unique.push(arr[i]);\n        }\n    }\n    if(unique.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    return unique.length == 1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(elem, index, self) {\n        return index === self.indexOf(elem);\n    });\n    if(unique.length === 1){\n        return true;\n    }else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique_arr = [];\n    for(var i = 0; i < arr.length; i++){\n        if(unique_arr.indexOf(arr[i]) == -1){\n            unique_arr.push(arr[i])\n        }\n    }\n    return unique_arr.length == 1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(elem,index,self){\n        return index === self.indexOf(elem);\n    });\n    if(unique.length === 1){\n        return true;\n    }else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    return unique.length == 1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(elem, index, self) {\n        return index === self.indexOf(elem);\n    });\n    if(unique.length === 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    return unique.length === 1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index, array){\n        return array.indexOf(item) === index;\n    });\n    if(unique.length === 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(elem, index, self) {\n        return index === self.indexOf(elem);\n    });\n    if(unique.length === 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = [];\n    for(var i = 0; i < arr.length; i++){\n        if(unique.indexOf(arr[i]) === -1){\n            unique.push(arr[i]);\n        }\n    }\n    return unique.length === 1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = [];\n    for(var i = 0; i < arr.length; i++){\n        if(unique.indexOf(arr[i]) == -1){\n            unique.push(arr[i]);\n        }\n    }\n    if(unique.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    if(unique.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    if(unique.length === 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = [];\n    for(var i = 0; i < arr.length; i++){\n        if(unique.indexOf(arr[i]) == -1){\n            unique.push(arr[i]);\n        }\n    }\n    if(unique.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(elem, index, self) {\n        return index === self.indexOf(elem);\n    });\n    if(unique.length === 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = [];\n    for(var i = 0; i < arr.length; i++){\n        if(unique.indexOf(arr[i]) == -1){\n            unique.push(arr[i]);\n        }\n    }\n    if(unique.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var result = true;\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i+1; j < arr.length; j++){\n            if(arr[i] == arr[j]){\n                result = false;\n            }\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp_uaff67v.js:18:10)\n    at Object.<anonymous> (/tmp/tmp_uaff67v.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    if(unique.length === 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    let unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    if(unique.length === 1){\n        return true;\n    }else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(elem, index, self) {\n        return index === self.indexOf(elem);\n    });\n    if(unique.length === 1){\n        return true;\n    }else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index, inputArray) {\n        return inputArray.indexOf(item) == index;\n    });\n    if(unique.length == 1){\n        return true;\n    }else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = [];\n    for(var i = 0; i < arr.length; i++){\n        if(unique.indexOf(arr[i]) == -1){\n            unique.push(arr[i]);\n        }\n    }\n    if(unique.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = [];\n    for(var i = 0; i < arr.length; i++){\n        if(unique.indexOf(arr[i]) == -1){\n            unique.push(arr[i]);\n        }\n    }\n    if(unique.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item,index){\n        return arr.indexOf(item) == index;\n    });\n    if(unique.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nvar arr = [1,2,3,4,5,6,7,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "/tmp/tmp48kogbbl.js:14\nconst assert = require('node:assert');\n^^^^^\n\nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    return unique.length == 1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index, array){\n        return array.indexOf(item) === index;\n    });\n    if(unique.length === 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    if(unique.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = [];\n    for(var i = 0; i < arr.length; i++){\n        if(unique.indexOf(arr[i]) == -1){\n            unique.push(arr[i]);\n        }\n    }\n    if(unique.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    if(unique.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    if(unique.length == 1){\n        return true;\n    }else{\n        return false;\n    }\n}\nvar arr = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "/tmp/tmpbp9g3x54.js:13\nconst assert = require('node:assert');\n^^^^^\n\nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(elem, index, self) {\n        return index === self.indexOf(elem);\n    });\n    if(unique.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = [];\n    for(var i = 0; i < arr.length; i++){\n        if(unique.indexOf(arr[i]) == -1){\n            unique.push(arr[i]);\n        }\n    }\n    if(unique.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = [];\n    for(var i = 0; i < arr.length; i++){\n        if(unique.indexOf(arr[i]) == -1){\n            unique.push(arr[i]);\n        }\n    }\n    if(unique.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(elem, index, self) {\n        return index === self.indexOf(elem);\n    });\n    if(unique.length == 1){\n        return true;\n    }else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    return unique.length == 1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = [];\n    for(var i = 0; i < arr.length; i++){\n        if(unique.indexOf(arr[i]) == -1){\n            unique.push(arr[i]);\n        }\n    }\n    if(unique.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    if(unique.length == 1){\n        return true;\n    }else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    if(unique.length == 1){\n        return true;\n    }else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = [];\n    for(var i = 0; i < arr.length; i++){\n        if(unique.indexOf(arr[i]) == -1){\n            unique.push(arr[i]);\n        }\n    }\n    if(unique.length == 1){\n        return true;\n    }else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique_arr = [];\n    for(var i = 0;i < arr.length; i++){\n        if(unique_arr.indexOf(arr[i]) == -1){\n            unique_arr.push(arr[i])\n        }\n    }\n    if(unique_arr.length == 1){\n        return true\n    }else{\n        return false\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index, arr){\n        return arr.indexOf(item) === index;\n    });\n    if(unique.length === 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = [];\n    for(var i = 0; i < arr.length; i++){\n        if(unique.indexOf(arr[i]) == -1){\n            unique.push(arr[i]);\n        }\n    }\n    if(unique.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = [];\n    for(var i = 0; i < arr.length; i++){\n        if(unique.indexOf(arr[i]) == -1){\n            unique.push(arr[i]);\n        }\n    }\n    if(unique.length == 1){\n        return true;\n    }else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    return unique.length == 1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(elem, index, self) {\n        return index === self.indexOf(elem);\n    });\n    if(unique.length === 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = [];\n    for(var i = 0; i < arr.length; i++){\n        if(unique.indexOf(arr[i]) == -1){\n            unique.push(arr[i]);\n        }\n    }\n    if(unique.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index, array){\n        return array.indexOf(item) === index;\n    });\n    return unique.length === 1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index, array){\n        return array.indexOf(item) === index;\n    });\n    if(unique.length === 1){\n        return true;\n    }else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(elem, index, self) {\n        return index === self.indexOf(elem);\n    });\n    if(unique.length === 1){\n        return true;\n    }else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    for(let i=0;i<arr.length;i++){\n        if(arr[i]!==arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp9wa7scww.js:15:10)\n    at Object.<anonymous> (/tmp/tmp9wa7scww.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    if(unique.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    return unique.length == 1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(elem, index, self) {\n        return index === self.indexOf(elem);\n    });\n    if(unique.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    return unique.length == 1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = [];\n    for(var i = 0; i < arr.length; i++){\n        if(unique.indexOf(arr[i]) == -1){\n            unique.push(arr[i]);\n        }\n    }\n    if(unique.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    if(unique.length === 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(elem, index, self) {\n        return index === self.indexOf(elem);\n    });\n    if(unique.length===1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    return unique.length == 1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(elem, index, self) {\n        return index === self.indexOf(elem);\n    });\n    if(unique.length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index, array){\n        return array.indexOf(item) === index;\n    });\n    return unique.length === 1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    return unique.length === 1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(item, index){\n        return arr.indexOf(item) >= index;\n    });\n    return unique.length == 1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element(arr){\n    var unique = arr.filter(function(elem, index, self) {\n        return index === self.indexOf(elem);\n    });\n    if(unique.length === 1){\n        return true;\n    }else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_Element;\n  assert.deepEqual(candidate([1, 1, 1]),true);\n  assert.deepEqual(candidate([1, 2, 1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);\n}\n\ntest();",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}