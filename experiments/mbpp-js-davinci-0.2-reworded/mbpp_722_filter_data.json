{
  "name": "mbpp_722_filter_data",
  "language": "js",
  "prompt": "//The input is given as - an object with a student name as a key and an array of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data(students, h, w){\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_722_filter_data.py",
  "prompt_terminology": "reworded",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_data;\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});\n  assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "  let result = {};\n  for (let key in students){\n    if (students[key][0] > h && students[key][1] > w){\n      result[key] = students[key];\n    }\n  }\n  return result;\n}\n",
    "    let filtered = {};\n    for (let key in students){\n        if (students[key][0] >= h && students[key][1] >= w){\n            filtered[key] = students[key];\n        }\n    }\n    return filtered;\n}\n",
    "    let result = {};\n    for(let key in students){\n        if(students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n",
    "    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n",
    "    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n",
    "    let result = {};\n    for(let key in students){\n        if(students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n",
    "    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n",
    "    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n",
    "    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n",
    "    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n",
    "    let result = {};\n    for (let [key, value] of Object.entries(students)) {\n        if (value[0] > h && value[1] > w) {\n            result[key] = value;\n        }\n    }\n    return result;\n}\n",
    "    let result = {};\n    for (let key in students){\n        if (students[key][0] >= h && students[key][1] >= w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n",
    "    var result = {};\n    for (var key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n",
    "    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n",
    "    let result = {};\n    for(let key in students){\n        if(students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n",
    "    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n",
    "    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n",
    "    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n",
    "    let result = {};\n    for(let key in students){\n        if(students[key][0] >= h && students[key][1] >= w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n",
    "    let result = {};\n    for (let key in students){\n        if (students[key][0] > h && students[key][1] > w){\n            result[key] = students[key];\n        }\n    }\n    return result;\n}\n"
  ]
}