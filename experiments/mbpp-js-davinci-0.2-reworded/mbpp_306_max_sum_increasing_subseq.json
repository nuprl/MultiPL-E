{
  "name": "mbpp_306_max_sum_increasing_subseq",
  "language": "js",
  "prompt": "//Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunction max_sum_increasing_subseq(a, n, index, k){\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_306_max_sum_increasing_subseq.py",
  "prompt_terminology": "reworded",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum_increasing_subseq;\n  assert.deepEqual(candidate([1, 101, 2, 3, 100, 4, 5], 7, 4, 6),11);\n  assert.deepEqual(candidate([1, 101, 2, 3, 100, 4, 5], 7, 2, 5),7);\n  assert.deepEqual(candidate([11, 15, 19, 21, 26, 28, 31], 7, 2, 4),71);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    if(index == n) return 0;\n    if(k == n) return 0;\n    if(a[index] > a[k]){\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1);\n    }\n    else{\n        return max_sum_increasing_subseq(a, n, index+1, k+1);\n    }\n}\n",
    "    if(index == n)\n        return 0;\n    if(index == k)\n        return a[index];\n    if(k < index)\n        return 0;\n    return Math.max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1));\n}\n",
    "    if(index == n)\n        return 0;\n    if(k == n)\n        return 0;\n    if(k <= index)\n        return max_sum_increasing_subseq(a, n, index + 1, k);\n    return Math.max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1));\n}\n",
    "    if(index == n){\n        return 0;\n    }\n    if(a[index] > a[k]){\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, index);\n    }\n    else{\n        return max_sum_increasing_subseq(a, n, index+1, k);\n    }\n}\n",
    "\tvar sum = 0;\n\tfor(var i = index; i < k; i++){\n\t\tsum += a[i];\n\t}\n\treturn sum;\n}\n",
    "    if(index == n){\n        return 0;\n    }\n    if(index == k){\n        return a[index];\n    }\n    var sum1 = max_sum_increasing_subseq(a, n, index + 1, k);\n    var sum2 = 0;\n    if(a[index] < a[k]){\n        sum2 = max_sum_increasing_subseq(a, n, index + 1, k) + a[index];\n    }\n    return Math.max(sum1, sum2);\n}\n",
    "    if(index == 0)\n        return a[index];\n    if(k == 0)\n        return a[index];\n    if(index == k)\n        return a[index];\n    if(a[index] < a[k])\n        return max_sum_increasing_subseq(a, n, index, k-1);\n    return max(a[index] + max_sum_increasing_subseq(a, n, index, k-1), max_sum_increasing_subseq(a, n, index-1, k));\n}\n",
    "\tif(index == n)\n\t\treturn 0;\n\tif(index == k)\n\t\treturn a[index];\n\tvar sum = 0;\n\tfor(var i = index; i < n; i++){\n\t\tif(a[i] > a[index])\n\t\t\tsum = Math.max(sum, max_sum_increasing_subseq(a, n, i+1, k) + a[index]);\n\t}\n\treturn sum;\n}\n",
    "    if(index == n)\n        return 0;\n    if(index == k)\n        return a[index];\n    if(index > k)\n        return 0;\n    var sum = 0;\n    for(var i = index; i < n; i++){\n        if(a[i] > a[index]){\n            sum = Math.max(sum, a[index] + max_sum_increasing_subseq(a, n, i+1, k));\n        }\n    }\n    return sum;\n}\n",
    "    if(index == n)\n        return 0;\n    if(index == k)\n        return a[index];\n    if(k < index)\n        return 0;\n    return Math.max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + 1) + a[index]);\n}\n",
    "    if(index == n)\n        return 0;\n    if(k == n)\n        return 0;\n    if(a[index] > a[k])\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1);\n    else\n        return max_sum_increasing_subseq(a, n, index+1, k+1);\n}\n",
    "    if(index == n) return 0;\n    if(k == n) return 0;\n    if(k < index) return 0;\n    return Math.max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1));\n}\n",
    "    if(index == n)\n        return 0;\n    if(k == n)\n        return 0;\n    if(k < index)\n        return 0;\n    let sum = 0;\n    for(let i = index; i < k; i++){\n        if(a[i] < a[k]){\n            sum = Math.max(sum, max_sum_increasing_subseq(a, n, i, k+1) + a[k]);\n        }\n    }\n    return sum;\n}\n",
    "    if(index === n) return 0;\n\n    let sum1 = max_sum_increasing_subseq(a, n, index + 1, k);\n    let sum2 = 0;\n    if(index < k && a[index] < a[k]){\n        sum2 = max_sum_increasing_subseq(a, n, index + 1, k) + a[index];\n    }\n    return Math.max(sum1, sum2);\n}\n",
    "    if(index == n){\n        return 0;\n    }\n    if(index == k){\n        return a[index];\n    }\n    let sum = 0;\n    for(let i = index; i < n; i++){\n        if(a[i] > a[index]){\n            sum = Math.max(sum, a[index] + max_sum_increasing_subseq(a, n, i + 1, k));\n        }\n    }\n    return sum;\n}\n",
    "    if(index == n){\n        return 0;\n    }\n    if(k == n){\n        return max_sum_increasing_subseq(a, n, index + 1, index + 1);\n    }\n    if(a[index] < a[k]){\n        return Math.max(a[k] + max_sum_increasing_subseq(a, n, index, k + 1), max_sum_increasing_subseq(a, n, index + 1, index + 1));\n    }\n    else{\n        return max_sum_increasing_subseq(a, n, index, k + 1);\n    }\n}\n",
    "\tif(index == n)\n\t\treturn 0;\n\tif(index == k)\n\t\treturn a[index];\n\tif(index > k)\n\t\treturn 0;\n\treturn Math.max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k));\n}\n",
    "\tif(index == n)\n\t\treturn 0;\n\tif(index == k)\n\t\treturn a[index];\n\tvar max = 0;\n\tfor(var i=index; i<n; i++){\n\t\tif(a[i] > a[index]){\n\t\t\tvar sum = a[index] + max_sum_increasing_subseq(a, n, i+1, k);\n\t\t\tif(sum > max)\n\t\t\t\tmax = sum;\n\t\t}\n\t}\n\treturn max;\n}\n",
    "    if(index == n){\n        return 0;\n    }\n    if(index == k){\n        return a[index];\n    }\n    let include = a[index] + max_sum_increasing_subseq(a, n, index+1, k);\n    let exclude = max_sum_increasing_subseq(a, n, index+1, k);\n    return Math.max(include, exclude);\n}\n",
    "    if(index == n) return 0;\n    let sum = 0;\n    for(let i = index; i < n; i++){\n        if(a[i] < a[k]){\n            sum = Math.max(sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n        }\n    }\n    return sum;\n}\n",
    "    if(index >= n)\n        return 0;\n    let sum = 0;\n    for(let i = index; i < n; i++){\n        if(a[i] < a[k]){\n            sum = Math.max(sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n        }\n    }\n    return sum;\n}\n",
    "\tif(index == n)\n\t\treturn 0;\n\tif(k == n)\n\t\treturn 0;\n\tvar sum = 0;\n\tfor(var i = index; i < k; i++){\n\t\tif(a[i] < a[k]){\n\t\t\tsum = Math.max(sum, a[k] + max_sum_increasing_subseq(a, n, i, k+1));\n\t\t}\n\t}\n\treturn sum;\n}\n",
    "\tvar max = 0;\n\tfor(var i = index; i < k; i++){\n\t\tif(a[i] < a[k]){\n\t\t\tvar sum = max_sum_increasing_subseq(a, n, i, k-1);\n\t\t\tif(sum > max){\n\t\t\t\tmax = sum;\n\t\t\t}\n\t\t}\n\t}\n\treturn max + a[k];\n}\n",
    "\tvar max_sum = 0;\n\tvar sum = 0;\n\tfor(var i = 0; i < index; i++){\n\t\tif(a[i] < a[k]){\n\t\t\tsum += a[i];\n\t\t}\n\t\tif(sum > max_sum){\n\t\t\tmax_sum = sum;\n\t\t}\n\t}\n\treturn max_sum + a[k];\n}\n",
    "    if(index == n)\n        return 0;\n    if(index == 0)\n        return a[index];\n    if(a[index] > a[k])\n        return max_sum_increasing_subseq(a, n, index + 1, k) + a[index];\n    else\n        return max_sum_increasing_subseq(a, n, index + 1, k);\n}\n",
    "    if(index == n)\n        return 0;\n    if(index == k)\n        return a[index];\n    if(index > k)\n        return 0;\n    return Math.max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1));\n}\n",
    "    if(index == n)\n        return 0;\n    if(k == n)\n        return 0;\n    if(index == k)\n        return a[index];\n    if(a[index] < a[k])\n        return Math.max(max_sum_increasing_subseq(a, n, index, k + 1), max_sum_increasing_subseq(a, n, index + 1, k) + a[index]);\n    else\n        return max_sum_increasing_subseq(a, n, index + 1, k);\n}\n",
    "    if(index >= n){\n        return 0;\n    }\n    if(index == k){\n        return a[index];\n    }\n    var sum = 0;\n    for(var i = index; i < k; i++){\n        sum += a[i];\n    }\n    return Math.max(sum + max_sum_increasing_subseq(a, n, k, k + 1), max_sum_increasing_subseq(a, n, index + 1, k));\n}\n",
    "\tif(index == n)\n\t\treturn 0;\n\tif(index == k)\n\t\treturn a[index];\n\tvar max = 0;\n\tfor(var i = index; i < k; i++){\n\t\tif(a[i] < a[k]){\n\t\t\tvar sum = max_sum_increasing_subseq(a, n, i, k);\n\t\t\tif(sum > max)\n\t\t\t\tmax = sum;\n\t\t}\n\t}\n\treturn max + a[k];\n}\n",
    "\tif(index == n) return 0;\n\tvar max = 0;\n\tfor(var i = index; i < n; i++){\n\t\tvar sum = max_sum_increasing_subseq(a, n, i + 1, k);\n\t\tif(a[i] < a[k] && sum > max){\n\t\t\tmax = sum;\n\t\t}\n\t}\n\treturn max + a[k];\n}\n",
    "\tif(index == 0){\n\t\treturn a[index];\n\t}\n\tif(index == k){\n\t\treturn a[index];\n\t}\n\tvar max = 0;\n\tfor(var i = 0; i < index; i++){\n\t\tif(a[i] < a[index]){\n\t\t\tvar sum = max_sum_increasing_subseq(a, n, i, k);\n\t\t\tif(sum > max){\n\t\t\t\tmax = sum;\n\t\t\t}\n\t\t}\n\t}\n\treturn max + a[index];\n}\n",
    "    if(index == n) return 0;\n    if(k == n) return 0;\n    if(index == k) return a[index];\n    if(a[index] > a[k]) return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1);\n    else return max_sum_increasing_subseq(a, n, index+1, k+1);\n}\n",
    "\tif(index == n){\n\t\treturn 0;\n\t}\n\tif(index == k){\n\t\treturn a[index];\n\t}\n\tvar sum = 0;\n\tfor(var i = index; i < k; i++){\n\t\tsum += a[i];\n\t}\n\treturn Math.max(sum + max_sum_increasing_subseq(a, n, k, k+1), max_sum_increasing_subseq(a, n, index+1, k));\n}\n",
    "  if(index == n) return 0;\n  if(k == n) return 0;\n  if(k < index) return 0;\n  return Math.max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k));\n}\n",
    "    if(index == n){\n        return 0;\n    }\n    if(k == n){\n        return 0;\n    }\n    if(index == k){\n        return a[index];\n    }\n    return Math.max(max_sum_increasing_subseq(a, n, index+1, k), max_sum_increasing_subseq(a, n, index, k+1) + a[k]);\n}\n",
    "    if(index == n) return 0;\n    let sum = 0;\n    for(let i = index; i < n; i++){\n        if(a[i] < a[k]){\n            sum = Math.max(sum, a[i] + max_sum_increasing_subseq(a, n, i+1, k));\n        }\n    }\n    return sum;\n}\n",
    "    if(index == n)\n        return 0;\n    if(k == n)\n        return 0;\n    if(k < index)\n        return 0;\n    return Math.max(max_sum_increasing_subseq(a, n, index+1, k), a[index] + max_sum_increasing_subseq(a, n, index+1, k+1));\n}\n",
    "    if(index == 0)\n        return a[0];\n    if(k == 0)\n        return 0;\n    if(index == k)\n        return a[index];\n    return Math.max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, k-1) + a[index]);\n}\n",
    "    if(index == n)\n        return 0;\n    if(k == n)\n        return 0;\n    if(a[index] > a[k])\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1);\n    else\n        return max_sum_increasing_subseq(a, n, index+1, k+1);\n}\n",
    "    if(index == n){\n        return 0;\n    }\n    if(index > k){\n        return 0;\n    }\n    let include = a[index] + max_sum_increasing_subseq(a, n, index+1, k);\n    let exclude = max_sum_increasing_subseq(a, n, index+1, k);\n    return Math.max(include, exclude);\n}\n",
    "    if(index == n){\n        return 0;\n    }\n    if(index > k){\n        return 0;\n    }\n    let sum = 0;\n    for(let i = index; i < n; i++){\n        if(a[i] > a[index]){\n            sum = Math.max(sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n        }\n    }\n    return sum;\n}\n",
    "    if(index == n)\n        return 0;\n    if(k == n)\n        return 0;\n    if(a[index] > a[k])\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1);\n    else\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1);\n}\n",
    "    if(index >= n)\n        return 0;\n    if(k >= n)\n        return 0;\n    if(index == k)\n        return a[index];\n    return Math.max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1));\n}\n",
    "    if(index == n)\n        return 0;\n    if(k == n)\n        return 0;\n    if(k < index)\n        return 0;\n    return Math.max(max_sum_increasing_subseq(a, n, index+1, k), a[index] + max_sum_increasing_subseq(a, n, index+1, k+1));\n}\n",
    "    if(index == n)\n        return 0;\n    if(k == n)\n        return 0;\n    if(k < index)\n        return 0;\n    if(a[index] > a[k])\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1) + a[k];\n    else\n        return max_sum_increasing_subseq(a, n, index, k + 1);\n}\n",
    "    if(index == n) return 0;\n    if(k == n) return 0;\n    if(k < index) return 0;\n    return Math.max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index, k + 1), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1));\n}\n",
    "    if(index == n) return 0;\n    if(k == n) return 0;\n    if(k < index) return 0;\n    return Math.max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1));\n}\n",
    "    let sum = 0;\n    for(let i = index; i < k; i++){\n        sum += a[i];\n    }\n    return sum;\n}\n",
    "    if(index == n)\n        return 0;\n    if(index == k)\n        return a[index];\n    if(k < index)\n        return 0;\n    return Math.max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1));\n}\n",
    "    if(index == n)\n        return 0;\n    if(k == n)\n        return 0;\n    if(k < index)\n        return 0;\n    return Math.max(max_sum_increasing_subseq(a, n, index+1, k), a[index] + max_sum_increasing_subseq(a, n, index+1, k+1));\n}\n",
    "    if(index == n){\n        return 0;\n    }\n    if(index == k){\n        return a[index];\n    }\n    let sum1 = max_sum_increasing_subseq(a, n, index + 1, k);\n    let sum2 = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    return Math.max(sum1, sum2);\n}\n\nlet a = [1, 101, 2, 3, 100, 4, 5];",
    "    if(index == n) return 0;\n    if(index == k) return a[index];\n    if(index > k) return 0;\n    return Math.max(max_sum_increasing_subseq(a, n, index+1, k), max_sum_increasing_subseq(a, n, index+1, k) + a[index]);\n}\n",
    "    if(index == n)\n        return 0;\n    if(k == n)\n        return 0;\n    if(a[index] > a[k])\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1);\n    return max_sum_increasing_subseq(a, n, index + 1, k + 1);\n}\n",
    "    if(index == n)\n        return 0;\n    if(k == n)\n        return 0;\n    if(a[index] > a[k])\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1);\n    else\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1);\n}\n",
    "    var sum = 0;\n    var max_sum = 0;\n    var i = index;\n    while(i < k){\n        sum += a[i];\n        if(sum > max_sum){\n            max_sum = sum;\n        }\n        i++;\n    }\n    return max_sum;\n}\n",
    "    if(index == n){\n        return 0;\n    }\n    if(index == k){\n        return a[index];\n    }\n    var sum = 0;\n    for(var i = index; i < k; i++){\n        if(a[i] < a[k]){\n            sum = Math.max(sum, max_sum_increasing_subseq(a, n, i, k));\n        }\n    }\n    return sum + a[k];\n}\n\nvar a = [1, 101, 2, 3, 100, 4, 5];\nvar n = a.length;\nvar index = 0;\nvar k = 4;",
    "    if(index == n)\n        return 0;\n    if(k == n)\n        return 0;\n    if(a[index] > a[k])\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1);\n    else\n        return max_sum_increasing_subseq(a, n, index + 1, k);\n}\n",
    "    if(index == n)\n        return 0;\n    if(k == n)\n        return 0;\n    if(a[index] > a[k])\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1);\n    else\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1);\n}\n",
    "    if(index == n){\n        return 0;\n    }\n    if(index == k){\n        return a[index];\n    }\n    let sum = 0;\n    for(let i = index; i < k; i++){\n        sum += a[i];\n    }\n    return Math.max(sum + max_sum_increasing_subseq(a, n, k, k+1), max_sum_increasing_subseq(a, n, index, k+1));\n}\n",
    "    if(index == n) return 0;\n    if(k == n) return 0;\n    if(k < index) return 0;\n    return Math.max(max_sum_increasing_subseq(a, n, index+1, k), a[index] + max_sum_increasing_subseq(a, n, index+1, k+1));\n}\n",
    "    if(index == n) return 0;\n    if(k == n) return 0;\n    if(k <= index) return 0;\n    return Math.max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1));\n}\n",
    "    if(index == n - 1){\n        return a[index];\n    }\n    var sum = 0;\n    for(var i = index + 1; i < n; i++){\n        if(a[i] > a[index]){\n            sum = Math.max(sum, max_sum_increasing_subseq(a, n, i, k));\n        }\n    }\n    return a[index] + sum;\n}\n\nvar a = [1, 101, 2, 3, 100, 4, 5];\nvar n = a.length;\nvar k = 4;\nvar index = 0;",
    "    if(index == 0){\n        return a[index];\n    }\n    if(index == 1){\n        return Math.max(a[index], a[index - 1]);\n    }\n    if(index == k){\n        return Math.max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1), max_sum_increasing_subseq(a, n, index - 1, k));\n    }\n    return Math.max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1));\n}\n",
    "    if(index == n) return 0;\n    if(index == k) return a[index];\n    return Math.max(max_sum_increasing_subseq(a, n, index+1, k), a[index] + max_sum_increasing_subseq(a, n, index+1, k+1));\n}\n",
    "    if(index == n)\n        return 0;\n    if(k == n)\n        return 0;\n    if(k < index)\n        return 0;\n    let sum = 0;\n    if(a[index] < a[k])\n        sum = a[k] + max_sum_increasing_subseq(a, n, index, k+1);\n    else\n        sum = max_sum_increasing_subseq(a, n, index, k+1);\n    let sum2 = max_sum_increasing_subseq(a, n, index+1, index+1);\n    return Math.max(sum, sum2);\n}\n",
    "    if(index == n){\n        return 0;\n    }\n    if(k == n){\n        return 0;\n    }\n    if(a[k] < a[index]){\n        return max_sum_increasing_subseq(a, n, index, k+1);\n    }\n    else{\n        return Math.max(a[k] + max_sum_increasing_subseq(a, n, index, k+1), max_sum_increasing_subseq(a, n, index, k+1));\n    }\n}\n",
    "    if(index == n){\n        return 0;\n    }\n    let include = 0;\n    let exclude = 0;\n    if(a[index] < a[k]){\n        include = a[index] + max_sum_increasing_subseq(a, n, index+1, k);\n    }\n    exclude = max_sum_increasing_subseq(a, n, index+1, k);\n    return Math.max(include, exclude);\n}\n",
    "\tvar sum = 0;\n\tfor(var i = index; i < k; i++){\n\t\tsum += a[i];\n\t}\n\treturn sum;\n}\n",
    "    if(index == n-1){\n        return a[index];\n    }\n    if(k == n-1){\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, index+1);\n    }\n    return Math.max(max_sum_increasing_subseq(a, n, index, k+1), a[index] + max_sum_increasing_subseq(a, n, index+1, k+1));\n}\n",
    "\tif(index == 0){\n\t\treturn a[index];\n\t}\n\tif(k == index){\n\t\treturn a[index];\n\t}\n\tvar max_sum = 0;\n\tfor(var i = 0; i < index; i++){\n\t\tif(a[i] < a[index]){\n\t\t\tvar sum = max_sum_increasing_subseq(a, n, i, k);\n\t\t\tif(sum > max_sum){\n\t\t\t\tmax_sum = sum;\n\t\t\t}\n\t\t}\n\t}\n\treturn max_sum + a[index];\n}\n",
    "    if(index == n)\n        return 0;\n    if(index == k)\n        return a[index];\n    if(index > k)\n        return 0;\n    return Math.max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1));\n}\n",
    "    if(index == n)\n        return 0;\n    if(index == k)\n        return a[index];\n    if(k < index)\n        return 0;\n    return Math.max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1));\n}\n",
    "    if(index == n){\n        return 0;\n    }\n    if(index == k){\n        return a[index];\n    }\n    let sum_including_k = a[index] + max_sum_increasing_subseq(a, n, index+1, k);\n    let sum_excluding_k = max_sum_increasing_subseq(a, n, index+1, k);\n    return Math.max(sum_including_k, sum_excluding_k);\n}\n",
    "\tif(index == n){\n\t\treturn 0;\n\t}\n\tif(index == k){\n\t\treturn a[index];\n\t}\n\tvar sum1 = max_sum_increasing_subseq(a, n, index+1, k);\n\tvar sum2 = 0;\n\tif(a[index] < a[k]){\n\t\tsum2 = max_sum_increasing_subseq(a, n, index+1, k) + a[index];\n\t}\n\treturn Math.max(sum1, sum2);\n}\n",
    "    if(index == n){\n        return 0;\n    }\n    if(index == k){\n        return a[index];\n    }\n    var sum1 = max_sum_increasing_subseq(a, n, index+1, k);\n    var sum2 = 0;\n    if(a[index] < a[k]){\n        sum2 = a[index] + max_sum_increasing_subseq(a, n, index+1, k);\n    }\n    return Math.max(sum1, sum2);\n}\n",
    "\tif(index == n)\n\t\treturn 0;\n\tvar max_sum = 0;\n\tfor(var i = index; i < n; i++){\n\t\tif(a[i] < a[k]){\n\t\t\tvar sum = max_sum_increasing_subseq(a, n, i+1, k);\n\t\t\tif(sum > max_sum)\n\t\t\t\tmax_sum = sum;\n\t\t}\n\t}\n\treturn max_sum + a[k];\n}\n",
    "    if(index == n){\n        return 0;\n    }\n    if(index == k){\n        return a[index];\n    }\n    var sum = 0;\n    for(var i = index; i < k; i++){\n        if(a[i] < a[k]){\n            sum = Math.max(sum, max_sum_increasing_subseq(a, n, i, k));\n        }\n    }\n    return sum + a[k];\n}\n",
    "    if(index == n)\n        return 0;\n    if(k == n)\n        return 0;\n    if(a[index] > a[k])\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1);\n    else\n        return max_sum_increasing_subseq(a, n, index+1, k+1);\n}\n",
    "    if(index == n)\n        return 0;\n    if(index == k)\n        return a[index];\n    return max(a[index] + max_sum_increasing_subseq(a, n, index+1, k), max_sum_increasing_subseq(a, n, index+1, k));\n}\n",
    "    if(index == n) return 0;\n    if(k == n) return 0;\n    if(index == k) return a[index];\n    return Math.max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + 1));\n}\n",
    "    if(index == n)\n        return 0;\n    if(k == n)\n        return 0;\n    if(a[index] > a[k])\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1);\n    else\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1);\n}\n",
    "    if(index == 0){\n        return a[index];\n    }\n    if(index == k){\n        return a[index];\n    }\n    if(k < index){\n        return 0;\n    }\n    let max_sum = 0;\n    for(let i = 0; i < index; i++){\n        if(a[i] < a[index]){\n            max_sum = Math.max(max_sum, max_sum_increasing_subseq(a, n, i, k) + a[index]);\n        }\n    }\n    return max_sum;\n}\n",
    "    var max_sum = 0;\n    var sum = 0;\n    for(var i = index; i < k; i++){\n        sum += a[i];\n        if(sum > max_sum){\n            max_sum = sum;\n        }\n    }\n    return max_sum;\n}\n",
    "\tif(index == 0){\n\t\treturn a[index];\n\t}\n\tif(index == k){\n\t\treturn a[index];\n\t}\n\tvar max_sum = 0;\n\tfor(var i = 0; i < index; i++){\n\t\tif(a[i] < a[index]){\n\t\t\tvar sum = max_sum_increasing_subseq(a, n, i, k) + a[index];\n\t\t\tif(sum > max_sum){\n\t\t\t\tmax_sum = sum;\n\t\t\t}\n\t\t}\n\t}\n\treturn max_sum;\n}\n",
    "    if(index == n){\n        return 0;\n    }\n    if(index == k){\n        return a[index];\n    }\n    let sum_including = a[index];\n    for(let i = index + 1; i < n; i++){\n        if(a[i] > a[index]){\n            sum_including += max_sum_increasing_subseq(a, n, i, k);\n        }\n    }\n    let sum_excluding = max_sum_increasing_subseq(a, n, index + 1, k);\n    return Math.max(sum_including, sum_excluding);\n}\n\nlet a = [1, 101, 2, 3, 100, 4, 5];",
    "    if(index == n)\n        return 0;\n    if(k == n)\n        return 0;\n    if(a[index] > a[k]){\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1);\n    }\n    else{\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1);\n    }\n}\n",
    "    if(index == n){\n        return 0;\n    }\n    if(index == k){\n        return a[index];\n    }\n    if(index > k){\n        return 0;\n    }\n    let sum1 = max_sum_increasing_subseq(a, n, index + 1, k);\n    let sum2 = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    return Math.max(sum1, sum2);\n}\n",
    "\tif(index == n-1){\n\t\treturn a[index];\n\t}\n\tif(index > k){\n\t\treturn 0;\n\t}\n\tvar max_sum = 0;\n\tfor(var i=index+1; i<n; i++){\n\t\tif(a[i] > a[index]){\n\t\t\tvar sum = max_sum_increasing_subseq(a, n, i, k) + a[index];\n\t\t\tif(sum > max_sum){\n\t\t\t\tmax_sum = sum;\n\t\t\t}\n\t\t}\n\t}\n\treturn max_sum;\n}\n",
    "\tvar max = 0;\n\tvar sum = 0;\n\tfor(var i = index; i < k; i++){\n\t\tsum += a[i];\n\t\tif(sum > max){\n\t\t\tmax = sum;\n\t\t}\n\t}\n\treturn max;\n}\n",
    "\tif(index == n) return 0;\n\tvar sum = 0;\n\tfor(var i = index; i < n; i++){\n\t\tif(a[i] < a[k]){\n\t\t\tsum = Math.max(sum, max_sum_increasing_subseq(a, n, i+1, k) + a[i]);\n\t\t}\n\t}\n\treturn sum;\n}\n",
    "\tif(index == n){\n\t\treturn 0;\n\t}\n\tif(index == k){\n\t\treturn a[index];\n\t}\n\tvar sum1 = max_sum_increasing_subseq(a, n, index + 1, k);\n\tvar sum2 = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n\treturn Math.max(sum1, sum2);\n}\n",
    "    if(index == n) return 0;\n    if(index == k) return a[index];\n    return Math.max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1));\n}\n",
    "    var sum = a[index];\n    var max_sum = sum;\n    for(var i = index + 1; i < k; i++){\n        if(a[i] > a[i - 1]){\n            sum += a[i];\n        }\n        else{\n            sum = a[i];\n        }\n        max_sum = Math.max(max_sum, sum);\n    }\n    return max_sum;\n}\n",
    "    if(index == n) return 0;\n    if(index == k) return a[index];\n    return Math.max(max_sum_increasing_subseq(a, n, index+1, k), max_sum_increasing_subseq(a, n, index+1, k+1) + a[index]);\n}\n",
    "\tif(index == n) return 0;\n\tvar max = 0;\n\tfor(var i = index; i < n; i++){\n\t\tif(a[i] < a[k]){\n\t\t\tvar temp = max_sum_increasing_subseq(a, n, i+1, k);\n\t\t\tif(temp > max) max = temp;\n\t\t}\n\t}\n\treturn max + a[k];\n}\n",
    "    if(index == n){\n        return 0;\n    }\n    if(index == k){\n        return a[index];\n    }\n    let sum1 = max_sum_increasing_subseq(a, n, index+1, k);\n    let sum2 = a[index] + max_sum_increasing_subseq(a, n, index+1, k);\n    return Math.max(sum1, sum2);\n}\n",
    "\tif(index == n)\n\t\treturn 0;\n\tif(index == k)\n\t\treturn a[index];\n\tvar sum = a[index];\n\tfor(var i = index + 1; i < n; i++){\n\t\tif(a[i] > a[index]){\n\t\t\tvar temp = max_sum_increasing_subseq(a, n, i, k);\n\t\t\tif(temp > sum)\n\t\t\t\tsum = temp;\n\t\t}\n\t}\n\treturn sum + a[index];\n}\n",
    "    if(index == n){\n        return 0;\n    }\n    if(index == k){\n        return a[index];\n    }\n    let max_sum = 0;\n    for(let i = index; i < n; i++){\n        if(a[i] > a[index]){\n            let sum = a[index] + max_sum_increasing_subseq(a, n, i, k);\n            if(sum > max_sum){\n                max_sum = sum;\n            }\n        }\n    }\n    return max_sum;\n}\n",
    "    if(index == n)\n        return 0;\n    let sum = 0;\n    for(let i = index; i < n; i++){\n        if(a[i] < a[k])\n            sum = Math.max(sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n    }\n    return sum;\n}\n",
    "    if(index == n) return 0;\n    if(k >= n) return 0;\n    if(index == k) return a[index];\n    return Math.max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + 1) + a[k]);\n}\n",
    "    if(index == n) return 0;\n    if(k == n) return 0;\n    if(k <= index) return 0;\n    return Math.max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + 1));\n}\n",
    "    if(index == n) return 0;\n    if(k == n) return 0;\n    if(index > k) return 0;\n    return Math.max(a[index] + max_sum_increasing_subseq(a, n, index+1, k), max_sum_increasing_subseq(a, n, index, k+1));\n}\n",
    "  if(index == n)\n    return 0;\n  if(a[index] > a[k])\n    return a[index] + max_sum_increasing_subseq(a, n, index + 1, index);\n  else\n    return max_sum_increasing_subseq(a, n, index + 1, k);\n}\n",
    "    if(index == n) return 0;\n    if(index == k) return a[index];\n    if(index > k) return 0;\n    return Math.max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1));\n}\n",
    "    if(index == n)\n        return 0;\n    if(k == n)\n        return 0;\n    if(k < index)\n        return 0;\n    return Math.max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1));\n}\n",
    "    if(index == n)\n        return 0;\n    if(k == n)\n        return 0;\n    if(k < index)\n        return 0;\n    let including = a[index] + max_sum_increasing_subseq(a, n, index+1, k+1);\n    let excluding = max_sum_increasing_subseq(a, n, index+1, k);\n    return Math.max(including, excluding);\n}\n",
    "    if(index == n){\n        return 0;\n    }\n    if(k == n){\n        return 0;\n    }\n    if(k <= index){\n        return max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    return Math.max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k));\n}\n",
    "    if(index == n) return 0;\n    var max = 0;\n    for(var i = index; i < n; i++){\n        if(a[i] < a[k]){\n            var sum = a[i] + max_sum_increasing_subseq(a, n, i + 1, k);\n            if(sum > max) max = sum;\n        }\n    }\n    return max;\n}\n",
    "    if(index == n)\n        return 0;\n    if(index == k)\n        return a[index];\n    return Math.max(max_sum_increasing_subseq(a, n, index+1, k), a[index] + max_sum_increasing_subseq(a, n, index+1, k+1));\n}\n",
    "\tif(index == n) return 0;\n\tif(k == n) return 0;\n\tif(k < index) return 0;\n\treturn Math.max(max_sum_increasing_subseq(a, n, index+1, k), a[index] + max_sum_increasing_subseq(a, n, index+1, k+1));\n}\n",
    "\tif(index == n)\n\t\treturn 0;\n\tif(k == n)\n\t\treturn 0;\n\tif(k < index)\n\t\treturn max_sum_increasing_subseq(a, n, index + 1, k);\n\treturn Math.max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1));\n}\n",
    "    if(index == n) return 0;\n    if(k == n) return 0;\n    if(a[index] > a[k]){\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1);\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k+1);\n}\n",
    "    if(index == n)\n        return 0;\n    if(index == k)\n        return a[index];\n    if(index > k)\n        return 0;\n    var max_sum = 0;\n    for(var i = index; i < n; i++){\n        if(a[i] > a[index]){\n            var sum = a[index] + max_sum_increasing_subseq(a, n, i+1, k);\n            if(sum > max_sum)\n                max_sum = sum;\n        }\n    }\n    return max_sum;\n}\n",
    "    if(index == n)\n        return 0;\n    if(k == n)\n        return 0;\n    if(k < index)\n        return 0;\n    let sum1 = max_sum_increasing_subseq(a, n, index + 1, k);\n    let sum2 = max_sum_increasing_subseq(a, n, index + 1, k + 1);\n    if(a[index] < a[k])\n        sum2 += a[k];\n    return Math.max(sum1, sum2);\n}\n",
    "    if(index == n)\n        return 0;\n    if(k >= n)\n        return 0;\n    if(index == k)\n        return a[index];\n    return Math.max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + 1));\n}\n",
    "    if(index == n) return 0;\n    if(index == k) return a[index];\n    return Math.max(max_sum_increasing_subseq(a, n, index+1, k), a[index] + max_sum_increasing_subseq(a, n, index+1, k));\n}\n",
    "    if(index == n){\n        return 0;\n    }\n    if(index == k){\n        return a[index];\n    }\n    if(index > k){\n        return 0;\n    }\n    let sum = 0;\n    for(let i = index; i < k; i++){\n        sum = Math.max(sum, a[index] + max_sum_increasing_subseq(a, n, i + 1, k));\n    }\n    return sum;\n}\n",
    "\tif(index == n-1)\n\t\treturn a[index];\n\tif(index > n-1)\n\t\treturn 0;\n\tvar max_sum = 0;\n\tfor(var i = index+1; i < n; i++){\n\t\tif(a[i] > a[index]){\n\t\t\tvar sum = a[index] + max_sum_increasing_subseq(a, n, i, k);\n\t\t\tif(sum > max_sum)\n\t\t\t\tmax_sum = sum;\n\t\t}\n\t}\n\treturn max_sum;\n}\n",
    "    if(index == n)\n        return 0;\n    if(k == n)\n        return 0;\n    if(k < index)\n        return 0;\n    if(index == 0)\n        return a[k];\n    return Math.max(max_sum_increasing_subseq(a, n, index, k+1), max_sum_increasing_subseq(a, n, index-1, k) + a[k]);\n}\n",
    "    if(index == n)\n        return 0;\n    if(k == n)\n        return 0;\n    if(k < index)\n        return 0;\n    if(k == index)\n        return a[index];\n    return Math.max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1));\n}\n",
    "    if(index == n){\n        return 0;\n    }\n    let sum = 0;\n    if(a[index] < a[k]){\n        sum = max_sum_increasing_subseq(a, n, index + 1, k) + a[index];\n    }\n    else{\n        sum = max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    return sum;\n}\n",
    "    if(index == n)\n        return 0;\n    if(k == n)\n        return 0;\n    if(a[k] < a[index])\n        return max_sum_increasing_subseq(a, n, index, k+1);\n    return max(max_sum_increasing_subseq(a, n, index, k+1), a[k] + max_sum_increasing_subseq(a, n, k, k+1));\n}\n",
    "    if(index == n)\n        return 0;\n    var sum_including = 0;\n    if(a[index] < a[k])\n        sum_including = a[index] + max_sum_increasing_subseq(a, n, index+1, k);\n    var sum_excluding = max_sum_increasing_subseq(a, n, index+1, k);\n    return Math.max(sum_including, sum_excluding);\n}\n",
    "\tvar sum = 0;\n\tfor(var i = index; i < k; i++){\n\t\tsum += a[i];\n\t}\n\treturn sum;\n}\n",
    "    var max_sum = 0;\n    var sum = 0;\n    for(var i = index; i < k; i++){\n        sum += a[i];\n        if(sum > max_sum){\n            max_sum = sum;\n        }\n    }\n    return max_sum;\n}\n",
    "\tif(index == n)\n\t\treturn 0;\n\tif(k == n)\n\t\treturn 0;\n\tif(a[index] > a[k])\n\t\treturn a[index] + max_sum_increasing_subseq(a, n, index+1, k+1);\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index+1, k+1);\n}\n",
    "\tif(index == n)\n\t\treturn 0;\n\tif(index == k)\n\t\treturn a[index];\n\tvar max_sum = 0;\n\tfor(var i = index; i < k; i++){\n\t\tif(a[i] < a[k]){\n\t\t\tvar sum = max_sum_increasing_subseq(a, n, i, k);\n\t\t\tif(sum > max_sum)\n\t\t\t\tmax_sum = sum;\n\t\t}\n\t}\n\treturn max_sum + a[k];\n}\n",
    "    if(index == n) return 0;\n    if(k == n) return 0;\n    if(a[k] < a[index]){\n        return a[k] + max_sum_increasing_subseq(a, n, index, k+1);\n    }\n    else{\n        return max_sum_increasing_subseq(a, n, index, k+1);\n    }\n}\n",
    "    if(index == n) return 0;\n    if(k == n) return 0;\n    if(k < index) return 0;\n    return Math.max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1));\n}\n",
    "    if(index == n) return 0;\n    if(k == n) return 0;\n    if(k < index) return 0;\n    if(k == index) return a[index];\n    return Math.max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + 1) + a[index]);\n}\n",
    "\tif(index == n)\n\t\treturn 0;\n\tif(k == n)\n\t\treturn 0;\n\tif(a[index] > a[k])\n\t\treturn a[index] + max_sum_increasing_subseq(a, n, index+1, k+1);\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index+1, k+1);\n}\n",
    "    if(index == n) return 0;\n    if(k == n) return 0;\n    if(a[index] > a[k]){\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1);\n    }\n    else{\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1);\n    }\n}\n",
    "\tvar sum = 0;\n\tfor(var i = index; i < k; i++){\n\t\tsum += a[i];\n\t}\n\treturn sum;\n}\n",
    "\tif(index == 0){\n\t\treturn a[index];\n\t}\n\tif(index == k){\n\t\treturn a[index];\n\t}\n\tvar max = a[index];\n\tfor(var i = 0; i < index; i++){\n\t\tvar temp = max_sum_increasing_subseq(a, n, i, k);\n\t\tif(temp > max){\n\t\t\tmax = temp;\n\t\t}\n\t}\n\treturn max + a[index];\n}\n",
    "    if(index == 0){\n        return a[index];\n    }\n    if(k == 0){\n        return max_sum_increasing_subseq(a, n, index-1, index-1);\n    }\n    return Math.max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, k-1) + a[index]);\n}\n",
    "    if(index == n) return 0;\n    if(index == k) return a[index];\n    if(k < index) return 0;\n    return Math.max(max_sum_increasing_subseq(a, n, index+1, k), a[index] + max_sum_increasing_subseq(a, n, index+1, k+1));\n}\n",
    "    var sum = 0;\n    for(var i = index; i < k; i++){\n        sum += a[i];\n    }\n    return sum;\n}\n",
    "\tif(index == n) return 0;\n\tvar sum = 0;\n\tfor(var i = index; i < n; i++){\n\t\tif(a[i] < a[k]){\n\t\t\tsum = Math.max(sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n\t\t}\n\t}\n\treturn sum;\n}\n",
    "    if(index == n)\n        return 0;\n    if(k == n)\n        return 0;\n    if(k < index)\n        return 0;\n    return Math.max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1));\n}\n",
    "    if(index == n) return 0;\n    var max_sum = 0;\n    for(var i = index + 1; i < n; i++){\n        if(a[i] > a[index]){\n            var sum = max_sum_increasing_subseq(a, n, i, k);\n            if(sum > max_sum) max_sum = sum;\n        }\n    }\n    return a[index] + max_sum;\n}\n",
    "    if(index == n)\n        return 0;\n    if(k == n)\n        return 0;\n    if(a[index] > a[k])\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1);\n    else\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1);\n}\n",
    "    if(index == n){\n        return 0;\n    }\n    if(index == k){\n        return a[index];\n    }\n    if(index > k){\n        return 0;\n    }\n    return Math.max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k) + a[index]);\n}\n",
    "    var sum = 0;\n    var max_sum = 0;\n    var i = index;\n    while(i < k){\n        sum += a[i];\n        i++;\n    }\n    max_sum = sum;\n    while(k < n){\n        sum = sum - a[k-1] + a[k];\n        if(sum > max_sum){\n            max_sum = sum;\n        }\n        k++;\n    }\n    return max_sum;\n}\n",
    "    if(index == n) return 0;\n    if(index == k) return a[index];\n    var max = 0;\n    for(var i = index + 1; i <= k; i++){\n        if(a[index] < a[i]){\n            var sum = a[index] + max_sum_increasing_subseq(a, n, i, k);\n            if(sum > max) max = sum;\n        }\n    }\n    return max;\n}\n",
    "    if(index == n){\n        return 0;\n    }\n    if(index == k){\n        return a[index];\n    }\n    if(index > k){\n        return 0;\n    }\n    let include = a[index] + max_sum_increasing_subseq(a, n, index+1, k);\n    let exclude = max_sum_increasing_subseq(a, n, index+1, k);\n    return Math.max(include, exclude);\n}\n",
    "    if(index == n) return 0;\n    if(k == n) return 0;\n    if(k < index) return 0;\n    return Math.max(max_sum_increasing_subseq(a, n, index + 1, k + 1) + a[k], max_sum_increasing_subseq(a, n, index + 1, k));\n}\n",
    "    if(index == n){\n        return 0;\n    }\n    if(a[index] > a[k]){\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, index);\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k);\n}\n",
    "    var max_sum = 0;\n    var sum = 0;\n    for(var i = index; i < k; i++){\n        sum += a[i];\n        if(sum > max_sum){\n            max_sum = sum;\n        }\n    }\n    return max_sum;\n}\n",
    "    if(index == n)\n        return 0;\n    if(k == n)\n        return 0;\n    if(k < index)\n        return 0;\n    return Math.max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + 1) + a[index]);\n}\n",
    "\tif(index == 0){\n\t\treturn a[0];\n\t}\n\tif(index == 1){\n\t\treturn Math.max(a[0], a[1]);\n\t}\n\tif(k <= index){\n\t\treturn Math.max(max_sum_increasing_subseq(a, n, index - 1, k), a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1));\n\t}\n\telse{\n\t\treturn max_sum_increasing_subseq(a, n, index - 1, k);\n\t}\n}\n",
    "    var max_sum = 0;\n    for(var i = 0; i < index; i++){\n        if(a[i] < a[k]){\n            max_sum = Math.max(max_sum, a[k] + max_sum_increasing_subseq(a, n, i, k));\n        }\n    }\n    return max_sum;\n}\n",
    "  if(index == 0){\n    return a[0];\n  }\n  if(index == 1){\n    return Math.max(a[0], a[1]);\n  }\n  if(index == 2){\n    return Math.max(a[0], a[1], a[2]);\n  }\n  if(index == k){\n    return Math.max(a[0], a[1], a[2], a[k]);\n  }\n  return Math.max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 2, k) + a[index], max_sum_increasing_subseq(a, n, index - 3, k) + a[index], max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index]);\n}\n",
    "    if(index == 0){\n        return a[index];\n    }\n    if(k == 0){\n        return a[index];\n    }\n    if(k < 0){\n        return 0;\n    }\n    return Math.max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index]);\n}\n",
    "    if(index == n) return 0;\n    var sum = 0;\n    for(var i = index; i < n; i++){\n        if(a[i] < a[k]){\n            sum = Math.max(sum, max_sum_increasing_subseq(a, n, i+1, k) + a[i]);\n        }\n    }\n    return sum;\n}\n",
    "    if(index == n) return 0;\n    if(k == n) return 0;\n    if(k < index) return 0;\n    return Math.max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1));\n}\n",
    "\tif(index == n)\n\t\treturn 0;\n\tif(index == k)\n\t\treturn a[index];\n\tif(index > k)\n\t\treturn 0;\n\tvar max_sum = 0;\n\tfor(var i = index; i < k; i++){\n\t\tif(a[index] < a[i]){\n\t\t\tvar sum = max_sum_increasing_subseq(a, n, i, k) + a[index];\n\t\t\tif(sum > max_sum)\n\t\t\t\tmax_sum = sum;\n\t\t}\n\t}\n\treturn max_sum;\n}\n",
    "    if(index == n) return 0;\n    if(index > k) return 0;\n    let sum = 0;\n    for(let i = index; i < n; i++){\n        if(a[i] > a[index]){\n            sum = Math.max(sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n        }\n    }\n    return sum;\n}\n",
    "    if(index == n){\n        return 0;\n    }\n    if(index == k){\n        return a[index];\n    }\n    let sum = 0;\n    for(let i = index; i < n; i++){\n        if(a[i] > a[index]){\n            sum = Math.max(sum, a[index] + max_sum_increasing_subseq(a, n, i + 1, k));\n        }\n    }\n    return sum;\n}\n",
    "    if(index == n){\n        return 0;\n    }\n    if(k == n){\n        return 0;\n    }\n    if(k < index){\n        return 0;\n    }\n    let sum1 = max_sum_increasing_subseq(a, n, index+1, k);\n    let sum2 = a[index] + max_sum_increasing_subseq(a, n, index+1, k+1);\n    return Math.max(sum1, sum2);\n}\n",
    "    if(index == n) return 0;\n    if(k == n) return 0;\n    if(k < index) return 0;\n    return Math.max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1));\n}\n",
    "    if(index == n)\n        return 0;\n    if(k == n)\n        return 0;\n    if(k < index)\n        return 0;\n    return Math.max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1));\n}\n",
    "    if(index == 0){\n        return a[index];\n    }\n    if(k <= index){\n        return 0;\n    }\n    else{\n        return Math.max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, k-1) + a[index]);\n    }\n}\n",
    "\tvar sum = 0;\n\tvar max_sum = 0;\n\tfor(var i = index; i < k; i++){\n\t\tsum += a[i];\n\t\tif(sum > max_sum)\n\t\t\tmax_sum = sum;\n\t}\n\treturn max_sum;\n}\n",
    "\tif(index == n){\n\t\treturn 0;\n\t}\n\tif(index == k){\n\t\treturn a[index];\n\t}\n\tvar ans = max_sum_increasing_subseq(a, n, index+1, k);\n\tif(a[index] < a[k]){\n\t\tans = Math.max(ans, a[index] + max_sum_increasing_subseq(a, n, index+1, k));\n\t}\n\treturn ans;\n}\n",
    "    if(index == 0)\n        return a[0];\n    if(index == 1)\n        return Math.max(a[0], a[1]);\n    if(index == k)\n        return a[index];\n    return Math.max(max_sum_increasing_subseq(a, n, index-1, k), a[index] + max_sum_increasing_subseq(a, n, index-1, k-1));\n}\n",
    "    if(index == n)\n        return 0;\n    let sum1 = max_sum_increasing_subseq(a, n, index + 1, k);\n    let sum2 = 0;\n    if(a[index] < a[k])\n        sum2 = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    return Math.max(sum1, sum2);\n}\n\nlet a = [1, 101, 2, 3, 100, 4, 5];",
    "    if(index == 0)\n        return a[index];\n    if(index == 1)\n        return Math.max(a[index], a[index-1]);\n    if(k == index)\n        return Math.max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, k-1) + a[index]);\n    return Math.max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, k-1));\n}\n",
    "    if(index == n) return 0;\n    if(k == n) return 0;\n    if(k < index) return 0;\n    return Math.max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1));\n}\n",
    "    let sum = 0;\n    for(let i = index; i < k; i++){\n        sum += a[i];\n    }\n    return sum;\n}\n",
    "    if(index == 0 || k == 0)\n        return 0;\n    if(a[index-1] > a[k-1])\n        return max(a[index-1] + max_sum_increasing_subseq(a, n, index-1, k-1), max_sum_increasing_subseq(a, n, index-1, k));\n    else\n        return max_sum_increasing_subseq(a, n, index-1, k);\n}\n",
    "    if(index == n)\n        return 0;\n    if(k == n)\n        return 0;\n    if(index == k)\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1);\n    return Math.max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k));\n}\n",
    "    if(index == n)\n        return 0;\n    var max_sum = 0;\n    for(var i = index; i < n; i++){\n        if(a[i] < a[k]){\n            var sum = max_sum_increasing_subseq(a, n, i+1, k);\n            if(sum > max_sum)\n                max_sum = sum;\n        }\n    }\n    return max_sum + a[k];\n}\n",
    "    if(index == n)\n        return 0;\n    if(index == k)\n        return a[index];\n    if(k < index)\n        return 0;\n    return Math.max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1));\n}\n",
    "    if(index == n){\n        return 0;\n    }\n    if(a[index] > a[k]){\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, index);\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k);\n}\n",
    "\tif(index == n){\n\t\treturn 0;\n\t}\n\tif(index == k){\n\t\treturn a[index];\n\t}\n\tvar sum = 0;\n\tfor(var i = index; i < k; i++){\n\t\tsum += a[i];\n\t}\n\treturn Math.max(sum + max_sum_increasing_subseq(a, n, k, k+1), max_sum_increasing_subseq(a, n, index+1, k));\n}\n",
    "    if(index == n)\n        return 0;\n    if(k == n)\n        return 0;\n    if(a[index] > a[k])\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1);\n    else\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1);\n}\n",
    "    if(index == n) return 0;\n    if(k == n) return 0;\n    if(k < index) return 0;\n    let sum = a[index];\n    let max = 0;\n    for(let i = k; i < n; i++){\n        if(a[i] > a[index]){\n            sum += a[i];\n            max = Math.max(max, sum);\n        }\n    }\n    return Math.max(max, max_sum_increasing_subseq(a, n, index + 1, k + 1));\n}\n",
    "    if(index == n) return 0;\n    let incl = 0;\n    if(a[index] < a[k]){\n        incl = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    let excl = max_sum_increasing_subseq(a, n, index + 1, k);\n    return Math.max(incl, excl);\n}\n",
    "\tvar sum = 0;\n\tfor(var i = index; i < k; i++){\n\t\tsum += a[i];\n\t}\n\treturn sum;\n}\n",
    "    if(index == n)\n        return 0;\n    if(k == n)\n        return 0;\n    if(k < index)\n        return 0;\n    return Math.max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1));\n}\n",
    "    if(index == n) return 0;\n    var sum = 0;\n    for(var i = index; i < n; i++){\n        if(a[i] < a[k]){\n            sum = Math.max(sum, max_sum_increasing_subseq(a, n, i+1, k) + a[i]);\n        }\n    }\n    return sum;\n}\n",
    "    if(index == n) return 0;\n    if(index == k) return a[index];\n    if(k < index) return 0;\n    return Math.max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k - 1) + a[index]);\n}\n",
    "\tvar sum = 0;\n\tfor(var i = index; i <= k; i++){\n\t\tsum += a[i];\n\t}\n\treturn sum;\n}\n",
    "    if(index == n){\n        return 0;\n    }\n    if(k < index){\n        return max_sum_increasing_subseq(a, n, index+1, k);\n    }\n    if(a[index] < a[k]){\n        return Math.max(max_sum_increasing_subseq(a, n, index+1, k), max_sum_increasing_subseq(a, n, index+1, index) + a[index]);\n    }\n    else{\n        return max_sum_increasing_subseq(a, n, index+1, k);\n    }\n}\n",
    "    if(index == 0)\n        return a[0];\n    if(index == 1)\n        return Math.max(a[0], a[1]);\n    if(index == k)\n        return Math.max(a[index] + max_sum_increasing_subseq(a, n, index-1, k-1), max_sum_increasing_subseq(a, n, index-1, k));\n    return Math.max(a[index] + max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, k));\n}\n",
    "    if(index == n) return 0;\n    if(k == n) return 0;\n    if(k < index) return 0;\n    return Math.max(max_sum_increasing_subseq(a, n, index+1, k), a[index] + max_sum_increasing_subseq(a, n, index+1, k+1));\n}\n",
    "    if(index == n){\n        return 0;\n    }\n    if(index == k){\n        return a[index];\n    }\n    var sum = 0;\n    for(var i = index; i < k; i++){\n        sum = sum + a[i];\n    }\n    return Math.max(max_sum_increasing_subseq(a, n, index + 1, k), sum + max_sum_increasing_subseq(a, n, k, k + 1));\n}\n\nvar a = [1, 101, 2, 3, 100, 4, 5];\nvar n = a.length;\nvar k = 3;",
    "    if(index == n) return 0;\n    let sum = 0;\n    for(let i = index; i < n; i++){\n        if(a[i] < a[k]){\n            sum = Math.max(sum, a[i] + max_sum_increasing_subseq(a, n, i+1, k));\n        }\n    }\n    return sum;\n}\n",
    "    if(index < 0 || k < 0 || index >= n || k >= n)\n        return 0;\n    if(index == k)\n        return a[index];\n    return Math.max(max_sum_increasing_subseq(a, n, index, k-1), max_sum_increasing_subseq(a, n, index-1, k) + a[k]);\n}\n",
    "\tif(index == n)\n\t\treturn 0;\n\tif(index == k)\n\t\treturn a[index];\n\tvar max_sum = 0;\n\tfor(var i = index; i < k; i++){\n\t\tif(a[i] < a[k]){\n\t\t\tvar sum = max_sum_increasing_subseq(a, n, i, k);\n\t\t\tif(sum > max_sum)\n\t\t\t\tmax_sum = sum;\n\t\t}\n\t}\n\treturn max_sum + a[k];\n}\n",
    "    if(index == n)\n        return 0;\n    if(index == k)\n        return a[index];\n    if(index > k)\n        return 0;\n    return Math.max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k));\n}\n",
    "    if(index == n){\n        return 0;\n    }\n    let ans = max_sum_increasing_subseq(a, n, index + 1, k);\n    if(a[index] < a[k]){\n        ans = Math.max(ans, a[index] + max_sum_increasing_subseq(a, n, index + 1, index));\n    }\n    return ans;\n}\n",
    "    if(index == n)\n        return 0;\n    if(a[index] > a[k])\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, index);\n    else\n        return max_sum_increasing_subseq(a, n, index+1, k);\n}\n",
    "    if(index == n)\n        return 0;\n    if(k == n)\n        return 0;\n    if(k < index)\n        return 0;\n    if(a[index] > a[k])\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1);\n    else\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k));\n}\n",
    "    if(index == 0){\n        return a[index];\n    }\n    if(index == k){\n        return a[index];\n    }\n    if(index < k){\n        return max_sum_increasing_subseq(a, n, index-1, k);\n    }\n    if(index > k){\n        return Math.max(a[index] + max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, k));\n    }\n}\n",
    "    if(index == n)\n        return 0;\n    if(index > k)\n        return 0;\n    let include = a[index] + max_sum_increasing_subseq(a, n, index+1, k);\n    let exclude = max_sum_increasing_subseq(a, n, index+1, k);\n    return Math.max(include, exclude);\n}\n",
    "    if(index == n){\n        return 0;\n    }\n    if(a[index] > a[k]){\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, index);\n    }\n    else{\n        return max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n}\n",
    "\tvar sum = 0;\n\tvar max = 0;\n\tfor(var i = index; i < k; i++){\n\t\tsum += a[i];\n\t\tif(sum > max)\n\t\t\tmax = sum;\n\t}\n\treturn max;\n}\n",
    "    var sum = 0;\n    for(var i=index; i<k; i++){\n        sum += a[i];\n    }\n    return sum;\n}\n",
    "    if(index == n)\n        return 0;\n    if(k == n)\n        return 0;\n    if(k < index)\n        return 0;\n    return Math.max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1));\n}\n"
  ]
}