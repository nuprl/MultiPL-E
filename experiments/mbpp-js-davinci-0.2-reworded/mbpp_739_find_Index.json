{
  "name": "mbpp_739_find_Index",
  "language": "js",
  "prompt": "//Write a jsthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunction find_Index(n){\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_739_find_Index.py",
  "prompt_terminology": "reworded",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Index;\n  assert.deepEqual(candidate(2),4);\n  assert.deepEqual(candidate(3),14);\n  assert.deepEqual(candidate(4),45);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    var i=1;\n    var j=1;\n    var count=0;\n    while(count<n){\n        var tri=triangular(i);\n        if(tri.toString().length==n){\n            return j;\n        }\n        i++;\n        j++;\n        count++;\n    }\n}",
    "    var i = 1;\n    var j = 1;\n    while(j.toString().length < n){\n        i++;\n        j = j + i;\n    }\n    return i;\n}",
    "    var i = 1;\n    var tri = 0;\n    while(true){\n        tri = (i * (i + 1)) / 2;\n        if(tri.toString().length == n){\n            return i;\n        }\n        i++;\n    }\n}",
    "    var i=1;\n    var j=1;\n    while(true){\n        var triangular_number=i*(i+1)/2;\n        if(triangular_number.toString().length==n){\n            return j;\n        }\n        i++;\n        j++;\n    }\n}",
    "    var i = 1;\n    var triangle = 0;\n    while(true){\n        triangle = triangle + i;\n        if(triangle.toString().length == n){\n            return i;\n        }\n        i++;\n    }\n}",
    "    var i=1;\n    var sum=0;\n    while(true){\n        sum=sum+i;\n        if(sum.toString().length==n){\n            return i;\n        }\n        i++;\n    }\n}",
    "    var i = 1;\n    var tri = 0;\n    while(true){\n        tri = (i*(i+1))/2;\n        if(tri.toString().length == n){\n            return i;\n        }\n        i++;\n    }\n}",
    "    var i = 1;\n    var j = 1;\n    while(true){\n        var t = (i * (i + 1)) / 2;\n        if(t.toString().length == n){\n            return j;\n        }\n        i++;\n        j++;\n    }\n}\n",
    "    var i = 1;\n    var j = 1;\n    while(true){\n        var tri = (i*(i+1))/2;\n        if(tri.toString().length == n){\n            return j;\n        }\n        i++;\n        j++;\n    }\n}",
    "    var i = 1;\n    var tri = 0;\n    while(true){\n        tri = (i*(i+1))/2;\n        if(tri.toString().length == n){\n            return i;\n        }\n        i++;\n    }\n}",
    "    var i=1;\n    var j=1;\n    while(j.toString().length<n){\n        i++;\n        j=j+i;\n    }\n    return i;\n}",
    "    var i = 1;\n    var t = 1;\n    while(t.toString().length < n){\n        i++;\n        t = t + i;\n    }\n    return i;\n}",
    "    var i = 1;\n    var triangular_number = 0;\n    while(triangular_number.toString().length < n){\n        triangular_number += i;\n        i++;\n    }\n    return i;\n}",
    "    let i = 1;\n    let tri_num = 0;\n    while(true){\n        tri_num = tri_num + i;\n        if(tri_num.toString().length == n){\n            return i;\n        }\n        i++;\n    }\n}\n",
    "    var i = 1;\n    var triangular = 0;\n    while(true){\n        triangular = (i*(i+1))/2;\n        if(triangular.toString().length == n){\n            return i;\n        }\n        i++;\n    }\n}",
    "    var i = 1;\n    var triangular_number = 0;\n    while(true){\n        triangular_number += i;\n        if(triangular_number.toString().length == n){\n            return i;\n        }\n        i++;\n    }\n}",
    "    var i = 1;\n    var triangular_num = 0;\n    while(true){\n        triangular_num = triangular_num + i;\n        if(triangular_num.toString().length == n){\n            return i;\n        }\n        i++;\n    }\n}",
    "    var i = 1;\n    var t = 1;\n    while(t.toString().length < n){\n        i++;\n        t += i;\n    }\n    return i;\n}",
    "    var i=1;\n    var j=1;\n    var k=1;\n    while(k<n){\n        i++;\n        j=j+i;\n        k=j.toString().length;\n    }\n    return i;\n}",
    "    var i = 1;\n    var tri = 0;\n    while(tri.toString().length < n){\n        tri = (i*(i+1))/2;\n        i++;\n    }\n    return i-1;\n}"
  ]
}