{
  "name": "mbpp_117_list_to_float",
  "language": "js",
  "prompt": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_117_list_to_float.py",
  "prompt_terminology": "reworded",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "results": [
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        if (isNaN(test_list[i])){\n            new_list.push(test_list[i]);\n        } else {\n            new_list.push(parseFloat(test_list[i]));\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        new_list.push(parseFloat(test_list[i]));\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n  7.32,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmpm89go4u1.js:15:10)\n    at Object.<anonymous> (/tmp/tmpm89go4u1.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, 7.32, 4 ],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    for(var i = 0; i < test_list.length; i++){\n        for(var j = 0; j < test_list[i].length; j++){\n            if(isNaN(test_list[i][j])){\n                test_list[i][j] = parseFloat(test_list[i][j]);\n            }\n        }\n    }\n    return test_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        if (typeof test_list[i] === \"string\"){\n            new_list.push(parseFloat(test_list[i]));\n        }\n        else {\n            new_list.push(test_list[i]);\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        if (typeof test_list[i] == \"string\"){\n            new_list.push(parseFloat(test_list[i]));\n        }\n        else{\n            new_list.push(test_list[i]);\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        new_list.push(parseFloat(test_list[i]));\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n  7.32,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmpm89go4u1.js:15:10)\n    at Object.<anonymous> (/tmp/tmpm89go4u1.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, 7.32, 4 ],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        new_list.push(parseFloat(test_list[i]));\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n  7.32,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmpm89go4u1.js:15:10)\n    at Object.<anonymous> (/tmp/tmpm89go4u1.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, 7.32, 4 ],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        new_list.push(parseFloat(test_list[i]));\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n  7.32,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmpm89go4u1.js:15:10)\n    at Object.<anonymous> (/tmp/tmpm89go4u1.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, 7.32, 4 ],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        if(typeof test_list[i] == \"string\"){\n            new_list.push(parseFloat(test_list[i]));\n        }\n        else{\n            new_list.push(test_list[i]);\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        if (typeof test_list[i] == 'number'){\n            new_list.push(test_list[i]);\n        }\n        else if (typeof test_list[i] == 'string'){\n            var temp = parseFloat(test_list[i]);\n            if (!isNaN(temp)){\n                new_list.push(temp);\n            }\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmpukt6mdrz.js:23:10)\n    at Object.<anonymous> (/tmp/tmpukt6mdrz.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        var new_sublist = [];\n        for(var j = 0; j < test_list[i].length; j++){\n            if(typeof test_list[i][j] === \"string\"){\n                new_sublist.push(parseFloat(test_list[i][j]));\n            }\n            else{\n                new_sublist.push(test_list[i][j]);\n            }\n        }\n        new_list.push(new_sublist);\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        new_list.push(parseFloat(test_list[i]));\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n  7.32,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmpm89go4u1.js:15:10)\n    at Object.<anonymous> (/tmp/tmpm89go4u1.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, 7.32, 4 ],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        var new_list_item = [];\n        for(var j = 0; j < test_list[i].length; j++){\n            new_list_item.push(parseFloat(test_list[i][j]));\n        }\n        new_list.push(new_list_item);\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        if(typeof test_list[i] == 'string'){\n            new_list.push(parseFloat(test_list[i]));\n        }\n        else{\n            new_list.push(test_list[i]);\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        new_list.push(parseFloat(test_list[i]));\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n  7.32,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmpm89go4u1.js:15:10)\n    at Object.<anonymous> (/tmp/tmpm89go4u1.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, 7.32, 4 ],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        if (typeof test_list[i] === \"number\"){\n            new_list.push(test_list[i]);\n        }\n        else if (typeof test_list[i] === \"string\"){\n            new_list.push(parseFloat(test_list[i]));\n        }\n        else if (Array.isArray(test_list[i])){\n            new_list.push(list_to_float(test_list[i]));\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        if (typeof test_list[i] == \"number\"){\n            new_list.push(test_list[i]);\n        }\n        else if (typeof test_list[i] == \"string\"){\n            new_list.push(parseFloat(test_list[i]));\n        }\n        else if (Array.isArray(test_list[i])){\n            new_list.push(list_to_float(test_list[i]));\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n\tvar new_list = [];\n\tfor (var i = 0; i < test_list.length; i++){\n\t\tvar new_sublist = [];\n\t\tfor (var j = 0; j < test_list[i].length; j++){\n\t\t\tnew_sublist.push(parseFloat(test_list[i][j]));\n\t\t}\n\t\tnew_list.push(new_sublist);\n\t}\n\treturn new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        new_list.push(parseFloat(test_list[i]));\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n  7.32,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmpm89go4u1.js:15:10)\n    at Object.<anonymous> (/tmp/tmpm89go4u1.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, 7.32, 4 ],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        if (typeof test_list[i] == \"string\"){\n            new_list.push(parseFloat(test_list[i]));\n        }\n        else {\n            new_list.push(test_list[i]);\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        var new_sub_list = [];\n        for(var j = 0; j < test_list[i].length; j++){\n            new_sub_list.push(parseFloat(test_list[i][j]));\n        }\n        new_list.push(new_sub_list);\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        if (typeof test_list[i] == \"string\"){\n            new_list.push(parseFloat(test_list[i]));\n        } else {\n            new_list.push(test_list[i]);\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        var new_array = [];\n        for (var j = 0; j < test_list[i].length; j++){\n            if (typeof test_list[i][j] == \"number\"){\n                new_array.push(test_list[i][j]);\n            }\n            else if (typeof test_list[i][j] == \"string\"){\n                new_array.push(parseFloat(test_list[i][j]));\n            }\n        }\n        new_list.push(new_array);\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        var new_array = [];\n        for (var j = 0; j < test_list[i].length; j++){\n            new_array.push(parseFloat(test_list[i][j]));\n        }\n        new_list.push(new_array);\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        new_list.push(parseFloat(test_list[i]));\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n  7.32,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmpm89go4u1.js:15:10)\n    at Object.<anonymous> (/tmp/tmpm89go4u1.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, 7.32, 4 ],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        if (typeof test_list[i] === 'string'){\n            new_list.push(parseFloat(test_list[i]));\n        }\n        else {\n            new_list.push(test_list[i]);\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        if(typeof test_list[i] == \"number\"){\n            new_list.push(test_list[i]);\n        }\n        else{\n            for(var j = 0; j < test_list[i].length; j++){\n                if(typeof test_list[i][j] == \"number\"){\n                    new_list.push(test_list[i][j]);\n                }\n            }\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmpblu2q_yd.js:24:10)\n    at Object.<anonymous> (/tmp/tmpblu2q_yd.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        var new_list_row = [];\n        for(var j = 0; j < test_list[i].length; j++){\n            new_list_row.push(parseFloat(test_list[i][j]));\n        }\n        new_list.push(new_list_row);\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        new_list.push(parseFloat(test_list[i]));\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n  7.32,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmpm89go4u1.js:15:10)\n    at Object.<anonymous> (/tmp/tmpm89go4u1.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, 7.32, 4 ],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        new_list.push(parseFloat(test_list[i]));\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n  7.32,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmpm89go4u1.js:15:10)\n    at Object.<anonymous> (/tmp/tmpm89go4u1.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, 7.32, 4 ],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var float_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        if (typeof test_list[i] == \"number\"){\n            float_list.push(test_list[i]);\n        }\n        else if (typeof test_list[i] == \"string\"){\n            var float_num = parseFloat(test_list[i]);\n            if (float_num != NaN){\n                float_list.push(float_num);\n            }\n        }\n    }\n    return float_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmp8swykmsp.js:23:10)\n    at Object.<anonymous> (/tmp/tmp8swykmsp.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        if(typeof test_list[i] === 'number'){\n            new_list.push(test_list[i]);\n        }\n        else if(typeof test_list[i] === 'string'){\n            new_list.push(parseFloat(test_list[i]));\n        }\n        else if(Array.isArray(test_list[i])){\n            new_list.push(list_to_float(test_list[i]));\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        for(var j = 0; j < test_list[i].length; j++){\n            if(isNaN(test_list[i][j])){\n                new_list.push(test_list[i][j]);\n            }\n            else{\n                new_list.push(parseFloat(test_list[i][j]));\n            }\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  4,\n  1,\n  26.45,\n  7.32,\n  8,\n  4,\n  8\n]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmpl01ud1uc.js:22:10)\n    at Object.<anonymous> (/tmp/tmpl01ud1uc.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n        3,    4, 1,\n    26.45, 7.32, 8,\n        4,    8\n  ],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        new_list.push(parseFloat(test_list[i]));\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n  7.32,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmpcupnegmp.js:15:10)\n    at Object.<anonymous> (/tmp/tmpcupnegmp.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, 7.32, 4 ],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        var new_sublist = [];\n        for (var j = 0; j < test_list[i].length; j++){\n            new_sublist.push(parseFloat(test_list[i][j]));\n        }\n        new_list.push(new_sublist);\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        if (typeof test_list[i] === 'string'){\n            new_list.push(parseFloat(test_list[i]));\n        }\n        else{\n            new_list.push(test_list[i]);\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        if(typeof test_list[i] === \"string\"){\n            new_list.push(parseFloat(test_list[i]));\n        }\n        else{\n            new_list.push(test_list[i]);\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        new_list.push(parseFloat(test_list[i]));\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n  7.32,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmpcupnegmp.js:15:10)\n    at Object.<anonymous> (/tmp/tmpcupnegmp.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, 7.32, 4 ],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        if (typeof test_list[i] == \"string\"){\n            new_list.push(parseFloat(test_list[i]));\n        } else {\n            new_list.push(test_list[i]);\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        new_list.push(parseFloat(test_list[i]));\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n  7.32,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmpcupnegmp.js:15:10)\n    at Object.<anonymous> (/tmp/tmpcupnegmp.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, 7.32, 4 ],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        if (typeof test_list[i] == \"number\"){\n            new_list.push(test_list[i]);\n        }\n        else if (typeof test_list[i] == \"string\"){\n            new_list.push(parseFloat(test_list[i]));\n        }\n        else if (Array.isArray(test_list[i])){\n            new_list.push(list_to_float(test_list[i]));\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    for(var i=0; i<test_list.length; i++){\n        for(var j=0; j<test_list[i].length; j++){\n            if(isNaN(test_list[i][j]) == false){\n                test_list[i][j] = parseFloat(test_list[i][j]);\n            }\n        }\n    }\n    return test_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        new_list.push(parseFloat(test_list[i]));\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n  7.32,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmpm89go4u1.js:15:10)\n    at Object.<anonymous> (/tmp/tmpm89go4u1.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, 7.32, 4 ],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        var new_list_2 = [];\n        for(var j = 0; j < test_list[i].length; j++){\n            if(typeof test_list[i][j] === \"number\"){\n                new_list_2.push(test_list[i][j]);\n            }\n            else{\n                new_list_2.push(parseFloat(test_list[i][j]));\n            }\n        }\n        new_list.push(new_list_2);\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    for(var i=0; i<test_list.length; i++){\n        for(var j=0; j<test_list[i].length; j++){\n            if(!isNaN(test_list[i][j])){\n                test_list[i][j] = parseFloat(test_list[i][j]);\n            }\n        }\n    }\n    return test_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        var new_list_item = [];\n        for(var j = 0; j < test_list[i].length; j++){\n            new_list_item.push(parseFloat(test_list[i][j]));\n        }\n        new_list.push(new_list_item);\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    for (var i = 0; i < test_list.length; i++){\n        for (var j = 0; j < test_list[i].length; j++){\n            if (isNaN(test_list[i][j])){\n                test_list[i][j] = parseFloat(test_list[i][j]);\n            }\n        }\n    }\n    return test_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        if(typeof test_list[i] == \"number\"){\n            new_list.push(test_list[i]);\n        }\n        else if(typeof test_list[i] == \"string\"){\n            new_list.push(parseFloat(test_list[i]));\n        }\n        else if(typeof test_list[i] == \"object\"){\n            new_list.push(list_to_float(test_list[i]));\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        if (typeof test_list[i] == \"number\"){\n            new_list.push(test_list[i]);\n        }\n        else if (typeof test_list[i] == \"string\"){\n            new_list.push(parseFloat(test_list[i]));\n        }\n        else if (Array.isArray(test_list[i])){\n            new_list.push(list_to_float(test_list[i]));\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        new_list.push(parseFloat(test_list[i]));\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n  7.32,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmpm89go4u1.js:15:10)\n    at Object.<anonymous> (/tmp/tmpm89go4u1.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, 7.32, 4 ],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        if(typeof test_list[i] == \"number\"){\n            new_list.push(test_list[i]);\n        }\n        else if(typeof test_list[i] == \"string\"){\n            new_list.push(parseFloat(test_list[i]));\n        }\n        else if(Array.isArray(test_list[i])){\n            new_list.push(list_to_float(test_list[i]));\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        var new_list_item = [];\n        for(var j = 0; j < test_list[i].length; j++){\n            new_list_item.push(parseFloat(test_list[i][j]));\n        }\n        new_list.push(new_list_item);\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        new_list.push(parseFloat(test_list[i]));\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n  7.32,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmpm89go4u1.js:15:10)\n    at Object.<anonymous> (/tmp/tmpm89go4u1.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, 7.32, 4 ],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    for(var i=0;i<test_list.length;i++){\n        for(var j=0;j<test_list[i].length;j++){\n            if(isNaN(test_list[i][j])){\n                test_list[i][j]=parseFloat(test_list[i][j]);\n            }\n        }\n    }\n    return test_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        var new_row = [];\n        for(var j = 0; j < test_list[i].length; j++){\n            new_row.push(parseFloat(test_list[i][j]));\n        }\n        new_list.push(new_row);\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        new_list.push(parseFloat(test_list[i]));\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n  7.32,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmpm89go4u1.js:15:10)\n    at Object.<anonymous> (/tmp/tmpm89go4u1.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, 7.32, 4 ],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        new_list.push(parseFloat(test_list[i]));\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n  7.32,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmpm89go4u1.js:15:10)\n    at Object.<anonymous> (/tmp/tmpm89go4u1.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, 7.32, 4 ],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        if(typeof test_list[i] == \"string\"){\n            new_list.push(parseFloat(test_list[i]));\n        }\n        else{\n            new_list.push(test_list[i]);\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        if (typeof test_list[i] == \"string\"){\n            new_list.push(parseFloat(test_list[i]));\n        }\n        else{\n            new_list.push(test_list[i]);\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        if(typeof test_list[i] === \"string\"){\n            new_list.push(parseFloat(test_list[i]));\n        }\n        else{\n            new_list.push(test_list[i]);\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        if (typeof test_list[i] === 'string'){\n            new_list.push(parseFloat(test_list[i]));\n        }\n        else {\n            new_list.push(test_list[i]);\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    for (var i = 0; i < test_list.length; i++){\n        for (var j = 0; j < test_list[i].length; j++){\n            if (isNaN(test_list[i][j])){\n                test_list[i][j] = parseFloat(test_list[i][j]);\n            }\n        }\n    }\n    return test_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        new_list.push(parseFloat(test_list[i]));\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n  7.32,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmpm89go4u1.js:15:10)\n    at Object.<anonymous> (/tmp/tmpm89go4u1.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, 7.32, 4 ],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        if(typeof test_list[i] === \"number\"){\n            new_list.push(test_list[i]);\n        }\n        else if(typeof test_list[i] === \"string\"){\n            new_list.push(parseFloat(test_list[i]));\n        }\n        else if(typeof test_list[i] === \"object\"){\n            new_list.push(list_to_float(test_list[i]));\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        if (typeof test_list[i] == \"string\"){\n            new_list.push(parseFloat(test_list[i]));\n        }\n        else {\n            new_list.push(test_list[i]);\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        new_list.push(parseFloat(test_list[i]));\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n  7.32,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmpm89go4u1.js:15:10)\n    at Object.<anonymous> (/tmp/tmpm89go4u1.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, 7.32, 4 ],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        if (typeof test_list[i] == \"number\"){\n            new_list.push(test_list[i]);\n        }\n        else if (typeof test_list[i] == \"string\"){\n            var new_float = parseFloat(test_list[i]);\n            new_list.push(new_float);\n        }\n        else if (Array.isArray(test_list[i])){\n            var new_float = list_to_float(test_list[i]);\n            new_list.push(new_float);\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        if(typeof test_list[i] == \"number\"){\n            new_list.push(test_list[i]);\n        }\n        else if(typeof test_list[i] == \"string\"){\n            new_list.push(parseFloat(test_list[i]));\n        }\n        else if(typeof test_list[i] == \"object\"){\n            new_list.push(list_to_float(test_list[i]));\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        if (typeof test_list[i] === \"string\"){\n            new_list.push(parseFloat(test_list[i]));\n        }\n        else if (typeof test_list[i] === \"number\"){\n            new_list.push(test_list[i]);\n        }\n        else if (typeof test_list[i] === \"object\"){\n            new_list.push(list_to_float(test_list[i]));\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        var new_sublist = [];\n        for (var j = 0; j < test_list[i].length; j++){\n            new_sublist.push(parseFloat(test_list[i][j]));\n        }\n        new_list.push(new_sublist);\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    for(var i = 0; i < test_list.length; i++){\n        for(var j = 0; j < test_list[i].length; j++){\n            if(typeof test_list[i][j] == \"string\"){\n                test_list[i][j] = parseFloat(test_list[i][j]);\n            }\n        }\n    }\n    return test_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        if(typeof test_list[i] === 'string'){\n            new_list.push(parseFloat(test_list[i]));\n        }\n        else{\n            new_list.push(test_list[i]);\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        new_list.push(parseFloat(test_list[i]));\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n  7.32,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmpm89go4u1.js:15:10)\n    at Object.<anonymous> (/tmp/tmpm89go4u1.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, 7.32, 4 ],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        new_list.push(parseFloat(test_list[i]));\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n  7.32,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmpcupnegmp.js:15:10)\n    at Object.<anonymous> (/tmp/tmpcupnegmp.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, 7.32, 4 ],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var result = [];\n    for (var i = 0; i < test_list.length; i++){\n        result.push(parseFloat(test_list[i]));\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n  7.32,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmp4e8dsblm.js:15:10)\n    at Object.<anonymous> (/tmp/tmp4e8dsblm.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, 7.32, 4 ],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    for(var i = 0; i < test_list.length; i++){\n        for(var j = 0; j < test_list[i].length; j++){\n            if(typeof test_list[i][j] == \"string\"){\n                test_list[i][j] = parseFloat(test_list[i][j]);\n            }\n        }\n    }\n    return test_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        if (typeof test_list[i] == \"number\"){\n            new_list.push(test_list[i]);\n        }\n        else if (typeof test_list[i] == \"string\"){\n            new_list.push(parseFloat(test_list[i]));\n        }\n        else if (Array.isArray(test_list[i])){\n            new_list.push(list_to_float(test_list[i]));\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        new_list.push(parseFloat(test_list[i]));\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n  7.32,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmpcupnegmp.js:15:10)\n    at Object.<anonymous> (/tmp/tmpcupnegmp.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, 7.32, 4 ],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        new_list.push(parseFloat(test_list[i]));\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n  7.32,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmpcupnegmp.js:15:10)\n    at Object.<anonymous> (/tmp/tmpcupnegmp.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, 7.32, 4 ],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        new_list.push(parseFloat(test_list[i]));\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n  7.32,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmpcupnegmp.js:15:10)\n    at Object.<anonymous> (/tmp/tmpcupnegmp.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, 7.32, 4 ],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        if (typeof test_list[i] === 'string'){\n            new_list.push(parseFloat(test_list[i]));\n        }\n        else {\n            new_list.push(test_list[i]);\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var result = [];\n    for (var i = 0; i < test_list.length; i++){\n        result.push(parseFloat(test_list[i]));\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n  7.32,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmp4e8dsblm.js:15:10)\n    at Object.<anonymous> (/tmp/tmp4e8dsblm.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, 7.32, 4 ],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        new_list.push(parseFloat(test_list[i]));\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n  7.32,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmpcupnegmp.js:15:10)\n    at Object.<anonymous> (/tmp/tmpcupnegmp.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, 7.32, 4 ],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        if(typeof test_list[i] === \"number\"){\n            new_list.push(test_list[i]);\n        }\n        else if(typeof test_list[i] === \"string\"){\n            if(!isNaN(parseFloat(test_list[i]))){\n                new_list.push(parseFloat(test_list[i]));\n            }\n        }\n        else if(Array.isArray(test_list[i])){\n            new_list.push(list_to_float(test_list[i]));\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        if (typeof test_list[i] == 'string'){\n            new_list.push(parseFloat(test_list[i]));\n        }\n        else {\n            new_list.push(test_list[i]);\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        var temp_list = [];\n        for(var j = 0; j < test_list[i].length; j++){\n            temp_list.push(parseFloat(test_list[i][j]));\n        }\n        new_list.push(temp_list);\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        var new_row = [];\n        for(var j = 0; j < test_list[i].length; j++){\n            new_row.push(parseFloat(test_list[i][j]));\n        }\n        new_list.push(new_row);\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        if(typeof test_list[i] === 'string'){\n            new_list.push(parseFloat(test_list[i]));\n        }\n        else{\n            new_list.push(test_list[i]);\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        if(typeof test_list[i] == \"number\"){\n            new_list.push(test_list[i]);\n        }\n        else if(typeof test_list[i] == \"string\"){\n            new_list.push(parseFloat(test_list[i]));\n        }\n        else if(Array.isArray(test_list[i])){\n            new_list.push(list_to_float(test_list[i]));\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        if(typeof test_list[i] === \"string\"){\n            new_list.push(parseFloat(test_list[i]));\n        }\n        else{\n            new_list.push(test_list[i]);\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        var new_row = [];\n        for (var j = 0; j < test_list[i].length; j++){\n            new_row.push(parseFloat(test_list[i][j]));\n        }\n        new_list.push(new_row);\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        if(typeof test_list[i] == \"string\"){\n            new_list.push(parseFloat(test_list[i]));\n        }\n        else{\n            new_list.push(test_list[i]);\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var float_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        if(typeof test_list[i] == 'string'){\n            float_list.push(parseFloat(test_list[i]));\n        }\n        else{\n            float_list.push(test_list[i]);\n        }\n    }\n    return float_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        new_list.push(parseFloat(test_list[i]));\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n  7.32,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmpcupnegmp.js:15:10)\n    at Object.<anonymous> (/tmp/tmpcupnegmp.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, 7.32, 4 ],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        var new_list_element = [];\n        for(var j = 0; j < test_list[i].length; j++){\n            new_list_element.push(parseFloat(test_list[i][j]));\n        }\n        new_list.push(new_list_element);\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        if (typeof test_list[i] == \"number\"){\n            new_list.push(test_list[i]);\n        }\n        else if (typeof test_list[i] == \"string\"){\n            new_list.push(parseFloat(test_list[i]));\n        }\n        else if (typeof test_list[i] == \"object\"){\n            new_list.push(list_to_float(test_list[i]));\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++) {\n        if (typeof test_list[i] == \"number\") {\n            new_list.push(test_list[i]);\n        } else if (typeof test_list[i] == \"string\") {\n            new_list.push(parseFloat(test_list[i]));\n        } else if (typeof test_list[i] == \"object\") {\n            new_list.push(list_to_float(test_list[i]));\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        new_list.push(parseFloat(test_list[i]));\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n  7.32,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmpcupnegmp.js:15:10)\n    at Object.<anonymous> (/tmp/tmpcupnegmp.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, 7.32, 4 ],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        new_list.push(parseFloat(test_list[i]));\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n  7.32,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmpm89go4u1.js:15:10)\n    at Object.<anonymous> (/tmp/tmpm89go4u1.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, 7.32, 4 ],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        var new_list_item = [];\n        for (var j = 0; j < test_list[i].length; j++){\n            new_list_item.push(parseFloat(test_list[i][j]));\n        }\n        new_list.push(new_list_item);\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        if (typeof test_list[i] === 'string'){\n            new_list.push(parseFloat(test_list[i]));\n        }\n        else{\n            new_list.push(test_list[i]);\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    for (var i = 0; i < test_list.length; i++){\n        for (var j = 0; j < test_list[i].length; j++){\n            if (isNaN(test_list[i][j]) == false){\n                test_list[i][j] = parseFloat(test_list[i][j]);\n            }\n        }\n    }\n    return test_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var float_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        for (var j = 0; j < test_list[i].length; j++){\n            if (typeof test_list[i][j] == 'string'){\n                test_list[i][j] = parseFloat(test_list[i][j]);\n            }\n            float_list.push(test_list[i][j]);\n        }\n    }\n    return float_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  4,\n  1,\n  26.45,\n  7.32,\n  8,\n  4,\n  8\n]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmp1_o43pga.js:20:10)\n    at Object.<anonymous> (/tmp/tmp1_o43pga.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n        3,    4, 1,\n    26.45, 7.32, 8,\n        4,    8\n  ],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        if (typeof test_list[i] == \"number\"){\n            new_list.push(test_list[i]);\n        }\n        else if (typeof test_list[i] == \"string\"){\n            var new_num = parseFloat(test_list[i]);\n            new_list.push(new_num);\n        }\n        else if (Array.isArray(test_list[i])){\n            var new_num = list_to_float(test_list[i]);\n            new_list.push(new_num);\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var float_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        var float_row = [];\n        for (var j = 0; j < test_list[i].length; j++){\n            if (isNaN(test_list[i][j])){\n                float_row.push(test_list[i][j]);\n            } else {\n                float_row.push(parseFloat(test_list[i][j]));\n            }\n        }\n        float_list.push(float_row);\n    }\n    return float_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    for(var i = 0; i < test_list.length; i++){\n        for(var j = 0; j < test_list[i].length; j++){\n            if(isNaN(test_list[i][j])){\n                test_list[i][j] = parseFloat(test_list[i][j]);\n            }\n        }\n    }\n    return test_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    for (var i = 0; i < test_list.length; i++){\n        for (var j = 0; j < test_list[i].length; j++){\n            test_list[i][j] = parseFloat(test_list[i][j]);\n        }\n    }\n    return test_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var result = [];\n    for (var i = 0; i < test_list.length; i++){\n        result.push(parseFloat(test_list[i]));\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n  7.32,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmp4e8dsblm.js:15:10)\n    at Object.<anonymous> (/tmp/tmp4e8dsblm.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, 7.32, 4 ],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        if (typeof test_list[i] == \"number\"){\n            new_list.push(test_list[i]);\n        }\n        else if (typeof test_list[i] == \"string\"){\n            new_list.push(parseFloat(test_list[i]));\n        }\n        else if (Array.isArray(test_list[i])){\n            new_list.push(list_to_float(test_list[i]));\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var result = [];\n    for (var i = 0; i < test_list.length; i++){\n        if (typeof test_list[i] === 'string'){\n            result.push(parseFloat(test_list[i]));\n        }\n        else {\n            result.push(test_list[i]);\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        var new_sublist = [];\n        for (var j = 0; j < test_list[i].length; j++){\n            new_sublist.push(parseFloat(test_list[i][j]));\n        }\n        new_list.push(new_sublist);\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        if (typeof test_list[i] == \"number\"){\n            new_list.push(test_list[i]);\n        }\n        else if (typeof test_list[i] == \"string\"){\n            new_list.push(parseFloat(test_list[i]));\n        }\n        else if (Array.isArray(test_list[i])){\n            new_list.push(list_to_float(test_list[i]));\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        if (typeof test_list[i] == \"number\"){\n            new_list.push(test_list[i]);\n        }\n        else if (typeof test_list[i] == \"string\"){\n            new_list.push(parseFloat(test_list[i]));\n        }\n        else if (Array.isArray(test_list[i])){\n            new_list.push(list_to_float(test_list[i]));\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        new_list.push(parseFloat(test_list[i]));\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n  7.32,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmpm89go4u1.js:15:10)\n    at Object.<anonymous> (/tmp/tmpm89go4u1.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, 7.32, 4 ],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        if(typeof test_list[i] == \"number\"){\n            new_list.push(test_list[i]);\n        }\n        else if(typeof test_list[i] == \"string\"){\n            new_list.push(parseFloat(test_list[i]));\n        }\n        else if(Array.isArray(test_list[i])){\n            new_list.push(list_to_float(test_list[i]));\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        new_list.push(parseFloat(test_list[i]));\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n  7.32,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmpm89go4u1.js:15:10)\n    at Object.<anonymous> (/tmp/tmpm89go4u1.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, 7.32, 4 ],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        for (var j = 0; j < test_list[i].length; j++){\n            if (typeof test_list[i][j] === \"string\"){\n                new_list.push(parseFloat(test_list[i][j]));\n            }\n            else {\n                new_list.push(test_list[i][j]);\n            }\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  4,\n  1,\n  26.45,\n  7.32,\n  8,\n  4,\n  8\n]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmptzxshsi4.js:22:10)\n    at Object.<anonymous> (/tmp/tmptzxshsi4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n        3,    4, 1,\n    26.45, 7.32, 8,\n        4,    8\n  ],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        if (typeof test_list[i] == \"string\"){\n            new_list.push(parseFloat(test_list[i]));\n        }\n        else {\n            new_list.push(test_list[i]);\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        if (typeof test_list[i] == \"number\"){\n            new_list.push(test_list[i]);\n        }\n        else if (typeof test_list[i] == \"string\"){\n            if (test_list[i].match(/^[0-9]+$/)){\n                new_list.push(parseFloat(test_list[i]));\n            }\n        }\n        else if (Array.isArray(test_list[i])){\n            new_list.push(list_to_float(test_list[i]));\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1\n  ],\n  [\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmpib19mz8q.js:25:10)\n    at Object.<anonymous> (/tmp/tmpib19mz8q.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 3, 4 ], [ 1 ], [ 8 ], [ 4, 8 ] ],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        if(typeof test_list[i] == 'string'){\n            new_list.push(parseFloat(test_list[i]));\n        }\n        else{\n            new_list.push(test_list[i]);\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        if (typeof test_list[i] == \"string\"){\n            new_list.push(parseFloat(test_list[i]));\n        }\n        else{\n            new_list.push(test_list[i]);\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        new_list.push(parseFloat(test_list[i]));\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n  7.32,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmpcupnegmp.js:15:10)\n    at Object.<anonymous> (/tmp/tmpcupnegmp.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, 7.32, 4 ],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        new_list.push(parseFloat(test_list[i]));\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n  7.32,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmpm89go4u1.js:15:10)\n    at Object.<anonymous> (/tmp/tmpm89go4u1.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, 7.32, 4 ],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        new_list.push(parseFloat(test_list[i]));\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n  7.32,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmpm89go4u1.js:15:10)\n    at Object.<anonymous> (/tmp/tmpm89go4u1.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, 7.32, 4 ],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        new_list.push(parseFloat(test_list[i]));\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n  7.32,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmpm89go4u1.js:15:10)\n    at Object.<anonymous> (/tmp/tmpm89go4u1.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, 7.32, 4 ],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    for (var i = 0; i < test_list.length; i++){\n        for (var j = 0; j < test_list[i].length; j++){\n            if (isNaN(parseFloat(test_list[i][j]))){\n                test_list[i][j] = test_list[i][j];\n            }\n            else{\n                test_list[i][j] = parseFloat(test_list[i][j]);\n            }\n        }\n    }\n    return test_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        if (typeof test_list[i] === \"number\"){\n            new_list.push(test_list[i]);\n        }\n        else if (typeof test_list[i] === \"string\"){\n            new_list.push(parseFloat(test_list[i]));\n        }\n        else if (Array.isArray(test_list[i])){\n            new_list.push(list_to_float(test_list[i]));\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        if (typeof test_list[i] == \"number\"){\n            new_list.push(test_list[i]);\n        }\n        else if (typeof test_list[i] == \"string\"){\n            var new_num = parseFloat(test_list[i]);\n            new_list.push(new_num);\n        }\n        else if (typeof test_list[i] == \"object\"){\n            var new_num = list_to_float(test_list[i]);\n            new_list.push(new_num);\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        new_list.push(parseFloat(test_list[i]));\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n  7.32,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmpcupnegmp.js:15:10)\n    at Object.<anonymous> (/tmp/tmpcupnegmp.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, 7.32, 4 ],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        if(typeof test_list[i] == 'number'){\n            new_list.push(test_list[i]);\n        }\n        else if(typeof test_list[i] == 'string'){\n            new_list.push(parseFloat(test_list[i]));\n        }\n        else if(Array.isArray(test_list[i])){\n            new_list.push(list_to_float(test_list[i]));\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        if(typeof test_list[i] == \"number\"){\n            new_list.push(test_list[i]);\n        }\n        else if(typeof test_list[i] == \"string\"){\n            new_list.push(parseFloat(test_list[i]));\n        }\n        else if(typeof test_list[i] == \"object\"){\n            new_list.push(list_to_float(test_list[i]));\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        var new_list_element = [];\n        for(var j = 0; j < test_list[i].length; j++){\n            new_list_element.push(parseFloat(test_list[i][j]));\n        }\n        new_list.push(new_list_element);\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        if(typeof test_list[i] === \"string\"){\n            new_list.push(parseFloat(test_list[i]));\n        }\n        else{\n            new_list.push(test_list[i]);\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        var new_sublist = [];\n        for(var j = 0; j < test_list[i].length; j++){\n            if(isNaN(test_list[i][j])){\n                new_sublist.push(test_list[i][j]);\n            }else{\n                new_sublist.push(parseFloat(test_list[i][j]));\n            }\n        }\n        new_list.push(new_sublist);\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        if (typeof test_list[i] == 'string'){\n            new_list.push(parseFloat(test_list[i]));\n        }\n        else{\n            new_list.push(test_list[i]);\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        new_list.push(parseFloat(test_list[i]));\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n  7.32,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmpm89go4u1.js:15:10)\n    at Object.<anonymous> (/tmp/tmpm89go4u1.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, 7.32, 4 ],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        if (typeof test_list[i] == \"number\"){\n            new_list.push(test_list[i]);\n        } else {\n            new_list.push(parseFloat(test_list[i]));\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n  7.32,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmpufjqohlz.js:19:10)\n    at Object.<anonymous> (/tmp/tmpufjqohlz.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, 7.32, 4 ],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        if (typeof test_list[i] == 'string'){\n            new_list.push(parseFloat(test_list[i]));\n        } else {\n            new_list.push(test_list[i]);\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        if(typeof test_list[i] === 'string'){\n            new_list.push(parseFloat(test_list[i]));\n        } else {\n            new_list.push(test_list[i]);\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        new_list.push(parseFloat(test_list[i]));\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n  7.32,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmpm89go4u1.js:15:10)\n    at Object.<anonymous> (/tmp/tmpm89go4u1.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, 7.32, 4 ],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        new_list.push(parseFloat(test_list[i]));\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n  7.32,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmpm89go4u1.js:15:10)\n    at Object.<anonymous> (/tmp/tmpm89go4u1.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, 7.32, 4 ],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        if (typeof test_list[i] === 'string'){\n            new_list.push(parseFloat(test_list[i]));\n        }\n        else{\n            new_list.push(test_list[i]);\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        var new_list_item = [];\n        for (var j = 0; j < test_list[i].length; j++){\n            new_list_item.push(parseFloat(test_list[i][j]));\n        }\n        new_list.push(new_list_item);\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        var new_list_item = [];\n        for (var j = 0; j < test_list[i].length; j++){\n            new_list_item.push(parseFloat(test_list[i][j]));\n        }\n        new_list.push(new_list_item);\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var float_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        if (typeof test_list[i] == \"number\"){\n            float_list.push(test_list[i]);\n        }\n        else if (typeof test_list[i] == \"string\"){\n            if (test_list[i] == \"\"){\n                float_list.push(0);\n            }\n            else {\n                float_list.push(parseFloat(test_list[i]));\n            }\n        }\n        else if (Array.isArray(test_list[i])){\n            float_list.push(list_to_float(test_list[i]));\n        }\n        else {\n            float_list.push(0);\n        }\n    }\n    return float_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        if (typeof test_list[i] === 'string'){\n            new_list.push(parseFloat(test_list[i]));\n        }\n        else {\n            new_list.push(test_list[i]);\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        new_list.push(parseFloat(test_list[i]));\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n  7.32,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmpm89go4u1.js:15:10)\n    at Object.<anonymous> (/tmp/tmpm89go4u1.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, 7.32, 4 ],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        new_list.push(parseFloat(test_list[i]));\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n  7.32,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmpm89go4u1.js:15:10)\n    at Object.<anonymous> (/tmp/tmpm89go4u1.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, 7.32, 4 ],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        if(typeof test_list[i] === \"string\"){\n            new_list.push(parseFloat(test_list[i]));\n        }\n        else{\n            new_list.push(test_list[i]);\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        new_list.push(parseFloat(test_list[i]));\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n  7.32,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmpm89go4u1.js:15:10)\n    at Object.<anonymous> (/tmp/tmpm89go4u1.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, 7.32, 4 ],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        var new_array = [];\n        for(var j = 0; j < test_list[i].length; j++){\n            new_array.push(parseFloat(test_list[i][j]));\n        }\n        new_list.push(new_array);\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n  var float_list = [];\n  for(var i = 0; i < test_list.length; i++){\n    if(typeof test_list[i] === \"string\"){\n      float_list.push(parseFloat(test_list[i]));\n    } else {\n      float_list.push(test_list[i]);\n    }\n  }\n  return float_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        if(typeof test_list[i] == \"number\"){\n            new_list.push(test_list[i]);\n        }\n        else if(typeof test_list[i] == \"string\"){\n            new_list.push(parseFloat(test_list[i]));\n        }\n        else if(Array.isArray(test_list[i])){\n            new_list.push(list_to_float(test_list[i]));\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n\tvar new_list = [];\n\tfor(var i = 0; i < test_list.length; i++){\n\t\tif(typeof test_list[i] == \"string\"){\n\t\t\tnew_list.push(parseFloat(test_list[i]));\n\t\t}\n\t\telse{\n\t\t\tnew_list.push(test_list[i]);\n\t\t}\n\t}\n\treturn new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n  var new_list = [];\n  for (var i = 0; i < test_list.length; i++){\n    if (typeof test_list[i] === 'string'){\n      new_list.push(parseFloat(test_list[i]));\n    } else {\n      new_list.push(test_list[i]);\n    }\n  }\n  return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        if(typeof test_list[i] === \"number\"){\n            new_list.push(test_list[i]);\n        }\n        else if(typeof test_list[i] === \"string\"){\n            new_list.push(parseFloat(test_list[i]));\n        }\n        else if(Array.isArray(test_list[i])){\n            new_list.push(list_to_float(test_list[i]));\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        new_list.push(parseFloat(test_list[i]));\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n  7.32,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmpcupnegmp.js:15:10)\n    at Object.<anonymous> (/tmp/tmpcupnegmp.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, 7.32, 4 ],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    for(var i = 0; i < test_list.length; i++){\n        for(var j = 0; j < test_list[i].length; j++){\n            if(isNaN(test_list[i][j])){\n                test_list[i][j] = parseFloat(test_list[i][j]);\n            }\n        }\n    }\n    return test_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        if(typeof test_list[i] === \"string\"){\n            new_list.push(parseFloat(test_list[i]));\n        }\n        else{\n            new_list.push(test_list[i]);\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    for (var i = 0; i < test_list.length; i++){\n        for (var j = 0; j < test_list[i].length; j++){\n            if (isNaN(parseFloat(test_list[i][j]))){\n                test_list[i][j] = test_list[i][j];\n            }\n            else{\n                test_list[i][j] = parseFloat(test_list[i][j]);\n            }\n        }\n    }\n    return test_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        if (typeof test_list[i] === \"number\"){\n            new_list.push(test_list[i]);\n        }\n        else if (typeof test_list[i] === \"string\"){\n            new_list.push(parseFloat(test_list[i]));\n        }\n        else if (typeof test_list[i] === \"object\"){\n            new_list.push(list_to_float(test_list[i]));\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        if(typeof test_list[i] == 'string'){\n            new_list.push(parseFloat(test_list[i]));\n        }\n        else{\n            new_list.push(test_list[i]);\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        new_list.push(parseFloat(test_list[i]));\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n  7.32,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmpm89go4u1.js:15:10)\n    at Object.<anonymous> (/tmp/tmpm89go4u1.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, 7.32, 4 ],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    for(var i = 0; i < test_list.length; i++){\n        for(var j = 0; j < test_list[i].length; j++){\n            if(typeof test_list[i][j] == \"string\"){\n                test_list[i][j] = parseFloat(test_list[i][j]);\n            }\n        }\n    }\n    return test_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        if (typeof test_list[i] == \"string\"){\n            new_list.push(parseFloat(test_list[i]));\n        }\n        else if (typeof test_list[i] == \"number\"){\n            new_list.push(test_list[i]);\n        }\n        else if (Array.isArray(test_list[i])){\n            new_list.push(list_to_float(test_list[i]));\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        if (typeof test_list[i] === \"string\"){\n            new_list.push(parseFloat(test_list[i]));\n        }\n        else if (typeof test_list[i] === \"number\"){\n            new_list.push(test_list[i]);\n        }\n        else if (typeof test_list[i] === \"object\"){\n            new_list.push(list_to_float(test_list[i]));\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        if(typeof test_list[i] == \"string\"){\n            new_list.push(parseFloat(test_list[i]));\n        }\n        else{\n            new_list.push(test_list[i]);\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        if(typeof(test_list[i]) == \"number\"){\n            new_list.push(test_list[i]);\n        }\n        else if(typeof(test_list[i]) == \"string\"){\n            new_list.push(parseFloat(test_list[i]));\n        }\n        else if(typeof(test_list[i]) == \"object\"){\n            new_list.push(list_to_float(test_list[i]));\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var float_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        if (typeof test_list[i] == 'string'){\n            float_list.push(parseFloat(test_list[i]));\n        }\n        else if (typeof test_list[i] == 'number'){\n            float_list.push(test_list[i]);\n        }\n        else if (Array.isArray(test_list[i])){\n            float_list.push(list_to_float(test_list[i]));\n        }\n    }\n    return float_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        new_list.push(parseFloat(test_list[i]));\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n  7.32,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmpm89go4u1.js:15:10)\n    at Object.<anonymous> (/tmp/tmpm89go4u1.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, 7.32, 4 ],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++) {\n        new_list.push(parseFloat(test_list[i]));\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n  7.32,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmp9mfjtdar.js:15:10)\n    at Object.<anonymous> (/tmp/tmp9mfjtdar.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, 7.32, 4 ],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    for (var i = 0; i < test_list.length; i++){\n        for (var j = 0; j < test_list[i].length; j++){\n            if (isNaN(test_list[i][j]) == false){\n                test_list[i][j] = parseFloat(test_list[i][j]);\n            }\n        }\n    }\n    return test_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        var new_array = [];\n        for (var j = 0; j < test_list[i].length; j++){\n            new_array.push(parseFloat(test_list[i][j]));\n        }\n        new_list.push(new_array);\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        new_list.push(parseFloat(test_list[i]));\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n  7.32,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmpm89go4u1.js:15:10)\n    at Object.<anonymous> (/tmp/tmpm89go4u1.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, 7.32, 4 ],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        var new_sublist = [];\n        for(var j = 0; j < test_list[i].length; j++){\n            new_sublist.push(parseFloat(test_list[i][j]));\n        }\n        new_list.push(new_sublist);\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        new_list.push(parseFloat(test_list[i]));\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n  7.32,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmpm89go4u1.js:15:10)\n    at Object.<anonymous> (/tmp/tmpm89go4u1.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, 7.32, 4 ],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var result = [];\n    for (var i=0; i<test_list.length; i++){\n        var temp = [];\n        for (var j=0; j<test_list[i].length; j++){\n            temp.push(parseFloat(test_list[i][j]));\n        }\n        result.push(temp);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        if(typeof test_list[i] == \"number\"){\n            new_list.push(test_list[i]);\n        }\n        else{\n            for(var j = 0; j < test_list[i].length; j++){\n                if(typeof test_list[i][j] == \"number\"){\n                    new_list.push(test_list[i][j]);\n                }\n                else{\n                    for(var k = 0; k < test_list[i][j].length; k++){\n                        if(typeof test_list[i][j][k] == \"number\"){\n                            new_list.push(test_list[i][j][k]);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmpjdkcyxeh.js:31:10)\n    at Object.<anonymous> (/tmp/tmpjdkcyxeh.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        new_list.push(parseFloat(test_list[i]));\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n  7.32,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmpcupnegmp.js:15:10)\n    at Object.<anonymous> (/tmp/tmpcupnegmp.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, 7.32, 4 ],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        new_list.push(parseFloat(test_list[i]));\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n  7.32,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmpcupnegmp.js:15:10)\n    at Object.<anonymous> (/tmp/tmpcupnegmp.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, 7.32, 4 ],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = []\n    for (var i = 0; i < test_list.length; i++){\n        var new_sublist = []\n        for (var j = 0; j < test_list[i].length; j++){\n            new_sublist.push(parseFloat(test_list[i][j]))\n        }\n        new_list.push(new_sublist)\n    }\n    return new_list\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        if (typeof test_list[i] == \"number\"){\n            new_list.push(test_list[i]);\n        }\n        else if (typeof test_list[i] == \"string\"){\n            new_list.push(parseFloat(test_list[i]));\n        }\n        else if (Array.isArray(test_list[i])){\n            new_list.push(list_to_float(test_list[i]));\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var float_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        if(typeof test_list[i] == \"number\"){\n            float_list.push(test_list[i].toFixed(2));\n        }\n        else if(typeof test_list[i] == \"string\"){\n            float_list.push(parseFloat(test_list[i]).toFixed(2));\n        }\n        else if(typeof test_list[i] == \"boolean\"){\n            float_list.push(parseFloat(test_list[i]).toFixed(2));\n        }\n        else if(typeof test_list[i] == \"object\"){\n            float_list.push(list_to_float(test_list[i]));\n        }\n    }\n    return float_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        var new_list_row = [];\n        for(var j = 0; j < test_list[i].length; j++){\n            new_list_row.push(parseFloat(test_list[i][j]));\n        }\n        new_list.push(new_list_row);\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var result = [];\n    for (var i = 0; i < test_list.length; i++){\n        result.push(parseFloat(test_list[i]));\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n  7.32,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmp4e8dsblm.js:15:10)\n    at Object.<anonymous> (/tmp/tmp4e8dsblm.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, 7.32, 4 ],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        new_list.push(parseFloat(test_list[i]));\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n  7.32,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmpm89go4u1.js:15:10)\n    at Object.<anonymous> (/tmp/tmpm89go4u1.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, 7.32, 4 ],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        var new_sublist = [];\n        for (var j = 0; j < test_list[i].length; j++){\n            new_sublist.push(parseFloat(test_list[i][j]));\n        }\n        new_list.push(new_sublist);\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var float_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        var float_row = [];\n        for(var j = 0; j < test_list[i].length; j++){\n            if(typeof test_list[i][j] == 'number'){\n                float_row.push(test_list[i][j]);\n            }\n            else{\n                float_row.push(parseFloat(test_list[i][j]));\n            }\n        }\n        float_list.push(float_row);\n    }\n    return float_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(parseFloat(test_list[i]));\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n  7.32,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  [\n    3,\n    4\n  ],\n  [\n    1,\n    26.45\n  ],\n  [\n    7.32,\n    8\n  ],\n  [\n    4,\n    8\n  ]\n]\n    at test (/tmp/tmp87zgz9ge.js:15:10)\n    at Object.<anonymous> (/tmp/tmp87zgz9ge.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, 7.32, 4 ],\n  expected: [ [ 3, 4 ], [ 1, 26.45 ], [ 7.32, 8 ], [ 4, 8 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    for(var i = 0; i < test_list.length; i++){\n        for(var j = 0; j < test_list[i].length; j++){\n            if(!isNaN(test_list[i][j])){\n                test_list[i][j] = parseFloat(test_list[i][j]);\n            }\n        }\n    }\n    return test_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        var new_sublist = [];\n        for (var j = 0; j < test_list[i].length; j++){\n            if (isNaN(test_list[i][j])){\n                new_sublist.push(test_list[i][j]);\n            }\n            else{\n                new_sublist.push(parseFloat(test_list[i][j]));\n            }\n        }\n        new_list.push(new_sublist);\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        if(typeof test_list[i] === 'number'){\n            new_list.push(test_list[i]);\n        }\n        else if(typeof test_list[i] === 'string'){\n            new_list.push(parseFloat(test_list[i]));\n        }\n        else if(Array.isArray(test_list[i])){\n            new_list.push(list_to_float(test_list[i]));\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        var new_sublist = [];\n        for(var j = 0; j < test_list[i].length; j++){\n            if(isNaN(test_list[i][j])){\n                new_sublist.push(test_list[i][j]);\n            }\n            else{\n                new_sublist.push(parseFloat(test_list[i][j]));\n            }\n        }\n        new_list.push(new_sublist);\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        var sub_list = [];\n        for(var j = 0; j < test_list[i].length; j++){\n            sub_list.push(parseFloat(test_list[i][j]));\n        }\n        new_list.push(sub_list);\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        if(typeof test_list[i] == 'number'){\n            new_list.push(test_list[i]);\n        }\n        else if(typeof test_list[i] == 'string'){\n            var new_num = parseFloat(test_list[i]);\n            new_list.push(new_num);\n        }\n        else if(typeof test_list[i] == 'object'){\n            new_list.push(list_to_float(test_list[i]));\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        if (typeof test_list[i] == \"number\"){\n            new_list.push(test_list[i]);\n        }\n        else if (typeof test_list[i] == \"string\"){\n            var new_string = parseFloat(test_list[i]);\n            new_list.push(new_string);\n        }\n        else if (typeof test_list[i] == \"object\"){\n            var new_object = list_to_float(test_list[i]);\n            new_list.push(new_object);\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    return test_list.map(function(x){\n        return x.map(function(y){\n            return parseFloat(y);\n        });\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        if(typeof test_list[i] == 'number'){\n            new_list.push(test_list[i]);\n        }\n        else if(typeof test_list[i] == 'string'){\n            new_list.push(parseFloat(test_list[i]));\n        }\n        else if(Array.isArray(test_list[i])){\n            new_list.push(list_to_float(test_list[i]));\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        if (typeof test_list[i] == \"string\"){\n            var new_element = parseFloat(test_list[i]);\n            new_list.push(new_element);\n        }\n        else{\n            new_list.push(test_list[i]);\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert all possible convertible elements in an array of arrays to floats.\nfunction list_to_float(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        if(typeof test_list[i] === \"string\"){\n            new_list.push(parseFloat(test_list[i]));\n        }\n        else{\n            new_list.push(test_list[i]);\n        }\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_to_float;\n  assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);\n  assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);\n  assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);\n}\n\ntest();",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}