{
  "name": "mbpp_576_is_Sub_Array",
  "language": "js",
  "prompt": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_576_is_Sub_Array.py",
  "prompt_terminology": "reworded",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "results": [
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < B.length; i++){\n        if(A[j] == B[i]){\n            j++;\n        }\n        if(j == A.length){\n            return true;\n        }\n    }\n    return false;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i, j;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j])\n                break;\n        }\n        if(j == B.length)\n            return false;\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [2, 3, 4];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < B.length; i++){\n        for(j = 0; j < A.length; j++){\n            if(B[i] == A[j]){\n                break;\n            }\n        }\n        if(j == A.length){\n            return false;\n        }\n    }\n    return true;\n}\nvar A = [1, 2, 3, 4, 5];\nvar B = [2, 3, 4];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpo93wt5em.js:25:10)\n    at Object.<anonymous> (/tmp/tmpo93wt5em.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                k++;\n            }\n        }\n    }\n    if(k == A.length){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nvar A = [1, 2, 3, 4, 5];\nvar B = [2, 3, 4, 5, 6, 7, 8];\nvar result = is_Sub_Array(A, B);\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpepi_cwf_.js:29:10)\n    at Object.<anonymous> (/tmp/tmpepi_cwf_.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                flag = 1;\n                break;\n            }\n            else{\n                flag = 0;\n            }\n        }\n        if(flag == 0){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i, j;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [2, 3, 4];\nvar C = [2, 3, 6];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j])\n                break;\n        }\n        if (j == B.length)\n            return false;\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [2, 3, 4];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    for (i = 0; i < A.length; i++){\n        for (j = 0; j < B.length; j++){\n            if(A[i] == B[j])\n                break;\n        }\n        if (j == B.length)\n            return false;\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [2, 4, 5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3, 4, 5];\nvar C = [1, 2, 3, 4, 5, 6];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i=0; i<A.length; i++){\n        for(j=0; j<B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3];\nvar C = [1, 2, 4];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3];\nvar C = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar D = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for (i = 0; i < B.length; i++) {\n        for (j = 0; j < A.length; j++) {\n            if (B[i] == A[j]) {\n                break;\n            }\n        }\n        if (j == A.length) {\n            return false;\n        }\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp7wyr0ebo.js:23:10)\n    at Object.<anonymous> (/tmp/tmp7wyr0ebo.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                flag = 1;\n            }\n            else{\n                flag = 0;\n            }\n        }\n    }\n    if(flag == 1){\n        console.log(\"A is subarray of B\");\n    }\n    else{\n        console.log(\"A is not subarray of B\");\n    }\n}\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nis_Sub_Array(A, B);\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "A is not subarray of B\nA is not subarray of B\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp74npskfb.js:31:10)\n    at Object.<anonymous> (/tmp/tmp74npskfb.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar C = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                flag = 1;\n                break;\n            }\n        }\n        if(flag == 0){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3, 4, 5];\nvar C = [1, 2, 3, 4, 5, 6, 7];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp9ooh1ofa.js:29:10)\n    at Object.<anonymous> (/tmp/tmp9ooh1ofa.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [2, 4, 5];\nvar C = [2, 3, 4];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i=0; i<A.length; i++){\n        for(j=0; j<B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [2,3,4,5,6];\nvar B = [2,3,4,5,6,7,8,9];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar C = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar D = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar E = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar F = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar G = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar H = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar I = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar J = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar K = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar L = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar M = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar N = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar O = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar P = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar Q = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar R = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar S = [1\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "/tmp/tmpin39fk9q.js:36\nconst assert = require('node:assert');\n^^^^^\n\nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                for (k = 0; k < A.length; k++) {\n                    if (A[k] != B[j + k]) {\n                        break;\n                    }\n                }\n                if (k == A.length) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                flag = 1;\n                break;\n            }\n        }\n        if(flag == 0){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [2, 3, 4];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpahl1apyk.js:27:10)\n    at Object.<anonymous> (/tmp/tmpahl1apyk.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var M = A.length, N = B.length;\n    for (var i = 0; i <= N - M; i++) {\n        var j;\n        for (j = 0; j < M; j++) {\n            if (B[i + j] != A[j])\n                break;\n        }\n        if (j == M)\n            return true;\n    }\n    return false;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar C = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i, j;\n    for (i = 0; i < B.length; i++) {\n        for (j = 0; j < A.length; j++) {\n            if (B[i] == A[j])\n                break;\n        }\n        if (j == A.length)\n            return false;\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3];\nvar C = [1, 2, 7];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp7k_rrlgw.js:25:10)\n    at Object.<anonymous> (/tmp/tmp7k_rrlgw.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3, 4];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < B.length; i++){\n        for(j = 0; j < A.length; j++){\n            if(B[i] == A[j]){\n                break;\n            }\n        }\n        if(j == A.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [2, 3, 4, 5, 6];\nvar B = [4, 3, 2];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpls16usrm.js:26:10)\n    at Object.<anonymous> (/tmp/tmpls16usrm.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i, j;\n    for (i = 0; i < B.length; i++){\n        for (j = 0; j < A.length; j++){\n            if (B[i] == A[j])\n                break;\n        }\n        if (j == A.length)\n            return false;\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpy47j5dok.js:21:10)\n    at Object.<anonymous> (/tmp/tmpy47j5dok.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var flag = 0;\n    for(var i = 0; i < A.length; i++){\n        if(A[i] == B[0]){\n            for(var j = 0; j < B.length; j++){\n                if(A[i+j] != B[j]){\n                    break;\n                }\n                else{\n                    flag = 1;\n                }\n            }\n        }\n    }\n    if(flag == 1){\n        console.log(\"B is a subarray of A\");\n    }\n    else{\n        console.log(\"B is not a subarray of A\");\n    }\n}\nvar A = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar B = [2, 3, 4, 5];\nis_Sub_Array(A, B);\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "B is a subarray of A\nB is a subarray of A\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpgd1i3uy5.js:31:10)\n    at Object.<anonymous> (/tmp/tmpgd1i3uy5.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j])\n                break;\n        }\n        if (j == B.length)\n            return false;\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n        }\n        j++;\n    }\n    return (i == A.length);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i, j;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [2, 3, 4];\n\nif(is_Sub_Array(A, B)){\n    console.log(\"B is a sub array of A\");\n}else{\n    console.log(\"B is not a sub array of A\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "B is not a sub array of A\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var C = A.concat(B);\n    var D = C.sort();\n    for(var i = 0; i < D.length; i++){\n        if(D[i] == D[i+1]){\n            return true;\n        }\n    }\n    return false;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpdjte7u4w.js:17:10)\n    at Object.<anonymous> (/tmp/tmpdjte7u4w.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    for(i=0; i<A.length; i++){\n        for(j=0; j<B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [2, 4, 5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < B.length; i++){\n        for(j = 0; j < A.length; j++){\n            if(B[i] == A[j]){\n                break;\n            }\n        }\n        if(j == A.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [2, 3, 4];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp8lrq7nmf.js:26:10)\n    at Object.<anonymous> (/tmp/tmp8lrq7nmf.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var C = A.toString();\n    for (var i = 0; i < B.length; i++) {\n        if (C.indexOf(B[i]) == -1) {\n            return false;\n        }\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpgbpogta8.js:18:10)\n    at Object.<anonymous> (/tmp/tmpgbpogta8.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [2, 3, 4];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [2, 4, 5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j])\n                break;\n        }\n        if (j == B.length)\n            return false;\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var M = A.length;\n    var N = B.length;\n    for(var i = 0; i <= N - M; i++){\n        var j;\n        for(j = 0; j < M; j++){\n            if(B[i + j] !== A[j]){\n                break;\n            }\n        }\n        if(j == M){\n            return true;\n        }\n    }\n    return false;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [2, 3, 4, 5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var flag = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                flag = 1;\n                break;\n            }\n            else{\n                flag = 0;\n            }\n        }\n        if(flag == 0){\n            return false;\n        }\n    }\n    return true;\n}\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3, 4, 5];\nvar C = [1, 2, 3, 4];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3, 4, 5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [2, 3, 4];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i, j;\n    for (i = 0; i < B.length; i++) {\n        for (j = 0; j < A.length; j++) {\n            if (B[i] == A[j])\n                break;\n        }\n        if (j == A.length)\n            return false;\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp3tcsta0p.js:24:10)\n    at Object.<anonymous> (/tmp/tmp3tcsta0p.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var C = new Array();\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    while(i < A.length){\n        if(A[i] == B[j]){\n            C[k] = A[i];\n            i++;\n            j++;\n            k++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(C.length == B.length){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nvar A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar B = [2, 4, 6, 8, 10];\nvar C = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < B.length; i++){\n        for(j = 0; j < A.length; j++){\n            if(B[i] == A[j]){\n                break;\n            }\n        }\n        if(j == A.length){\n            return false;\n        }\n    }\n    return true;\n}\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar C = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpfyzeomk9.js:26:10)\n    at Object.<anonymous> (/tmp/tmpfyzeomk9.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i, j;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j])\n                break;\n        }\n        if (j == B.length)\n            return false;\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var result = true;\n    for(var i = 0; i < B.length; i++){\n        var element_index = A.indexOf(B[i]);\n        if(element_index === -1){\n            result = false;\n            break;\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp8jadug1b.js:20:10)\n    at Object.<anonymous> (/tmp/tmp8jadug1b.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    while (i < A.length && j < B.length){\n        if (A[i] == B[j]){\n            i++;\n        }\n        j++;\n    }\n    return (i == A.length);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\nvar A = [1, 2, 3, 4, 5];\nvar B = [3, 4, 5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [2, 3, 4];\nvar C = [2, 3, 7];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i, j;\n    for (i = 0; i < B.length; i++) {\n        for (j = 0; j < A.length; j++) {\n            if (B[i] == A[j])\n                break;\n        }\n        if (j == A.length)\n            return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0r7xygfa.js:22:10)\n    at Object.<anonymous> (/tmp/tmp0r7xygfa.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < B.length; i++){\n        for(j = 0; j < A.length; j++){\n            if(B[i] == A[j]){\n                break;\n            }\n        }\n        if(j == A.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar C = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0bi3y8ht.js:28:10)\n    at Object.<anonymous> (/tmp/tmp0bi3y8ht.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar C = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\nvar D = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n        }\n        j++;\n    }\n    return i == A.length;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i, j;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3];\nvar C = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var result = true;\n    for(var i = 0; i < B.length; i++){\n        if(A.indexOf(B[i]) == -1){\n            result = false;\n            break;\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmplki81zha.js:19:10)\n    at Object.<anonymous> (/tmp/tmplki81zha.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i, j;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var M = A.length, N = B.length;\n    for (var i = 0; i <= N - M; i++) {\n        var j;\n        for (j = 0; j < M; j++)\n            if (B[i + j] != A[j])\n                break;\n        if (j == M)\n            return true;\n    }\n    return false;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3, 4];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3, 4, 5];\nvar C = [1, 2, 3, 4, 5, 6];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i, j;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [2, 3, 4, 5];\nvar C = [2, 3, 4, 7];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j])\n                break;\n        }\n        if(j == B.length)\n            return false;\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [2, 4, 5];\nvar C = [6, 7, 8, 9];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i, j;\n    for (i = 0; i < A.length; i++){\n        for (j = 0; j < B.length; j++){\n            if (A[i] === B[j])\n                break;\n        }\n        if (j === B.length)\n            return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3, 4, 5, 6, 7];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                flag = 1;\n                break;\n            }\n            else{\n                flag = 0;\n            }\n        }\n        if(flag == 0){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3, 4, 5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var result = false;\n    for(var i = 0; i < A.length; i++){\n        if(A[i] == B[0]){\n            for(var j = 0; j < B.length; j++){\n                if(A[i + j] !== B[j]){\n                    break;\n                }\n                else if(j == B.length - 1){\n                    result = true;\n                }\n            }\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var M = A.length, N = B.length;\n    for (var i = 0; i <= N - M; i++) {\n        var j;\n        for (j = 0; j < M; j++) {\n            if (B[i + j] != A[j])\n                break;\n        }\n        if (j == M)\n            return true;\n    }\n    return false;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i, j;\n    for(i=0; i<A.length; i++){\n        for(j=0; j<B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var result = false;\n    for(var i = 0; i < A.length; i++){\n        if(A[i] == B[0]){\n            for(var j = 0; j < B.length; j++){\n                if(A[i+j] != B[j]){\n                    break;\n                }\n                result = true;\n            }\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp64anrizt.js:21:10)\n    at Object.<anonymous> (/tmp/tmp64anrizt.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var result = false;\n    for(var i = 0; i < A.length; i++){\n        if(A[i] == B[0]){\n            for(var j = 0; j < B.length; j++){\n                if(A[i+j] != B[j]){\n                    break;\n                }\n                result = true;\n            }\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp64anrizt.js:21:10)\n    at Object.<anonymous> (/tmp/tmp64anrizt.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i, j;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\nif(is_Sub_Array(A, B)){\n    console.log(\"A is a sub array of B\");\n}\nelse{\n    console.log(\"A is not a sub array of B\");\n}\n\nif(is_Sub_Array(B, A)){\n    console.log(\"B is a sub array of A\");\n}\nelse{\n    console.log(\"B is not a sub array of A\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "A is a sub array of B\nB is not a sub array of A\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i, j;\n    for (i = 0; i < B.length; i++){\n        for (j = 0; j < A.length; j++){\n            if (B[i] == A[j])\n                break;\n        }\n        if (j == A.length)\n            return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp98owensx.js:22:10)\n    at Object.<anonymous> (/tmp/tmp98owensx.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var M = A.length;\n    var N = B.length;\n    for (var i = 0; i <= N - M; i++) {\n        var j;\n        for (j = 0; j < M; j++) {\n            if (B[i + j] != A[j]) {\n                break;\n            }\n        }\n        if (j == M) {\n            return true;\n        }\n    }\n    return false;\n}\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 4, 5];\nif (is_Sub_Array(A, B)) {\n    console.log(\"Array B is a subarray of A\");\n} else {\n    console.log(\"Array B is not a subarray of A\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "Array B is not a subarray of A\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < B.length; i++){\n        for(j = 0; j < A.length; j++){\n            if(B[i] == A[j]){\n                break;\n            }\n        }\n        if(j == A.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmptaenou64.js:24:10)\n    at Object.<anonymous> (/tmp/tmptaenou64.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var result = false;\n    for(var i = 0; i < B.length; i++){\n        if(A[0] == B[i]){\n            result = true;\n            for(var j = 1; j < A.length; j++){\n                if(A[j] != B[i+j]){\n                    result = false;\n                    break;\n                }\n            }\n        }\n    }\n    return result;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp_j8x0q72.js:26:10)\n    at Object.<anonymous> (/tmp/tmp_j8x0q72.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar C = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\n\nif(is_Sub_Array(A, B)){\n    console.log(\"A is a sub array of B\");\n}else{\n    console.log(\"A is not a sub array of B\");\n}\n\nif(is_Sub_Array(A, C)){\n    console.log(\"A is a sub array of C\");\n}else{\n    console.log(\"A is not a sub array of C\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "A is a sub array of B\nA is a sub array of C\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var C = A.concat(B);\n    var D = C.sort();\n    var E = [];\n    for(var i = 0; i < D.length; i++){\n        if(D[i] == D[i+1]){\n            E.push(D[i]);\n        }\n    }\n    if(E.length > 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpusyjm7qw.js:23:10)\n    at Object.<anonymous> (/tmp/tmpusyjm7qw.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var result = false;\n    for(var i=0; i<B.length; i++){\n        if(A[0] == B[i]){\n            result = true;\n            for(var j=0; j<A.length; j++){\n                if(A[j] != B[i+j]){\n                    result = false;\n                    break;\n                }\n            }\n        }\n        if(result == true)\n            break;\n    }\n    return result;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var result = true;\n    for(var i = 0; i < B.length; i++){\n        var element_index = A.indexOf(B[i]);\n        if(element_index == -1){\n            result = false;\n            break;\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpqze4y778.js:20:10)\n    at Object.<anonymous> (/tmp/tmpqze4y778.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [2, 4, 5];\n\nif(is_Sub_Array(A, B)){\n    console.log(\"B is a sub array of A\");\n}else{\n    console.log(\"B is not a sub array of A\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "B is not a sub array of A\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var result = false;\n    for(var i = 0; i < A.length; i++){\n        if(A[i] == B[0]){\n            for(var j = 0; j < B.length; j++){\n                if(A[i+j] != B[j]){\n                    break;\n                }\n                result = true;\n            }\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp64anrizt.js:21:10)\n    at Object.<anonymous> (/tmp/tmp64anrizt.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] === B[j]){\n            i++;\n        }\n        j++;\n    }\n    return (i === A.length);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var C = [];\n    var i = 0;\n    var j = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            C[C.length] = A[i];\n            i++;\n            j++;\n        }else{\n            j++;\n        }\n    }\n    if(C.length == A.length){\n        return true;\n    }else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var result = true;\n    for(var i = 0; i < B.length; i++){\n        if(A.indexOf(B[i]) == -1){\n            result = false;\n            break;\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmplki81zha.js:19:10)\n    at Object.<anonymous> (/tmp/tmplki81zha.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var result = false;\n    for(var i = 0; i < A.length; i++){\n        if(A[i] == B[0]){\n            for(var j = 0; j < B.length; j++){\n                if(A[i+j] != B[j]){\n                    break;\n                }\n                else if(j == B.length-1){\n                    result = true;\n                }\n            }\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i, j;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var M = A.length;\n    var N = B.length;\n    for (var i = 0; i <= N - M; i++) {\n        var j;\n        for (j = 0; j < M; j++) {\n            if (B[i + j] != A[j])\n                break;\n        }\n        if (j == M)\n            return true;\n    }\n    return false;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                flag = 1;\n                break;\n            }\n        }\n        if(flag == 0){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmphwtyzan4.js:27:10)\n    at Object.<anonymous> (/tmp/tmphwtyzan4.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3, 4, 5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                for(k = 0; k < B.length; k++){\n                    if(A[i+k] != B[j+k]){\n                        break;\n                    }\n                }\n                if(k == B.length){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\nvar A = [1,2,3,4,5,6,7,8,9,10];\nvar B = [1,2,3,4,5,6,7,8,9,10];\nvar C = [1,2,3,4,5,6,7,8,9,10];\nvar D = [1,2,3,4,5,6,7,8,9,10];\nvar E = [1,2,3,4,5,6,7,8,9,10];\nvar F = [1,2,3,4,5,6,7,8,9,10];\nvar G = [1,2,3,4,5,6,7,8,9,10];\nvar H = [1,2,3,4,5,6,7,8,9,10];\nvar I = [1,2,3,4,5,6,7,8,9,10];\nvar J = [1,2,3,4,5,6,7,8,9,10];\nvar K = [1,2,3,4,5,6,7,8,9,10];\nvar L = [1,2,3,4,5,6,7,8,9,10];\nvar M = [1,2,3,4,5,6,7,8,9,10];\nvar N = [1,2,3,4,5,6,7,8,9,10];\nvar O = [1,2,3,4,\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "/tmp/tmpjgqkw92y.js:38\nconst assert = require('node:assert');\n^^^^^\n\nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [2, 3, 4];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < B.length; i++){\n        for(j = 0; j < A.length; j++){\n            if(B[i] == A[j]){\n                break;\n            }\n        }\n        if(j == A.length){\n            return false;\n        }\n    }\n    return true;\n}\nvar A = [1, 2, 3, 4, 5];\nvar B = [2, 3, 4];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpo93wt5em.js:25:10)\n    at Object.<anonymous> (/tmp/tmpo93wt5em.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i, j;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j])\n                break;\n        }\n        if (j == B.length)\n            return false;\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [2, 4, 5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [2, 3, 4];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var flag = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                for(k = 0; k < A.length; k++){\n                    if(A[k] == B[j + k]){\n                        flag = 1;\n                    }\n                    else{\n                        flag = 0;\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    if(flag == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpk1qnan8_.js:38:10)\n    at Object.<anonymous> (/tmp/tmpk1qnan8_.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var result = false;\n    for(var i = 0; i < A.length; i++){\n        if(A[i] == B[0]){\n            for(var j = 0; j < B.length; j++){\n                if(A[i+j] != B[j]){\n                    break;\n                }\n                result = true;\n            }\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp64anrizt.js:21:10)\n    at Object.<anonymous> (/tmp/tmp64anrizt.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j])\n                break;\n        }\n        if (j == B.length)\n            return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var result = true;\n    for(var i = 0; i < B.length; i++){\n        var element_index = A.indexOf(B[i]);\n        if(element_index == -1){\n            result = false;\n            break;\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpqze4y778.js:20:10)\n    at Object.<anonymous> (/tmp/tmpqze4y778.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var C = A.concat(B);\n    var D = C.sort();\n    var E = D.filter(function(element, index, array){\n        return (element !== array[index - 1]);\n    });\n    return (E.length === B.length);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpxb8j7f2t.js:17:10)\n    at Object.<anonymous> (/tmp/tmpxb8j7f2t.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    for(i=0; i<A.length; i++){\n        for(j=0; j<B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3, 4, 5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i, j;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j])\n                break;\n        }\n        if(j == B.length)\n            return false;\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [3, 4, 5];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [2, 4, 5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var M = A.length, N = B.length;\n    for (var i = 0; i <= N - M; i++) {\n        var j;\n        for (j = 0; j < M; j++) {\n            if (B[i + j] != A[j])\n                break;\n        }\n        if (j == M)\n            return true;\n    }\n    return false;\n}\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i, j;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i, j;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var M = A.length;\n    var N = B.length;\n    for (var i = 0; i <= N - M; i++) {\n        var j;\n        for (j = 0; j < M; j++)\n            if (B[i + j] != A[j])\n                break;\n        if (j == M)\n            return true;\n    }\n    return false;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i, j;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j])\n                break;\n        }\n        if (j == B.length)\n            return false;\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i, j;\n    for (i = 0; i < A.length; i++){\n        for (j = 0; j < B.length; j++){\n            if (A[i] == B[j])\n                break;\n        }\n        if (j == B.length)\n            return false;\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [2, 4, 3];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var M = A.length;\n    var N = B.length;\n    for (var i = 0; i <= N - M; i++) {\n        var j;\n        for (j = 0; j < M; j++) {\n            if (B[i + j] != A[j]) {\n                break;\n            }\n        }\n        if (j == M) {\n            return true;\n        }\n    }\n    return false;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i, j;\n    for(i=0; i<A.length; i++){\n        for(j=0; j<B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [2, 4, 5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var M = A.length, N = B.length;\n    for (var i = 0; i <= N - M; i++){\n        var j;\n        for (j = 0; j < M; j++) \n            if (B[i + j] != A[j])\n                break;\n        if (j == M) \n            return true;\n    }\n    return false;\n}\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var C = A.toString();\n    for (var i = 0; i < B.length; i++){\n        if (C.indexOf(B[i]) == -1){\n            return false;\n        }\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp9a5mp0pj.js:18:10)\n    at Object.<anonymous> (/tmp/tmp9a5mp0pj.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i, j;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3, 4, 5];\nvar C = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [2, 4, 6];\nvar C = [1, 2, 3, 4, 5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i, j;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [3, 4, 5];\n\nif(is_Sub_Array(A, B)){\n    console.log(\"B is a sub array of A\");\n}else{\n    console.log(\"B is not a sub array of A\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "B is not a sub array of A\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var result = true;\n    for(var i = 0; i < B.length; i++){\n        if(A.indexOf(B[i]) == -1){\n            result = false;\n            break;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpxowr57qa.js:20:10)\n    at Object.<anonymous> (/tmp/tmpxowr57qa.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3, 4, 5];\nvar C = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar D = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j])\n                break;\n        }\n        if(j == B.length)\n            return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < B.length; i++){\n        for(j = 0; j < A.length; j++){\n            if(B[i] == A[j]){\n                break;\n            }\n        }\n        if(j == A.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [2, 4, 6];\nvar C = [2, 4, 7];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpkdmrz47c.js:27:10)\n    at Object.<anonymous> (/tmp/tmpkdmrz47c.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar C = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var flag = 0;\n    for(var i = 0; i < A.length; i++){\n        for(var j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                flag = 1;\n            }\n        }\n    }\n    if(flag == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpzsgb9wb6.js:25:10)\n    at Object.<anonymous> (/tmp/tmpzsgb9wb6.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var result = true;\n    for(var i = 0; i < B.length; i++){\n        if(A.indexOf(B[i]) == -1){\n            result = false;\n            break;\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmplki81zha.js:19:10)\n    at Object.<anonymous> (/tmp/tmplki81zha.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var flag = 0;\n    for(i = 0; i < B.length; i++){\n        if(A[j] == B[i]){\n            j++;\n            flag = 1;\n        }\n        else{\n            j = 0;\n            flag = 0;\n        }\n        if(j == A.length){\n            k = 1;\n            break;\n        }\n    }\n    if(k == 1){\n        console.log(\"Sub Array\");\n    }\n    else{\n        console.log(\"Not Sub Array\");\n    }\n}\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nis_Sub_Array(A, B);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "Sub Array\nNot Sub Array\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpim616k0j.js:37:10)\n    at Object.<anonymous> (/tmp/tmpim616k0j.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i, j;\n    for (i = 0; i < A.length; i++){\n        for (j = 0; j < B.length; j++){\n            if (A[i] == B[j])\n                break;\n        }\n        if (j == B.length)\n            return false;\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [2, 3, 4];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    for(i = 0; i < B.length; i++){\n        for(j = 0; j < A.length; j++){\n            if(B[i] == A[j]){\n                flag = 1;\n            }\n            else{\n                flag = 0;\n            }\n        }\n    }\n    if(flag == 1){\n        console.log(\"A is a subarray of B\");\n    }\n    else{\n        console.log(\"A is not a subarray of B\");\n    }\n}\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nis_Sub_Array(A, B);\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "A is not a subarray of B\nA is not a subarray of B\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpvbg0ff76.js:31:10)\n    at Object.<anonymous> (/tmp/tmpvbg0ff76.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                k++;\n                break;\n            }\n        }\n    }\n    if(k == A.length){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var flag = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                flag = 1;\n                break;\n            }\n        }\n        if(flag == 0){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp3ot2fsvl.js:28:10)\n    at Object.<anonymous> (/tmp/tmp3ot2fsvl.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var result = true;\n    for(var i = 0; i < B.length; i++){\n        var element_index = A.indexOf(B[i]);\n        if(element_index == -1){\n            result = false;\n            break;\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpqze4y778.js:20:10)\n    at Object.<anonymous> (/tmp/tmpqze4y778.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i, j;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3];\nvar C = [1, 2, 4];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var flag = 0;\n    for(var i = 0; i < A.length; i++){\n        if(A[i] == B[0]){\n            for(var j = 0; j < B.length; j++){\n                if(A[i+j] != B[j]){\n                    flag = 0;\n                    break;\n                }\n                else{\n                    flag = 1;\n                }\n            }\n        }\n    }\n    if(flag == 1){\n        console.log(\"B is a sub array of A\");\n    }\n    else{\n        console.log(\"B is not a sub array of A\");\n    }\n}\nvar A = [1,2,3,4,5,6,7,8,9,10];\nvar B = [2,3,4,5,6];\nis_Sub_Array(A, B);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "B is a sub array of A\nB is not a sub array of A\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp7cl32b6a.js:33:10)\n    at Object.<anonymous> (/tmp/tmp7cl32b6a.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n        }\n        j++;\n    }\n    return (i == A.length);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3, 4, 5];\nvar C = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    for (i=0; i<A.length; i++){\n        for (j=0; j<B.length; j++){\n            if(A[i] == B[j])\n                break;\n        }\n        if (j == B.length)\n            return false;\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j])\n                break;\n        }\n        if(j == B.length)\n            return false;\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [2, 3, 4];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < B.length; i++){\n        for(j = 0; j < A.length; j++){\n            if(B[i] == A[j]){\n                break;\n            }\n        }\n        if(j == A.length){\n            return false;\n        }\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpt0_53926.js:23:10)\n    at Object.<anonymous> (/tmp/tmpt0_53926.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                k++;\n                break;\n            }\n        }\n    }\n    if(k == A.length){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var flag = 0;\n    for (var i = 0; i < A.length; i++) {\n        for (var j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = 1;\n            }\n        }\n    }\n    if (flag == 1) {\n        console.log(\"A is a sub array of B\");\n    }\n    else {\n        console.log(\"A is not a sub array of B\");\n    }\n}\nis_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "A is a sub array of B\nA is a sub array of B\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp2oh10pwe.js:25:10)\n    at Object.<anonymous> (/tmp/tmp2oh10pwe.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var result = true;\n    for(var i = 0; i < B.length; i++){\n        if(A.indexOf(B[i]) == -1){\n            result = false;\n            break;\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmplki81zha.js:19:10)\n    at Object.<anonymous> (/tmp/tmplki81zha.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    for(i=0; i<A.length; i++){\n        for(j=0; j<B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3, 4];\nvar C = [1, 2, 3, 4, 5, 6, 7];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [2, 3, 4];\nvar C = [6, 7, 8, 9];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i, j;\n    for (i = 0; i < B.length; i++) {\n        for (j = 0; j < A.length; j++) {\n            if (B[i] == A[j])\n                break;\n        }\n        if (j == A.length)\n            return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0r7xygfa.js:22:10)\n    at Object.<anonymous> (/tmp/tmp0r7xygfa.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var M = A.length, N = B.length;\n    for (var i = 0; i <= N - M; i++) {\n        var j;\n        for (j = 0; j < M; j++) {\n            if (B[i + j] != A[j])\n                break;\n        }\n        if (j == M)\n            return true;\n    }\n    return false;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [2, 4, 5, 6];\nvar C = [2, 4, 5, 6, 7];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                for(k = 0; k < B.length; k++){\n                    if(A[i + k] != B[j + k]){\n                        break;\n                    }\n                }\n                if(k == B.length){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [2, 3, 4];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var M = A.length;\n    var N = B.length;\n    for (var i = 0; i <= N - M; i++) {\n        var j;\n        for (j = 0; j < M; j++) {\n            if (B[i + j] != A[j])\n                break;\n        }\n        if (j == M)\n            return true;\n    }\n    return false;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < B.length; i++){\n        for(j = 0; j < A.length; j++){\n            if(B[i] == A[j]){\n                break;\n            }\n        }\n        if(j == A.length){\n            return false;\n        }\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpt0_53926.js:23:10)\n    at Object.<anonymous> (/tmp/tmpt0_53926.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3, 4, 5, 6];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    while(i < A.length && j < B.length){\n        if(A[i] == B[j]){\n            i++;\n        }\n        j++;\n    }\n    return (i == A.length);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < B.length; i++){\n        for(j = 0; j < A.length; j++){\n            if(B[i] == A[j]){\n                break;\n            }\n        }\n        if(j == A.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmptaenou64.js:24:10)\n    at Object.<anonymous> (/tmp/tmptaenou64.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var flag = 0;\n    for(var i = 0; i < A.length; i++){\n        for(var j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                flag = 1;\n                break;\n            }\n        }\n        if(flag == 0){\n            return false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpwbldgbot.js:23:10)\n    at Object.<anonymous> (/tmp/tmpwbldgbot.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i, j;\n    for (i = 0; i < B.length; i++) {\n        for (j = 0; j < A.length; j++) {\n            if (B[i] == A[j])\n                break;\n        }\n        if (j == A.length)\n            return false;\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpipt26opt.js:21:10)\n    at Object.<anonymous> (/tmp/tmpipt26opt.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i, j;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j])\n                break;\n        }\n        if (j == B.length)\n            return false;\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [2, 4, 6, 8, 10];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0;\n    var j = 0;\n    for(i=0; i<A.length; i++){\n        for(j=0; j<B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var C = A.toString();\n    for (var i = 0; i < B.length; i++){\n        if (C.indexOf(B[i].toString()) == -1){\n            return false;\n        }\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp25b__iyz.js:18:10)\n    at Object.<anonymous> (/tmp/tmp25b__iyz.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\nvar A = [1, 2, 3, 4, 5];\nvar B = [2, 3, 4];\nvar C = [2, 3, 6];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A, B){\n    var i = 0, j = 0;\n    for(i = 0; i < A.length; i++){\n        for(j = 0; j < B.length; j++){\n            if(A[i] == B[j]){\n                break;\n            }\n        }\n        if(j == B.length){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3, 4, 5];\nvar C = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}