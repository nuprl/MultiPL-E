{
  "name": "mbpp_408_k_smallest_pairs",
  "language": "js",
  "prompt": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_408_k_smallest_pairs.py",
  "prompt_terminology": "reworded",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    let res = [];\n    let pq = new PriorityQueue();\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            pq.enqueue([nums1[i], nums2[j]], nums1[i] + nums2[j]);\n        }\n    }\n    for(let i = 0; i < k; i++){\n        res.push(pq.dequeue());\n    }\n    return res;\n}\n",
    "    let arr = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            arr.push([nums1[i], nums2[j]]);\n        }\n    }\n    arr.sort((a, b) => a[0] + a[1] - b[0] - b[1]);\n    return arr.slice(0, k);\n}\n",
    "    let result = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            result.push([nums1[i], nums2[j]]);\n        }\n    }\n    result.sort((a, b) => a[0] + a[1] - b[0] - b[1]);\n    return result.slice(0, k);\n}\n",
    "    let pairs = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            pairs.push([nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort((a, b) => a[0] + a[1] - b[0] - b[1]);\n    return pairs.slice(0, k);\n}\n",
    "    let arr = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            arr.push([nums1[i], nums2[j]]);\n        }\n    }\n    arr.sort((a,b) => a[0] + a[1] - b[0] - b[1]);\n    let result = [];\n    for(let i = 0; i < k; i++){\n        result.push(arr[i]);\n    }\n    return result;\n}\n",
    "    var result = [];\n    var len1 = nums1.length;\n    var len2 = nums2.length;\n    var i = 0;\n    var j = 0;\n    while(i < len1 && j < len2 && k > 0){\n        if(nums1[i] < nums2[j]){\n            result.push([nums1[i], nums2[j]]);\n            i++;\n        }else{\n            result.push([nums1[i], nums2[j]]);\n            j++;\n        }\n        k--;\n    }\n    while(i < len1 && k > 0){\n        result.push([nums1[i], nums2[j-1]]);\n        i++;\n        k--;\n    }\n    while(j < len2 && k > 0){\n        result.push([nums1[i-1], nums2[j]]);\n        j++;\n        k--;\n    }\n    return result;\n}\n",
    "\tvar result = [];\n\tvar len1 = nums1.length;\n\tvar len2 = nums2.length;\n\tvar i = 0;\n\tvar j = 0;\n\twhile(i < len1 && j < len2){\n\t\tif(nums1[i] + nums2[j] < nums1[i+1] + nums2[j]){\n\t\t\tresult.push([nums1[i], nums2[j]]);\n\t\t\ti++;\n\t\t}else{\n\t\t\tresult.push([nums1[i], nums2[j]]);\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}\n",
    "    let result = [];\n    let len1 = nums1.length;\n    let len2 = nums2.length;\n    if(len1 === 0 || len2 === 0 || k === 0){\n        return result;\n    }\n    let index = new Array(len1).fill(0);\n    while(k > 0){\n        let min_val = Number.MAX_SAFE_INTEGER;\n        let min_index = -1;\n        for(let i = 0; i < len1; i++){\n            if(index[i] >= len2){\n                continue;\n            }\n            if(nums1[i] + nums2[index[i]] < min_val){\n                min_val = nums1[i] + nums2[index[i]];\n                min_index = i;\n            }\n        }\n        if(min_index === -1){\n            break;\n        }\n        result.push([nums1[min_index], nums2[index[min_index]]]);\n        index[min_index]++;\n        k--;\n    }\n    return result;\n}\n",
    "    var result = [];\n    var len1 = nums1.length;\n    var len2 = nums2.length;\n    var len = len1 * len2;\n    var i = 0;\n    var j = 0;\n    var count = 0;\n    while(count < k && i < len1 && j < len2){\n        var sum = nums1[i] + nums2[j];\n        var index = 0;\n        for(var m = 0; m < result.length; m++){\n            if(sum < result[m][0] + result[m][1]){\n                index = m;\n                break;\n            }\n        }\n        result.splice(index, 0, [nums1[i], nums2[j]]);\n        if(j < len2 - 1){\n            j++;\n        }else{\n            i++;\n            j = 0;\n        }\n        count++;\n    }\n    return result;\n}\n",
    "    var result = [];\n    for(var i=0; i<nums1.length; i++){\n        for(var j=0; j<nums2.length; j++){\n            result.push([nums1[i], nums2[j]]);\n        }\n    }\n    result.sort(function(a, b){\n        return a[0] + a[1] - b[0] - b[1];\n    });\n    return result.slice(0, k);\n}\n",
    "    var result = [];\n    var len1 = nums1.length;\n    var len2 = nums2.length;\n    var i = 0;\n    var j = 0;\n    while(i < len1 && j < len2){\n        var sum = nums1[i] + nums2[j];\n        if(result.length < k){\n            result.push([nums1[i], nums2[j]]);\n        }else{\n            var max = result[0][0] + result[0][1];\n            var index = 0;\n            for(var m = 1; m < result.length; m++){\n                if(result[m][0] + result[m][1] > max){\n                    max = result[m][0] + result[m][1];\n                    index = m;\n                }\n            }\n            if(sum < max){\n                result[index] = [nums1[i], nums2[j]];\n            }else{\n                break;\n            }\n        }\n        if(i < len1 - 1 && j < len2 - 1){\n            if(nums1[i + 1] + nums2[j] < nums1[i] + nums2[j + 1]){\n                i++;\n            }else{\n                j++;\n            }\n        }else if(i < len1 - 1){\n            i++;\n        }else{\n            j++;\n        }\n    }\n    return result;\n}\n",
    "    var arr = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            arr.push([nums1[i], nums2[j]]);\n        }\n    }\n    return arr.sort(function(a, b){\n        return a[0] + a[1] - b[0] - b[1];\n    }).slice(0, k);\n}\n",
    "    let result = [];\n    let len1 = nums1.length;\n    let len2 = nums2.length;\n    let i = 0;\n    let j = 0;\n    while(i < len1 && j < len2 && result.length < k){\n        if(nums1[i] < nums2[j]){\n            result.push([nums1[i], nums2[j]]);\n            i++;\n        }else{\n            result.push([nums1[i], nums2[j]]);\n            j++;\n        }\n    }\n    while(i < len1 && result.length < k){\n        result.push([nums1[i], nums2[j-1]]);\n        i++;\n    }\n    while(j < len2 && result.length < k){\n        result.push([nums1[i-1], nums2[j]]);\n        j++;\n    }\n    return result;\n}\n",
    "    let result = [];\n    let len1 = nums1.length;\n    let len2 = nums2.length;\n    if(len1 === 0 || len2 === 0 || k === 0){\n        return result;\n    }\n    let index = new Array(len1).fill(0);\n    while(k > 0){\n        let min_val = Number.MAX_SAFE_INTEGER;\n        let index_min = -1;\n        for(let i = 0; i < len1; i++){\n            if(index[i] < len2 && nums1[i] + nums2[index[i]] < min_val){\n                min_val = nums1[i] + nums2[index[i]];\n                index_min = i;\n            }\n        }\n        if(index_min === -1){\n            break;\n        }\n        result.push([nums1[index_min], nums2[index[index_min]]]);\n        index[index_min]++;\n        k--;\n    }\n    return result;\n}\n",
    "    let arr = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            arr.push([nums1[i], nums2[j]]);\n        }\n    }\n    arr.sort((a, b) => a[0] + a[1] - b[0] - b[1]);\n    return arr.slice(0, k);\n}\n",
    "    var result = [];\n    var i = 0;\n    var j = 0;\n    while(i < nums1.length && j < nums2.length && k > 0){\n        var sum = nums1[i] + nums2[j];\n        if(result.length == 0){\n            result.push([nums1[i], nums2[j]]);\n        }\n        else{\n            var flag = false;\n            for(var m = 0; m < result.length; m++){\n                if(sum < result[m][0] + result[m][1]){\n                    result.splice(m, 0, [nums1[i], nums2[j]]);\n                    flag = true;\n                    break;\n                }\n            }\n            if(!flag){\n                result.push([nums1[i], nums2[j]]);\n            }\n        }\n        if(i == nums1.length - 1){\n            j++;\n        }\n        else if(j == nums2.length - 1){\n            i++;\n        }\n        else{\n            if(nums1[i + 1] + nums2[j] < nums1[i] + nums2[j + 1]){\n                i++;\n            }\n            else{\n                j++;\n            }\n        }\n        k--;\n    }\n    return result;\n}\n",
    "    var result = [];\n    nums1.forEach(function(n1){\n        nums2.forEach(function(n2){\n            result.push([n1, n2]);\n        });\n    });\n    result.sort(function(a, b){\n        return a[0] + a[1] - b[0] - b[1];\n    });\n    return result.slice(0, k);\n}\n",
    "    let result = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            result.push([nums1[i], nums2[j]]);\n        }\n    }\n    result.sort((a, b) => a[0] + a[1] - b[0] - b[1]);\n    return result.slice(0, k);\n}\n",
    "    var arr = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            arr.push([nums1[i], nums2[j]]);\n        }\n    }\n    arr.sort(function(a, b){\n        return a[0] + a[1] - b[0] - b[1];\n    });\n    var res = [];\n    for(var i = 0; i < k; i++){\n        res.push(arr[i]);\n    }\n    return res;\n}\n",
    "    var result = [];\n    var len1 = nums1.length;\n    var len2 = nums2.length;\n    var i = 0;\n    var j = 0;\n    while(i < len1 && j < len2 && result.length < k){\n        var sum = nums1[i] + nums2[j];\n        if(result.length === 0){\n            result.push([nums1[i], nums2[j]]);\n        }else{\n            for(var m = 0; m < result.length; m++){\n                if(sum < result[m][0] + result[m][1]){\n                    result.splice(m, 0, [nums1[i], nums2[j]]);\n                    break;\n                }\n            }\n            if(m === result.length){\n                result.push([nums1[i], nums2[j]]);\n            }\n        }\n        if(i === len1 - 1){\n            j++;\n        }else if(j === len2 - 1){\n            i++;\n        }else if(nums1[i] < nums2[j]){\n            i++;\n        }else{\n            j++;\n        }\n    }\n    return result;\n}\n"
  ]
}