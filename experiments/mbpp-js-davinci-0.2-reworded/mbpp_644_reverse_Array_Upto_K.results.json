{
  "name": "mbpp_644_reverse_Array_Upto_K",
  "language": "js",
  "prompt": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_644_reverse_Array_Upto_K.py",
  "prompt_terminology": "reworded",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "results": [
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            output.unshift(input[i]);\n        }else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    for(var i = k; i < input.length; i++){\n        output.unshift(input[i]);\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  6,\n  5,\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  3,\n  2,\n  1,\n  5,\n  6\n]\n    at test (/tmp/tmp7dfw7gdz.js:17:10)\n    at Object.<anonymous> (/tmp/tmp7dfw7gdz.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 6, 5, 1, 2, 3, 4 ],\n  expected: [ 4, 3, 2, 1, 5, 6 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i=0; i<k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i=k; i<input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.unshift(input[i]);\n    }\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            output.unshift(input[i]);\n        }else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            output.unshift(input[i]);\n        }\n        else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            output.unshift(input[i]);\n        }else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output = output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\n\nvar input = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar k = 5;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var reverse_Array = [];\n    for(var i = 0; i < k; i++){\n        reverse_Array.push(input[i]);\n    }\n    reverse_Array.reverse();\n    for(var i = k; i < input.length; i++){\n        reverse_Array.push(input[i]);\n    }\n    return reverse_Array;\n}\nvar input = [1, 2, 3, 4, 5, 6];\nvar k = 3;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            output.unshift(input[i]);\n        }\n        else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\n\nvar input = [1,2,3,4,5,6,7,8,9,10];\nvar k = 5;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            output.unshift(input[i]);\n        }\n        else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\nvar input = [1,2,3,4,5,6,7,8,9];\nvar k = 4;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    for(var i = k-1; i >= 0; i--){\n        input[i] = output[k-1-i];\n    }\n    return input;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    for(var i = k; i < input.length; i++){\n        output.unshift(input[i]);\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  6,\n  5,\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  3,\n  2,\n  1,\n  5,\n  6\n]\n    at test (/tmp/tmp7dfw7gdz.js:17:10)\n    at Object.<anonymous> (/tmp/tmp7dfw7gdz.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 6, 5, 1, 2, 3, 4 ],\n  expected: [ 4, 3, 2, 1, 5, 6 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var result = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            result.unshift(input[i]);\n        }else{\n            result.push(input[i]);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            output.unshift(input[i]);\n        }\n        else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var result = [];\n    for(var i = 0; i < k; i++){\n        result.push(input[i]);\n    }\n    for(var i = k-1; i >= 0; i--){\n        input[i] = result[k-i-1];\n    }\n    return input;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i=0; i<input.length; i++){\n        if(i<k){\n            output.unshift(input[i]);\n        }\n        else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            output.unshift(input[i]);\n        }\n        else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i=0; i<k; i++){\n        output.push(input[i]);\n    }\n    for(var i=k-1; i>=0; i--){\n        input[i] = output[k-i-1];\n    }\n    return input;\n}\n\nvar input = [1,2,3,4,5,6,7,8,9,10];\nvar k = 5;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var result = [];\n    for(var i = 0; i < k; i++){\n        result.push(input[i]);\n    }\n    result.reverse();\n    for(var i = k; i < input.length; i++){\n        result.push(input[i]);\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            output.unshift(input[i]);\n        }else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    for(var i = k; i < input.length; i++){\n        output.unshift(input[i]);\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  6,\n  5,\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  3,\n  2,\n  1,\n  5,\n  6\n]\n    at test (/tmp/tmp7dfw7gdz.js:17:10)\n    at Object.<anonymous> (/tmp/tmp7dfw7gdz.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 6, 5, 1, 2, 3, 4 ],\n  expected: [ 4, 3, 2, 1, 5, 6 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            output.unshift(input[i]);\n        }else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            output.unshift(input[i]);\n        }else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    for(var i = k-1; i >= 0; i--){\n        input[i] = output[k-1-i];\n    }\n    return input;\n}\n\nvar input = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar k = 5;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    for(var i = k; i < input.length; i++){\n        output.unshift(input[i]);\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  6,\n  5,\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  3,\n  2,\n  1,\n  5,\n  6\n]\n    at test (/tmp/tmp7dfw7gdz.js:17:10)\n    at Object.<anonymous> (/tmp/tmp7dfw7gdz.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 6, 5, 1, 2, 3, 4 ],\n  expected: [ 4, 3, 2, 1, 5, 6 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            output.unshift(input[i]);\n        }\n        else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    for(var i = k; i < input.length; i++){\n        output.unshift(input[i]);\n    }\n    return output;\n}\n\nvar input = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar k = 4;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  6,\n  5,\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  3,\n  2,\n  1,\n  5,\n  6\n]\n    at test (/tmp/tmpc17wwekb.js:20:10)\n    at Object.<anonymous> (/tmp/tmpc17wwekb.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 6, 5, 1, 2, 3, 4 ],\n  expected: [ 4, 3, 2, 1, 5, 6 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\n\nvar input = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar k = 5;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.unshift(input[i]);\n    }\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output = output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i=0; i<input.length; i++){\n        if(i<k){\n            output.unshift(input[i]);\n        }\n        else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\n\nvar input = [1,2,3,4,5,6,7,8,9];\nvar k = 5;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i=0; i<k; i++){\n        output.push(input[i]);\n    }\n    for(var i=k-1; i>=0; i--){\n        input[i] = output[k-i-1];\n    }\n    return input;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var result = [];\n    for(var i = 0; i < k; i++){\n        result.push(input[i]);\n    }\n    result.reverse();\n    for(var i = k; i < input.length; i++){\n        result.push(input[i]);\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    let output = [];\n    for(let i=0; i<input.length; i++){\n        if(i<k){\n            output.unshift(input[i]);\n        }else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\n\nvar input = [1, 2, 3, 4, 5, 6, 7];\nvar k = 3;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            output.unshift(input[i]);\n        }\n        else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            output.unshift(input[i]);\n        }\n        else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\n\nvar input = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar k = 5;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            output.unshift(input[i]);\n        }\n        else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\nvar input = [1, 2, 3, 4, 5, 6];\nvar k = 3;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[k-i-1]);\n    }\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            output.unshift(input[i]);\n        }\n        else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            output.unshift(input[i]);\n        }else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            output.unshift(input[i]);\n        }\n        else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            output.unshift(input[i]);\n        }\n        else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    console.log(output);\n}\nreverse_Array_Upto_K([1,2,3,4,5,6,7,8,9], 4);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "[\n  4, 3, 2, 1, 5,\n  6, 7, 8, 9\n]\n[ 4, 3, 2, 1, 5, 6 ]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  4,\n  3,\n  2,\n  1,\n  5,\n  6\n]\n    at test (/tmp/tmpkzk7m0jx.js:20:10)\n    at Object.<anonymous> (/tmp/tmpkzk7m0jx.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 4, 3, 2, 1, 5, 6 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    for(var i = k; i < input.length; i++){\n        output.unshift(input[i]);\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  6,\n  5,\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  3,\n  2,\n  1,\n  5,\n  6\n]\n    at test (/tmp/tmpt02m8dmu.js:18:10)\n    at Object.<anonymous> (/tmp/tmpt02m8dmu.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 6, 5, 1, 2, 3, 4 ],\n  expected: [ 4, 3, 2, 1, 5, 6 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var result = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            result.unshift(input[i]);\n        }\n        else{\n            result.push(input[i]);\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input.pop());\n    }\n    for(var i = 0; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  6,\n  5,\n  4,\n  3,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  3,\n  2,\n  1,\n  5,\n  6\n]\n    at test (/tmp/tmpncc_odja.js:17:10)\n    at Object.<anonymous> (/tmp/tmpncc_odja.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 6, 5, 4, 3, 1, 2 ],\n  expected: [ 4, 3, 2, 1, 5, 6 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    for(var i = k-1; i >= 0; i--){\n        input[i] = output[output.length - i - 1];\n    }\n    return input;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    var j = 0;\n    for(var i = k - 1; i >= 0; i--){\n        input[j] = output[i];\n        j++;\n    }\n    return input;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i=0; i<input.length; i++){\n        if(i<k){\n            output.unshift(input[i]);\n        }\n        else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            output.unshift(input[i]);\n        }\n        else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\n\nvar input = [1,2,3,4,5,6,7,8,9];\nvar k = 4;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    let output = [];\n    for(let i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(let i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            output.unshift(input[i]);\n        }\n        else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\n\nvar input = [1,2,3,4,5,6,7,8,9];\nvar k = 4;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            output.unshift(input[i]);\n        }\n        else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i=0; i<input.length; i++){\n        if(i<k){\n            output.unshift(input[i]);\n        }\n        else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            output.unshift(input[i]);\n        }\n        else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\n\nvar input = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar k = 4;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    for(var i = k; i < input.length; i++){\n        output.unshift(input[i]);\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  6,\n  5,\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  3,\n  2,\n  1,\n  5,\n  6\n]\n    at test (/tmp/tmpt02m8dmu.js:18:10)\n    at Object.<anonymous> (/tmp/tmpt02m8dmu.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 6, 5, 1, 2, 3, 4 ],\n  expected: [ 4, 3, 2, 1, 5, 6 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i=0; i<input.length; i++){\n        if(i<k){\n            output.unshift(input[i]);\n        }\n        else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\nvar input = [1,2,3,4,5,6,7,8,9];\nvar k = 5;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\n\nvar input = [1, 2, 3, 4, 5, 6, 7];\nvar k = 3;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input.pop());\n    }\n    return output.concat(input);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  6,\n  5,\n  4,\n  3,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  3,\n  2,\n  1,\n  5,\n  6\n]\n    at test (/tmp/tmp1auxrhl8.js:15:10)\n    at Object.<anonymous> (/tmp/tmp1auxrhl8.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 6, 5, 4, 3, 1, 2 ],\n  expected: [ 4, 3, 2, 1, 5, 6 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            output.unshift(input[i]);\n        }else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\n\nvar input = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar k = 5;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\n\nvar input = [1,2,3,4,5,6,7,8,9,10];\nvar k = 5;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    for(var i = k; i < input.length; i++){\n        output.unshift(input[i]);\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  6,\n  5,\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  3,\n  2,\n  1,\n  5,\n  6\n]\n    at test (/tmp/tmp7dfw7gdz.js:17:10)\n    at Object.<anonymous> (/tmp/tmp7dfw7gdz.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 6, 5, 1, 2, 3, 4 ],\n  expected: [ 4, 3, 2, 1, 5, 6 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\n\nvar input = [1,2,3,4,5,6,7,8,9];\nvar k = 5;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\n\nvar input = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar k = 5;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    if(k > input.length){\n        console.log(\"k is greater than length of array\");\n    }\n    else{\n        for(let i = 0; i < k/2; i++){\n            let temp = input[i];\n            input[i] = input[k-i-1];\n            input[k-i-1] = temp;\n        }\n        console.log(input);\n    }\n}\nreverse_Array_Upto_K([1,2,3,4,5,6,7,8,9,10], 5);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "[\n  5, 4, 3, 2,  1,\n  6, 7, 8, 9, 10\n]\n[ 4, 3, 2, 1, 5, 6 ]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  4,\n  3,\n  2,\n  1,\n  5,\n  6\n]\n    at test (/tmp/tmpagob5w07.js:22:10)\n    at Object.<anonymous> (/tmp/tmpagob5w07.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 4, 3, 2, 1, 5, 6 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            output.unshift(input[i]);\n        }\n        else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\n\nvar input = [1,2,3,4,5,6,7,8,9,10];\nvar k = 5;\nvar output = reverse_Array_Upto_K(input, k);\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            output.unshift(input[i]);\n        }\n        else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\n\nvar input = [1,2,3,4,5,6];\nvar k = 3;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\n\nvar input = [1, 2, 3, 4, 5, 6];\nvar k = 3;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            output.unshift(input[i]);\n        }else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    for(var i = k; i < input.length; i++){\n        output.unshift(input[i]);\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  6,\n  5,\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  3,\n  2,\n  1,\n  5,\n  6\n]\n    at test (/tmp/tmpt02m8dmu.js:18:10)\n    at Object.<anonymous> (/tmp/tmpt02m8dmu.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 6, 5, 1, 2, 3, 4 ],\n  expected: [ 4, 3, 2, 1, 5, 6 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i=0; i<input.length; i++){\n        if(i<k){\n            output.unshift(input[i]);\n        }\n        else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            output.unshift(input[i]);\n        }else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var result = [];\n    for(var i = 0; i < k; i++){\n        result.push(input[i]);\n    }\n    for(var i = k - 1; i >= 0; i--){\n        input[i] = result[k - i - 1];\n    }\n    return input;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            output[i] = input[k - i - 1];\n        }\n        else{\n            output[i] = input[i];\n        }\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            output.unshift(input[i]);\n        }else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[k-i-1]);\n    }\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\n\nvar input = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar k = 5;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            output.unshift(input[i]);\n        }\n        else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\nvar input = [1,2,3,4,5,6,7,8,9];\nvar k = 5;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            output.unshift(input[i]);\n        }\n        else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i=0; i<input.length; i++){\n        if(i<k){\n            output.unshift(input[i]);\n        }\n        else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\n\nvar input = [1, 2, 3, 4, 5, 6];\nvar k = 3;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i=0; i<k; i++){\n        output.unshift(input[i]);\n    }\n    for(var i=k; i<input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\nvar input = [1,2,3,4,5,6,7,8,9];\nvar k = 5;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            output.unshift(input[i]);\n        }else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var arr = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            arr.unshift(input[i]);\n        }\n        else{\n            arr.push(input[i]);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\n\nvar input = [1,2,3,4,5,6,7,8,9];\nvar k = 3;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    for(var i = k - 1; i >= 0; i--){\n        input[i] = output[output.length - i - 1];\n    }\n    return input;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            output.unshift(input[i]);\n        }\n        else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            output.unshift(input[i]);\n        }\n        else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            output.unshift(input[i]);\n        }\n        else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\nvar input = [1,2,3,4,5,6,7,8,9];\nvar k = 4;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    if(k > input.length){\n        return \"Invalid Position\";\n    }\n    else{\n        var temp = 0;\n        for(var i = 0; i < k/2; i++){\n            temp = input[i];\n            input[i] = input[k-i-1];\n            input[k-i-1] = temp;\n        }\n        return input;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\n\nvar input = [1,2,3,4,5,6,7,8,9];\nvar k = 5;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    for(var i = k; i < input.length; i++){\n        output.unshift(input[i]);\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  6,\n  5,\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  3,\n  2,\n  1,\n  5,\n  6\n]\n    at test (/tmp/tmpt02m8dmu.js:18:10)\n    at Object.<anonymous> (/tmp/tmpt02m8dmu.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 6, 5, 1, 2, 3, 4 ],\n  expected: [ 4, 3, 2, 1, 5, 6 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            output.unshift(input[i]);\n        }else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            output.unshift(input[i]);\n        }\n        else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            output.unshift(input[i]);\n        }\n        else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\n\nvar input = [1,2,3,4,5,6,7,8,9,10];\nvar k = 5;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\n\nvar input = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar k = 5;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            output.unshift(input[i]);\n        }\n        else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            output.unshift(input[i]);\n        }else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\nvar input = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar k = 5;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i=0; i<input.length; i++){\n        if(i<k){\n            output.unshift(input[i]);\n        }\n        else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\nvar input = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar k = 5;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    for(var i = k; i < input.length; i++){\n        output.unshift(input[i]);\n    }\n    return output;\n}\n\nvar input = [1, 2, 3, 4, 5, 6];\nvar k = 3;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  6,\n  5,\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  3,\n  2,\n  1,\n  5,\n  6\n]\n    at test (/tmp/tmp685zmluh.js:20:10)\n    at Object.<anonymous> (/tmp/tmp685zmluh.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 6, 5, 1, 2, 3, 4 ],\n  expected: [ 4, 3, 2, 1, 5, 6 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    for(var i = k-1; i >= 0; i--){\n        input[i] = output[output.length - i - 1];\n    }\n    return input;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            output.unshift(input[i]);\n        }else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            output.unshift(input[i]);\n        }else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i=k-1; i>=0; i--){\n        output.push(input[i]);\n    }\n    for(var i=k; i<input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            output.unshift(input[i]);\n        }else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            output.unshift(input[i]);\n        }else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\nvar input = [1,2,3,4,5,6,7,8,9];\nvar k = 3;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            output.unshift(input[i]);\n        }else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            output.unshift(input[i]);\n        }\n        else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    for(var i = k; i < input.length; i++){\n        output.unshift(input[i]);\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  6,\n  5,\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  3,\n  2,\n  1,\n  5,\n  6\n]\n    at test (/tmp/tmp7dfw7gdz.js:17:10)\n    at Object.<anonymous> (/tmp/tmp7dfw7gdz.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 6, 5, 1, 2, 3, 4 ],\n  expected: [ 4, 3, 2, 1, 5, 6 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            output.unshift(input[i]);\n        }\n        else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            output.unshift(input[i]);\n        }\n        else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            output.unshift(input[i]);\n        }else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var arr = input.slice(0, k+1);\n    var arr1 = input.slice(k+1, input.length);\n    var arr2 = arr.reverse();\n    var arr3 = arr2.concat(arr1);\n    return arr3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  4,\n  3,\n  2,\n  1,\n  6\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  3,\n  2,\n  1,\n  5,\n  6\n]\n    at test (/tmp/tmp7mtqywlz.js:14:10)\n    at Object.<anonymous> (/tmp/tmp7mtqywlz.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3, 2, 1, 6 ],\n  expected: [ 4, 3, 2, 1, 5, 6 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var result = [];\n    for (var i = 0; i < input.length; i++){\n        if (i < k){\n            result.unshift(input[i]);\n        }\n        else{\n            result.push(input[i]);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            output.unshift(input[i]);\n        }\n        else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\nvar input = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar k = 5;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i=0; i<input.length; i++){\n        if(i<k){\n            output.unshift(input[i]);\n        }\n        else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    for(var i = k-1; i >= 0; i--){\n        input[i] = output[output.length - i - 1];\n    }\n    return input;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    for(var i = k; i < input.length; i++){\n        output.unshift(input[i]);\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  6,\n  5,\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  3,\n  2,\n  1,\n  5,\n  6\n]\n    at test (/tmp/tmpt02m8dmu.js:18:10)\n    at Object.<anonymous> (/tmp/tmpt02m8dmu.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 6, 5, 1, 2, 3, 4 ],\n  expected: [ 4, 3, 2, 1, 5, 6 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            output.unshift(input[i]);\n        }else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            output.unshift(input[i]);\n        }\n        else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output[i] = input[k-i-1];\n    }\n    for(var i = k; i < input.length; i++){\n        output[i] = input[i];\n    }\n    return output;\n}\n\nvar input = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar k = 5;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.unshift(input[i]);\n    }\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output = output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            output.unshift(input[i]);\n        }\n        else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            output.unshift(input[i]);\n        }\n        else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\n\nvar input = [1,2,3,4,5,6,7,8,9];\nvar k = 5;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    let arr = input.slice(0, k+1);\n    let output = [];\n    for(let i = arr.length-1; i >= 0; i--){\n        output.push(arr[i]);\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  4,\n  3,\n  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  3,\n  2,\n  1,\n  5,\n  6\n]\n    at test (/tmp/tmpuf5f2dsr.js:16:10)\n    at Object.<anonymous> (/tmp/tmpuf5f2dsr.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3, 2, 1 ],\n  expected: [ 4, 3, 2, 1, 5, 6 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i=0; i<k; i++){\n        output.push(input[i]);\n    }\n    for(var i=k-1; i>=0; i--){\n        input[i] = output[k-i-1];\n    }\n    return input;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            output.unshift(input[i]);\n        }\n        else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\n\nvar input = [1,2,3,4,5,6,7,8,9];\nvar k = 5;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i=0; i<input.length; i++){\n        if(i<k){\n            output.unshift(input[i]);\n        }else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    for(var i = k; i < input.length; i++){\n        output.unshift(input[i]);\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  6,\n  5,\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  3,\n  2,\n  1,\n  5,\n  6\n]\n    at test (/tmp/tmpt02m8dmu.js:18:10)\n    at Object.<anonymous> (/tmp/tmpt02m8dmu.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 6, 5, 1, 2, 3, 4 ],\n  expected: [ 4, 3, 2, 1, 5, 6 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = k; i >= 0; i--){\n        output.push(input[i]);\n    }\n    for(var i = k+1; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\n\nvar input = [1,2,3,4,5,6,7,8,9];\nvar k = 4;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  4,\n  3,\n  2,\n  1,\n  6\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  3,\n  2,\n  1,\n  5,\n  6\n]\n    at test (/tmp/tmpynob67t0.js:20:10)\n    at Object.<anonymous> (/tmp/tmpynob67t0.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3, 2, 1, 6 ],\n  expected: [ 4, 3, 2, 1, 5, 6 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    for(var i = k; i < input.length; i++){\n        output.unshift(input[i]);\n    }\n    return output;\n}\nvar input = [1, 2, 3, 4, 5, 6];\nvar k = 3;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  6,\n  5,\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  3,\n  2,\n  1,\n  5,\n  6\n]\n    at test (/tmp/tmpohkph149.js:19:10)\n    at Object.<anonymous> (/tmp/tmpohkph149.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 6, 5, 1, 2, 3, 4 ],\n  expected: [ 4, 3, 2, 1, 5, 6 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var reverse = [];\n    for(var i = 0; i < k; i++){\n        reverse.push(input[i]);\n    }\n    reverse.reverse();\n    var j = 0;\n    for(var i = k; i < input.length; i++){\n        reverse[i] = input[j];\n        j++;\n    }\n    return reverse;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n  2,\n  1,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  3,\n  2,\n  1,\n  5,\n  6\n]\n    at test (/tmp/tmpy5sv5uuc.js:20:10)\n    at Object.<anonymous> (/tmp/tmpy5sv5uuc.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2, 1, 1, 2 ],\n  expected: [ 4, 3, 2, 1, 5, 6 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    for(var i = k; i < input.length; i++){\n        output.unshift(input[i]);\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  6,\n  5,\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  3,\n  2,\n  1,\n  5,\n  6\n]\n    at test (/tmp/tmpt02m8dmu.js:18:10)\n    at Object.<anonymous> (/tmp/tmpt02m8dmu.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 6, 5, 1, 2, 3, 4 ],\n  expected: [ 4, 3, 2, 1, 5, 6 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\n\nvar input = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar k = 4;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            output.unshift(input[i]);\n        }\n        else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            output.unshift(input[i]);\n        }\n        else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\n\nvar input = [1,2,3,4,5,6,7,8,9,10];\nvar k = 5;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    for(var i = k-1; i >= 0; i--){\n        input[i] = output[k-i-1];\n    }\n    return input;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < input.length; i++){\n        if(i < k){\n            output.unshift(input[i]);\n        }\n        else{\n            output.push(input[i]);\n        }\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[i]);\n    }\n    output.reverse();\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K(input, k){\n    var output = [];\n    for(var i = 0; i < k; i++){\n        output.push(input[k-i-1]);\n    }\n    for(var i = k; i < input.length; i++){\n        output.push(input[i]);\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_Array_Upto_K;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);\n  assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);\n  assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);\n}\n\ntest();",
      "timestamp": 1666123612,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}