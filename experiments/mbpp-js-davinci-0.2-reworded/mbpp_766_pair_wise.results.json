{
  "name": "mbpp_766_pair_wise",
  "language": "js",
  "prompt": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_766_pair_wise.py",
  "prompt_terminology": "reworded",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "results": [
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length; i++){\n        if(i < l1.length - 1){\n            l2.push(l1[i] + l1[i+1]);\n        }\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n  5,\n  6,\n  7,\n  8,\n  9\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmps1zabehz.js:17:10)\n    at Object.<anonymous> (/tmp/tmps1zabehz.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 3, 5, 6,\n    7, 8, 9\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length; i++){\n        if(i < l1.length - 1){\n            l2.push([l1[i], l1[i+1]]);\n        }\n    }\n    return l2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i+1; j < l1.length; j++){\n            if(l1[i] + l1[j] == 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpp3d5_j96.js:19:10)\n    at Object.<anonymous> (/tmp/tmpp3d5_j96.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n\tvar l2 = [];\n\tfor(var i=0; i<l1.length-1; i++){\n\t\tl2.push([l1[i], l1[i+1]]);\n\t}\n\treturn l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n  var sum = 0;\n  for(var i = 0; i < l1.length; i++){\n    for(var j = i+1; j < l1.length; j++){\n      if(l1[i] + l1[j] === 0){\n        sum += i+j;\n        l1[i] = l1[j] = NaN;\n      }\n    }\n  }\n  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpawxkxyye.js:20:10)\n    at Object.<anonymous> (/tmp/tmpawxkxyye.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i=0; i<l1.length; i++){\n        for(var j=i+1; j<l1.length; j++){\n            if(l1[i] + l1[j] == 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpdsbpnnrr.js:20:10)\n    at Object.<anonymous> (/tmp/tmpdsbpnnrr.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i=0;i<l1.length-1;i++){\n        l2.push(l1[i]+l1[i+1]);\n    }\n    return l2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n  5,\n  6,\n  7,\n  8,\n  9\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpp3cfzy5i.js:14:10)\n    at Object.<anonymous> (/tmp/tmpp3cfzy5i.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 3, 5, 6,\n    7, 8, 9\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n  var sum = 0;\n  for(var i = 0; i < l1.length; i++){\n    for(var j = i+1; j < l1.length; j++){\n      if(l1[i] === l1[j]){\n        sum += i + j;\n        l1[i] = l1[j] = NaN;\n      }\n    }\n  }\n  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n19\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpmgzg81bg.js:20:10)\n    at Object.<anonymous> (/tmp/tmpmgzg81bg.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 19,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n  var l2 = [];\n  for(var i = 0; i < l1.length; i++){\n    if(i < l1.length - 1){\n      l2.push([l1[i], l1[i+1]]);\n    }\n  }\n  return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n  var sum = 0;\n  for(var i = 0; i < l1.length; i++){\n    for(var j = i + 1; j < l1.length; j++){\n      if(l1[i] + l1[j] == 0){\n        sum += i + j;\n        l1[i] = l1[j] = NaN;\n      }\n    }\n  }\n  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpyd3pq5v8.js:20:10)\n    at Object.<anonymous> (/tmp/tmpyd3pq5v8.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            if(l1[i] + l1[j] == 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmppbb9503f.js:20:10)\n    at Object.<anonymous> (/tmp/tmppbb9503f.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n  var sum = 0;\n  for(var i = 0; i < l1.length; i++){\n    for(var j = i+1; j < l1.length; j++){\n      if(l1[i] + l1[j] === 0){\n        sum += i + j;\n        l1[i] = l1[j] = NaN;\n      }\n    }\n  }\n  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpzsmz_2df.js:20:10)\n    at Object.<anonymous> (/tmp/tmpzsmz_2df.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i+1; j < l1.length; j++){\n            if(l1[i] + l1[j] === 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpfk8rfr48.js:20:10)\n    at Object.<anonymous> (/tmp/tmpfk8rfr48.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    if(l1.length<2){\n        return [];\n    }\n    else{\n        var l2=[];\n        for(var i=0;i<l1.length-1;i++){\n            l2.push([l1[i],l1[i+1]]);\n        }\n        return l2;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i+1; j < l1.length; j++){\n            if(l1[i] + l1[j] == 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpr0dronei.js:20:10)\n    at Object.<anonymous> (/tmp/tmpr0dronei.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i=0; i<l1.length; i++){\n        for(var j=i+1; j<l1.length; j++){\n            if(l1[i] + l1[j] == 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmp1xrpssx0.js:19:10)\n    at Object.<anonymous> (/tmp/tmp1xrpssx0.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            if(l1[i] + l1[j] == 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmp7u4lf46p.js:19:10)\n    at Object.<anonymous> (/tmp/tmp7u4lf46p.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            if(l1[i] + l1[j] === 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpqmohcgdn.js:20:10)\n    at Object.<anonymous> (/tmp/tmpqmohcgdn.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var result = [];\n    for(var i = 0; i < l1.length - 1; i++){\n        result.push([l1[i], l1[i+1]]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n\tvar l2 = [];\n\tfor(var i = 0; i < l1.length; i++){\n\t\tif(i < l1.length - 1){\n\t\t\tl2.push([l1[i], l1[i+1]]);\n\t\t}\n\t}\n\treturn l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i+1; j < l1.length; j++){\n            if(l1[i] + l1[j] == 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpr0dronei.js:20:10)\n    at Object.<anonymous> (/tmp/tmpr0dronei.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i+1; j < l1.length; j++){\n            if(l1[i] + l1[j] == 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpr0dronei.js:20:10)\n    at Object.<anonymous> (/tmp/tmpr0dronei.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i=0;i<l1.length;i++){\n        for(var j=i+1;j<l1.length;j++){\n            if(l1[i] + l1[j] == 0){\n                sum += i+j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpkaw1pcha.js:20:10)\n    at Object.<anonymous> (/tmp/tmpkaw1pcha.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            if(l1[i] + l1[j] == 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmp7u4lf46p.js:19:10)\n    at Object.<anonymous> (/tmp/tmp7u4lf46p.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var l2=[];\n    for(var i=0;i<l1.length-1;i++){\n        l2.push([l1[i],l1[i+1]]);\n    }\n    return l2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            if(l1[i] + l1[j] == 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmppbb9503f.js:20:10)\n    at Object.<anonymous> (/tmp/tmppbb9503f.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i+1; j < l1.length; j++){\n            if(l1[i] + l1[j] === 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpvk4r8rib.js:19:10)\n    at Object.<anonymous> (/tmp/tmpvk4r8rib.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            if(l1[i] + l1[j] === 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmp2qe5fdg8.js:19:10)\n    at Object.<anonymous> (/tmp/tmp2qe5fdg8.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length; i++){\n        if(i < l1.length - 1){\n            l2.push([l1[i], l1[i+1]]);\n        }\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n\tvar l2=[];\n\tfor(var i=0;i<l1.length;i+=2){\n\t\tl2.push([l1[i],l1[i+1]]);\n\t}\n\treturn l2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpa7u9j6ti.js:14:10)\n    at Object.<anonymous> (/tmp/tmpa7u9j6ti.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 1 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ] ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n  var sum = 0;\n  for(var i = 0; i < l1.length; i++){\n    for(var j = i + 1; j < l1.length; j++){\n      if(l1[i] + l1[j] === 0){\n        sum += i + j;\n        l1[i] = l1[j] = NaN;\n      }\n    }\n  }\n  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpj_bqxpol.js:20:10)\n    at Object.<anonymous> (/tmp/tmpj_bqxpol.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i=0; i<l1.length-1; i++){\n        l2.push([l1[i], l1[i+1]]);\n    }\n    return l2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n  var result = [];\n  for (var i = 0; i < l1.length; i++) {\n    for (var j = i + 1; j < l1.length; j++) {\n      result.push([l1[i], l1[j]]);\n    }\n  }\n  return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    5\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    5\n  ],\n  [\n    3,\n    4\n  ],\n ...\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpxsfsfi4p.js:16:10)\n    at Object.<anonymous> (/tmp/tmpxsfsfi4p.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    [ 1, 1 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 2, 3 ], [ 2, 3 ],\n    [ 2, 4 ], [ 2, 4 ], [ 2, 5 ],\n    [ 3, 3 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 4, 4 ], [ 4, 5 ],\n    [ 4, 5 ]\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length; i++){\n        if(l1[i+1] != undefined){\n            l2.push([l1[i], l1[i+1]]);\n        }\n    }\n    return l2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i+1; j < l1.length; j++){\n            if(l1[i] + l1[j] === 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpvk4r8rib.js:19:10)\n    at Object.<anonymous> (/tmp/tmpvk4r8rib.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n  var sum = 0;\n  for(var i = 0; i < l1.length; i++){\n    for(var j = i+1; j < l1.length; j++){\n      if(l1[i] + l1[j] === 0){\n        sum += i + j;\n        l1[i] = l1[j] = NaN;\n      }\n    }\n  }\n  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpzsmz_2df.js:20:10)\n    at Object.<anonymous> (/tmp/tmpzsmz_2df.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    var arr = [];\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            if(l1[i] + l1[j] == 0){\n                arr.push(i, j);\n                sum += i + j;\n                break;\n            }\n        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpkta8fgow.js:21:10)\n    at Object.<anonymous> (/tmp/tmpkta8fgow.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length - 1; i++){\n        l2.push([l1[i], l1[i+1]]);\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length; i++){\n        if(i < l1.length - 1){\n            l2.push([l1[i], l1[i+1]]);\n        }\n    }\n    return l2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n  var sum = 0;\n  for(var i = 0; i < l1.length; i++){\n    for(var j = i+1; j < l1.length; j++){\n      if(l1[i] + l1[j] === 0){\n        sum += i + j;\n        l1[i] = l1[j] = NaN;\n      }\n    }\n  }\n  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpzsmz_2df.js:20:10)\n    at Object.<anonymous> (/tmp/tmpzsmz_2df.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var l2=[];\n    for(var i=0;i<l1.length-1;i++){\n        l2.push(l1[i]+l1[i+1]);\n    }\n    return l2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n  5,\n  6,\n  7,\n  8,\n  9\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpxuyroyzg.js:14:10)\n    at Object.<anonymous> (/tmp/tmpxuyroyzg.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 3, 5, 6,\n    7, 8, 9\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for (var i = 0; i < l1.length; i++) {\n        for (var j = i + 1; j < l1.length; j++) {\n            if (l1[i] + l1[j] == 0) {\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmp5rbglnlu.js:19:10)\n    at Object.<anonymous> (/tmp/tmp5rbglnlu.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            if(l1[i] + l1[j] == 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmppbb9503f.js:20:10)\n    at Object.<anonymous> (/tmp/tmppbb9503f.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i+1; j < l1.length; j++){\n            if(l1[i] + l1[j] == 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpr0dronei.js:20:10)\n    at Object.<anonymous> (/tmp/tmpr0dronei.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            if(l1[i] + l1[j] == 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmppbb9503f.js:20:10)\n    at Object.<anonymous> (/tmp/tmppbb9503f.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n  var l2 = [];\n  for(var i=0; i<l1.length-1; i++){\n    l2.push([l1[i],l1[i+1]]);\n  }\n  return l2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n\tvar l2 = [];\n\tfor(var i=0; i<l1.length; i++){\n\t\tif(l1[i+1] != undefined){\n\t\t\tl2.push([l1[i], l1[i+1]]);\n\t\t}\n\t}\n\treturn l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    let result = [];\n    for(let i = 0; i < l1.length; i++){\n        for(let j = i+1; j < l1.length; j++){\n            result.push([l1[i], l1[j]]);\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    5\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    5\n  ],\n  [\n    3,\n    4\n  ],\n ...\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmp21_hgbsc.js:17:10)\n    at Object.<anonymous> (/tmp/tmp21_hgbsc.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    [ 1, 1 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 2, 3 ], [ 2, 3 ],\n    [ 2, 4 ], [ 2, 4 ], [ 2, 5 ],\n    [ 3, 3 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 4, 4 ], [ 4, 5 ],\n    [ 4, 5 ]\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var result = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            if(l1[i] + l1[j] == arguments[1]){\n                result += i + j;\n                delete l1[i];\n                delete l1[j];\n            }\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpg22cgylu.js:20:10)\n    at Object.<anonymous> (/tmp/tmpg22cgylu.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var result = [];\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i+1; j < l1.length; j++){\n            result.push([l1[i], l1[j]]);\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    5\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    5\n  ],\n  [\n    3,\n    4\n  ],\n ...\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpgu9779n1.js:17:10)\n    at Object.<anonymous> (/tmp/tmpgu9779n1.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    [ 1, 1 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 2, 3 ], [ 2, 3 ],\n    [ 2, 4 ], [ 2, 4 ], [ 2, 5 ],\n    [ 3, 3 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 4, 4 ], [ 4, 5 ],\n    [ 4, 5 ]\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n  var sum = 0;\n  for(var i = 0; i < l1.length; i++){\n    for(var j = i+1; j < l1.length; j++){\n      if(l1[i] + l1[j] == 0){\n        sum += i + j;\n        l1[i] = l1[j] = NaN;\n      }\n    }\n  }\n  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpzh64c224.js:20:10)\n    at Object.<anonymous> (/tmp/tmpzh64c224.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            if(l1[i] + l1[j] == 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmppbb9503f.js:20:10)\n    at Object.<anonymous> (/tmp/tmppbb9503f.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var l2=[];\n    for(var i=0;i<l1.length-1;i++){\n        l2.push([l1[i],l1[i+1]]);\n    }\n    return l2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for (var i = 0; i < l1.length; i++){\n        for (var j = i+1; j < l1.length; j++){\n            if (l1[i] + l1[j] == 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmp131debv9.js:20:10)\n    at Object.<anonymous> (/tmp/tmp131debv9.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for (var i = 0; i < l1.length; i++){\n        for (var j = i + 1; j < l1.length; j++){\n            if (l1[i] + l1[j] == 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpig4vtc0u.js:20:10)\n    at Object.<anonymous> (/tmp/tmpig4vtc0u.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            if(l1[i] + l1[j] == 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmppbb9503f.js:20:10)\n    at Object.<anonymous> (/tmp/tmppbb9503f.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            if(l1[i] + l1[j] === 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpqmohcgdn.js:20:10)\n    at Object.<anonymous> (/tmp/tmpqmohcgdn.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n\tvar l2 = [];\n\tfor (var i = 0; i < l1.length; i++) {\n\t\tif (i % 2 == 0) {\n\t\t\tl2.push([l1[i], l1[i+1]]);\n\t\t}\n\t}\n\treturn l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpemm5ja9w.js:17:10)\n    at Object.<anonymous> (/tmp/tmpemm5ja9w.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 1 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ] ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i=0; i<l1.length; i++){\n        for(var j=i+1; j<l1.length; j++){\n            if(l1[i] + l1[j] == 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmp1xrpssx0.js:19:10)\n    at Object.<anonymous> (/tmp/tmp1xrpssx0.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n\tvar l2 = [];\n\tfor(var i = 0; i < l1.length; i++){\n\t\tfor(var j = i+1; j < l1.length; j++){\n\t\t\tl2.push([l1[i], l1[j]]);\n\t\t}\n\t}\n\treturn l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    5\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    5\n  ],\n  [\n    3,\n    4\n  ],\n ...\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpkwkxxayl.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkwkxxayl.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    [ 1, 1 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 2, 3 ], [ 2, 3 ],\n    [ 2, 4 ], [ 2, 4 ], [ 2, 5 ],\n    [ 3, 3 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 4, 4 ], [ 4, 5 ],\n    [ 4, 5 ]\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            if(l1[i] + l1[j] === 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpqmohcgdn.js:20:10)\n    at Object.<anonymous> (/tmp/tmpqmohcgdn.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for (var i = 0; i < l1.length; i++){\n        for (var j = i + 1; j < l1.length; j++){\n            if (l1[i] + l1[j] == 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpig4vtc0u.js:20:10)\n    at Object.<anonymous> (/tmp/tmpig4vtc0u.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n  var l2 = [];\n  for(var i = 0; i < l1.length; i++){\n    if(i < l1.length - 1){\n      l2.push(l1[i]);\n      l2.push(l1[i+1]);\n    }\n  }\n  return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n  1,\n  2,\n  2,\n  3,\n  3,\n  3,\n  3,\n  4,\n  4,\n  4,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpttvyjezd.js:18:10)\n    at Object.<anonymous> (/tmp/tmpttvyjezd.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1, 1, 1, 2, 2, 3,\n    3, 3, 3, 4, 4, 4,\n    4, 5\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n  var sum = 0;\n  for(var i = 0; i < l1.length; i++){\n    for(var j = i + 1; j < l1.length; j++){\n      if(l1[i] + l1[j] === 0){\n        sum += i + j;\n        l1[i] = l1[j] = NaN;\n      }\n    }\n  }\n  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpj_bqxpol.js:20:10)\n    at Object.<anonymous> (/tmp/tmpj_bqxpol.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            if(l1[i] + l1[j] === 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpqmohcgdn.js:20:10)\n    at Object.<anonymous> (/tmp/tmpqmohcgdn.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length; i++){\n        if(i < l1.length - 1){\n            l2.push([l1[i], l1[i+1]]);\n        }\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            if(l1[i] + l1[j] === 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmp2qe5fdg8.js:19:10)\n    at Object.<anonymous> (/tmp/tmp2qe5fdg8.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i+1; j < l1.length; j++){\n            if(l1[i] + l1[j] == 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpp3d5_j96.js:19:10)\n    at Object.<anonymous> (/tmp/tmpp3d5_j96.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n\tvar l2 = [];\n\tfor(var i = 0; i < l1.length; i+=2){\n\t\tl2.push([l1[i], l1[i+1]]);\n\t}\n\treturn l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmps5ztpcc7.js:15:10)\n    at Object.<anonymous> (/tmp/tmps5ztpcc7.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 1 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ] ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n\tvar l2=[];\n\tfor(var i=0;i<l1.length-1;i++){\n\t\tl2.push([l1[i],l1[i+1]]);\n\t}\n\treturn l2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n  var result = 0;\n  for(var i = 0; i < l1.length; i++){\n    for(var j = i + 1; j < l1.length; j++){\n      if(l1[i] + l1[j] === 0){\n        result += i + j;\n        l1[i] = l1[j] = NaN;\n      }\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmp74txq8vu.js:20:10)\n    at Object.<anonymous> (/tmp/tmp74txq8vu.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            if(l1[i] + l1[j] === 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmp2qe5fdg8.js:19:10)\n    at Object.<anonymous> (/tmp/tmp2qe5fdg8.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            if(l1[i] + l1[j] == 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmppbb9503f.js:20:10)\n    at Object.<anonymous> (/tmp/tmppbb9503f.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n  var l2 = [];\n  for(var i = 0; i < l1.length-1; i++){\n    l2.push([l1[i], l1[i+1]]);\n  }\n  return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length; i++){\n        if(i < l1.length - 1){\n            l2.push([l1[i], l1[i+1]]);\n        }\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length; i++){\n        if(i+1 < l1.length){\n            l2.push([l1[i], l1[i+1]]);\n        }\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n  var sum = 0;\n  for(var i = 0; i < l1.length; i++){\n    for(var j = i + 1; j < l1.length; j++){\n      if(l1[i] + l1[j] == 0){\n        sum += i + j;\n        l1[i] = l1[j] = NaN;\n      }\n    }\n  }\n  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpyd3pq5v8.js:20:10)\n    at Object.<anonymous> (/tmp/tmpyd3pq5v8.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            if(l1[i] + l1[j] == 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmp7u4lf46p.js:19:10)\n    at Object.<anonymous> (/tmp/tmp7u4lf46p.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n  var l2 = [];\n  for(var i=0; i<l1.length-1; i++){\n    l2.push([l1[i], l1[i+1]]);\n  }\n  return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i+1; j < l1.length; j++){\n            if(l1[i] + l1[j] === 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpvk4r8rib.js:19:10)\n    at Object.<anonymous> (/tmp/tmpvk4r8rib.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length; i++){\n        if(i < l1.length - 1){\n            l2.push([l1[i], l1[i+1]]);\n        }\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i+1; j < l1.length; j++){\n            if(l1[i] + l1[j] == 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpp3d5_j96.js:19:10)\n    at Object.<anonymous> (/tmp/tmpp3d5_j96.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i+1; j < l1.length; j++){\n            if(l1[i] + l1[j] == 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpr0dronei.js:20:10)\n    at Object.<anonymous> (/tmp/tmpr0dronei.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length-1; i++){\n        l2.push([l1[i], l1[i+1]]);\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n  var sum = 0;\n  for(var i = 0; i < l1.length; i++){\n    for(var j = i+1; j < l1.length; j++){\n      if(l1[i] + l1[j] == 0){\n        sum += i + j;\n        l1[i] = l1[j] = NaN;\n      }\n    }\n  }\n  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpzh64c224.js:20:10)\n    at Object.<anonymous> (/tmp/tmpzh64c224.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length - 1; i++){\n        l2.push([l1[i], l1[i+1]]);\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            if(l1[i] + l1[j] == 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmp7u4lf46p.js:19:10)\n    at Object.<anonymous> (/tmp/tmp7u4lf46p.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length - 1; i++){\n        l2.push([l1[i], l1[i+1]]);\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            if(l1[i] + l1[j] == 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmp7u4lf46p.js:19:10)\n    at Object.<anonymous> (/tmp/tmp7u4lf46p.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n  var l2 = [];\n  for(var i = 0; i < l1.length; i++){\n    if(i+1 < l1.length){\n      l2.push(l1[i], l1[i+1]);\n    }\n  }\n  return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n  1,\n  2,\n  2,\n  3,\n  3,\n  3,\n  3,\n  4,\n  4,\n  4,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmp2pj7d5f4.js:17:10)\n    at Object.<anonymous> (/tmp/tmp2pj7d5f4.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1, 1, 1, 2, 2, 3,\n    3, 3, 3, 4, 4, 4,\n    4, 5\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n  var l2 = [];\n  for(var i=0; i<l1.length; i++){\n    if(i+1<l1.length){\n      l2.push([l1[i], l1[i+1]]);\n    }\n  }\n  return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n  var l2 = [];\n  for(var i = 0; i < l1.length-1; i++){\n    l2.push([l1[i], l1[i+1]]);\n  }\n  return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n  var sum = 0;\n  for (var i = 0; i < l1.length; i++){\n    for (var j = i+1; j < l1.length; j++){\n      if (l1[i] + l1[j] === 0){\n        sum += i + j;\n        l1[i] = l1[j] = NaN;\n      }\n    }\n  }\n  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmppd53amem.js:20:10)\n    at Object.<anonymous> (/tmp/tmppd53amem.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n  var sum = 0;\n  for (var i = 0; i < l1.length; i++) {\n    for (var j = i + 1; j < l1.length; j++) {\n      if (l1[i] + l1[j] === 0) {\n        sum += i + j;\n        l1[i] = l1[j] = NaN;\n      }\n    }\n  }\n  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpe6gzk1zs.js:20:10)\n    at Object.<anonymous> (/tmp/tmpe6gzk1zs.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            if(l1[i] + l1[j] === 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpqmohcgdn.js:20:10)\n    at Object.<anonymous> (/tmp/tmpqmohcgdn.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length; i++){\n        if(i < l1.length - 1){\n            l2.push([l1[i], l1[i+1]]);\n        }\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    var arr = [];\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i+1; j < l1.length; j++){\n            if(l1[i] + l1[j] == 0){\n                arr.push(i,j);\n            }\n        }\n    }\n    for(var k = 0; k < arr.length; k++){\n        sum += arr[k];\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmp_q9o3fw4.js:22:10)\n    at Object.<anonymous> (/tmp/tmp_q9o3fw4.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            if(l1[i] + l1[j] == 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmppbb9503f.js:20:10)\n    at Object.<anonymous> (/tmp/tmppbb9503f.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var l2 = [];\n    for (var i = 0; i < l1.length - 1; i++){\n        l2.push([l1[i], l1[i+1]]);\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i+1; j < l1.length; j++){\n            if(l1[i] + l1[j] == 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpp3d5_j96.js:19:10)\n    at Object.<anonymous> (/tmp/tmpp3d5_j96.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length; i++){\n        if(i+1 < l1.length){\n            l2.push([l1[i], l1[i+1]]);\n        }\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n\tvar l2 = [];\n\tfor(var i = 0; i < l1.length; i+=2){\n\t\tl2.push([l1[i], l1[i+1]]);\n\t}\n\treturn l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmps5ztpcc7.js:15:10)\n    at Object.<anonymous> (/tmp/tmps5ztpcc7.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 1 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ] ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i=0; i<l1.length; i++){\n        if(l1[i+1] != undefined){\n            l2.push([l1[i], l1[i+1]]);\n        }\n    }\n    return l2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var pairs = [];\n    for(var i = 0; i < l1.length; i++){\n        if(i < l1.length - 1){\n            pairs.push([l1[i], l1[i+1]]);\n        }\n    }\n    return pairs;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length; i++){\n        if(i + 1 < l1.length){\n            l2.push([l1[i], l1[i+1]]);\n        }\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i+1; j < l1.length; j++){\n            if(l1[i] + l1[j] == 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpr0dronei.js:20:10)\n    at Object.<anonymous> (/tmp/tmpr0dronei.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i+1; j < l1.length; j++){\n            if(l1[i] + l1[j] === 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpfk8rfr48.js:20:10)\n    at Object.<anonymous> (/tmp/tmpfk8rfr48.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var result = [];\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            result.push([l1[i], l1[j]]);\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    5\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    5\n  ],\n  [\n    3,\n    4\n  ],\n ...\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmp4sqpfp8z.js:17:10)\n    at Object.<anonymous> (/tmp/tmp4sqpfp8z.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    [ 1, 1 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 2, 3 ], [ 2, 3 ],\n    [ 2, 4 ], [ 2, 4 ], [ 2, 5 ],\n    [ 3, 3 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 4, 4 ], [ 4, 5 ],\n    [ 4, 5 ]\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n  var l2 = []\n  for(var i = 0; i < l1.length; i++){\n    for(var j = i+1; j < l1.length; j++){\n      l2.push([l1[i], l1[j]])\n    }\n  }\n  return l2\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    5\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    5\n  ],\n  [\n    3,\n    4\n  ],\n ...\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmp8bi4qsxb.js:17:10)\n    at Object.<anonymous> (/tmp/tmp8bi4qsxb.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    [ 1, 1 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 2, 3 ], [ 2, 3 ],\n    [ 2, 4 ], [ 2, 4 ], [ 2, 5 ],\n    [ 3, 3 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 4, 4 ], [ 4, 5 ],\n    [ 4, 5 ]\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n  var sum = 0;\n  for(var i = 0; i < l1.length; i++){\n    for(var j = i + 1; j < l1.length; j++){\n      if(l1[i] + l1[j] === 0){\n        sum += i + j;\n        l1[i] = l1[j] = NaN;\n      }\n    }\n  }\n  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpj_bqxpol.js:20:10)\n    at Object.<anonymous> (/tmp/tmpj_bqxpol.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n  var sum = 0;\n  for(var i = 0; i < l1.length; i++){\n    for(var j = i+1; j < l1.length; j++){\n      if(l1[i] === l1[j]){\n        sum += i+j;\n        l1[i] = l1[j] = NaN;\n      }\n    }\n  }\n  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n19\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpsq8uqk88.js:20:10)\n    at Object.<anonymous> (/tmp/tmpsq8uqk88.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 19,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            if(l1[i] + l1[j] == 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmppbb9503f.js:20:10)\n    at Object.<anonymous> (/tmp/tmppbb9503f.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var result = [];\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            result.push([l1[i], l1[j]]);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    5\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    5\n  ],\n  [\n    3,\n    4\n  ],\n ...\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmptemhkj2z.js:16:10)\n    at Object.<anonymous> (/tmp/tmptemhkj2z.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    [ 1, 1 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 2, 3 ], [ 2, 3 ],\n    [ 2, 4 ], [ 2, 4 ], [ 2, 5 ],\n    [ 3, 3 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 4, 4 ], [ 4, 5 ],\n    [ 4, 5 ]\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            if(l1[i] + l1[j] == 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmp7u4lf46p.js:19:10)\n    at Object.<anonymous> (/tmp/tmp7u4lf46p.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length - 1; i++){\n        l2.push([l1[i], l1[i+1]]);\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var result = [];\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            result.push([l1[i], l1[j]]);\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    5\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    5\n  ],\n  [\n    3,\n    4\n  ],\n ...\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmp4sqpfp8z.js:17:10)\n    at Object.<anonymous> (/tmp/tmp4sqpfp8z.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    [ 1, 1 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 2, 3 ], [ 2, 3 ],\n    [ 2, 4 ], [ 2, 4 ], [ 2, 5 ],\n    [ 3, 3 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 4, 4 ], [ 4, 5 ],\n    [ 4, 5 ]\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i+1; j < l1.length; j++){\n            if(l1[i] + l1[j] == 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpp3d5_j96.js:19:10)\n    at Object.<anonymous> (/tmp/tmpp3d5_j96.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            if(l1[i] + l1[j] == 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmp7u4lf46p.js:19:10)\n    at Object.<anonymous> (/tmp/tmp7u4lf46p.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i=0; i<l1.length; i++){\n        for(var j=i+1; j<l1.length; j++){\n            if(l1[i] + l1[j] == 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmp1xrpssx0.js:19:10)\n    at Object.<anonymous> (/tmp/tmp1xrpssx0.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i=0; i<l1.length-1; i++){\n        l2.push([l1[i], l1[i+1]]);\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i+1; j < l1.length; j++){\n            if(l1[i] + l1[j] == 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpr0dronei.js:20:10)\n    at Object.<anonymous> (/tmp/tmpr0dronei.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n  var sum = 0;\n  for(var i = 0; i < l1.length; i++){\n    for(var j = i+1; j < l1.length; j++){\n      if(l1[i] + l1[j] === 0){\n        sum += i + j;\n        l1[i] = l1[j] = NaN;\n      }\n    }\n  }\n  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpzsmz_2df.js:20:10)\n    at Object.<anonymous> (/tmp/tmpzsmz_2df.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            if(l1[i] + l1[j] == 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmppbb9503f.js:20:10)\n    at Object.<anonymous> (/tmp/tmppbb9503f.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            if(l1[i] + l1[j] == 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmp7u4lf46p.js:19:10)\n    at Object.<anonymous> (/tmp/tmp7u4lf46p.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length; i++){\n        if(i+1 < l1.length){\n            l2.push([l1[i], l1[i+1]]);\n        }\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i=0; i<l1.length-1; i++){\n        l2.push([l1[i], l1[i+1]]);\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length; i++){\n        if(i < l1.length - 1){\n            l2.push([l1[i], l1[i+1]]);\n        }\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n\tvar l2 = [];\n\tfor(var i = 0; i < l1.length; i++){\n\t\tif(i < l1.length - 1){\n\t\t\tl2.push(l1[i] + l1[i+1]);\n\t\t}\n\t}\n\treturn l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n  5,\n  6,\n  7,\n  8,\n  9\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmptql0a_gi.js:17:10)\n    at Object.<anonymous> (/tmp/tmptql0a_gi.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 3, 5, 6,\n    7, 8, 9\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i=0; i<l1.length; i++){\n        for(var j=i+1; j<l1.length; j++){\n            if(l1[i] + l1[j] == 0){\n                sum += i+j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmppp40hl_d.js:19:10)\n    at Object.<anonymous> (/tmp/tmppp40hl_d.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i+1; j < l1.length; j++){\n            if(l1[i] + l1[j] == 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpr0dronei.js:20:10)\n    at Object.<anonymous> (/tmp/tmpr0dronei.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    let sum = 0;\n    for(let i = 0; i < l1.length; i++){\n        for(let j = i+1; j < l1.length; j++){\n            if(l1[i] + l1[j] == 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpeq7ut_aj.js:20:10)\n    at Object.<anonymous> (/tmp/tmpeq7ut_aj.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n  var sum = 0;\n  for(var i = 0; i < l1.length; i++){\n    for(var j = i+1; j < l1.length; j++){\n      if(l1[i] + l1[j] == 0){\n        sum += i + j;\n        l1[i] = l1[j] = NaN;\n      }\n    }\n  }\n  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpzh64c224.js:20:10)\n    at Object.<anonymous> (/tmp/tmpzh64c224.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length; i++){\n        if(l1[i+1] != undefined){\n            l2.push([l1[i], l1[i+1]]);\n        }\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n  var sum = 0;\n  for(var i = 0; i < l1.length; i++){\n    for(var j = i + 1; j < l1.length; j++){\n      if(l1[i] + l1[j] === 0){\n        sum += i + j;\n        l1[i] = l1[j] = NaN;\n      }\n    }\n  }\n  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpj_bqxpol.js:20:10)\n    at Object.<anonymous> (/tmp/tmpj_bqxpol.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i=0; i<l1.length; i++){\n        for(var j=i+1; j<l1.length; j++){\n            if(l1[i] + l1[j] === 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpw3rekg6t.js:19:10)\n    at Object.<anonymous> (/tmp/tmpw3rekg6t.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n  var sum = 0;\n  for(var i = 0; i < l1.length; i++){\n    for(var j = i+1; j < l1.length; j++){\n      if(l1[i] + l1[j] == 0){\n        sum += i + j;\n        l1[i] = l1[j] = NaN;\n      }\n    }\n  }\n  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpzh64c224.js:20:10)\n    at Object.<anonymous> (/tmp/tmpzh64c224.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length; i++){\n        if(i < l1.length - 1){\n            l2.push([l1[i], l1[i+1]]);\n        }\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            if(l1[i] + l1[j] == 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmp7u4lf46p.js:19:10)\n    at Object.<anonymous> (/tmp/tmp7u4lf46p.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length; i++){\n        if(l1[i+1] != undefined){\n            l2.push([l1[i], l1[i+1]]);\n        }\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n\tvar l2 = [];\n\tfor(var i = 0; i < l1.length; i++){\n\t\tif(i < l1.length - 1){\n\t\t\tl2.push(l1[i] + l1[i+1]);\n\t\t}\n\t}\n\treturn l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n  5,\n  6,\n  7,\n  8,\n  9\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmptql0a_gi.js:17:10)\n    at Object.<anonymous> (/tmp/tmptql0a_gi.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 3, 5, 6,\n    7, 8, 9\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            if(l1[i] + l1[j] == 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmppbb9503f.js:20:10)\n    at Object.<anonymous> (/tmp/tmppbb9503f.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            if(l1[i] + l1[j] == 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmp7u4lf46p.js:19:10)\n    at Object.<anonymous> (/tmp/tmp7u4lf46p.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            if(l1[i] + l1[j] === 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmp2qe5fdg8.js:19:10)\n    at Object.<anonymous> (/tmp/tmp2qe5fdg8.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n\tvar l2 = [];\n\tfor(var i = 0; i < l1.length; i++){\n\t\tif(i+1 < l1.length){\n\t\t\tl2.push([l1[i], l1[i+1]]);\n\t\t}\n\t}\n\treturn l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            if(l1[i] + l1[j] === 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpqmohcgdn.js:20:10)\n    at Object.<anonymous> (/tmp/tmpqmohcgdn.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            if(l1[i] + l1[j] === 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpqmohcgdn.js:20:10)\n    at Object.<anonymous> (/tmp/tmpqmohcgdn.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n  var sum = 0;\n  for(var i = 0; i < l1.length; i++){\n    for(var j = i + 1; j < l1.length; j++){\n      if(l1[i] + l1[j] == 0){\n        sum += i + j;\n        l1[i] = l1[j] = NaN;\n      }\n    }\n  }\n  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpyd3pq5v8.js:20:10)\n    at Object.<anonymous> (/tmp/tmpyd3pq5v8.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    let sum = 0;\n    for(let i = 0; i < l1.length; i++){\n        for(let j = i+1; j < l1.length; j++){\n            if(l1[i] + l1[j] == 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpeq7ut_aj.js:20:10)\n    at Object.<anonymous> (/tmp/tmpeq7ut_aj.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            if(l1[i] + l1[j] === 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpqmohcgdn.js:20:10)\n    at Object.<anonymous> (/tmp/tmpqmohcgdn.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i=0; i<l1.length-1; i++){\n        l2.push([l1[i], l1[i+1]]);\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            if(l1[i] + l1[j] === 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpqmohcgdn.js:20:10)\n    at Object.<anonymous> (/tmp/tmpqmohcgdn.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var res = [];\n    for(var i=0; i<l1.length-1; i++){\n        res.push([l1[i],l1[i+1]]);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            if(l1[i] + l1[j] === 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmp2qe5fdg8.js:19:10)\n    at Object.<anonymous> (/tmp/tmp2qe5fdg8.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            if(l1[i] + l1[j] === 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpqmohcgdn.js:20:10)\n    at Object.<anonymous> (/tmp/tmpqmohcgdn.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            if(l1[i] + l1[j] == 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmppbb9503f.js:20:10)\n    at Object.<anonymous> (/tmp/tmppbb9503f.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i=0;i<l1.length-1;i++){\n        l2.push([l1[i],l1[i+1]]);\n    }\n    return l2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    var l2 = l1.slice();\n    for (var i = 0; i < l1.length; i++){\n        for (var j = i + 1; j < l2.length; j++){\n            if (l1[i] + l2[j] === 0){\n                sum += i + j;\n                l2[j] = NaN;\n                break;\n            }\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpbzq7cbw4.js:22:10)\n    at Object.<anonymous> (/tmp/tmpbzq7cbw4.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i+1; j < l1.length; j++){\n            if(l1[i] + l1[j] == 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpr0dronei.js:20:10)\n    at Object.<anonymous> (/tmp/tmpr0dronei.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length; i++){\n        if(i < l1.length - 1){\n            l2.push([l1[i], l1[i+1]]);\n        }\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    let sum = 0;\n    for(let i = 0; i < l1.length; i++){\n        for(let j = i + 1; j < l1.length; j++){\n            if(l1[i] + l1[j] == 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmp28xu7pj2.js:20:10)\n    at Object.<anonymous> (/tmp/tmp28xu7pj2.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i=0; i<l1.length; i++){\n        for(var j=i+1; j<l1.length; j++){\n            if(l1[i] + l1[j] == 0){\n                sum += i+j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpbkyaalru.js:20:10)\n    at Object.<anonymous> (/tmp/tmpbkyaalru.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n\tvar res = [];\n\tfor(var i = 0; i < l1.length - 1; i++){\n\t\tres.push([l1[i], l1[i+1]]);\n\t}\n\treturn res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            if(l1[i] + l1[j] === 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpqmohcgdn.js:20:10)\n    at Object.<anonymous> (/tmp/tmpqmohcgdn.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length; i++){\n        if(i < l1.length-1){\n            l2.push([l1[i], l1[i+1]]);\n        }\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i+1; j < l1.length; j++){\n            if(l1[i] + l1[j] == 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpp3d5_j96.js:19:10)\n    at Object.<anonymous> (/tmp/tmpp3d5_j96.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n  var sum = 0;\n  for(var i = 0; i < l1.length; i++){\n    for(var j = i + 1; j < l1.length; j++){\n      if(l1[i] + l1[j] == 0){\n        sum += i + j;\n        l1[i] = l1[j] = NaN;\n      }\n    }\n  }\n  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpyd3pq5v8.js:20:10)\n    at Object.<anonymous> (/tmp/tmpyd3pq5v8.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for (var i = 0; i < l1.length; i++){\n        for (var j = i + 1; j < l1.length; j++){\n            if (l1[i] + l1[j] == 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpig4vtc0u.js:20:10)\n    at Object.<anonymous> (/tmp/tmpig4vtc0u.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n\tvar l2 = [];\n\tfor (var i = 0; i < l1.length; i++){\n\t\tif (i < l1.length - 1){\n\t\t\tl2.push([l1[i], l1[i+1]]);\n\t\t}\n\t}\n\treturn l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n\tvar l2 = [];\n\tfor(var i = 0; i < l1.length; i++){\n\t\tif(l1[i+1] != undefined){\n\t\t\tl2.push([l1[i], l1[i+1]]);\n\t\t}\n\t}\n\treturn l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length - 1; i++){\n        l2.push([l1[i], l1[i+1]]);\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var l2=[];\n    for(var i=0;i<l1.length-1;i++){\n        l2.push([l1[i],l1[i+1]]);\n    }\n    return l2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            if(l1[i] + l1[j] == 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmp7u4lf46p.js:19:10)\n    at Object.<anonymous> (/tmp/tmp7u4lf46p.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i=0; i<l1.length; i++){\n        if(i+1<l1.length){\n            l2.push([l1[i],l1[i+1]]);\n        }\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i=0; i<l1.length; i++){\n        if(i+1<l1.length){\n            l2.push([l1[i], l1[i+1]]);\n        }\n    }\n    return l2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i+1; j < l1.length; j++){\n            if(l1[i] + l1[j] == 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpr0dronei.js:20:10)\n    at Object.<anonymous> (/tmp/tmpr0dronei.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i=0; i<l1.length; i++){\n        for(var j=i+1; j<l1.length; j++){\n            if(l1[i] + l1[j] == 10){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmp31ntv2ia.js:20:10)\n    at Object.<anonymous> (/tmp/tmp31ntv2ia.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n\tvar l2 = [];\n\tfor(var i=0; i<l1.length-1; i++){\n\t\tl2.push([l1[i], l1[i+1]]);\n\t}\n\treturn l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i=0; i<l1.length-1; i++){\n        l2.push([l1[i], l1[i+1]]);\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n  var l2 = [];\n  for(var i = 0; i < l1.length; i++){\n    if(l1[i+1] != undefined){\n      l2.push([l1[i],l1[i+1]]);\n    }\n  }\n  return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for (var i = 0; i < l1.length; i++){\n        for (var j = i+1; j < l1.length; j++){\n            if (l1[i] + l1[j] == 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpkavzcdgu.js:19:10)\n    at Object.<anonymous> (/tmp/tmpkavzcdgu.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i=0; i<l1.length-1; i++){\n        l2.push([l1[i],l1[i+1]]);\n    }\n    return l2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i=0; i<l1.length-1; i++){\n        l2.push([l1[i], l1[i+1]]);\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n\tvar l2 = [];\n\tfor(var i=0; i<l1.length; i++){\n\t\tif(l1[i+1]!=undefined){\n\t\t\tl2.push([l1[i], l1[i+1]]);\n\t\t}\n\t}\n\treturn l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var pairs = [];\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i+1; j < l1.length; j++){\n            pairs.push([l1[i], l1[j]]);\n        }\n    }\n    return pairs;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    5\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    5\n  ],\n  [\n    3,\n    4\n  ],\n ...\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpci910qkq.js:17:10)\n    at Object.<anonymous> (/tmp/tmpci910qkq.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    [ 1, 1 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 2, 3 ], [ 2, 3 ],\n    [ 2, 4 ], [ 2, 4 ], [ 2, 5 ],\n    [ 3, 3 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 4, 4 ], [ 4, 5 ],\n    [ 4, 5 ]\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i=0; i<l1.length-1; i++){\n        l2.push([l1[i], l1[i+1]]);\n    }\n    return l2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var result = [];\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            result.push([l1[i], l1[j]]);\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    5\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    5\n  ],\n  [\n    3,\n    4\n  ],\n ...\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmp4sqpfp8z.js:17:10)\n    at Object.<anonymous> (/tmp/tmp4sqpfp8z.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    [ 1, 1 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 2, 3 ], [ 2, 3 ],\n    [ 2, 4 ], [ 2, 4 ], [ 2, 5 ],\n    [ 3, 3 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 4, 4 ], [ 4, 5 ],\n    [ 4, 5 ]\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n  var l2 = [];\n  for(var i = 0; i < l1.length; i++){\n    if(i < l1.length - 1){\n      l2.push([l1[i], l1[i+1]]);\n    }\n  }\n  return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length; i++){\n        if(i < l1.length - 1){\n            l2.push([l1[i], l1[i+1]]);\n        }\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length; i++){\n        if(i < l1.length - 1){\n            l2.push([l1[i], l1[i+1]]);\n        }\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            if(l1[i] + l1[j] == 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmp7u4lf46p.js:19:10)\n    at Object.<anonymous> (/tmp/tmp7u4lf46p.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            if(l1[i] + l1[j] === 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpqmohcgdn.js:20:10)\n    at Object.<anonymous> (/tmp/tmpqmohcgdn.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i=0; i<l1.length-1; i++){\n        l2.push([l1[i], l1[i+1]]);\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i+1; j < l1.length; j++){\n            if(l1[i] + l1[j] === 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpvk4r8rib.js:19:10)\n    at Object.<anonymous> (/tmp/tmpvk4r8rib.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i+1; j < l1.length; j++){\n            if(l1[i] + l1[j] == 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpp3d5_j96.js:19:10)\n    at Object.<anonymous> (/tmp/tmpp3d5_j96.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            if(l1[i] + l1[j] == 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmppbb9503f.js:20:10)\n    at Object.<anonymous> (/tmp/tmppbb9503f.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i=0; i<l1.length; i++){\n        for(var j=i+1; j<l1.length; j++){\n            if(l1[i] + l1[j] == 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpdsbpnnrr.js:20:10)\n    at Object.<anonymous> (/tmp/tmpdsbpnnrr.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i=0; i<l1.length; i++){\n        l2.push(l1[i]);\n        l2.push(l1[i+1]);\n        i++;\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n  2,\n  3,\n  3,\n  4,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmp4x06wl9r.js:17:10)\n    at Object.<anonymous> (/tmp/tmp4x06wl9r.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1, 1, 2, 3,\n    3, 4, 4, 5\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i+1; j < l1.length; j++){\n            if(l1[i] + l1[j] == 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpr0dronei.js:20:10)\n    at Object.<anonymous> (/tmp/tmpr0dronei.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n  var sum = 0;\n  for(var i = 0; i < l1.length; i++){\n    for(var j = i + 1; j < l1.length; j++){\n      if(l1[i] + l1[j] === 0){\n        sum += i + j;\n        l1[i] = l1[j] = NaN;\n      }\n    }\n  }\n  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpj_bqxpol.js:20:10)\n    at Object.<anonymous> (/tmp/tmpj_bqxpol.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            if(l1[i] + l1[j] == 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510681,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmp7u4lf46p.js:19:10)\n    at Object.<anonymous> (/tmp/tmp7u4lf46p.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    }
  ]
}