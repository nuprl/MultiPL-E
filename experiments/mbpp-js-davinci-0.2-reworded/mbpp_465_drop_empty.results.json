{
  "name": "mbpp_465_drop_empty",
  "language": "js",
  "prompt": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_465_drop_empty.py",
  "prompt_terminology": "reworded",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "results": [
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp5lt1ltcw.js:15:10)\n    at Object.<anonymous> (/tmp/tmp5lt1ltcw.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\n\nvar dict1 = {a:1, b:\"\", c:3};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmphas_5s7s.js:17:10)\n    at Object.<anonymous> (/tmp/tmphas_5s7s.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmplmf_7h7j.js:17:10)\n    at Object.<anonymous> (/tmp/tmplmf_7h7j.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for (var i in dict1){\n        if (dict1[i] == ''){\n            delete dict1[i];\n        }\n    }\n    return dict1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpzzx543xp.js:16:10)\n    at Object.<anonymous> (/tmp/tmpzzx543xp.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != null && dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nvar dict1 = {a: \"\", b: \"\", c: \"d\"};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp88gu8mw_.js:18:10)\n    at Object.<anonymous> (/tmp/tmp88gu8mw_.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == null || dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\n\nvar dict1 = {a:1, b:2, c:3, d:null, e:\"\", f:0, g:false};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmplmf_7h7j.js:17:10)\n    at Object.<anonymous> (/tmp/tmplmf_7h7j.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] !== \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmphybpjd0c.js:17:10)\n    at Object.<anonymous> (/tmp/tmphybpjd0c.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(let key in dict1){\n        if(dict1[key] == null || dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == null || dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    console.log(dict1);\n}\ndrop_empty({'a': 1, 'b':'', 'c': null});\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "{ a: 1 }\n{ c1: 'Red', c2: 'Green' }\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpwlj5g1l4.js:17:10)\n    at Object.<anonymous> (/tmp/tmpwlj5g1l4.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmplmf_7h7j.js:17:10)\n    at Object.<anonymous> (/tmp/tmplmf_7h7j.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp5lt1ltcw.js:15:10)\n    at Object.<anonymous> (/tmp/tmp5lt1ltcw.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmplmf_7h7j.js:17:10)\n    at Object.<anonymous> (/tmp/tmplmf_7h7j.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp5lt1ltcw.js:15:10)\n    at Object.<anonymous> (/tmp/tmp5lt1ltcw.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != ''){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp_6uikdqb.js:16:10)\n    at Object.<anonymous> (/tmp/tmp_6uikdqb.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for (var key in dict1){\n        if (dict1[key] == null || dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var i in dict1){\n        if(dict1[i] == null || dict1[i] == undefined || dict1[i] == ''){\n            delete dict1[i];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var i in dict1){\n        if(dict1[i]==\"\"){\n            delete dict1[i];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp0g_jdvb5.js:15:10)\n    at Object.<anonymous> (/tmp/tmp0g_jdvb5.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nvar dict1 = {name: \"John\", age: \"\", email: \"john@example.com\", city: \"New York\"};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmppieyvmz7.js:18:10)\n    at Object.<anonymous> (/tmp/tmppieyvmz7.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == null || dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == null || dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nvar dict1 = {a:1,b:2,c:\"\",d:4,e:\"\"};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp8al0iobe.js:16:10)\n    at Object.<anonymous> (/tmp/tmp8al0iobe.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var new_dict = {};\n    for (var key in dict1) {\n        if (dict1[key] != \"\") {\n            new_dict[key] = dict1[key];\n        }\n    }\n    return new_dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpmf2c1mxm.js:16:10)\n    at Object.<anonymous> (/tmp/tmpmf2c1mxm.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for (var key in dict1){\n        if (dict1[key] == null || dict1[key] == undefined || dict1[key] == ''){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp5lt1ltcw.js:15:10)\n    at Object.<anonymous> (/tmp/tmp5lt1ltcw.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp5lt1ltcw.js:15:10)\n    at Object.<anonymous> (/tmp/tmp5lt1ltcw.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] !== \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmphybpjd0c.js:17:10)\n    at Object.<anonymous> (/tmp/tmphybpjd0c.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var i in dict1){\n        if(dict1[i]==\"\"){\n            delete dict1[i];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp0g_jdvb5.js:15:10)\n    at Object.<anonymous> (/tmp/tmp0g_jdvb5.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != null && dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp5lt1ltcw.js:15:10)\n    at Object.<anonymous> (/tmp/tmp5lt1ltcw.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for (var key in dict1){\n        if (dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpm09wlgx_.js:15:10)\n    at Object.<anonymous> (/tmp/tmpm09wlgx_.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == null || dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmplmf_7h7j.js:17:10)\n    at Object.<anonymous> (/tmp/tmplmf_7h7j.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == null || dict1[key] == undefined || dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == null || dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpka_xbh53.js:16:10)\n    at Object.<anonymous> (/tmp/tmpka_xbh53.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmplmf_7h7j.js:17:10)\n    at Object.<anonymous> (/tmp/tmplmf_7h7j.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp5lt1ltcw.js:15:10)\n    at Object.<anonymous> (/tmp/tmp5lt1ltcw.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp5lt1ltcw.js:15:10)\n    at Object.<anonymous> (/tmp/tmp5lt1ltcw.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpph7o_79g.js:16:10)\n    at Object.<anonymous> (/tmp/tmpph7o_79g.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var new_dict = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            new_dict[key] = dict1[key];\n        }\n    }\n    return new_dict;\n}\n\nvar dict1 = {a: \"\", b: \"\", c: \"d\", e: \"f\"};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpsj79p1n4.js:18:10)\n    at Object.<anonymous> (/tmp/tmpsj79p1n4.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key]==\"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpbh1o6ec3.js:15:10)\n    at Object.<anonymous> (/tmp/tmpbh1o6ec3.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp5lt1ltcw.js:15:10)\n    at Object.<anonymous> (/tmp/tmp5lt1ltcw.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmplmf_7h7j.js:17:10)\n    at Object.<anonymous> (/tmp/tmplmf_7h7j.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] !== \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmphybpjd0c.js:17:10)\n    at Object.<anonymous> (/tmp/tmphybpjd0c.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == ''){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp_n4qdzve.js:15:10)\n    at Object.<anonymous> (/tmp/tmp_n4qdzve.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == null || dict1[key] == \"\" || dict1[key] == undefined){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp0kid0s_o.js:17:10)\n    at Object.<anonymous> (/tmp/tmp0kid0s_o.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp5lt1ltcw.js:15:10)\n    at Object.<anonymous> (/tmp/tmp5lt1ltcw.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp5lt1ltcw.js:15:10)\n    at Object.<anonymous> (/tmp/tmp5lt1ltcw.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nvar dict1 = {a:1, b:2, c:\"\", d:4};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpn27zjd09.js:16:10)\n    at Object.<anonymous> (/tmp/tmpn27zjd09.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp_irzy133.js:16:10)\n    at Object.<anonymous> (/tmp/tmp_irzy133.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpph7o_79g.js:16:10)\n    at Object.<anonymous> (/tmp/tmpph7o_79g.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var i in dict1){\n        if(dict1[i] == \"\"){\n            delete dict1[i];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpgefon9hq.js:15:10)\n    at Object.<anonymous> (/tmp/tmpgefon9hq.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != ''){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nvar dict1 = {'a': '', 'b': '', 'c': 'd'};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp2wuvbbfp.js:18:10)\n    at Object.<anonymous> (/tmp/tmp2wuvbbfp.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpph7o_79g.js:16:10)\n    at Object.<anonymous> (/tmp/tmpph7o_79g.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] !== \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmphybpjd0c.js:17:10)\n    at Object.<anonymous> (/tmp/tmphybpjd0c.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp5lt1ltcw.js:15:10)\n    at Object.<anonymous> (/tmp/tmp5lt1ltcw.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var new_dict = {};\n    for (var key in dict1){\n        if (dict1[key] != ''){\n            new_dict[key] = dict1[key];\n        }\n    }\n    return new_dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp8pevyi3t.js:16:10)\n    at Object.<anonymous> (/tmp/tmp8pevyi3t.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] !== \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpaxejp19m.js:16:10)\n    at Object.<anonymous> (/tmp/tmpaxejp19m.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nvar dict1 = {a: \"\", b: \"\", c: \"d\"};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpsqjnx12y.js:17:10)\n    at Object.<anonymous> (/tmp/tmpsqjnx12y.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var x in dict1){\n        if (dict1[x] != \"\"){\n            dict2[x] = dict1[x];\n        }\n    }\n    return dict2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmphhpur0nt.js:16:10)\n    at Object.<anonymous> (/tmp/tmphhpur0nt.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == null || dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for (var key in dict1){\n        if (dict1[key] == ''){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp58z1nbp2.js:15:10)\n    at Object.<anonymous> (/tmp/tmp58z1nbp2.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp_irzy133.js:16:10)\n    at Object.<anonymous> (/tmp/tmp_irzy133.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var new_dict = {};\n    for (var key in dict1){\n        if (dict1[key] != ''){\n            new_dict[key] = dict1[key];\n        }\n    }\n    return new_dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpf65min34.js:17:10)\n    at Object.<anonymous> (/tmp/tmpf65min34.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmplmf_7h7j.js:17:10)\n    at Object.<anonymous> (/tmp/tmplmf_7h7j.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == ''){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp_n4qdzve.js:15:10)\n    at Object.<anonymous> (/tmp/tmp_n4qdzve.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nvar dict1 = {name: \"John\", age: \"\", address: \"\", email: \"john@example.com\"};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmprzq1q_kl.js:16:10)\n    at Object.<anonymous> (/tmp/tmprzq1q_kl.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var i in dict1){\n        if(dict1[i] == ''){\n            delete dict1[i];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpl_fode_7.js:15:10)\n    at Object.<anonymous> (/tmp/tmpl_fode_7.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == null || dict1[key] == '' || dict1[key] == undefined){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for (var key in dict1){\n        if (dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpm09wlgx_.js:15:10)\n    at Object.<anonymous> (/tmp/tmpm09wlgx_.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp_irzy133.js:16:10)\n    at Object.<anonymous> (/tmp/tmp_irzy133.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nvar dict1 = {'a':'','b':'','c':'','d':'','e':'','f':''};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpzyb3u199.js:17:10)\n    at Object.<anonymous> (/tmp/tmpzyb3u199.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] !== \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmphybpjd0c.js:17:10)\n    at Object.<anonymous> (/tmp/tmphybpjd0c.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != null && dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for (var key in dict1){\n        if (dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpt_h0xtt8.js:16:10)\n    at Object.<anonymous> (/tmp/tmpt_h0xtt8.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp_irzy133.js:16:10)\n    at Object.<anonymous> (/tmp/tmp_irzy133.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    console.log(dict1);\n}\ndrop_empty({'a':'','b':'','c':1});\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "{ c: 1 }\n{ c1: 'Red', c2: 'Green', c3: undefined }\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmppls0shx3.js:17:10)\n    at Object.<anonymous> (/tmp/tmppls0shx3.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmplmf_7h7j.js:17:10)\n    at Object.<anonymous> (/tmp/tmplmf_7h7j.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for (var key in dict1){\n        if (dict1[key] == null || dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for (var key in dict1){\n        if (dict1[key] == null || dict1[key] == undefined || dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nvar dict1 = {a: 1, b: 2, c: \"\", d: null, e: undefined, f: \"Python\"};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmplmf_7h7j.js:17:10)\n    at Object.<anonymous> (/tmp/tmplmf_7h7j.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var i in dict1){\n        if(dict1[i]==''){\n            delete dict1[i];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpslhacyri.js:15:10)\n    at Object.<anonymous> (/tmp/tmpslhacyri.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != ''){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp_6uikdqb.js:16:10)\n    at Object.<anonymous> (/tmp/tmp_6uikdqb.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key]==''){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmphilr2whq.js:15:10)\n    at Object.<anonymous> (/tmp/tmphilr2whq.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp5lt1ltcw.js:15:10)\n    at Object.<anonymous> (/tmp/tmp5lt1ltcw.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n  var dict2 = {};\n  for(var key in dict1){\n    if(dict1[key] != \"\"){\n      dict2[key] = dict1[key];\n    }\n  }\n  return dict2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpd7r6izu2.js:16:10)\n    at Object.<anonymous> (/tmp/tmpd7r6izu2.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == ''){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nvar dict1 = {'a':'','b':'','c':'','d':'','e':'','f':'','g':'','h':'','i':'','j':'','k':'','l':'','m':'','n':'','o':'','p':'','q':'','r':'','s':'','t':'','u':'','v':'','w':'','x':'','y':'','z':''};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp64y9r96h.js:16:10)\n    at Object.<anonymous> (/tmp/tmp64y9r96h.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for (var key in dict1){\n        if (dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpm09wlgx_.js:15:10)\n    at Object.<anonymous> (/tmp/tmpm09wlgx_.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == ''){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp_n4qdzve.js:15:10)\n    at Object.<anonymous> (/tmp/tmp_n4qdzve.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key]==null || dict1[key]==\"\" || dict1[key]==undefined){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp5lt1ltcw.js:15:10)\n    at Object.<anonymous> (/tmp/tmp5lt1ltcw.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key]==\"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpbh1o6ec3.js:15:10)\n    at Object.<anonymous> (/tmp/tmpbh1o6ec3.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp5lt1ltcw.js:15:10)\n    at Object.<anonymous> (/tmp/tmp5lt1ltcw.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key]==\"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpbh1o6ec3.js:15:10)\n    at Object.<anonymous> (/tmp/tmpbh1o6ec3.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\n\nvar dict1 = {name: \"\", age: \"\", address: \"\", email: \"\"};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpbrb4udb_.js:17:10)\n    at Object.<anonymous> (/tmp/tmpbrb4udb_.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for (var key in dict1){\n        if (dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpt_h0xtt8.js:16:10)\n    at Object.<anonymous> (/tmp/tmpt_h0xtt8.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nvar dict1 = {name: \"\", age: \"\", country: \"USA\"};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpp62jns_y.js:17:10)\n    at Object.<anonymous> (/tmp/tmpp62jns_y.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nvar dict1 = {a: \"\", b: \"\", c: \"d\"};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp5ot50bbg.js:18:10)\n    at Object.<anonymous> (/tmp/tmp5ot50bbg.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != null && dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == null || dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmplmf_7h7j.js:17:10)\n    at Object.<anonymous> (/tmp/tmplmf_7h7j.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var i in dict1){\n        if(dict1[i] != \"\"){\n            dict2[i] = dict1[i];\n        }\n    }\n    return dict2;\n}\n\nvar dict1 = {a: \"\", b: \"\", c: \"d\", e: \"f\"};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpizvze0ab.js:18:10)\n    at Object.<anonymous> (/tmp/tmpizvze0ab.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] !== \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nvar dict1 = {a: 1, b: 2, c: \"\", d: 4};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpea8l4s2k.js:18:10)\n    at Object.<anonymous> (/tmp/tmpea8l4s2k.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var new_dict = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            new_dict[key] = dict1[key];\n        }\n    }\n    return new_dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpqay9el4a.js:17:10)\n    at Object.<anonymous> (/tmp/tmpqay9el4a.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nvar dict1 = {\n    \"name\": \"\",\n    \"age\": \"\",\n    \"sex\": \"\",\n    \"address\": \"\",\n    \"phone\": \"\",\n    \"email\": \"\",\n    \"website\": \"\",\n    \"company\": \"\",\n    \"job\": \"\"\n};\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmppzsyzxdo.js:29:10)\n    at Object.<anonymous> (/tmp/tmppzsyzxdo.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == null || dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] !== ''){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpc_s3ytmm.js:16:10)\n    at Object.<anonymous> (/tmp/tmpc_s3ytmm.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp5lt1ltcw.js:15:10)\n    at Object.<anonymous> (/tmp/tmp5lt1ltcw.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for (var key in dict1){\n        if(dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpg4k2_1fm.js:15:10)\n    at Object.<anonymous> (/tmp/tmpg4k2_1fm.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != ''){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nvar dict1 = {'a':'','b':'','c':'','d':'','e':''};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpeoucedbg.js:18:10)\n    at Object.<anonymous> (/tmp/tmpeoucedbg.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp5lt1ltcw.js:15:10)\n    at Object.<anonymous> (/tmp/tmp5lt1ltcw.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key]==''){\n            delete dict1[key];\n        }\n    }\n    console.log(dict1);\n}\ndrop_empty({'name':'','age':''});\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "{}\n{ c1: 'Red', c2: 'Green', c3: undefined }\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpiai2ee34.js:17:10)\n    at Object.<anonymous> (/tmp/tmpiai2ee34.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] !== null && dict1[key] !== \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp9ttkgygw.js:16:10)\n    at Object.<anonymous> (/tmp/tmp9ttkgygw.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == null || dict1[key] == ''){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var i in dict1){\n        if(dict1[i] == \"\"){\n            delete dict1[i];\n        }\n    }\n    return dict1;\n}\n\nvar dict1 = {a: \"\", b: \"\", c: \"d\"};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp9ic0e_zo.js:17:10)\n    at Object.<anonymous> (/tmp/tmp9ic0e_zo.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != null && dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for (var key in dict1){\n        if (dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpm09wlgx_.js:15:10)\n    at Object.<anonymous> (/tmp/tmpm09wlgx_.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmplmf_7h7j.js:17:10)\n    at Object.<anonymous> (/tmp/tmplmf_7h7j.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmplmf_7h7j.js:17:10)\n    at Object.<anonymous> (/tmp/tmplmf_7h7j.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == \"\" || dict1[key] == null){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp5lt1ltcw.js:15:10)\n    at Object.<anonymous> (/tmp/tmp5lt1ltcw.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != ''){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpqsqenok1.js:17:10)\n    at Object.<anonymous> (/tmp/tmpqsqenok1.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp_irzy133.js:16:10)\n    at Object.<anonymous> (/tmp/tmp_irzy133.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for (var key in dict1){\n        if (dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\n\nvar dict1 = {name: \"\", age: \"\", address: \"\", phone: \"\"};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpkdfbpxab.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkdfbpxab.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for (var key in dict1){\n        if (dict1[key] == null || dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for (var key in dict1){\n        if (dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpt_h0xtt8.js:16:10)\n    at Object.<anonymous> (/tmp/tmpt_h0xtt8.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for (var key in dict1){\n        if (dict1[key] == ''){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp58z1nbp2.js:15:10)\n    at Object.<anonymous> (/tmp/tmp58z1nbp2.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpph7o_79g.js:16:10)\n    at Object.<anonymous> (/tmp/tmpph7o_79g.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpka_xbh53.js:16:10)\n    at Object.<anonymous> (/tmp/tmpka_xbh53.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == null || dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for (var key in dict1){\n        if (dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpt_h0xtt8.js:16:10)\n    at Object.<anonymous> (/tmp/tmpt_h0xtt8.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != null && dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nvar dict1 = {a: 1, b: 2, c: null, d: undefined, e: \"\", f: \"f\"};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var i in dict1){\n        if(dict1[i] == \"\"){\n            delete dict1[i];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpgefon9hq.js:15:10)\n    at Object.<anonymous> (/tmp/tmpgefon9hq.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmplmf_7h7j.js:17:10)\n    at Object.<anonymous> (/tmp/tmplmf_7h7j.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for (var key in dict1){\n        if (dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpm09wlgx_.js:15:10)\n    at Object.<anonymous> (/tmp/tmpm09wlgx_.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp5lt1ltcw.js:15:10)\n    at Object.<anonymous> (/tmp/tmp5lt1ltcw.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var i in dict1){\n        if(dict1[i] == \"\"){\n            delete dict1[i];\n        }\n    }\n    return dict1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp2jvnquv8.js:16:10)\n    at Object.<anonymous> (/tmp/tmp2jvnquv8.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key]==''){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmphilr2whq.js:15:10)\n    at Object.<anonymous> (/tmp/tmphilr2whq.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == ''){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp_n4qdzve.js:15:10)\n    at Object.<anonymous> (/tmp/tmp_n4qdzve.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp5lt1ltcw.js:15:10)\n    at Object.<anonymous> (/tmp/tmp5lt1ltcw.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == null || dict1[key] == \"\" || dict1[key] == undefined){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var i in dict1){\n        if(dict1[i]==''){\n            delete dict1[i];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpslhacyri.js:15:10)\n    at Object.<anonymous> (/tmp/tmpslhacyri.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp5lt1ltcw.js:15:10)\n    at Object.<anonymous> (/tmp/tmp5lt1ltcw.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmplmf_7h7j.js:17:10)\n    at Object.<anonymous> (/tmp/tmplmf_7h7j.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpph7o_79g.js:16:10)\n    at Object.<anonymous> (/tmp/tmpph7o_79g.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == null || dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] !== \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nvar dict1 = {\n    name: \"\",\n    age: \"\",\n    gender: \"\",\n    email: \"\",\n    city: \"\",\n    country: \"\",\n    phone: \"\"\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpvcgan34h.js:27:10)\n    at Object.<anonymous> (/tmp/tmpvcgan34h.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == \"\"){\n            delete dict1[key]\n        }\n    }\n    return dict1\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpza50qrq6.js:15:10)\n    at Object.<anonymous> (/tmp/tmpza50qrq6.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] === null || dict1[key] === undefined || dict1[key] === \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nvar dict1 = {\n    a: \"\",\n    b: \"b\",\n    c: \"c\",\n    d: \"\",\n    e: \"e\",\n    f: \"\",\n    g: \"g\"\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmptvq3v6h2.js:27:10)\n    at Object.<anonymous> (/tmp/tmptvq3v6h2.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp5lt1ltcw.js:15:10)\n    at Object.<anonymous> (/tmp/tmp5lt1ltcw.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var i in dict1){\n        if(dict1[i] == \"\"){\n            delete dict1[i];\n        }\n    }\n    return dict1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp2jvnquv8.js:16:10)\n    at Object.<anonymous> (/tmp/tmp2jvnquv8.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != ''){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpqsqenok1.js:17:10)\n    at Object.<anonymous> (/tmp/tmpqsqenok1.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp5lt1ltcw.js:15:10)\n    at Object.<anonymous> (/tmp/tmp5lt1ltcw.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != ''){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp_6uikdqb.js:16:10)\n    at Object.<anonymous> (/tmp/tmp_6uikdqb.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp5lt1ltcw.js:15:10)\n    at Object.<anonymous> (/tmp/tmp5lt1ltcw.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpph7o_79g.js:16:10)\n    at Object.<anonymous> (/tmp/tmpph7o_79g.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key]==''){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmphilr2whq.js:15:10)\n    at Object.<anonymous> (/tmp/tmphilr2whq.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmplmf_7h7j.js:17:10)\n    at Object.<anonymous> (/tmp/tmplmf_7h7j.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for (var key in dict1){\n        if (dict1[key] == null){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmplmf_7h7j.js:17:10)\n    at Object.<anonymous> (/tmp/tmplmf_7h7j.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == null || dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != ''){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpqsqenok1.js:17:10)\n    at Object.<anonymous> (/tmp/tmpqsqenok1.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nvar dict1 = {\n    \"name\": \"\",\n    \"age\": \"\",\n    \"email\": \"\",\n    \"phone\": \"\",\n    \"address\": \"\",\n    \"city\": \"\",\n    \"state\": \"\",\n    \"zip\": \"\",\n    \"country\": \"\"\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpvukviz7l.js:29:10)\n    at Object.<anonymous> (/tmp/tmpvukviz7l.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmplmf_7h7j.js:17:10)\n    at Object.<anonymous> (/tmp/tmplmf_7h7j.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp_irzy133.js:16:10)\n    at Object.<anonymous> (/tmp/tmp_irzy133.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != ''){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpqsqenok1.js:17:10)\n    at Object.<anonymous> (/tmp/tmpqsqenok1.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var new_dict = {};\n    for(var key in dict1){\n        if(dict1[key] != ''){\n            new_dict[key] = dict1[key];\n        }\n    }\n    return new_dict;\n}\n\nvar dict1 = {'a':'','b':'','c':'','d':'','e':''};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmplcbq5jzx.js:18:10)\n    at Object.<anonymous> (/tmp/tmplcbq5jzx.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp5lt1ltcw.js:15:10)\n    at Object.<anonymous> (/tmp/tmp5lt1ltcw.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp5lt1ltcw.js:15:10)\n    at Object.<anonymous> (/tmp/tmp5lt1ltcw.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for (var key in dict1){\n        if (dict1[key] == null || dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] !== null && dict1[key] !== \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpl2hkefsb.js:16:10)\n    at Object.<anonymous> (/tmp/tmpl2hkefsb.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for (var key in dict1){\n        if (dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpm09wlgx_.js:15:10)\n    at Object.<anonymous> (/tmp/tmpm09wlgx_.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != null && dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == null || dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for (var key in dict1){\n        if (dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpm09wlgx_.js:15:10)\n    at Object.<anonymous> (/tmp/tmpm09wlgx_.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var new_dict = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            new_dict[key] = dict1[key];\n        }\n    }\n    return new_dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp6zbbm6zj.js:16:10)\n    at Object.<anonymous> (/tmp/tmp6zbbm6zj.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var i in dict1){\n        if(dict1[i] == \"\"){\n            delete dict1[i];\n        }\n    }\n    return dict1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp2jvnquv8.js:16:10)\n    at Object.<anonymous> (/tmp/tmp2jvnquv8.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key]==\"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpbh1o6ec3.js:15:10)\n    at Object.<anonymous> (/tmp/tmpbh1o6ec3.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmplmf_7h7j.js:17:10)\n    at Object.<anonymous> (/tmp/tmplmf_7h7j.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    let dict2 = {};\n    for (let key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp_edutivf.js:16:10)\n    at Object.<anonymous> (/tmp/tmp_edutivf.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp5lt1ltcw.js:15:10)\n    at Object.<anonymous> (/tmp/tmp5lt1ltcw.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for (var key in dict1){\n        if (dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpm09wlgx_.js:15:10)\n    at Object.<anonymous> (/tmp/tmpm09wlgx_.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp_irzy133.js:16:10)\n    at Object.<anonymous> (/tmp/tmp_irzy133.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp_irzy133.js:16:10)\n    at Object.<anonymous> (/tmp/tmp_irzy133.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for (var key in dict1) {\n        if (dict1[key] == null || dict1[key] == \"\") {\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp5lt1ltcw.js:15:10)\n    at Object.<anonymous> (/tmp/tmp5lt1ltcw.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    let dict2 = {};\n    for (let key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpoj1uopm0.js:17:10)\n    at Object.<anonymous> (/tmp/tmpoj1uopm0.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp5lt1ltcw.js:15:10)\n    at Object.<anonymous> (/tmp/tmp5lt1ltcw.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for (var key in dict1){\n        if (dict1[key] == ''){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp58z1nbp2.js:15:10)\n    at Object.<anonymous> (/tmp/tmp58z1nbp2.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for (var x in dict1){\n        if (dict1[x] == \"\"){\n            delete dict1[x];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpo1c1m1is.js:15:10)\n    at Object.<anonymous> (/tmp/tmpo1c1m1is.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp5lt1ltcw.js:15:10)\n    at Object.<anonymous> (/tmp/tmp5lt1ltcw.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nvar dict1 = {\n    \"name\": \"\",\n    \"age\": \"\",\n    \"sex\": \"\",\n    \"address\": \"\",\n    \"phone\": \"\",\n    \"email\": \"\",\n    \"website\": \"\",\n    \"company\": \"\",\n    \"job\": \"\"\n};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpfld8d41n.js:28:10)\n    at Object.<anonymous> (/tmp/tmpfld8d41n.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp5lt1ltcw.js:15:10)\n    at Object.<anonymous> (/tmp/tmp5lt1ltcw.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for (var key in dict1){\n        if (dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpm09wlgx_.js:15:10)\n    at Object.<anonymous> (/tmp/tmpm09wlgx_.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] !== \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nvar dict1 = {a: 1, b: \"\", c: 3};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpbzx5wgqh.js:18:10)\n    at Object.<anonymous> (/tmp/tmpbzx5wgqh.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given object.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key]==''){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmphilr2whq.js:15:10)\n    at Object.<anonymous> (/tmp/tmphilr2whq.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    }
  ]
}