{
  "name": "mbpp_460_Extract",
  "language": "js",
  "prompt": "//Write a jsthon function to get the first element of each subarray.\nfunction Extract(lst){\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_460_Extract.py",
  "prompt_terminology": "reworded",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Extract;\n  assert.deepEqual(candidate([[1, 2], [3, 4, 5], [6, 7, 8, 9]]),[1, 3, 6]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5]]),[1, 4]);\n  assert.deepEqual(candidate([[9, 8, 1], [1, 2]]),[9, 1]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    var new_list = [];\n    for(var i = 0; i < lst.length; i++){\n        new_list.push(lst[i][0]);\n    }\n    return new_list;\n}",
    "    var result = [];\n    for(var i = 0; i < lst.length; i++){\n        for(var j = 0; j < lst[i].length; j++){\n            result.push(lst[i][j]);\n            break;\n        }\n    }\n    return result;\n}\n",
    "    var result = [];\n    for(var i=0; i < lst.length; i++){\n        for(var j=0; j < lst[i].length; j++){\n            result.push(lst[i][j]);\n            break;\n        }\n    }\n    return result;\n}\nvar lst = [[1,2,3],[4,5,6],[7,8,9]];",
    "    return lst.map(function(val){\n        return val[0];\n    });\n}",
    "    return lst.map(function(val){\n        return val[0];\n    });\n}",
    "    var result = [];\n    for(var i=0;i<lst.length;i++){\n        for(var j=0;j<lst[i].length;j++){\n            result.push(lst[i][j]);\n            break;\n        }\n    }\n    return result;\n}\nvar lst = [[1,2,3],[4,5,6],[7,8,9]];",
    "    var result = [];\n    for(var i=0; i<lst.length; i++){\n        for(var j=0; j<lst[i].length; j++){\n            result.push(lst[i][j]);\n            break;\n        }\n    }\n    return result;\n}\nvar lst = [[1,2,3],[4,5,6],[7,8,9]];",
    "    var result = [];\n    for(var i = 0; i < lst.length; i++){\n        for(var j = 0; j < lst[i].length; j++){\n            result.push(lst[i][j]);\n            break;\n        }\n    }\n    return result;\n}\nvar lst = [[1,2,3],[4,5,6],[7,8,9]];",
    "    var result = [];\n    for(var i=0;i<lst.length;i++){\n        result.push(lst[i][0]);\n    }\n    return result;\n}",
    "    var result = [];\n    for(var i=0; i<lst.length; i++){\n        result.push(lst[i][0]);\n    }\n    return result;\n}",
    "    var result = [];\n    for(var i = 0; i < lst.length; i++){\n        for(var j = 0; j < lst[i].length; j++){\n            result.push(lst[i][j]);\n            break;\n        }\n    }\n    return result;\n}",
    "    return lst.map(function(val){\n        return val[0];\n    });\n}",
    "    var result = [];\n    for(var i=0;i<lst.length;i++){\n        result.push(lst[i][0]);\n    }\n    return result;\n}",
    "    var result = [];\n    for(var i=0;i<lst.length;i++){\n        result.push(lst[i][0]);\n    }\n    return result;\n}",
    "    var result = [];\n    for (var i = 0; i < lst.length; i++){\n        result.push(lst[i][0]);\n    }\n    return result;\n}\n",
    "    return lst.map(function(val){\n        return val[0];\n    });\n}",
    "    var result = [];\n    for (var i = 0; i < lst.length; i++){\n        for (var j = 0; j < lst[i].length; j++){\n            result.push(lst[i][j]);\n            break;\n        }\n    }\n    return result;\n}\nvar lst = [[1,2,3],[4,5,6],[7,8,9]];",
    "    var result = [];\n    for(var i = 0; i < lst.length; i++){\n        result.push(lst[i][0]);\n    }\n    return result;\n}\n",
    "    var result = [];\n    for(var i=0;i<lst.length;i++){\n        result.push(lst[i][0]);\n    }\n    return result;\n}",
    "    return lst.map(function(val){\n        return val[0];\n    });\n}"
  ]
}