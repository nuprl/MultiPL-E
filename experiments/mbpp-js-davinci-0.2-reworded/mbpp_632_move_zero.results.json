{
  "name": "mbpp_632_move_zero",
  "language": "js",
  "prompt": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_632_move_zero.py",
  "prompt_terminology": "reworded",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "results": [
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    var len = num_list.length;\n    for(var i = 0; i < len; i++){\n        if(num_list[i] != 0){\n            num_list[count++] = num_list[i];\n        }\n    }\n    while(count < len){\n        num_list[count++] = 0;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    var temp = [];\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            temp[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        temp[count] = 0;\n        count++;\n    }\n    return temp;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var temp = [];\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            temp[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        temp[count] = 0;\n        count++;\n    }\n    return temp;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i=0;i<num_list.length;i++){\n        if(num_list[i]!=0){\n            num_list[count++] = num_list[i];\n        }\n    }\n    while(count<num_list.length){\n        num_list[count++] = 0;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for (var i = 0; i < num_list.length; i++){\n        if (num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while (count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    var l = num_list.length;\n    for(var i = 0; i < l; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < l){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var zeros = 0;\n    var new_list = [];\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            new_list.push(num_list[i]);\n        }\n        else{\n            zeros++;\n        }\n    }\n    for(var i = 0; i < zeros; i++){\n        new_list.push(0);\n    }\n    return new_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var zeros = 0;\n    var new_list = [];\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            new_list.push(num_list[i]);\n        }\n        else{\n            zeros++;\n        }\n    }\n    while(zeros--){\n        new_list.push(0);\n    }\n    return new_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var a=[];\n    var b=[];\n    for(var i=0;i<num_list.length;i++){\n        if(num_list[i]==0){\n            a.push(num_list[i]);\n        }\n        else{\n            b.push(num_list[i]);\n        }\n    }\n    return b.concat(a);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var temp = [];\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            temp[count++] = num_list[i];\n        }\n    }\n    while(count < num_list.length){\n        temp[count++] = 0;\n    }\n    return temp;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    var temp = [];\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            temp[count++] = num_list[i];\n        }\n    }\n    while(count < num_list.length){\n        temp[count++] = 0;\n    }\n    return temp;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    var new_list = [];\n    for(var i=0; i<num_list.length; i++){\n        if(num_list[i] != 0){\n            new_list.push(num_list[i]);\n        }\n        else{\n            count += 1;\n        }\n    }\n    for(var j=0; j<count; j++){\n        new_list.push(0);\n    }\n    return new_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i=0; i<num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    \n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] !== prev ) {\n            a.push(num_list[i]);\n            b.push(1);\n        } else {\n            b[b.length-1]++;\n        }\n        prev = num_list[i];\n    }\n    \n    return [a, b];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    0,\n    1,\n    2,\n    3,\n    4\n  ],\n  [\n    2,\n    1,\n    1,\n    1,\n    1\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0\n]\n    at test (/tmp/tmpqi3xkg9q.js:23:10)\n    at Object.<anonymous> (/tmp/tmpqi3xkg9q.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 0, 1, 2, 3, 4 ], [ 2, 1, 1, 1, 1 ] ],\n  expected: [ 1, 2, 3, 4, 0, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] !== prev ) {\n            a.push(num_list[i]);\n            b.push(1);\n        } else {\n            b[b.length-1]++;\n        }\n        prev = num_list[i];\n    }\n    return [a, b];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    0,\n    1,\n    2,\n    3,\n    4\n  ],\n  [\n    2,\n    1,\n    1,\n    1,\n    1\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0\n]\n    at test (/tmp/tmp7ixveakr.js:21:10)\n    at Object.<anonymous> (/tmp/tmp7ixveakr.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 0, 1, 2, 3, 4 ], [ 2, 1, 1, 1, 1 ] ],\n  expected: [ 1, 2, 3, 4, 0, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    var len = num_list.length;\n    for(var i = 0; i < len; i++){\n        if(num_list[i] != 0){\n            num_list[count++] = num_list[i];\n        }\n    }\n    while(count < len){\n        num_list[count++] = 0;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    var new_list = [];\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            new_list.push(num_list[i]);\n        }\n        else{\n            count += 1;\n        }\n    }\n    for(var j = 0; j < count; j++){\n        new_list.push(0);\n    }\n    return new_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123953,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    var list_len = num_list.length;\n    for(var i=0; i<list_len; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < list_len){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123953,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] !== prev ) {\n            a.push(num_list[i]);\n            b.push(1);\n        } else {\n            b[b.length-1]++;\n        }\n        prev = num_list[i];\n    }\n    return [a, b];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    0,\n    1,\n    2,\n    3,\n    4\n  ],\n  [\n    2,\n    1,\n    1,\n    1,\n    1\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0\n]\n    at test (/tmp/tmp7ixveakr.js:21:10)\n    at Object.<anonymous> (/tmp/tmp7ixveakr.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 0, 1, 2, 3, 4 ], [ 2, 1, 1, 1, 1 ] ],\n  expected: [ 1, 2, 3, 4, 0, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    \n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] !== prev ) {\n            a.push(num_list[i]);\n            b.push(1);\n        } else {\n            b[b.length-1]++;\n        }\n        prev = num_list[i];\n    }\n    \n    return [a, b];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    0,\n    1,\n    2,\n    3,\n    4\n  ],\n  [\n    2,\n    1,\n    1,\n    1,\n    1\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0\n]\n    at test (/tmp/tmpqi3xkg9q.js:23:10)\n    at Object.<anonymous> (/tmp/tmpqi3xkg9q.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 0, 1, 2, 3, 4 ], [ 2, 1, 1, 1, 1 ] ],\n  expected: [ 1, 2, 3, 4, 0, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] !== prev ) {\n            a.push(num_list[i]);\n            b.push(1);\n        } else {\n            b[b.length-1]++;\n        }\n        prev = num_list[i];\n    }\n    return [a, b];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    0,\n    1,\n    2,\n    3,\n    4\n  ],\n  [\n    2,\n    1,\n    1,\n    1,\n    1\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0\n]\n    at test (/tmp/tmp7ixveakr.js:21:10)\n    at Object.<anonymous> (/tmp/tmp7ixveakr.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 0, 1, 2, 3, 4 ], [ 2, 1, 1, 1, 1 ] ],\n  expected: [ 1, 2, 3, 4, 0, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var zeros = 0;\n    var new_list = [];\n    for(var i=0; i<num_list.length; i++){\n        if(num_list[i] != 0){\n            new_list.push(num_list[i]);\n        }\n        else{\n            zeros++;\n        }\n    }\n    for(var i=0; i<zeros; i++){\n        new_list.push(0);\n    }\n    return new_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123953,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    var temp = [];\n    for(var i=0; i<num_list.length; i++){\n        if(num_list[i] != 0){\n            temp[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        temp[count] = 0;\n        count++;\n    }\n    return temp;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] !== prev ) {\n            a.push(num_list[i]);\n            b.push(1);\n        } else {\n            b[b.length-1]++;\n        }\n        prev = num_list[i];\n    }\n    return [a, b];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    0,\n    1,\n    2,\n    3,\n    4\n  ],\n  [\n    2,\n    1,\n    1,\n    1,\n    1\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0\n]\n    at test (/tmp/tmp7ixveakr.js:21:10)\n    at Object.<anonymous> (/tmp/tmp7ixveakr.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 0, 1, 2, 3, 4 ], [ 2, 1, 1, 1, 1 ] ],\n  expected: [ 1, 2, 3, 4, 0, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    var new_list = [];\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            new_list.push(num_list[i]);\n        }\n        else{\n            count += 1;\n        }\n    }\n    for(var j = 0; j < count; j++){\n        new_list.push(0);\n    }\n    return new_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123953,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    var n = num_list.length;\n    for(var i = 0; i < n; i++){\n        if(num_list[i] != 0){\n            num_list[count++] = num_list[i];\n        }\n    }\n    while(count < n){\n        num_list[count++] = 0;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123953,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count=0;\n    var temp=[];\n    for(var i=0;i<num_list.length;i++){\n        if(num_list[i]!=0){\n            temp[count]=num_list[i];\n            count++;\n        }\n    }\n    while(count<num_list.length){\n        temp[count]=0;\n        count++;\n    }\n    return temp;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    \n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] !== prev ) {\n            a.push(num_list[i]);\n            b.push(1);\n        } else {\n            b[b.length-1]++;\n        }\n        prev = num_list[i];\n    }\n    \n    return [a, b];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    0,\n    1,\n    2,\n    3,\n    4\n  ],\n  [\n    2,\n    1,\n    1,\n    1,\n    1\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0\n]\n    at test (/tmp/tmpqi3xkg9q.js:23:10)\n    at Object.<anonymous> (/tmp/tmpqi3xkg9q.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 0, 1, 2, 3, 4 ], [ 2, 1, 1, 1, 1 ] ],\n  expected: [ 1, 2, 3, 4, 0, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    var list_length = num_list.length;\n    for(var i = 0; i < list_length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < list_length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] !== prev ) {\n            a.push(num_list[i]);\n            b.push(1);\n        } else {\n            b[b.length-1]++;\n        }\n        prev = num_list[i];\n    }\n    return [a, b];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    0,\n    1,\n    2,\n    3,\n    4\n  ],\n  [\n    2,\n    1,\n    1,\n    1,\n    1\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0\n]\n    at test (/tmp/tmp7ixveakr.js:21:10)\n    at Object.<anonymous> (/tmp/tmp7ixveakr.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 0, 1, 2, 3, 4 ], [ 2, 1, 1, 1, 1 ] ],\n  expected: [ 1, 2, 3, 4, 0, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    var new_list = [];\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            new_list.push(num_list[i]);\n        }\n        else{\n            count++;\n        }\n    }\n    for(var i = 0; i < count; i++){\n        new_list.push(0);\n    }\n    return new_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123953,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    var n = num_list.length;\n    for(var i = 0; i < n; i++){\n        if(num_list[i] != 0){\n            num_list[count++] = num_list[i];\n        }\n    }\n    while(count < n){\n        num_list[count++] = 0;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123953,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    var temp = [];\n    for(var i=0; i<num_list.length; i++){\n        if(num_list[i] != 0){\n            temp[count++] = num_list[i];\n        }\n    }\n    while(count < num_list.length){\n        temp[count++] = 0;\n    }\n    return temp;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123953,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    var new_list = [];\n    for(var i=0; i<num_list.length; i++){\n        if(num_list[i]!=0){\n            new_list.push(num_list[i]);\n        }\n        else{\n            count++;\n        }\n    }\n    while(count>0){\n        new_list.push(0);\n        count--;\n    }\n    return new_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123953,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    \n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] !== prev ) {\n            a.push(num_list[i]);\n            b.push(1);\n        } else {\n            b[b.length-1]++;\n        }\n        prev = num_list[i];\n    }\n    \n    return [a, b];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    0,\n    1,\n    2,\n    3,\n    4\n  ],\n  [\n    2,\n    1,\n    1,\n    1,\n    1\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0\n]\n    at test (/tmp/tmpqi3xkg9q.js:23:10)\n    at Object.<anonymous> (/tmp/tmpqi3xkg9q.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 0, 1, 2, 3, 4 ], [ 2, 1, 1, 1, 1 ] ],\n  expected: [ 1, 2, 3, 4, 0, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    \n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] !== prev ) {\n            a.push(num_list[i]);\n            b.push(1);\n        } else {\n            b[b.length-1]++;\n        }\n        prev = num_list[i];\n    }\n    \n    return [a, b];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    0,\n    1,\n    2,\n    3,\n    4\n  ],\n  [\n    2,\n    1,\n    1,\n    1,\n    1\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0\n]\n    at test (/tmp/tmpqi3xkg9q.js:23:10)\n    at Object.<anonymous> (/tmp/tmpqi3xkg9q.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 0, 1, 2, 3, 4 ], [ 2, 1, 1, 1, 1 ] ],\n  expected: [ 1, 2, 3, 4, 0, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var zeros = 0;\n    var new_list = [];\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            new_list.push(num_list[i]);\n        }\n        else{\n            zeros++;\n        }\n    }\n    for(var i = 0; i < zeros; i++){\n        new_list.push(0);\n    }\n    return new_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    \n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] !== prev ) {\n            a.push(num_list[i]);\n            b.push(1);\n        } else {\n            b[b.length-1]++;\n        }\n        prev = num_list[i];\n    }\n    \n    return [a, b];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    0,\n    1,\n    2,\n    3,\n    4\n  ],\n  [\n    2,\n    1,\n    1,\n    1,\n    1\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0\n]\n    at test (/tmp/tmpqi3xkg9q.js:23:10)\n    at Object.<anonymous> (/tmp/tmpqi3xkg9q.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 0, 1, 2, 3, 4 ], [ 2, 1, 1, 1, 1 ] ],\n  expected: [ 1, 2, 3, 4, 0, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    var i = 0;\n    while(i < num_list.length){\n        if(num_list[i] == 0){\n            num_list.splice(i,1);\n            count++;\n        }\n        else{\n            i++;\n        }\n    }\n    for(i = 0; i < count; i++){\n        num_list.push(0);\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i=0; i<num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var zeros = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] === 0){\n            zeros++;\n        }\n        else{\n            num_list[i - zeros] = num_list[i];\n        }\n    }\n    while(zeros--){\n        num_list[num_list.length - zeros - 1] = 0;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123953,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    var temp = [];\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            temp[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        temp[count] = 0;\n        count++;\n    }\n    return temp;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var temp = [];\n    var count = 0;\n    for(var i=0;i<num_list.length;i++){\n        if(num_list[i]!=0){\n            temp[count++] = num_list[i];\n        }\n    }\n    while(count<num_list.length){\n        temp[count++] = 0;\n    }\n    return temp;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var temp = [];\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            temp[count++] = num_list[i];\n        }\n    }\n    while(count < num_list.length){\n        temp[count++] = 0;\n    }\n    return temp;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    var new_list = [];\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            new_list.push(num_list[i]);\n        }\n        else{\n            count++;\n        }\n    }\n    for(var i = 0; i < count; i++){\n        new_list.push(0);\n    }\n    return new_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123953,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var temp = [];\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            temp[count++] = num_list[i];\n        }\n    }\n    while(count < num_list.length){\n        temp[count++] = 0;\n    }\n    return temp;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i=0;i<num_list.length;i++){\n        if(num_list[i] != 0){\n            num_list[count++] = num_list[i];\n        }\n    }\n    while(count < num_list.length){\n        num_list[count++] = 0;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var zeros = [];\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i=0;i<num_list.length;i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123953,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for (var i = 0; i < num_list.length; i++){\n        if (num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while (count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    \n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] !== prev ) {\n            a.push(num_list[i]);\n            b.push(1);\n        } else {\n            b[b.length-1]++;\n        }\n        prev = num_list[i];\n    }\n    \n    return [a, b];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    0,\n    1,\n    2,\n    3,\n    4\n  ],\n  [\n    2,\n    1,\n    1,\n    1,\n    1\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0\n]\n    at test (/tmp/tmpqi3xkg9q.js:23:10)\n    at Object.<anonymous> (/tmp/tmpqi3xkg9q.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 0, 1, 2, 3, 4 ], [ 2, 1, 1, 1, 1 ] ],\n  expected: [ 1, 2, 3, 4, 0, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var zeros = [];\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] == 0){\n            zeros[count] = num_list[i];\n            count++;\n        }\n    }\n    return zeros;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0\n]\n    at test (/tmp/tmp3fxa321d.js:18:10)\n    at Object.<anonymous> (/tmp/tmp3fxa321d.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0 ],\n  expected: [ 1, 2, 3, 4, 0, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count++] = num_list[i];\n        }\n    }\n    while(count < num_list.length){\n        num_list[count++] = 0;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    \n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] !== prev ) {\n            a.push(num_list[i]);\n            b.push(1);\n        } else {\n            b[b.length-1]++;\n        }\n        prev = num_list[i];\n    }\n    \n    return [a, b];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    0,\n    1,\n    2,\n    3,\n    4\n  ],\n  [\n    2,\n    1,\n    1,\n    1,\n    1\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0\n]\n    at test (/tmp/tmpqi3xkg9q.js:23:10)\n    at Object.<anonymous> (/tmp/tmpqi3xkg9q.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 0, 1, 2, 3, 4 ], [ 2, 1, 1, 1, 1 ] ],\n  expected: [ 1, 2, 3, 4, 0, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i=0; i<num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var zero_list = [];\n    var non_zero_list = [];\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] == 0){\n            zero_list.push(num_list[i]);\n        }\n        else{\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    var n = num_list.length;\n    for(var i = 0; i < n; i++){\n        if(num_list[i] != 0){\n            num_list[count++] = num_list[i];\n        }\n    }\n    while(count < n){\n        num_list[count++] = 0;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123953,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var a=[];\n    var b=[];\n    var c=[];\n    for(var i=0;i<num_list.length;i++){\n        if(num_list[i]!=0){\n            a.push(num_list[i]);\n        }\n        else{\n            b.push(num_list[i]);\n        }\n    }\n    c=a.concat(b);\n    return c;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for (var i = 0; i < num_list.length; i++){\n        if (num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while (count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    var temp = [];\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            temp[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        temp[count] = 0;\n        count++;\n    }\n    return temp;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i=0;i<num_list.length;i++){\n        if(num_list[i]!=0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count<num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count=0;\n    var n=num_list.length;\n    for(var i=0;i<n;i++){\n        if(num_list[i]!=0){\n            num_list[count]=num_list[i];\n            count++;\n        }\n    }\n    while(count<n){\n        num_list[count]=0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var zeros = [];\n    var count = 0;\n    for (var i = 0; i < num_list.length; i++){\n        if (num_list[i] == 0){\n            zeros[count] = num_list[i];\n            count += 1;\n        }\n    }\n    return zeros;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0\n]\n    at test (/tmp/tmp5ndu5_78.js:18:10)\n    at Object.<anonymous> (/tmp/tmp5ndu5_78.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0 ],\n  expected: [ 1, 2, 3, 4, 0, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    var length = num_list.length;\n    for(var i = 0; i < length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    var new_list = [];\n    for(var i=0; i<num_list.length; i++){\n        if(num_list[i] != 0){\n            new_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        new_list[count] = 0;\n        count++;\n    }\n    return new_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i=0;i<num_list.length;i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123953,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    var temp = [];\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            temp[count++] = num_list[i];\n        }\n    }\n    while(count < num_list.length){\n        temp[count++] = 0;\n    }\n    return temp;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i=0; i<num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count++] = num_list[i];\n        }\n    }\n    while(count < num_list.length){\n        num_list[count++] = 0;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    \n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] !== prev ) {\n            a.push(num_list[i]);\n            b.push(1);\n        } else {\n            b[b.length-1]++;\n        }\n        prev = num_list[i];\n    }\n    \n    return [a, b];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    0,\n    1,\n    2,\n    3,\n    4\n  ],\n  [\n    2,\n    1,\n    1,\n    1,\n    1\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0\n]\n    at test (/tmp/tmpqi3xkg9q.js:23:10)\n    at Object.<anonymous> (/tmp/tmpqi3xkg9q.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 0, 1, 2, 3, 4 ], [ 2, 1, 1, 1, 1 ] ],\n  expected: [ 1, 2, 3, 4, 0, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i=0; i<num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count += 1;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count += 1;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    var new_list = [];\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            new_list.push(num_list[i]);\n        }\n        else{\n            count += 1;\n        }\n    }\n    for(var i = 0; i < count; i++){\n        new_list.push(0);\n    }\n    return new_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    \n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] !== prev ) {\n            a.push(num_list[i]);\n            b.push(1);\n        } else {\n            b[b.length-1]++;\n        }\n        prev = num_list[i];\n    }\n    \n    return [a, b];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    0,\n    1,\n    2,\n    3,\n    4\n  ],\n  [\n    2,\n    1,\n    1,\n    1,\n    1\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0\n]\n    at test (/tmp/tmpqi3xkg9q.js:23:10)\n    at Object.<anonymous> (/tmp/tmpqi3xkg9q.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 0, 1, 2, 3, 4 ], [ 2, 1, 1, 1, 1 ] ],\n  expected: [ 1, 2, 3, 4, 0, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i=0;i<num_list.length;i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123953,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i=0;i<num_list.length;i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123953,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i=0;i<num_list.length;i++){\n        if(num_list[i]!=0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count<num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i=0;i<num_list.length;i++){\n        if(num_list[i]!=0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count<num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var zeros = [];\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    \n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] !== prev ) {\n            a.push(num_list[i]);\n            b.push(1);\n        } else {\n            b[b.length-1]++;\n        }\n        prev = num_list[i];\n    }\n    \n    return [a, b];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    0,\n    1,\n    2,\n    3,\n    4\n  ],\n  [\n    2,\n    1,\n    1,\n    1,\n    1\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0\n]\n    at test (/tmp/tmpqi3xkg9q.js:23:10)\n    at Object.<anonymous> (/tmp/tmpqi3xkg9q.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 0, 1, 2, 3, 4 ], [ 2, 1, 1, 1, 1 ] ],\n  expected: [ 1, 2, 3, 4, 0, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var a = [0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4];\n    var b = [];\n    var c = [];\n    for(var i=0;i<a.length;i++){\n        if(a[i]==0){\n            b.push(a[i]);\n        }\n        else{\n            c.push(a[i]);\n        }\n    }\n    return c.concat(b);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  10,\n  4,\n  1,\n  56,\n  2,\n  1,\n  3,\n  56,\n  4,\n  0,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0\n]\n    at test (/tmp/tmpz4zn7m6f.js:21:10)\n    at Object.<anonymous> (/tmp/tmpz4zn7m6f.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1, 2, 10,  4, 1, 56,\n    2, 1,  3, 56, 4,  0,\n    0, 0,  0,  0\n  ],\n  expected: [ 1, 2, 3, 4, 0, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var temp = [];\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            temp[count++] = num_list[i];\n        }\n    }\n    while(count < num_list.length){\n        temp[count++] = 0;\n    }\n    return temp;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i=0; i<num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    var num_list_len = num_list.length;\n    for(var i = 0; i < num_list_len; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list_len){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    var temp = [];\n    for(var i=0; i<num_list.length; i++){\n        if(num_list[i] != 0){\n            temp[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        temp[count] = 0;\n        count++;\n    }\n    return temp;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i=0; i<num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var temp = [];\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            temp[count++] = num_list[i];\n        }\n    }\n    while(count < num_list.length){\n        temp[count++] = 0;\n    }\n    return temp;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    var len = num_list.length;\n    for(var i=0;i<len;i++){\n        if(num_list[i]!=0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count<len){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    var result = [];\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            result[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        result[count] = 0;\n        count++;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i=0; i<num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count++] = num_list[i];\n        }\n    }\n    while(count < num_list.length){\n        num_list[count++] = 0;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    \n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] !== prev ) {\n            a.push(num_list[i]);\n            b.push(1);\n        } else {\n            b[b.length-1]++;\n        }\n        prev = num_list[i];\n    }\n    \n    return [a, b];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    0,\n    1,\n    2,\n    3,\n    4\n  ],\n  [\n    2,\n    1,\n    1,\n    1,\n    1\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0\n]\n    at test (/tmp/tmpqi3xkg9q.js:23:10)\n    at Object.<anonymous> (/tmp/tmpqi3xkg9q.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 0, 1, 2, 3, 4 ], [ 2, 1, 1, 1, 1 ] ],\n  expected: [ 1, 2, 3, 4, 0, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var num_list = [1,2,0,4,3,0,5,0];\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  4,\n  3,\n  5,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0\n]\n    at test (/tmp/tmp_42wmjui.js:22:10)\n    at Object.<anonymous> (/tmp/tmp_42wmjui.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1, 2, 4, 3,\n    5, 0, 0, 0\n  ],\n  expected: [ 1, 2, 3, 4, 0, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count++] = num_list[i];\n        }\n    }\n    while(count < num_list.length){\n        num_list[count++] = 0;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    var temp = [];\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            temp[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        temp[count] = 0;\n        count++;\n    }\n    return temp;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] !== prev ) {\n            a.push(num_list[i]);\n            b.push(1);\n        } else {\n            b[b.length-1]++;\n        }\n        prev = num_list[i];\n    }\n    return [a, b];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    0,\n    1,\n    2,\n    3,\n    4\n  ],\n  [\n    2,\n    1,\n    1,\n    1,\n    1\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0\n]\n    at test (/tmp/tmp7ixveakr.js:21:10)\n    at Object.<anonymous> (/tmp/tmp7ixveakr.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 0, 1, 2, 3, 4 ], [ 2, 1, 1, 1, 1 ] ],\n  expected: [ 1, 2, 3, 4, 0, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i=0; i<num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    var result = [];\n    for(var i=0; i<num_list.length; i++){\n        if(num_list[i] != 0){\n            result[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        result[count] = 0;\n        count++;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    \n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] !== prev ) {\n            a.push(num_list[i]);\n            b.push(1);\n        } else {\n            b[b.length-1]++;\n        }\n        prev = num_list[i];\n    }\n    \n    return [a, b];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    0,\n    1,\n    2,\n    3,\n    4\n  ],\n  [\n    2,\n    1,\n    1,\n    1,\n    1\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0\n]\n    at test (/tmp/tmpqi3xkg9q.js:23:10)\n    at Object.<anonymous> (/tmp/tmpqi3xkg9q.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 0, 1, 2, 3, 4 ], [ 2, 1, 1, 1, 1 ] ],\n  expected: [ 1, 2, 3, 4, 0, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var temp = [];\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            temp[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        temp[count] = 0;\n        count++;\n    }\n    return temp;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n\n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] !== prev ) {\n            a.push(num_list[i]);\n            b.push(1);\n        } else {\n            b[b.length-1]++;\n        }\n        prev = num_list[i];\n    }\n\n    return [a, b];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    0,\n    1,\n    2,\n    3,\n    4\n  ],\n  [\n    2,\n    1,\n    1,\n    1,\n    1\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0\n]\n    at test (/tmp/tmp_veixsy9.js:23:10)\n    at Object.<anonymous> (/tmp/tmp_veixsy9.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 0, 1, 2, 3, 4 ], [ 2, 1, 1, 1, 1 ] ],\n  expected: [ 1, 2, 3, 4, 0, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count++] = num_list[i];\n        }\n    }\n    while(count < num_list.length){\n        num_list[count++] = 0;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    \n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] !== prev ) {\n            a.push(num_list[i]);\n            b.push(1);\n        } else {\n            b[b.length-1]++;\n        }\n        prev = num_list[i];\n    }\n    \n    return [a, b];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    0,\n    1,\n    2,\n    3,\n    4\n  ],\n  [\n    2,\n    1,\n    1,\n    1,\n    1\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0\n]\n    at test (/tmp/tmpqi3xkg9q.js:23:10)\n    at Object.<anonymous> (/tmp/tmpqi3xkg9q.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 0, 1, 2, 3, 4 ], [ 2, 1, 1, 1, 1 ] ],\n  expected: [ 1, 2, 3, 4, 0, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    \n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] !== prev ) {\n            a.push(num_list[i]);\n            b.push(1);\n        } else {\n            b[b.length-1]++;\n        }\n        prev = num_list[i];\n    }\n    \n    return [a, b];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    0,\n    1,\n    2,\n    3,\n    4\n  ],\n  [\n    2,\n    1,\n    1,\n    1,\n    1\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0\n]\n    at test (/tmp/tmpqi3xkg9q.js:23:10)\n    at Object.<anonymous> (/tmp/tmpqi3xkg9q.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 0, 1, 2, 3, 4 ], [ 2, 1, 1, 1, 1 ] ],\n  expected: [ 1, 2, 3, 4, 0, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i=0; i<num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    var new_list = [];\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            new_list.push(num_list[i]);\n        }\n        else{\n            count++;\n        }\n    }\n    for(var i = 0; i < count; i++){\n        new_list.push(0);\n    }\n    return new_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123953,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] !== prev ) {\n            a.push(num_list[i]);\n            b.push(1);\n        } else {\n            b[b.length-1]++;\n        }\n        prev = num_list[i];\n    }\n    return [a, b];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    0,\n    1,\n    2,\n    3,\n    4\n  ],\n  [\n    2,\n    1,\n    1,\n    1,\n    1\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0\n]\n    at test (/tmp/tmp7ixveakr.js:21:10)\n    at Object.<anonymous> (/tmp/tmp7ixveakr.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 0, 1, 2, 3, 4 ], [ 2, 1, 1, 1, 1 ] ],\n  expected: [ 1, 2, 3, 4, 0, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count++] = num_list[i];\n        }\n    }\n    while(count < num_list.length){\n        num_list[count++] = 0;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count=0;\n    for(var i=0;i<num_list.length;i++){\n        if(num_list[i]!=0){\n            num_list[count]=num_list[i];\n            count++;\n        }\n    }\n    while(count<num_list.length){\n        num_list[count]=0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    \n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] !== prev ) {\n            a.push(num_list[i]);\n            b.push(1);\n        } else {\n            b[b.length-1]++;\n        }\n        prev = num_list[i];\n    }\n    \n    return [a, b];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    0,\n    1,\n    2,\n    3,\n    4\n  ],\n  [\n    2,\n    1,\n    1,\n    1,\n    1\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0\n]\n    at test (/tmp/tmpqi3xkg9q.js:23:10)\n    at Object.<anonymous> (/tmp/tmpqi3xkg9q.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 0, 1, 2, 3, 4 ], [ 2, 1, 1, 1, 1 ] ],\n  expected: [ 1, 2, 3, 4, 0, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i=0; i<num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    \n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] !== prev ) {\n            a.push(num_list[i]);\n            b.push(1);\n        } else {\n            b[b.length-1]++;\n        }\n        prev = num_list[i];\n    }\n    \n    return [a, b];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    0,\n    1,\n    2,\n    3,\n    4\n  ],\n  [\n    2,\n    1,\n    1,\n    1,\n    1\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0\n]\n    at test (/tmp/tmpqi3xkg9q.js:23:10)\n    at Object.<anonymous> (/tmp/tmpqi3xkg9q.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 0, 1, 2, 3, 4 ], [ 2, 1, 1, 1, 1 ] ],\n  expected: [ 1, 2, 3, 4, 0, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    \n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] !== prev ) {\n            a.push(num_list[i]);\n            b.push(1);\n        } else {\n            b[b.length-1]++;\n        }\n        prev = num_list[i];\n    }\n    \n    return [a, b];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    0,\n    1,\n    2,\n    3,\n    4\n  ],\n  [\n    2,\n    1,\n    1,\n    1,\n    1\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0\n]\n    at test (/tmp/tmpqi3xkg9q.js:23:10)\n    at Object.<anonymous> (/tmp/tmpqi3xkg9q.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 0, 1, 2, 3, 4 ], [ 2, 1, 1, 1, 1 ] ],\n  expected: [ 1, 2, 3, 4, 0, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var temp = [];\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            temp[count++] = num_list[i];\n        }\n    }\n    while(count < num_list.length){\n        temp[count++] = 0;\n    }\n    return temp;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var zeros = 0;\n    var count = 0;\n    var length = num_list.length;\n    while(count < length){\n        if(num_list[count] == 0){\n            num_list.splice(count,1);\n            zeros += 1;\n        }else{\n            count += 1;\n        }\n    }\n    while(zeros > 0){\n        num_list.push(0);\n        zeros -= 1;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    \n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] !== prev ) {\n            a.push(num_list[i]);\n            b.push(1);\n        } else {\n            b[b.length-1]++;\n        }\n        prev = num_list[i];\n    }\n    \n    return [a, b];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    0,\n    1,\n    2,\n    3,\n    4\n  ],\n  [\n    2,\n    1,\n    1,\n    1,\n    1\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0\n]\n    at test (/tmp/tmpqi3xkg9q.js:23:10)\n    at Object.<anonymous> (/tmp/tmpqi3xkg9q.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 0, 1, 2, 3, 4 ], [ 2, 1, 1, 1, 1 ] ],\n  expected: [ 1, 2, 3, 4, 0, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    \n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] !== prev ) {\n            a.push(num_list[i]);\n            b.push(1);\n        } else {\n            b[b.length-1]++;\n        }\n        prev = num_list[i];\n    }\n    \n    return [a, b];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    0,\n    1,\n    2,\n    3,\n    4\n  ],\n  [\n    2,\n    1,\n    1,\n    1,\n    1\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0\n]\n    at test (/tmp/tmpqi3xkg9q.js:23:10)\n    at Object.<anonymous> (/tmp/tmpqi3xkg9q.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 0, 1, 2, 3, 4 ], [ 2, 1, 1, 1, 1 ] ],\n  expected: [ 1, 2, 3, 4, 0, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    \n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] !== prev ) {\n            a.push(num_list[i]);\n            b.push(1);\n        } else {\n            b[b.length-1]++;\n        }\n        prev = num_list[i];\n    }\n    \n    return [a, b];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    0,\n    1,\n    2,\n    3,\n    4\n  ],\n  [\n    2,\n    1,\n    1,\n    1,\n    1\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0\n]\n    at test (/tmp/tmpqi3xkg9q.js:23:10)\n    at Object.<anonymous> (/tmp/tmpqi3xkg9q.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 0, 1, 2, 3, 4 ], [ 2, 1, 1, 1, 1 ] ],\n  expected: [ 1, 2, 3, 4, 0, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    var n = num_list.length;\n    for(var i=0; i<n; i++){\n        if(num_list[i] != 0){\n            num_list[count++] = num_list[i];\n        }\n    }\n    while(count < n){\n        num_list[count++] = 0;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    var new_list = [];\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            new_list.push(num_list[i]);\n        }\n        else{\n            count += 1;\n        }\n    }\n    for(var j = 0; j < count; j++){\n        new_list.push(0);\n    }\n    return new_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123953,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    var new_list = [];\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            new_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        new_list[count] = 0;\n        count++;\n    }\n    return new_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var zeros = [];\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] == 0){\n            zeros[count] = num_list[i];\n            count++;\n        }\n    }\n    return zeros;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0\n]\n    at test (/tmp/tmp3fxa321d.js:18:10)\n    at Object.<anonymous> (/tmp/tmp3fxa321d.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0 ],\n  expected: [ 1, 2, 3, 4, 0, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count++] = num_list[i];\n        }\n    }\n    while(count < num_list.length){\n        num_list[count++] = 0;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] !== prev ) {\n            a.push(num_list[i]);\n            b.push(1);\n        } else {\n            b[b.length-1]++;\n        }\n        prev = num_list[i];\n    }\n    return [a, b];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    0,\n    1,\n    2,\n    3,\n    4\n  ],\n  [\n    2,\n    1,\n    1,\n    1,\n    1\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0\n]\n    at test (/tmp/tmp7ixveakr.js:21:10)\n    at Object.<anonymous> (/tmp/tmp7ixveakr.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 0, 1, 2, 3, 4 ], [ 2, 1, 1, 1, 1 ] ],\n  expected: [ 1, 2, 3, 4, 0, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    var new_list = [];\n    for(var i=0; i<num_list.length; i++){\n        if(num_list[i] != 0){\n            new_list.push(num_list[i]);\n        }else{\n            count += 1;\n        }\n    }\n    for(var j=0; j<count; j++){\n        new_list.push(0);\n    }\n    return new_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var zeros = 0;\n    var new_list = [];\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            new_list.push(num_list[i]);\n        }\n        else{\n            zeros++;\n        }\n    }\n    for(var i = 0; i < zeros; i++){\n        new_list.push(0);\n    }\n    return new_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var zeros = 0;\n    var new_list = [];\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            new_list.push(num_list[i]);\n        }else{\n            zeros++;\n        }\n    }\n    for(var i = 0; i < zeros; i++){\n        new_list.push(0);\n    }\n    return new_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var a = [0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4];\n    var b = [];\n    var c = [];\n    for (var i = 0; i < num_list.length; i++){\n        if (num_list[i] === 0){\n            b.push(num_list[i]);\n        }\n        else {\n            c.push(num_list[i]);\n        }\n    }\n    return c.concat(b);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var zeros = [];\n    var count = 0;\n    for(var i = 0; i<num_list.length; i++){\n        if(num_list[i] == 0){\n            zeros[count] = num_list[i];\n            count++;\n        }\n    }\n    return zeros;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0\n]\n    at test (/tmp/tmpaesi2l3u.js:18:10)\n    at Object.<anonymous> (/tmp/tmpaesi2l3u.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0 ],\n  expected: [ 1, 2, 3, 4, 0, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    var new_list = [];\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            new_list.push(num_list[i]);\n        }\n        else{\n            count++;\n        }\n    }\n    while(count > 0){\n        new_list.push(0);\n        count--;\n    }\n    return new_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i=0; i<num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    var new_list = [];\n    for(var i=0; i<num_list.length; i++){\n        if(num_list[i] != 0){\n            new_list.push(num_list[i]);\n        }\n        else{\n            count++;\n        }\n    }\n    for(var i=0; i<count; i++){\n        new_list.push(0);\n    }\n    return new_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i=0;i<num_list.length;i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123953,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n\n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] !== prev ) {\n            a.push(num_list[i]);\n            b.push(1);\n        } else {\n            b[b.length-1]++;\n        }\n        prev = num_list[i];\n    }\n\n    return [a, b];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    0,\n    1,\n    2,\n    3,\n    4\n  ],\n  [\n    2,\n    1,\n    1,\n    1,\n    1\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0\n]\n    at test (/tmp/tmp_veixsy9.js:23:10)\n    at Object.<anonymous> (/tmp/tmp_veixsy9.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 0, 1, 2, 3, 4 ], [ 2, 1, 1, 1, 1 ] ],\n  expected: [ 1, 2, 3, 4, 0, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    \n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] !== prev ) {\n            a.push(num_list[i]);\n            b.push(1);\n        } else {\n            b[b.length-1]++;\n        }\n        prev = num_list[i];\n    }\n    \n    return [a, b];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    0,\n    1,\n    2,\n    3,\n    4\n  ],\n  [\n    2,\n    1,\n    1,\n    1,\n    1\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0\n]\n    at test (/tmp/tmpqi3xkg9q.js:23:10)\n    at Object.<anonymous> (/tmp/tmpqi3xkg9q.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 0, 1, 2, 3, 4 ], [ 2, 1, 1, 1, 1 ] ],\n  expected: [ 1, 2, 3, 4, 0, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    var n = num_list.length;\n    for(var i=0;i<n;i++){\n        if(num_list[i]!=0){\n            num_list[count++] = num_list[i];\n        }\n    }\n    while(count<n){\n        num_list[count++] = 0;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    var new_list = [];\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            new_list.push(num_list[i]);\n        }\n        else{\n            count++;\n        }\n    }\n    for(var i = 0; i < count; i++){\n        new_list.push(0);\n    }\n    return new_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123953,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var a = [0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4];\n    var b = [];\n    var c = [];\n    for(var i=0;i<num_list.length;i++){\n        if(num_list[i]==0){\n            b.push(num_list[i]);\n        }\n        else{\n            c.push(num_list[i]);\n        }\n    }\n    return c.concat(b);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    var new_list = [];\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            new_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        new_list[count] = 0;\n        count++;\n    }\n    return new_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var j = 0;\n    for(var i = 0; i<num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[j] = num_list[i];\n            j++;\n        }\n    }\n    while(j<num_list.length){\n        num_list[j] = 0;\n        j++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var i = 0;\n    var j = 0;\n    while(i < num_list.length){\n        if(num_list[i] == 0){\n            i++;\n        }\n        else{\n            num_list[j] = num_list[i];\n            j++;\n            i++;\n        }\n    }\n    while(j < num_list.length){\n        num_list[j] = 0;\n        j++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] === 0 ) {\n            b.push(num_list[i]);\n        } else {\n            a.push(num_list[i]);\n        }\n    }\n    return a.concat(b);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n  3,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  2,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n    at test (/tmp/tmpxscz3ql3.js:20:10)\n    at Object.<anonymous> (/tmp/tmpxscz3ql3.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 2, 3, 4, 5,\n    0, 0, 0, 0\n  ],\n  expected: [\n    2, 3, 2, 4, 5,\n    0, 0, 0, 0\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    \n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] !== prev ) {\n            a.push(num_list[i]);\n            b.push(1);\n        } else {\n            b[b.length-1]++;\n        }\n        prev = num_list[i];\n    }\n    \n    return [a, b];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    0,\n    1,\n    2,\n    3,\n    4\n  ],\n  [\n    2,\n    1,\n    1,\n    1,\n    1\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0\n]\n    at test (/tmp/tmpqi3xkg9q.js:23:10)\n    at Object.<anonymous> (/tmp/tmpqi3xkg9q.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 0, 1, 2, 3, 4 ], [ 2, 1, 1, 1, 1 ] ],\n  expected: [ 1, 2, 3, 4, 0, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] !== prev ) {\n            a.push(num_list[i]);\n            b.push(1);\n        } else {\n            b[b.length-1]++;\n        }\n        prev = num_list[i];\n    }\n    return [a, b];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    0,\n    1,\n    2,\n    3,\n    4\n  ],\n  [\n    2,\n    1,\n    1,\n    1,\n    1\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0\n]\n    at test (/tmp/tmp7ixveakr.js:21:10)\n    at Object.<anonymous> (/tmp/tmp7ixveakr.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 0, 1, 2, 3, 4 ], [ 2, 1, 1, 1, 1 ] ],\n  expected: [ 1, 2, 3, 4, 0, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    \n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] !== prev ) {\n            a.push(num_list[i]);\n            b.push(1);\n        } else {\n            b[b.length-1]++;\n        }\n        prev = num_list[i];\n    }\n    \n    return [a, b];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    0,\n    1,\n    2,\n    3,\n    4\n  ],\n  [\n    2,\n    1,\n    1,\n    1,\n    1\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0\n]\n    at test (/tmp/tmpqi3xkg9q.js:23:10)\n    at Object.<anonymous> (/tmp/tmpqi3xkg9q.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 0, 1, 2, 3, 4 ], [ 2, 1, 1, 1, 1 ] ],\n  expected: [ 1, 2, 3, 4, 0, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    \n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] !== prev ) {\n            a.push(num_list[i]);\n            b.push(1);\n        } else {\n            b[b.length-1]++;\n        }\n        prev = num_list[i];\n    }\n    \n    return [a, b];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    0,\n    1,\n    2,\n    3,\n    4\n  ],\n  [\n    2,\n    1,\n    1,\n    1,\n    1\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0\n]\n    at test (/tmp/tmpqi3xkg9q.js:23:10)\n    at Object.<anonymous> (/tmp/tmpqi3xkg9q.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 0, 1, 2, 3, 4 ], [ 2, 1, 1, 1, 1 ] ],\n  expected: [ 1, 2, 3, 4, 0, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var temp = [];\n    var count = 0;\n    for(var i=0;i<num_list.length;i++){\n        if(num_list[i]!=0){\n            temp[count++] = num_list[i];\n        }\n    }\n    while(count<num_list.length){\n        temp[count++] = 0;\n    }\n    return temp;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count++] = num_list[i];\n        }\n    }\n    while(count < num_list.length){\n        num_list[count++] = 0;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    var list = [];\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        list[count] = 0;\n        count++;\n    }\n    return list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    var new_list = [];\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            new_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        new_list[count] = 0;\n        count++;\n    }\n    return new_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var i = 0;\n    var j = 0;\n    while(i < num_list.length){\n        if(num_list[i] == 0){\n            i++;\n        }\n        else{\n            num_list[j] = num_list[i];\n            j++;\n            i++;\n        }\n    }\n    while(j < num_list.length){\n        num_list[j] = 0;\n        j++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] !== prev ) {\n            a.push(num_list[i]);\n            b.push(1);\n        } else {\n            b[b.length-1]++;\n        }\n        prev = num_list[i];\n    }\n    return [a, b];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    0,\n    1,\n    2,\n    3,\n    4\n  ],\n  [\n    2,\n    1,\n    1,\n    1,\n    1\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0\n]\n    at test (/tmp/tmp7ixveakr.js:21:10)\n    at Object.<anonymous> (/tmp/tmp7ixveakr.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 0, 1, 2, 3, 4 ], [ 2, 1, 1, 1, 1 ] ],\n  expected: [ 1, 2, 3, 4, 0, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i=0; i<num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var zeros = 0;\n    var temp = [];\n    for(var i=0; i<num_list.length; i++){\n        if(num_list[i] == 0){\n            zeros++;\n        }else{\n            temp.push(num_list[i]);\n        }\n    }\n    while(zeros--){\n        temp.push(0);\n    }\n    return temp;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var temp = [];\n    var count = 0;\n    for(var i=0; i<num_list.length; i++){\n        if(num_list[i] != 0){\n            temp[count++] = num_list[i];\n        }\n    }\n    while(count < num_list.length){\n        temp[count++] = 0;\n    }\n    return temp;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    var new_list = [];\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            new_list.push(num_list[i]);\n        }else{\n            count++;\n        }\n    }\n    while(count > 0){\n        new_list.push(0);\n        count--;\n    }\n    return new_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    var temp = [];\n    for(var i=0; i<num_list.length; i++){\n        if(num_list[i] != 0){\n            temp[count++] = num_list[i];\n        }\n    }\n    while(count < num_list.length){\n        temp[count++] = 0;\n    }\n    return temp;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123953,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a jsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list){\n    var count = 0;\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while(count < num_list.length){\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}