language: java
name: HumanEval_117_select_words
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // Write your code here\n        int count = 0;\n        for(int\
    \ i = 0; i<s.length(); i++){\n            if(s.charAt(i) == 'A' || s.charAt(i)\
    \ == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U'){\n\
    \                count++;\n            }\n        }\n        String[] result =\
    \ new String[count];\n        if(s.length()>0){\n            for(int i = 0; i<s.length();\
    \ i++){\n                if(s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i)\
    \ == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U'){\n                    result[i]\
    \ = s.substring(0,i);\n                }\n            }\n        }\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        for (int i = 0; i<count; i++){\n\
    \            for (int j = 0; j<s.length(); j++){\n                if(s.charAt(j)\
    \ == 'A' || s.charAt(j) == 'E' || s.charAt(j) == 'I' || s.charAt(j) == 'O' ||\
    \ s.charAt(j) == 'U'){\n                    result.add(s.substring(j,j+(i)));\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6gkon40v.java:41: error: variable result is already defined in\
    \ method selectWords(String,long)\n        ArrayList<String> result = new ArrayList<String>();\n\
    \                          ^\n1 error\n"
  stdout: ''
  timestamp: 1659977317
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        if (s.isEmpty())\
    \ {\n            return words;\n        }\n        String[] arr = s.split(\" \"\
    );\n        Arrays.sort(arr);\n        Set<String> set = new LinkedHashSet<String>();\n\
    \        for (int i = 0; i < arr.length; i++) {\n            if (set.contains(arr[i]))\
    \ {\n                continue;\n            }\n            set.add(arr[i]);\n\
    \            String word = arr[i].replaceAll(\"[^a-zA-Z]\", \"\");\n         \
    \   if (word.matches(\"[a-zA-Z]+\")) {\n                words.add(word);\n   \
    \         }\n        }\n        ArrayList<String> res = new ArrayList<String>();\n\
    \        for(String word : words) {\n            long l = 0;\n            while(l\
    \ < word.length()) {\n                l++;\n                if(word.charAt(l)\
    \ == n) {\n                    res.add(word);\n                    break;\n  \
    \              }\n            }\n        }\n        return words;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(selectWords((\"Mary had\
    \ a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxwa99h8v.java:48: error: incompatible types: possible lossy conversion\
    \ from long to int\n                if(word.charAt(l) == n) {\n              \
    \                 ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659977317
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // write your implementation here\n        if(s.length() == 0)\n\
    \            return new ArrayList<String>();\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        while(n > 0){\n            int index = s.indexOf('\
    \ ');\n            if(index == -1){\n                result.add(s.substring(0,n));\n\
    \                n--;\n            }else{\n                result.add(s.substring(0,\
    \ index));\n                s = s.substring(index+1);\n            }\n       \
    \ }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0p05_h7d.java:33: error: incompatible types: possible lossy conversion\
    \ from long to int\n                result.add(s.substring(0,n));\n          \
    \                               ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659977317
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<>();\n        if(s.length()\
    \ > 0) {\n            String word = s.substring(0,n);\n            for(int i =\
    \ 0; i < word.length(); i++) {\n                if(Character.isLetter(word.charAt(i)))\
    \ {\n                    result.add(word);\n                    s = s.substring((i+1),s.length());\n\
    \                    if(s.length() > 0) {\n                        word = s.substring(0,n);\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yq2g2co.java:28: error: incompatible types: possible lossy conversion\
    \ from long to int\n            String word = s.substring(0,n);\n            \
    \                            ^\n/tmp/tmp7yq2g2co.java:34: error: incompatible\
    \ types: possible lossy conversion from long to int\n                        word\
    \ = s.substring(0,n);\n                                             ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659977317
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // Fill in the blanks below\n        ArrayList<String> result = new\
    \ ArrayList<String>();\n        if(s.isEmpty()) {\n            return result;\n\
    \        }\n        int j = 0;\n        StringBuilder currentWord = new StringBuilder();\n\
    \        for(;j<s.length();j++) {\n            if(s.charAt(j)=='a') {\n      \
    \          currentWord.append(\"a\");\n            }\n            else if(s.charAt(j)=='e')\
    \ {\n                currentWord.append(\"e\");\n            }\n            else\
    \ if(s.charAt(j)=='i') {\n                currentWord.append(\"i\");\n       \
    \     }\n            else if(s.charAt(j)=='o') {\n                currentWord.append(\"\
    o\");\n            }\n            else if(s.charAt(j)=='u') {\n              \
    \  currentWord.append(\"u\");\n            }\n            else if(s.charAt(j)=='l')\
    \ {\n                currentWord.append(\"l\");\n            }\n            else\
    \ if(s.charAt(j)=='n') {\n                currentWord.append(\"n\");\n       \
    \     }\n            else if(s.charAt(j)=='d') {\n                currentWord.append(\"\
    d\");\n            }\n            else if(s.charAt(j)=='h') {\n              \
    \  currentWord.append(\"h\");\n            }\n            else if(s.charAt(j)=='s')\
    \ {\n                currentWord.append(\"s\");\n            }\n            else\
    \ if(s.charAt(j)=='t') {\n                currentWord.append(\"t\");\n       \
    \     }\n            else if(s.charAt(j)=='r') {\n                currentWord.append(\"\
    r\");\n            }\n            else if(s.charAt(j)=='e') {\n              \
    \  currentWord.append(\"e\");\n            }\n            else if(s.charAt(j)=='f')\
    \ {\n                currentWord.append(\"f\");\n            }\n            else\
    \ if(s.charAt(j)=='o') {\n                currentWord.append(\"o\");\n       \
    \     }\n            else if(s.charAt(j)=='m') {\n                currentWord.append(\"\
    m\");\n            }\n            else if(s.charAt(j)=='a') {\n              \
    \  currentWord.append(\"a\");\n            }\n            else if(s.charAt(j)=='g')\
    \ {\n                currentWord.append(\"g\");\n            }\n            else\
    \ if(s.charAt(j)=='p') {\n                currentWord.append(\"p\");\n       \
    \     }\n            else if(s.charAt(j)=='c') {\n                currentWord.append(\"\
    c\");\n            }\n            else if(s.charAt(j)=='u') {\n              \
    \  currentWord.append(\"u\");\n            }\n            else if(s.charAt(j)=='l')\
    \ {\n                currentWord.append(\"l\");\n            }\n            else\
    \ if(s.charAt(j)=='s') {\n                currentWord.append(\"s\");\n       \
    \     }\n            else if(s.charAt(j)=='s') {\n                currentWord.append(\"\
    s\");\n            }\n            else if(s.charAt(j)=='s') {\n              \
    \  currentWord.append(\"s\");\n            }\n            else if(s.charAt(j)=='s')\
    \ {\n                currentWord.append(\"s\");\n            }\n            else\
    \ {\n\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5_4ta3m6.java:115: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659977316
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> ret = new ArrayList<>();\n        // TODO: Write\
    \ your code here\n        StringBuilder sb = new StringBuilder();\n        for(String\
    \ word : s.split(\" \")) {\n            sb.append(word);\n        }\n        String[]\
    \ str = sb.toString().split(\"\\\\s\");\n        for(int i=0; i < str.length;\
    \ i++) {\n            String word = str[i];\n            if(word.length() == n)\
    \ {\n                ret.add(word);\n            }\n        }\n        return\
    \ ret;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdkuu5gc0.java:42)\n"
  stdout: ''
  timestamp: 1659977317
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        if (s.isEmpty()) {\n            return new ArrayList<String>();\n\
    \        }\n\n        ArrayList<String> result = new ArrayList<String>();\n  \
    \      StringBuilder stringBuilder = new StringBuilder(s);\n        ArrayList<String>\
    \ temp = new ArrayList<String>();\n        ArrayList<String> temp2 = new ArrayList<String>();\n\
    \        Set<String> set = new HashSet<String>();\n        Set<String> set2 =\
    \ new HashSet<String>();\n        boolean isLetter = false;\n        int count\
    \ = 0;\n        boolean isSpace = false;\n        char ch;\n        int i = 0;\n\
    \        long max = 0;\n        while ((ch = stringBuilder.charAt(i)) != -1) {\n\
    \            isSpace = Character.isSpaceChar(ch);\n            isLetter = Character.isLetter(ch);\n\
    \            if (isLetter) {\n                if (Character.getType(ch) == Character.VT_LNG)\
    \ {\n                    if (count > n) {\n                        break;\n  \
    \                  }\n                    count++;\n                } else if\
    \ (Character.getType(ch) == Character.VT_INT) {\n                    if (count\
    \ > n) {\n                        break;\n                    }\n            \
    \        count++;\n                } else if (Character.getType(ch) == Character.VT_RNG)\
    \ {\n                    if (count > n) {\n                        break;\n  \
    \                  }\n                    count++;\n                } else if\
    \ (Character.getType(ch) == Character.VT_STR) {\n                    if (count\
    \ > n) {\n                        break;\n                    }\n            \
    \        count++;\n                } else {\n                    if (count > n)\
    \ {\n                        break;\n                    }\n                 \
    \   count++;\n                }\n            } else if (isSpace) {\n         \
    \       if (count > n) {\n                    break;\n                }\n    \
    \            count++;\n            } else {\n                if (count > n) {\n\
    \                    break;\n                }\n                count++;\n   \
    \         }\n            if (isLetter) {\n                if (!set.contains(stringBuilder.substring(i\
    \ + 1, stringBuilder.length()))) {\n                    set.add(stringBuilder.substring(i\
    \ + 1, stringBuilder.length()));\n                }\n                i = stringBuilder.length();\n\
    \            } else {\n                if (!set2.contains(stringBuilder.substring(i\
    \ + 1, stringBuilder.length()))) {\n                    set2.add(stringBuilder.substring(i\
    \ + 1, stringBuilder.length()));\n                }\n                i = stringBuilder.length();\n\
    \            }\n        }\n\n        for (String word : set) {\n            temp.add(word);\n\
    \        }\n        for (String word : temp) {\n            result.add(word);\n\
    \        }\n        for (String word : set2) {\n            temp2.add(word);\n\
    \        }\n        for (String word : temp2) {\n            result.add(word);\n\
    \        }\n\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg312p7xu.java:46: error: cannot find symbol\n                if\
    \ (Character.getType(ch) == Character.VT_LNG) {\n                            \
    \                          ^\n  symbol:   variable VT_LNG\n  location: class Character\n\
    /tmp/tmpg312p7xu.java:51: error: cannot find symbol\n                } else if\
    \ (Character.getType(ch) == Character.VT_INT) {\n                            \
    \                                 ^\n  symbol:   variable VT_INT\n  location:\
    \ class Character\n/tmp/tmpg312p7xu.java:56: error: cannot find symbol\n     \
    \           } else if (Character.getType(ch) == Character.VT_RNG) {\n        \
    \                                                     ^\n  symbol:   variable\
    \ VT_RNG\n  location: class Character\n/tmp/tmpg312p7xu.java:61: error: cannot\
    \ find symbol\n                } else if (Character.getType(ch) == Character.VT_STR)\
    \ {\n                                                             ^\n  symbol:\
    \   variable VT_STR\n  location: class Character\n4 errors\n"
  stdout: ''
  timestamp: 1659977317
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        if (s.isEmpty()) {\n            return new ArrayList<String>();\n\
    \        }\n\n        ArrayList<String> result = new ArrayList<String>();\n\n\
    \        final StringBuilder sb = new StringBuilder(s);\n\n        final StringBuilder\
    \ lastWord = new StringBuilder();\n\n        final ArrayList<String> currentWord\
    \ = new ArrayList<String>();\n\n        final int size = s.length();\n       \
    \ final boolean isConsonant = Character.isLetter((char) 0);\n        final ArrayList<String>\
    \ result = new ArrayList<String>();\n\n        for (int i = 0; i < size; i++)\
    \ {\n            if (Character.isLetter(s.charAt(i)) && !isConsonant) {\n    \
    \            if (lastWord.length() > 0) {\n                    currentWord.add(lastWord.toString());\n\
    \                }\n                result.add(lastWord.toString());\n       \
    \         currentWord = new ArrayList<String>();\n            }\n            lastWord\
    \ = new StringBuilder();\n        }\n\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmysm5m1x.java:40: error: variable result is already defined in\
    \ method selectWords(String,long)\n        final ArrayList<String> result = new\
    \ ArrayList<String>();\n                                ^\n/tmp/tmpmysm5m1x.java:48:\
    \ error: cannot assign a value to final variable currentWord\n               \
    \ currentWord = new ArrayList<String>();\n                ^\n/tmp/tmpmysm5m1x.java:50:\
    \ error: cannot assign a value to final variable lastWord\n            lastWord\
    \ = new StringBuilder();\n            ^\n3 errors\n"
  stdout: ''
  timestamp: 1659977317
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<>();\n        ArrayList<String>\
    \ currentList = new ArrayList<>();\n        ArrayList<String> newList = new ArrayList<>();\n\
    \        for (char ch : s.toCharArray()) {\n            if (Character.isLetter(ch))\
    \ {\n                if (!currentList.isEmpty()) {\n                    newList.add(currentList);\n\
    \                }\n                currentList.add(String.valueOf(ch));\n   \
    \         } else {\n                if (!currentList.isEmpty() || !newList.isEmpty())\
    \ {\n                    result.add(newList);\n                }\n           \
    \     currentList.clear();\n                newList.clear();\n            }\n\
    \            if (currentList.size() == n) {\n                if (newList.isEmpty())\
    \ {\n                    result.add(newList);\n                }\n           \
    \     newList.clear();\n            }\n        }\n        if (newList.isEmpty())\
    \ {\n            result.add(newList);\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5h8wcdoe.java:32: error: incompatible types: ArrayList<String>\
    \ cannot be converted to String\n                    newList.add(currentList);\n\
    \                                ^\n/tmp/tmp5h8wcdoe.java:37: error: incompatible\
    \ types: ArrayList<String> cannot be converted to String\n                   \
    \ result.add(newList);\n                               ^\n/tmp/tmp5h8wcdoe.java:44:\
    \ error: incompatible types: ArrayList<String> cannot be converted to String\n\
    \                    result.add(newList);\n                               ^\n\
    /tmp/tmp5h8wcdoe.java:50: error: incompatible types: ArrayList<String> cannot\
    \ be converted to String\n            result.add(newList);\n                 \
    \      ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n4 errors\n"
  stdout: ''
  timestamp: 1659977317
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        if (s.isEmpty())\
    \ {\n            return words;\n        }\n        ArrayList<String> strings =\
    \ new ArrayList<String>();\n        \n        int index = 0;\n        \n     \
    \   for(int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n\
    \            \n            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u') {\n                strings.add(s.substring(index, i));\n         \
    \       index = i;\n            } \n        }\n        \n        for(int i = 0;\
    \ i < strings.size(); i++) {\n            long count = strings.get(i).length()\
    \ - n;\n            \n            if(count >= 0 && count <= strings.get(i).length())\
    \ {\n                words.add(strings.get(i));\n            }\n        }\n  \
    \      \n        return words;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpauqubbwh.java:54)\n"
  stdout: ''
  timestamp: 1659977317
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        if (s\
    \ == null || s.length() == 0) {\n            return result;\n        }\n     \
    \   ArrayList<String> words = new ArrayList<String>();\n        final char[] letters\
    \ = s.toCharArray();\n        for (char c : letters) {\n            if (isConsonant((char)c)\
    \ && words.size() < n) {\n                words.add((String)c+\"\");\n       \
    \     }\n        }\n        result.addAll(words);\n        return result;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo59u92_n.java:33: error: cannot find symbol\n            if (isConsonant((char)c)\
    \ && words.size() < n) {\n                ^\n  symbol:   method isConsonant(char)\n\
    \  location: class Problem\n/tmp/tmpo59u92_n.java:34: error: incompatible types:\
    \ char cannot be converted to String\n                words.add((String)c+\"\"\
    );\n                                  ^\n2 errors\n"
  stdout: ''
  timestamp: 1659977317
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // TODO\n        ArrayList<String> res = new ArrayList<>();\n   \
    \     for (int i = 0; i < s.length(); i++) {\n            for (int j = 0; j <\
    \ n; j++) {\n                if (s.charAt(i) == s.charAt(j)) {\n             \
    \       res.add(s.substring(0, i) + s.substring(i + 1, j));\n                \
    \    break;\n                }\n            }\n        }\n        return res;\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 1, end 0, length 22\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.selectWords(tmp6rkvakvh.java:31)\n\
    \tat Problem.main(tmp6rkvakvh.java:39)\n"
  stdout: ''
  timestamp: 1659977317
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<>();\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5vrjqgaj.java:30)\n"
  stdout: ''
  timestamp: 1659977317
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> al = new ArrayList<String>();\n        StringBuilder\
    \ newS = new StringBuilder();\n        for (char c : s.toCharArray()) {\n    \
    \        if (Character.isLetter(c)) {\n                newS.append(c);\n     \
    \       }\n        }\n        if (newS.length() == 0) {\n            al.add(\"\
    \");\n            return al;\n        }\n        if (s.equals(\"\")) {\n     \
    \       return al;\n        }\n        if (n == 0) {\n            al.add(newS.toString());\n\
    \            return al;\n        }\n        String result = \"\";\n        String\
    \ strs = \"\";\n        long totalLen = newS.length();\n        double lastW =\
    \ 1;\n        double lastA = 1;\n        int aCount = 0;\n        int lCount =\
    \ 0;\n        int wCount = 0;\n        String[] strArray = new String[totalLen];\n\
    \        int index = 0;\n        int index1 = 1;\n        int index2 = 0;\n  \
    \      int index3 = 0;\n        boolean isNextChar = false;\n        boolean isPrevChar\
    \ = false;\n        for (int i = 0; i < totalLen; i++) {\n            strs[i]\
    \ = newS.substring(i, i + 1).replace(\" \", \"\");\n            strArray[i] =\
    \ strs[i];\n            if (Character.isLetter(strArray[i].charAt(0))) {\n   \
    \             index++;\n                lastW = lastA = 1;\n                lastA++;\n\
    \                aCount++;\n                isPrevChar = true;\n             \
    \   isNextChar = true;\n            }\n            if (strArray[i].equals(\" \"\
    )) {\n                wCount++;\n                if (lastW == 1) {\n         \
    \           lastA++;\n                }\n                lastW++;\n          \
    \  }\n            if (strArray[i].equals(\"a\") && isNextChar) {\n           \
    \     aCount++;\n                isPrevChar = false;\n                isNextChar\
    \ = false;\n            }\n            if (strArray[i].equals(\"l\") && isNextChar)\
    \ {\n                lCount++;\n                isPrevChar = false;\n        \
    \        isNextChar = false;\n            }\n            if (strArray[i].equals(\"\
    w\") && isNextChar) {\n                wCount++;\n                isPrevChar =\
    \ false;\n                isNextChar = false;\n            }\n            if (strArray[i].equals(\"\
    A\") && isPrevChar) {\n                aCount++;\n                isPrevChar =\
    \ false;\n                isNextChar = false;\n            }\n            if (strArray[i].equals(\"\
    L\") && isPrevChar) {\n                lCount++;\n                isPrevChar =\
    \ false;\n                isNextChar = false;\n            }\n            if (strArray[i].equals(\"\
    W\") && isPrevChar) {\n                wCount++;\n                isPrevChar =\
    \ false;\n                isNextChar = false;\n            }\n        }\n    \
    \    int maxA = aCount + lCount + wCount;\n        int maxL = lCount + wCount;\n\
    \        int max\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr5504hxq.java:110: error: ';' expected\n        int max\n     \
    \          ^\n1 error\n"
  stdout: ''
  timestamp: 1659977316
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<>();\n        if (s == null\
    \ || s.isEmpty()) {\n            return result;\n        }\n        boolean[]\
    \ consonants = new boolean[n];\n        String word = \"\";\n        long numOfConsonants\
    \ = 0;\n        int currentLetter = -1;\n        for (int i = 0; i < s.length();\
    \ i++) {\n            currentLetter = s.charAt(i);\n            if (Character.isLetter(currentLetter))\
    \ {\n                word += currentLetter;\n            } else if (Character.isLetter(currentLetter)\
    \ == false || i == s.length() - 1) {\n                if (word.length() == n &&\
    \ numOfConsonants == n) {\n                    result.add(word);\n           \
    \     }\n                word = \"\";\n                numOfConsonants = 0;\n\
    \            }\n            if (Character.isLetter(currentLetter) == true) {\n\
    \                consonants[numOfConsonants] = true;\n                numOfConsonants++;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4rp6y74r.java:30: error: incompatible types: possible lossy conversion\
    \ from long to int\n        boolean[] consonants = new boolean[n];\n         \
    \                                  ^\n/tmp/tmp4rp6y74r.java:46: error: incompatible\
    \ types: possible lossy conversion from long to int\n                consonants[numOfConsonants]\
    \ = true;\n                           ^\n2 errors\n"
  stdout: ''
  timestamp: 1659977317
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n       //TODO write your Java code here\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5awb09e1.java:27: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659977317
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<>();\n        if (s.length()\
    \ <= 0) {\n            return words;\n        }\n        \n        ArrayList<Character>\
    \ consonants = new ArrayList<>();\n        consonants.add('b');\n        consonants.add('c');\n\
    \        consonants.add('d');\n        consonants.add('f');\n        consonants.add('g');\n\
    \        consonants.add('h');\n        consonants.add('j');\n        consonants.add('k');\n\
    \        consonants.add('l');\n        consonants.add('m');\n        consonants.add('n');\n\
    \        consonants.add('p');\n        consonants.add('q');\n        consonants.add('r');\n\
    \        consonants.add('s');\n        consonants.add('t');\n        consonants.add('v');\n\
    \        consonants.add('w');\n        consonants.add('x');\n        consonants.add('y');\n\
    \        consonants.add('z');\n        consonants.add('ch');\n        consonants.add('sh');\n\
    \        consonants.add('th');\n        consonants.add('ph');\n        consonants.add('fr');\n\
    \        consonants.add('ff');\n        consonants.add('fv');\n        consonants.add('fm');\n\
    \        consonants.add('ffm');\n        consonants.add('frm');\n        consonants.add('g');\n\
    \        consonants.add('g');\n        consonants.add('gp');\n        consonants.add('gl');\n\
    \        consonants.add('gh');\n        consonants.add('gl');\n        consonants.add('g');\n\
    \        consonants.add('gp');\n        consonants.add('g');\n        consonants.add('g');\n\
    \        consonants.add('gp');\n        consonants.add('g');\n        consonants.add('gp');\n\
    \        consonants.add('gp');\n        consonants.add('gp');\n        consonants.add('gp');\n\
    \        consonants.add('gp');\n        consonants.add('gp');\n        consonants.add('gp');\n\
    \        consonants.add('gp');\n        consonants.add('gp');\n        consonants.add('gp');\n\
    \        consonants.add('gp');\n        consonants.add('gp');\n        consonants.add('gp');\n\
    \        consonants.add('gp');\n        consonants.add('gp');\n        consonants.add('gp');\n\
    \        consonants.add('gp');\n    }\n    public static void main(String[] args)\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpebb99f27.java:53: error: unclosed character literal\n        consonants.add('ch');\n\
    \                       ^\n/tmp/tmpebb99f27.java:53: error: unclosed character\
    \ literal\n        consonants.add('ch');\n                          ^\n/tmp/tmpebb99f27.java:53:\
    \ error: not a statement\n        consonants.add('ch');\n                    \
    \     ^\n/tmp/tmpebb99f27.java:54: error: unclosed character literal\n       \
    \ consonants.add('sh');\n                       ^\n/tmp/tmpebb99f27.java:54: error:\
    \ unclosed character literal\n        consonants.add('sh');\n                \
    \          ^\n/tmp/tmpebb99f27.java:54: error: not a statement\n        consonants.add('sh');\n\
    \                         ^\n/tmp/tmpebb99f27.java:55: error: unclosed character\
    \ literal\n        consonants.add('th');\n                       ^\n/tmp/tmpebb99f27.java:55:\
    \ error: unclosed character literal\n        consonants.add('th');\n         \
    \                 ^\n/tmp/tmpebb99f27.java:55: error: not a statement\n      \
    \  consonants.add('th');\n                         ^\n/tmp/tmpebb99f27.java:56:\
    \ error: unclosed character literal\n        consonants.add('ph');\n         \
    \              ^\n/tmp/tmpebb99f27.java:56: error: unclosed character literal\n\
    \        consonants.add('ph');\n                          ^\n/tmp/tmpebb99f27.java:56:\
    \ error: not a statement\n        consonants.add('ph');\n                    \
    \     ^\n/tmp/tmpebb99f27.java:57: error: unclosed character literal\n       \
    \ consonants.add('fr');\n                       ^\n/tmp/tmpebb99f27.java:57: error:\
    \ unclosed character literal\n        consonants.add('fr');\n                \
    \          ^\n/tmp/tmpebb99f27.java:57: error: not a statement\n        consonants.add('fr');\n\
    \                         ^\n/tmp/tmpebb99f27.java:58: error: unclosed character\
    \ literal\n        consonants.add('ff');\n                       ^\n/tmp/tmpebb99f27.java:58:\
    \ error: unclosed character literal\n        consonants.add('ff');\n         \
    \                 ^\n/tmp/tmpebb99f27.java:58: error: not a statement\n      \
    \  consonants.add('ff');\n                         ^\n/tmp/tmpebb99f"
  stdout: ''
  timestamp: 1659977316
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<>();\n        if(s.isEmpty())\
    \ {\n            return result;\n        }\n        if(n < 0) {\n            return\
    \ result;\n        }\n        \n        for(int i = 0; i < s.length(); i++) {\n\
    \            char ch = s.charAt(i);\n            int count = 1;\n            for(int\
    \ j = i+1; j < s.length(); j++) {\n                if(ch == s.charAt(j)) {\n \
    \                   count++;\n                }\n            }\n            if(count\
    \ == n) {\n                result.add(s.substring(i, i+1));\n            }\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf2wd6v1i.java:49)\n"
  stdout: ''
  timestamp: 1659977317
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> list = new ArrayList<>();\n        \n        //\
    \ Your code goes here\n        \n        return list;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc4yaz8tg.java:33)\n"
  stdout: ''
  timestamp: 1659977317
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        if (s.isEmpty()) return new ArrayList<>();\n        // Add two pointers\
    \ in the same time using Iterator\n        Iterator<String> it = Arrays.stream(s.split(\"\
    \ \")).iterator();\n        Iterator<String> it2 = Arrays.stream(s.split(\" \"\
    )).iterator();\n        int counter = 0;\n        while (it.hasNext() && it2.hasNext())\
    \ {\n            String word = it.next();\n            String word2 = it2.next();\n\
    \            if (counter == n) {\n                counter = 0;\n             \
    \   ArrayList<String> words = new ArrayList<>();\n                words.add(word);\n\
    \                words.add(word2);\n                return words;\n          \
    \  } else if (counter == n) {\n                counter++;\n                it2.next();\n\
    \                it2.next();\n                it2.next();\n                it2.next();\n\
    \                it2.next();\n                it2.next();\n                it2.next();\n\
    \                it2.next();\n                it2.next();\n                it2.next();\n\
    \                it2.next();\n                it2.next();\n                it2.next();\n\
    \                it2.next();\n                it2.next();\n                it2.next();\n\
    \                it2.next();\n                it2.next();\n                it2.next();\n\
    \                it2.next();\n                it2.next();\n                it2.next();\n\
    \                it2.next();\n                it2.next();\n                it2.next();\n\
    \                it2.next();\n                it2.next();\n                it2.next();\n\
    \                it2.next();\n                it2.next();\n                it2.next();\n\
    \                it2.next();\n                it2.next();\n                it2.next();\n\
    \                it2.next();\n                it2.next();\n                it2.next();\n\
    \                it2.next();\n                it2.next();\n                it2.next();\n\
    \                it2.next();\n                it2.next();\n                it2.next();\n\
    \                it2.next();\n                it2.next();\n                it2.next();\n\
    \                it2.next();\n                it2.next();\n                it2.next();\n\
    \                it2.next();\n                it2.next();\n                it2.next();\n\
    \                it2.next();\n                it2.next();\n                it2.next();\n\
    \                it2.next();\n                it2.next();\n                it2.next();\n\
    \                it2.next();\n                it2.next();\n                it2.next();\n\
    \                it2.next();\n                it2.next();\n                it2.next();\n\
    \                it2.next();\n                it2.next();\n                it2.next();\n\
    \                it2.next();\n                it2.next();\n                it2.next();\n\
    \                it2.next();\n                it2.next();\n                it2.next();\n\
    \                it2.next();\n                it2.next();\n                it2.next();\n\
    \                it2.next();\n                it2.next();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwtt45sew.java:121: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659977316
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> res = new ArrayList<String>();\n        \n    \
    \    if(s.equals(\"\"))\n            return res;\n        \n        String[] words\
    \ = s.split(\"\\\\s+\");\n        \n        if(words.length == 0)\n          \
    \  return res;\n        \n        // O(n) time\n        for(String word : words)\
    \ {\n            if(word.matches(\".*[^aeiouAEIOU].*\")) {\n                res.add(word);\n\
    \            }\n        }\n        \n        // O(n) time\n        for(int i =\
    \ 0; i < words.length; i++) {\n            if(n == words[i].length()) {\n    \
    \            res.add(words[i]);\n            }\n        }\n        \n        //\
    \ O(n) time\n        for(int i = 0; i < words.length; i++) {\n            if(n\
    \ == words[i].length()) {\n                res.add(words[i]);\n            }\n\
    \        }\n        \n        // O(n) time\n        for(int i = 0; i < words.length;\
    \ i++) {\n            if(n == words[i].length()) {\n                res.add(words[i]);\n\
    \            }\n        }\n        \n        // O(n) time\n        for(int i =\
    \ 0; i < words.length; i++) {\n            if(n == words[i].length()) {\n    \
    \            res.add(words[i]);\n            }\n        }\n        \n        //\
    \ O(n) time\n        for(int i = 0; i < words.length; i++) {\n            if(n\
    \ == words[i].length()) {\n                res.add(words[i]);\n            }\n\
    \        }\n        \n        // O(n) time\n        for(int i = 0; i < words.length;\
    \ i++) {\n            if(n == words[i].length()) {\n                res.add(words[i]);\n\
    \            }\n        }\n        \n        // O(n) time\n        for(int i =\
    \ 0; i < words.length; i++) {\n            if(n == words[i].length()) {\n    \
    \            res.add(words[i]);\n            }\n        }\n        \n        //\
    \ O(n) time\n        for(int i = 0; i < words.length; i++) {\n            if(n\
    \ == words[i].length()) {\n                res.add(words[i]);\n            }\n\
    \        }\n        \n        // O(n) time\n        for(int i = 0; i < words.length;\
    \ i++) {\n            if(n == words[i].length()) {\n                res.add(words[i]);\n\
    \            }\n        }\n        \n        // O(n) time\n        for(int i =\
    \ 0; i < words.length; i++) {\n            if(n == words[i].length()) {\n    \
    \            res.add(words[i]);\n            }\n        }\n        \n        //\
    \ O(n) time\n        for(int i = 0; i < words.length; i++) {\n            if(n\
    \ == words[i].length()) {\n                res.add(words[i]);\n            }\n\
    \        }\n        \n        // O(n) time\n        for(int i = 0; i < words.length;\
    \ i++) {\n            if(n == words[i].length()) {\n                res.add(words[i]);\n\
    \            }\n        }\n        \n        // O(n) time\n        for(int i =\
    \ 0; i < words.length; i++) {\n            if(n == words[i].length()) {\n    \
    \            res.add(words[i]);\n            }\n        }\n        \n    }\n \
    \   public static void main(String[] args) {\n    assert(selectWords((\"Mary had\
    \ a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc8pkne6a.java:134: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  stdout: ''
  timestamp: 1659977317
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n\n        boolean\
    \ isContainsNConsonants = true;\n\n        // If the string s is empty then the\
    \ function should return an empty array list.\n        if (s.length() <= 0) {\n\
    \            return words;\n        }\n\n        // Step 1: Get the size of the\
    \ string s.\n        int size = s.length();\n        // Step 2: Get the number\
    \ of consonants contained in s.\n        int c = 0;\n        for (int i = 0; i\
    \ < size; i++) {\n            // If the character at position i of the string\
    \ s is not consonant, increment c by 1.\n            if (s.charAt(i) == ' ') {\n\
    \                c++;\n            } else {\n                c = 0;\n        \
    \    }\n            // If the number c equals to n, set isContainsNConsonants\
    \ to true.\n            if (c == n) {\n                isContainsNConsonants =\
    \ true;\n            }\n        }\n        if (isContainsNConsonants) {\n    \
    \        for (int i = 0; i < size; i++) {\n                if (s.charAt(i) ==\
    \ ' ') {\n                    words.add(s.substring(i, i + 1));\n            \
    \    }\n            }\n        }\n        return words;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoa4dwv33.java:61)\n"
  stdout: ''
  timestamp: 1659977317
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // Write your code here\n        long startTime = System.currentTimeMillis();\n\
    \        ArrayList<String> result = new ArrayList<String>();\n        ArrayList<String>\
    \ tmp = new ArrayList<String>();\n        char[] chs = s.toCharArray();\n    \
    \    for(int i = 0; i<chs.length;i++){\n            if((int)chs[i]==(int)'a' ||\
    \ (int)chs[i]==(int)'e' || (int)chs[i]==(int)'i' || (int)chs[i]==(int)'o' || (int)chs[i]==(int)'u'\
    \ ){\n                tmp.add((String)chs[i]);\n            }\n        }\n   \
    \     for(int i = 0;i<tmp.size()-1;i++){\n            for(int j =i+1;j<tmp.size();j++){\n\
    \                if(tmp.get(i).equals(tmp.get(j))){\n                    tmp.remove(i);\
    \ \n                    tmp.remove(j);\n                    result.add(tmp.get(i));\n\
    \                }\n            }\n        }\n        long endTime = System.currentTimeMillis();\n\
    \        System.out.println(\"The time needed to run this algorithm is \"+(endTime\
    \ - startTime)+\" milliseconds.\");\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptb1pggfn.java:33: error: incompatible types: char cannot be converted\
    \ to String\n                tmp.add((String)chs[i]);\n                      \
    \             ^\n1 error\n"
  stdout: ''
  timestamp: 1659977317
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> ret = new ArrayList<>();\n        if (n <= 0) return\
    \ ret;\n        if (s == null || s.length() == 0) return ret;\n        String\
    \ word = \"\";\n        int index = 0;\n        while (index + n <= s.length())\
    \ {\n            if (s.charAt(index) == ' ') {\n                if (word.trim().length()\
    \ == 0) ret.add(word);\n                word = \"\";\n            } else {\n \
    \               word += s.charAt(index);\n            }\n            index++;\n\
    \        }\n        if (word.trim().length() != 0) ret.add(word);\n        return\
    \ ret;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1576lhy9.java:44)\n"
  stdout: ''
  timestamp: 1659977318
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> ret = new ArrayList<>();\n        if (s == null\
    \ || s.length() == 0)\n            return ret;\n        // find position of consonants\
    \ \n        int i = s.toLowerCase().indexOf(\"aeiouy\");\n        if (i < 0)\n\
    \            i = s.length();\n        // find n\n        int nlen = s.length();\n\
    \        int num = 0;\n        while (nlen > 0) {\n            String temp = \"\
    \";\n            while (s.charAt(i) == ' ') {\n                i = s.indexOf('\
    \ ', i);\n            }\n            if (s.charAt(i) != ' ') // not last letter\n\
    \                temp = temp + s.charAt(i);\n            if (temp.length() ==\
    \ n) \n                ret.add(temp);\n            i++;\n            nlen--;\n\
    \        }\n        return ret;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: 22\n\tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\
    \tat java.base/java.lang.String.charAt(String.java:1515)\n\tat Problem.selectWords(tmp2blprvrt.java:38)\n\
    \tat Problem.main(tmp2blprvrt.java:51)\n"
  stdout: ''
  timestamp: 1659977318
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        if (s.isEmpty()) {\n            return new ArrayList<>();\n     \
    \   }\n\n        ArrayList<String> list = new ArrayList<>();\n\n        char[]\
    \ letters = s.toCharArray();\n        for (char c : letters) {\n            if\
    \ (isConsonant(c)) {\n                for (int i = 0; i < n - 1; i++) {\n    \
    \                list.add(s.substring(i, i + 1));\n                }\n       \
    \     }\n        }\n\n        return list;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5yimq6xp.java:34: error: cannot find symbol\n            if (isConsonant(c))\
    \ {\n                ^\n  symbol:   method isConsonant(char)\n  location: class\
    \ Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977318
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> ret = new ArrayList<>();\n        // TODO: Implement\n\
    \        return ret;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8k56s8zz.java:31)\n"
  stdout: ''
  timestamp: 1659977318
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        if (s == null || s.length() == 0)\n            return new ArrayList<>();\n\
    \n        ArrayList<String> results = new ArrayList<>();\n        String[] words\
    \ = s.split(\" \");\n        for (String word : words) {\n            ArrayList<String>\
    \ possibleWords = selectWords(word, n);\n            if (possibleWords.size()\
    \ > 0)\n                results.addAll(possibleWords);\n        }\n        return\
    \ results;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat java.base/java.lang.String.indexOf(String.java:2421)\n\
    \tat java.base/java.lang.String.indexOf(String.java:2378)\n\tat java.base/java.lang.String.split(String.java:3110)\n\
    \tat java.base/java.lang.String.split(String.java:3199)\n\tat Problem.selectWords(tmpg5x6gvsv.java:30)\n\
    \tat Problem.selectWords(tmpg5x6gvsv.java:32)\n\tat Problem.selectWords(tmpg5x6gvsv.java:32)\n\
    \tat Problem.selectWords(tmpg5x6gvsv.java:32)\n\tat Problem.selectWords(tmpg5x6gvsv.java:32)\n\
    \tat Problem.selectWords(tmpg5x6gvsv.java:32)\n\tat Problem.selectWords(tmpg5x6gvsv.java:32)\n\
    \tat Problem.selectWords(tmpg5x6gvsv.java:32)\n\tat Problem.selectWords(tmpg5x6gvsv.java:32)\n\
    \tat Problem.selectWords(tmpg5x6gvsv.java:32)\n\tat Problem.selectWords(tmpg5x6gvsv.java:32)\n\
    \tat Problem.selectWords(tmpg5x6gvsv.java:32)\n\tat Problem.selectWords(tmpg5x6gvsv.java:32)\n\
    \tat Problem.selectWords(tmpg5x6gvsv.java:32)\n\tat Problem.selectWords(tmpg5x6gvsv.java:32)\n\
    \tat Problem.selectWords(tmpg5x6gvsv.java:32)\n\tat Problem.selectWords(tmpg5x6gvsv.java:32)\n\
    \tat Problem.selectWords(tmpg5x6gvsv.java:32)\n\tat Problem.selectWords(tmpg5x6gvsv.java:32)\n\
    \tat Problem.selectWords(tmpg5x6gvsv.java:32)\n\tat Problem.selectWords(tmpg5x6gvsv.java:32)\n\
    \tat Problem.selectWords(tmpg5x6gvsv.java:32)\n\tat Problem.selectWords(tmpg5x6gvsv.java:32)\n\
    \tat Problem.selectWords(tmpg5x6gvsv.java:32)\n\tat Problem.selectWords(tmpg5x6gvsv.java:32)\n\
    \tat Problem.selectWords(tmpg5x6gvsv.java:32)\n\tat Problem.selectWords(tmpg5x6gvsv.java:32)\n\
    \tat Problem.selectWords(tmpg5x6gvsv.java:32)\n\tat Problem.selectWords(tmpg5x6gvsv.java:32)\n\
    \tat Problem.selectWords(tmpg5x6gvsv.java:32)\n\tat Problem.selectWords(tmpg5x6gvsv.java:32)\n\
    \tat Problem.selectWords(tmpg5x6gvsv.java:32)\n\tat Problem.selectWords(tmpg5x6gvsv.java:32)\n\
    \tat Problem.selectWords(tmpg5x6gvsv.java:32)\n\tat Problem.selectWords(tmpg5x6gvsv.java:32)\n\
    \tat Problem.selectWords(tmpg5x6gvsv.java:32)\n\tat Problem.selectWords(tmpg5x6gvsv.java:32)\n\
    \tat Problem.selectWords(tmpg5x6gvsv.java:32)\n\tat Problem.selectWords(tmpg5x6gvsv.java:32)\n\
    \tat Problem.s"
  stdout: ''
  timestamp: 1659977318
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // Write your code here\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeac4du7e.java:27: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659977318
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        return selectWords(Arrays.asList(s.split(\" \")), n);\n    }\n  \
    \  public static void main(String[] args) {\n    assert(selectWords((\"Mary had\
    \ a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp_8lobfv.java:26: error: incompatible types: no instance(s) of\
    \ type variable(s) T exist so that List<T> conforms to String\n        return\
    \ selectWords(Arrays.asList(s.split(\" \")), n);\n               ^\n  where T\
    \ is a type-variable:\n    T extends Object declared in method <T>asList(T...)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659977318
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<>();\n        if (s == null\
    \ || n == 0) {\n            return words;\n        }\n        for (String word\
    \ : s.split(\" \")) {\n            for (String word : s.split(\" \")) {\n    \
    \            if (selectWords(word, n).size() == n) {\n                    words.add(word);\n\
    \                }\n            }\n        }\n        return words;\n    }\n \
    \   public static void main(String[] args) {\n    assert(selectWords((\"Mary had\
    \ a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2o3n39m9.java:31: error: variable word is already defined in method\
    \ selectWords(String,long)\n            for (String word : s.split(\" \")) {\n\
    \                        ^\n1 error\n"
  stdout: ''
  timestamp: 1659977318
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n\n        //\
    \ Complete the implementation below.\n        result.add(s);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxuhl9iy4.java:33)\n"
  stdout: ''
  timestamp: 1659977318
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> res = new ArrayList<>();\n        return res;\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnxw06njx.java:30)\n"
  stdout: ''
  timestamp: 1659977318
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        String[] strings = s.split(\" \");\n        ArrayList<String> res\
    \ = new ArrayList<>();\n        Arrays.asList(strings).stream()\n            .map(s\
    \ -> s.split(\"\")).filter(x -> x.length == n)\n            .forEach(x -> res.add(x[0]));\n\
    \        return res;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5j7hd52o.java:29: error: variable s is already defined in method\
    \ selectWords(String,long)\n            .map(s -> s.split(\"\")).filter(x -> x.length\
    \ == n)\n                 ^\n1 error\n"
  stdout: ''
  timestamp: 1659977318
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        return new ArrayList<String>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu1b77t8w.java:29)\n"
  stdout: ''
  timestamp: 1659977180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        return null;\n    }\n    public static void main(String[] args) {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ long)\" is null\n\tat Problem.main(tmpmjqq7hir.java:29)\n"
  stdout: ''
  timestamp: 1659977180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        // Write\
    \ your solution here\n        StringTokenizer tokenizer = new StringTokenizer(s);\n\
    \        while(tokenizer.hasMoreTokens()) {\n            String word = tokenizer.nextToken();\n\
    \            boolean cont = word.matches(\".*[bcdfghjklmnpqrstvwxyz].*\");\n \
    \           if(cont) {\n                result.add(word);\n                cont\
    \ = word.matches(\".*[b-df-hj-np-t-z].*\");\n                if(!cont)\n     \
    \               result.add(word);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphcrgucgr.java:42)\n"
  stdout: ''
  timestamp: 1659977318
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        if (s.isEmpty()) {\n            return new ArrayList<>();\n     \
    \   }\n        return selectWords(s, new long[n]);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzz_zpw1j.java:29: error: incompatible types: possible lossy conversion\
    \ from long to int\n        return selectWords(s, new long[n]);\n            \
    \                           ^\n/tmp/tmpzz_zpw1j.java:29: error: incompatible types:\
    \ long[] cannot be converted to long\n        return selectWords(s, new long[n]);\n\
    \                              ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659977318
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<>();\n        if(s.isEmpty()){\n\
    \            return result;\n        }\n        try{\n            int m = s.length();\n\
    \            int n = Integer.parseInt(s.replaceAll(\"[^0-9]+\", \"\"));\n    \
    \        \n            while (m > 0 && ((m % n) == 0)){\n                String\
    \ word = s.substring(0,m--);\n                \n                if(!word.isEmpty()){\n\
    \                    result.add(word);\n                }\n            }\n   \
    \         \n        } catch (NumberFormatException | StringIndexOutOfBoundsException\
    \ e){\n            e.printStackTrace();\n        }\n        return result;\n \
    \   }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe5nycz2u.java:32: error: variable n is already defined in method\
    \ selectWords(String,long)\n            int n = Integer.parseInt(s.replaceAll(\"\
    [^0-9]+\", \"\"));\n                ^\n1 error\n"
  stdout: ''
  timestamp: 1659977318
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // TODO: Your code goes here\n        return null;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ long)\" is null\n\tat Problem.main(tmpc7ay2yc1.java:30)\n"
  stdout: ''
  timestamp: 1659977318
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<>();\n        if (s == null\
    \ || s.length() == 0) {\n            return result;\n        }\n        \n   \
    \     char[] c = s.toCharArray();\n        \n        Arrays.sort(c);\n       \
    \ int count = 0;\n        boolean inWord = true;\n        \n        for (char\
    \ element : c) {\n            if (count >= n && inWord) {\n                result.add(new\
    \ String(new char[]{element}));\n            }\n            if (count >= n) {\n\
    \                inWord = false;\n            }\n            if (element == 'W')\
    \ {\n                inWord = true;\n            }\n            if (element ==\
    \ 'e') {\n                inWord = false;\n            }\n            count++;\n\
    \        }\n        \n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmeycr4pa.java:56)\n"
  stdout: ''
  timestamp: 1659977318
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        ArrayList<String>\
    \ wordsWith4Consonants = new ArrayList<String>();\n        ArrayList<String> wordsWith3Consonants\
    \ = new ArrayList<String>();\n        ArrayList<String> wordsWith2Consonants =\
    \ new ArrayList<String>();\n\n        for(int i = 0; i<s.length(); i++) {\n  \
    \          char c = s.charAt(i);\n            if((c >= 'a' && c <= 'z') || (c\
    \ >= 'A' && c <= 'Z') || (c >= '0' && c <= '9')) {\n                result.add(s.substring(i,\
    \ i + 1));\n            } else if(c == '.' || c == ' ' || c == '_' || c == '-')\
    \ {\n                result.add(s.substring(i, i + 1));\n            } else {\n\
    \                if(n >= 4l) { wordsWith4Consonants.add(s.substring(i, i + 1));\
    \ }\n                if(n >= 3l) { wordsWith3Consonants.add(s.substring(i, i +\
    \ 1)); }\n                if(n >= 2l) { wordsWith2Consonants.add(s.substring(i,\
    \ i + 1)); }\n            }\n        }\n\n        if(!result.isEmpty()) {\n  \
    \          return result;\n        } else {\n            if(wordsWith4Consonants.size()\
    \ > 1) { result.addAll(wordsWith4Consonants); }\n            if(wordsWith3Consonants.size()\
    \ > 1) { result.addAll(wordsWith3Consonants); }\n            if(wordsWith2Consonants.size()\
    \ > 1) { result.addAll(wordsWith2Consonants); }\n        }\n\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_ncmv36z.java:55)\n"
  stdout: ''
  timestamp: 1659977318
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<>();\n        if (n == 0\
    \ || n == 1) {\n            result.addAll(Arrays.asList(s.split(\"\")));\n   \
    \     } else {\n            if (s.length() % 2 == 0) {\n                ArrayList<String>\
    \ array = new ArrayList<String>(Arrays.asList(s.split(\"\")));\n             \
    \   ArrayList<String> result1 = new ArrayList<String>(array);\n              \
    \  for (int i = 0; i < array.length; i++) {\n                    if (i + n >=\
    \ array.length) {\n                        result1.add(\"\");\n              \
    \          continue;\n                    }\n                    ArrayList<String>\
    \ array2 = new ArrayList<String>(Arrays.asList(s.split(\"\")));\n            \
    \        result1.add(array2.get(i));\n                }\n                result.addAll(result1);\n\
    \            } else {\n                ArrayList<String> array = new ArrayList<String>(Arrays.asList(s.split(\"\
    \")));\n                ArrayList<String> result1 = new ArrayList<String>(array);\n\
    \                for (int i = 0; i < array.length; i++) {\n                  \
    \  if (i + n >= array.length) {\n                        result1.add(\"\");\n\
    \                        continue;\n                    }\n                  \
    \  ArrayList<String> array2 = new ArrayList<String>(Arrays.asList(s.split(\"\"\
    )));\n                    for (int j = i; j < array.length; j++) {\n         \
    \               if (j + n >= array.length) {\n                            result1.add(\"\
    \");\n                            continue;\n                        }\n     \
    \                   ArrayList<String> array3 = new ArrayList<String>(Arrays.asList(s.split(\"\
    \")));\n                        for (int k = i; k < array.length; k++) {\n   \
    \                         if (k + n >= array.length) {\n                     \
    \           result1.add(\"\");\n                                continue;\n  \
    \                          }\n                            ArrayList<String> array4\
    \ = new ArrayList<String>(Arrays.asList(s.split(\"\")));\n                   \
    \         for (int l = i; l < array.length; l++) {\n                         \
    \       if (l + n >= array.length) {\n                                    result1.add(\"\
    \");\n                                    continue;\n                        \
    \        }\n                                ArrayList<String> array5 = new ArrayList<String>(Arrays.asList(s.split(\"\
    \")));\n                                for (int m = i; m < array.length; m++)\
    \ {\n                                    if (m + n >= array.length) {\n      \
    \                                  result1.add(\"\");\n                      \
    \                  continue;\n                                    }\n        \
    \                            ArrayList<String> array6 = new ArrayList<String>(Arrays.asList(s.split(\"\
    \")));\n                                    for (int n = i; n < array.length;\
    \ n++) {\n                                        if (n + n >= array.length) {\n\
    \                                            result1.add(\"\");\n            \
    \                                continue;\n                                 \
    \       }\n                                        ArrayList<String> array7 =\
    \ new ArrayList<String>(Arrays.asList(s.split(\"\")));\n                     \
    \                   for (int o = i; o < array.length; o++) {\n               \
    \                             if (o + n >= array.length) {\n                 \
    \                               result1.add(\"\");\n                         \
    \                       continue;\n                                          \
    \  }\n                                            ArrayList<String> array8 = new\
    \ ArrayList<String>(Arrays.asList(s.split(\"\")));\n                         \
    \                   for (int p = i; p < array.length; p++) {\n               \
    \                                 if (p + n >= \n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdshfo2sk.java:89: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpdshfo2sk.java:90: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659977318
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // Your code goes here\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfbfom33b.java:27: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659977318
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        if (s.isEmpty()) {\n            return new ArrayList<>();\n     \
    \   }\n\n        ArrayList<String> words = new ArrayList<>();\n        long n\
    \ = Long.parseLong(n);\n        char[] s = s.toCharArray();\n        Arrays.sort(s);\n\
    \n        long index = 0;\n        long count = 0;\n        for (int i = 0; i\
    \ < s.length; ++i) {\n            if (s[i] == ' ') {\n                words.add(s.substring(index,\
    \ i));\n                index = i + 1;\n                count = 1;\n         \
    \   } else {\n                count += 1;\n            }\n            if (count\
    \ >= n) {\n                words.add(s.substring(index, i));\n               \
    \ index = i;\n                count = 0;\n            }\n        }\n\n       \
    \ if (index < s.length) words.add(s.substring(index));\n\n        return words;\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe7ionvih.java:31: error: variable n is already defined in method\
    \ selectWords(String,long)\n        long n = Long.parseLong(n);\n            \
    \ ^\n/tmp/tmpe7ionvih.java:31: error: incompatible types: long cannot be converted\
    \ to String\n        long n = Long.parseLong(n);\n                           \
    \     ^\n/tmp/tmpe7ionvih.java:32: error: variable s is already defined in method\
    \ selectWords(String,long)\n        char[] s = s.toCharArray();\n            \
    \   ^\n/tmp/tmpe7ionvih.java:32: error: cannot find symbol\n        char[] s =\
    \ s.toCharArray();\n                    ^\n  symbol:   method toCharArray()\n\
    \  location: variable s of type char[]\n/tmp/tmpe7ionvih.java:39: error: cannot\
    \ find symbol\n                words.add(s.substring(index, i));\n           \
    \                ^\n  symbol:   method substring(long,int)\n  location: variable\
    \ s of type char[]\n/tmp/tmpe7ionvih.java:46: error: cannot find symbol\n    \
    \            words.add(s.substring(index, i));\n                           ^\n\
    \  symbol:   method substring(long,int)\n  location: variable s of type char[]\n\
    /tmp/tmpe7ionvih.java:52: error: cannot find symbol\n        if (index < s.length)\
    \ words.add(s.substring(index));\n                                         ^\n\
    \  symbol:   method substring(long)\n  location: variable s of type char[]\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n7 errors\n"
  stdout: ''
  timestamp: 1659977318
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> ans = new ArrayList<String>();\n        final String\
    \ vowels = \"aeiouAEIOU\";\n        if (s.isEmpty()) {\n            return ans;\n\
    \        }\n        final String vowelsString = vowels.toUpperCase();\n      \
    \  if (n < 0) {\n            return new ArrayList<String>();\n        }\n    \
    \    if (n == 0) {\n            ans.add(s);\n            return ans;\n       \
    \ }\n        final Pattern p = Pattern.compile(\".*\\\\s.*\");\n        final\
    \ Matcher m = p.matcher(s);\n        while (m.find()) {\n            final String\
    \ word = m.group().toUpperCase();\n            if (vowelsString.contains(word))\
    \ {\n                ans.add(word);\n            }\n            if (word.length()\
    \ == n) {\n                ans.add(word);\n            }\n        }\n        return\
    \ ans;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptu4d7sy_.java:39: error: cannot find symbol\n        final Pattern\
    \ p = Pattern.compile(\".*\\\\s.*\");\n              ^\n  symbol:   class Pattern\n\
    \  location: class Problem\n/tmp/tmptu4d7sy_.java:39: error: cannot find symbol\n\
    \        final Pattern p = Pattern.compile(\".*\\\\s.*\");\n                 \
    \         ^\n  symbol:   variable Pattern\n  location: class Problem\n/tmp/tmptu4d7sy_.java:40:\
    \ error: cannot find symbol\n        final Matcher m = p.matcher(s);\n       \
    \       ^\n  symbol:   class Matcher\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1659977318
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // TODO: define selectWords here\n        // return something\n \
    \   }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmyjc9flt.java:28: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659977318
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        boolean\
    \ empty = s.isEmpty();\n        if(empty && n > 0) {\n            ArrayList<String>\
    \ temp = new ArrayList<String>();\n            temp = selectWords(\"\",n);\n \
    \           result = new ArrayList<String>(temp);\n        } else if(empty &&\
    \ n < 0) {\n            ArrayList<String> temp = new ArrayList<String>();\n  \
    \          temp = selectWords(\"\",-n);\n            result = new ArrayList<String>(temp);\n\
    \        } else {\n            String word = \"\";\n            ArrayList<String>\
    \ temp = new ArrayList<String>();\n            for(String i: s.split(\" \")) {\n\
    \                if(word.length() == n) {\n                    temp.add(word);\n\
    \                    word = \"\";\n                } else {\n                \
    \    word += i;\n                }\n            }\n            result.addAll(temp);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr6gsrhe8.java:52)\n"
  stdout: ''
  timestamp: 1659977319
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        if (s\
    \ == null || s.length() == 0) {\n            return result;\n        }\n     \
    \   boolean isFirst = true;\n        long cur = 0;\n        boolean isLast = n\
    \ % 1 == 0;\n        char[] arr = s.toCharArray();\n        for (int i = 0; i\
    \ < arr.length; i++) {\n            char c = arr[i];\n            if (c == ' ')\
    \ {\n                if (isFirst) {\n                    isFirst = false;\n  \
    \                  cur = 0;\n                } else {\n                    int\
    \ cNext = arr[i + 1];\n                    if (cNext == ' ') {\n             \
    \           result.add(new String(new char[] {c, cNext}));\n                 \
    \       cur++;\n                        i += 2;\n                    } else if\
    \ (cNext != ' ') {\n                        result.add(new String(new char[] {c,\
    \ cNext}));\n                        cur++;\n                    }\n         \
    \       }\n            }\n        }\n        if (!isLast) {\n            while\
    \ (cur > 0) {\n                result.add(new String(new char[] {arr[arr.length\
    \ - 1], ''}));\n                cur--;\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ht1j9cm.java:55: error: empty character literal\n            \
    \    result.add(new String(new char[] {arr[arr.length - 1], ''}));\n         \
    \                                                              ^\n/tmp/tmp6ht1j9cm.java:55:\
    \ error: illegal start of expression\n                result.add(new String(new\
    \ char[] {arr[arr.length - 1], ''}));\n                                      \
    \                                    ^\n/tmp/tmp6ht1j9cm.java:59: error: illegal\
    \ start of type\n        return result;\n        ^\n/tmp/tmp6ht1j9cm.java:59:\
    \ error: <identifier> expected\n        return result;\n                     ^\n\
    /tmp/tmp6ht1j9cm.java:61: error: class, interface, enum, or record expected\n\
    \    public static void main(String[] args) {\n                  ^\n/tmp/tmp6ht1j9cm.java:63:\
    \ error: as of release 1.4, 'assert' is a keyword, and may not be used as an identifier\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    ^\n/tmp/tmp6ht1j9cm.java:64: error: as of\
    \ release 1.4, 'assert' is a keyword, and may not be used as an identifier\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    ^\n/tmp/tmp6ht1j9cm.java:65: error: as of release 1.4, 'assert' is a keyword,\
    \ and may not be used as an identifier\n    assert(selectWords((\"Hello world\"\
    ), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n\
    \    ^\n/tmp/tmp6ht1j9cm.java:66: error: as of release 1.4, 'assert' is a keyword,\
    \ and may not be used as an identifier\n    assert(selectWords((\"Uncle sam\"\
    ), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n\
    \    ^\n/tmp/tmp6ht1j9cm.java:67: error: as of release 1.4, 'assert' is a keyword,\
    \ and may not be used as an identifier\n    assert(selectWords((\"\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    ^\n/tmp/tmp6ht1j9cm.java:68: error:\
    \ as of release 1.4, 'assert' is a keyword, and may not be used as an identifier\n\
    \    assert(selectWords((\"a b c d e f\"), (1l"
  stdout: ''
  timestamp: 1659977318
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        if (s\
    \ == null) return result;\n        int len = (int) Math.ceil(s.length()/n);\n\
    \        for (int i = 0; i< len; i++) {\n            String sub = s.substring(i,\
    \ n+i);\n            System.out.println(sub);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjqhwh7b4.java:30: error: incompatible types: possible lossy conversion\
    \ from long to int\n            String sub = s.substring(i, n+i);\n          \
    \                               ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659977319
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // Your code here\n        int counter = 0;\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        for (int i = 0; i < s.length(); i++) {\n\
    \            if (Character.isLetterOrDigit(s.charAt(i))) {\n                for\
    \ (int j = 0; j < n; j++) {\n                    if (s.charAt(i) == s.charAt(j))\
    \ {\n                        counter++;\n                    }\n             \
    \   }\n                if (counter == n) {\n                    words.add(s.substring(i,\
    \ i + n));\n                    counter = 0;\n                }\n            }\n\
    \        }\n        return words;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw8hud7el.java:37: error: incompatible types: possible lossy conversion\
    \ from long to int\n                    words.add(s.substring(i, i + n));\n  \
    \                                             ^\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659977319
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<>();\n\n        // Implement\
    \ here\n        if (s == null || s.isEmpty()) return result;\n\n        Set<String>\
    \ words = extractAllWords(s);\n        for (String word : words) {\n         \
    \   if (word.contains(String.valueOf(n))) result.add(word);\n        }\n\n   \
    \     return result;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6gqqcjnt.java:31: error: cannot find symbol\n        Set<String>\
    \ words = extractAllWords(s);\n                            ^\n  symbol:   method\
    \ extractAllWords(String)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977319
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> wordList = new ArrayList<String>();\n        if(s\
    \ == null || s.equals(\"\")) {\n            return wordList;\n        }\n    \
    \    if(s.length() < n) {\n            return wordList;\n        }\n        \n\
    \        int i = 0;\n        int j = s.length() - 1;\n        while(i < j) {\n\
    \            String str = \"\";\n            if(s.charAt(i) == ' ' || s.charAt(i)\
    \ == '\\n' || s.charAt(i) == '\\r' || s.charAt(i) == '\\t') {\n              \
    \  str += s.charAt(i);\n                i++;\n            }\n            else\
    \ {\n                while(str.length() < n) {\n                    str += s.charAt(i++);\n\
    \                }\n            }\n            while(str.length() < n) {\n   \
    \             j--;\n                if(s.charAt(j) == ' ' || s.charAt(j) == '\\\
    n' || s.charAt(j) == '\\r' || s.charAt(j) == '\\t') {\n                    j--;\n\
    \                }\n            }\n            wordList.add(str);\n        }\n\
    \        return wordList;\n    }\n    public static void main(String[] args) {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: -1\n\tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\
    \tat java.base/java.lang.String.charAt(String.java:1515)\n\tat Problem.selectWords(tmpnuez61g7.java:49)\n\
    \tat Problem.main(tmpnuez61g7.java:58)\n"
  stdout: ''
  timestamp: 1659977320
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> ret = new ArrayList<>();\n        ArrayList<String>\
    \ curr = new ArrayList<>();\n        boolean startNext = false;\n        for(char\
    \ c:s.toCharArray()){\n            if(c==' '||c=='.'||c==','||c=='('||c==')'||c=='{'||c=='}'||c=='['||c==']'||c=='\"\
    '})\n                startNext = true;\n            if(c==' ')\n             \
    \   startNext = true;\n            if(c=='.')\n                startNext = true;\n\
    \            if(c==',')\n                startNext = true;\n            if(c=='(')\n\
    \                startNext = true;\n            if(c==')')\n                startNext\
    \ = true;\n            if(c=='{')\n                startNext = true;\n       \
    \     if(c=='}')\n                startNext = true;\n            if(c=='[')\n\
    \                startNext = true;\n            if(c==']')\n                startNext\
    \ = true;\n            if(c=='\"')\n                startNext = true;\n      \
    \      if(!startNext)\n                curr=new ArrayList<String>(curr);\n   \
    \         curr=new ArrayList<String>(curr);\n            curr.add(c);\n      \
    \      if(curr.size()==n)\n                ret.addAll(new ArrayList<String>(curr));\n\
    \        }\n        return ret;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpglpoqipl.java:30: error: ')' expected\n            if(c==' '||c=='.'||c==','||c=='('||c==')'||c=='{'||c=='}'||c=='['||c==']'||c=='\"\
    '})\n                                                                        \
    \                     ^\n/tmp/tmpglpoqipl.java:30: error: illegal start of expression\n\
    \            if(c==' '||c=='.'||c==','||c=='('||c==')'||c=='{'||c=='}'||c=='['||c==']'||c=='\"\
    '})\n                                                                        \
    \                      ^\n/tmp/tmpglpoqipl.java:59: error: illegal start of type\n\
    \        return ret;\n        ^\n/tmp/tmpglpoqipl.java:59: error: <identifier>\
    \ expected\n        return ret;\n                  ^\n/tmp/tmpglpoqipl.java:61:\
    \ error: class, interface, enum, or record expected\n    public static void main(String[]\
    \ args) {\n                  ^\n/tmp/tmpglpoqipl.java:63: error: as of release\
    \ 1.4, 'assert' is a keyword, and may not be used as an identifier\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    ^\n/tmp/tmpglpoqipl.java:64: error: as of\
    \ release 1.4, 'assert' is a keyword, and may not be used as an identifier\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    ^\n/tmp/tmpglpoqipl.java:65: error: as of release 1.4, 'assert' is a keyword,\
    \ and may not be used as an identifier\n    assert(selectWords((\"Hello world\"\
    ), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n\
    \    ^\n/tmp/tmpglpoqipl.java:66: error: as of release 1.4, 'assert' is a keyword,\
    \ and may not be used as an identifier\n    assert(selectWords((\"Uncle sam\"\
    ), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n\
    \    ^\n/tmp/tmpglpoqipl.java:67: error: as of release 1.4, 'assert' is a keyword,\
    \ and may not be used as an identifier\n    assert(selectWords((\"\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    ^\n/tmp/tmpglpoqipl.java:68: error:\
    \ as of release 1.4, 'assert' is a keyword, and may not be used as"
  stdout: ''
  timestamp: 1659977319
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        if (s\
    \ == null || s.length() == 0 || n < 0) {\n            return words;\n        }\n\
    \        ArrayList<String> wordsList = selectWordsHelper(s, n, words);\n     \
    \   if (wordsList.isEmpty()) {\n            return words;\n        }\n       \
    \ // Sort by length, then alphabetically in case of ties.\n        Collections.sort(wordsList);\n\
    \        return wordsList;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjq295ysn.java:30: error: cannot find symbol\n        ArrayList<String>\
    \ wordsList = selectWordsHelper(s, n, words);\n                              \
    \        ^\n  symbol:   method selectWordsHelper(String,long,ArrayList<String>)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977319
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        int\
    \ len = s.length();\n        if (n == 0) return result;\n        for (int i =\
    \ 0; i < len; i++) {\n            boolean con = true;\n            for (int j\
    \ = 0; j < n; j++) {\n                if (s.charAt(i) != s.charAt(i+j)) {\n  \
    \                  con = false;\n                    break;\n                }\n\
    \            }\n            if (con) {\n                result.add(s.substring(i,\
    \ i+n));\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbiml7y4d.java:38: error: incompatible types: possible lossy conversion\
    \ from long to int\n                result.add(s.substring(i, i+n));\n       \
    \                                    ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659977319
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        ArrayList<String>\
    \ wordsWithCounts = new ArrayList<String>();\n        boolean first = false;\n\
    \        boolean firstTwo = false;\n        boolean found = false;\n        String\
    \ firstLetter = s.substring(0, 1);\n        char firstChar = firstLetter.toCharArray()[0];\n\
    \        \n        for (int i = 0; i < s.length(); i ++) {\n            char letter\
    \ = s.charAt(i);\n            \n            if (letter != ' ' && letter != firstChar)\
    \ {\n                if (!found) {\n                    if (first) {\n       \
    \                 wordsWithCounts.add(s.substring(i, i + n));\n              \
    \          found = true;\n                    }\n                }\n         \
    \   }\n            \n            if (found) {\n                if (letter == firstChar)\
    \ {\n                    found = false;\n                    first = true;\n \
    \                   firstTwo = false;\n                }\n                \n \
    \               if (!found) {\n                    if (firstTwo) {\n         \
    \               wordsWithCounts.add(s.substring(i, i + n));\n                \
    \        found = true;\n                    }\n                }\n           \
    \ }\n            \n            if (letter == firstChar && !found) {\n        \
    \        found = true;\n                first = true;\n                firstTwo\
    \ = true;\n            }\n        }\n        \n        if (first) {\n        \
    \    result.add(0, s.substring(0, 1));\n        }\n        \n        for (int\
    \ i = 1; i < wordsWithCounts.size(); i ++) {\n            String currentWord =\
    \ wordsWithCounts.get(i);\n            int currentWordCount = 1;\n           \
    \ \n            for (int j = 0; j < currentWord.length(); j ++) {\n          \
    \      if (currentWord.charAt(j) != s.charAt(j)) {\n                    currentWordCount++;\n\
    \                }\n            }\n            \n            if (currentWordCount\
    \ == n) {\n                result.add(currentWord);\n            }\n        }\n\
    \        \n        if (result.isEmpty()) {\n            return new ArrayList<String>();\n\
    \        }\n        \n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3yipr1so.java:40: error: incompatible types: possible lossy conversion\
    \ from long to int\n                        wordsWithCounts.add(s.substring(i,\
    \ i + n));\n                                                             ^\n/tmp/tmp3yipr1so.java:55:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \                    wordsWithCounts.add(s.substring(i, i + n));\n           \
    \                                                  ^\nNote: Some messages have\
    \ been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659977319
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        if (s\
    \ != \"\" && s.matches(\"[a-z ]+\")) {\n            String firstChars = s.substring(0,\
    \ 1);\n            String rest = s.substring(1);\n            for (String word\
    \ : selectWords(rest, n)) {\n                if (firstChars.contains(word)) {\n\
    \                    words.add(word);\n                }\n            }\n    \
    \    }\n        return words;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcvpo_a0z.java:39)\n"
  stdout: ''
  timestamp: 1659977320
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<>();\n        ArrayList<String>\
    \ results = new ArrayList<>();\n        // your code goes here\n        List<String>\
    \ wordsWithNConsonants = \n                Arrays.stream(s, (s, index) -> index+1).filter(i->s.length()-1+i==n).toList();\n\
    \        words.ensureCapacity(wordsWithNConsonants.size());\n        words.addAll(wordsWithNConsonants);\n\
    \        results.addAll(words);\n        return results;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5zoskzh8.java:30: error: no suitable method found for stream(String,(s,index)-[...]x\
    \ + 1)\n                Arrays.stream(s, (s, index) -> index+1).filter(i->s.length()-1+i==n).toList();\n\
    \                      ^\n    method Arrays.<T#1>stream(T#1[]) is not applicable\n\
    \      (cannot infer type-variable(s) T#1\n        (actual and formal argument\
    \ lists differ in length))\n    method Arrays.<T#2>stream(T#2[],int,int) is not\
    \ applicable\n      (cannot infer type-variable(s) T#2\n        (actual and formal\
    \ argument lists differ in length))\n  where T#1,T#2 are type-variables:\n   \
    \ T#1 extends Object declared in method <T#1>stream(T#1[])\n    T#2 extends Object\
    \ declared in method <T#2>stream(T#2[],int,int)\n/tmp/tmp5zoskzh8.java:30: error:\
    \ variable s is already defined in method selectWords(String,long)\n         \
    \       Arrays.stream(s, (s, index) -> index+1).filter(i->s.length()-1+i==n).toList();\n\
    \                                  ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659977320
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        if (s==null || s.length()==0) {\n            return new ArrayList<>();\n\
    \        }\n        ArrayList<String> words = new ArrayList<>();\n        Stack<Character>\
    \ wordChars = new Stack<>();\n        for (char c : s.toCharArray()) {\n     \
    \       if (Character.isLetter(c)) {\n                if (wordChars.isEmpty()\
    \ || wordChars.peek().compareTo(c) > 0) {\n                    wordChars.push(c);\n\
    \                }\n            } else if (Character.isSpaceChar(c)) {\n     \
    \           if (wordChars.size() >= n) {\n                    words.add(new String(wordChars.toArray()));\n\
    \                    wordChars.clear();\n                }\n            } else\
    \ {\n                wordChars.push(c);\n            }\n        }\n        if\
    \ (wordChars.size() >= n) {\n            words.add(new String(wordChars.toArray()));\n\
    \            wordChars.clear();\n        }\n        return words;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(selectWords((\"Mary had\
    \ a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpersrb5v9.java:38: error: no suitable constructor found for String(Object[])\n\
    \                    words.add(new String(wordChars.toArray()));\n           \
    \                   ^\n    constructor String.String(String) is not applicable\n\
    \      (argument mismatch; Object[] cannot be converted to String)\n    constructor\
    \ String.String(char[]) is not applicable\n      (argument mismatch; Object[]\
    \ cannot be converted to char[])\n    constructor String.String(byte[]) is not\
    \ applicable\n      (argument mismatch; Object[] cannot be converted to byte[])\n\
    \    constructor String.String(StringBuffer) is not applicable\n      (argument\
    \ mismatch; Object[] cannot be converted to StringBuffer)\n    constructor String.String(StringBuilder)\
    \ is not applicable\n      (argument mismatch; Object[] cannot be converted to\
    \ StringBuilder)\n/tmp/tmpersrb5v9.java:46: error: no suitable constructor found\
    \ for String(Object[])\n            words.add(new String(wordChars.toArray()));\n\
    \                      ^\n    constructor String.String(String) is not applicable\n\
    \      (argument mismatch; Object[] cannot be converted to String)\n    constructor\
    \ String.String(char[]) is not applicable\n      (argument mismatch; Object[]\
    \ cannot be converted to char[])\n    constructor String.String(byte[]) is not\
    \ applicable\n      (argument mismatch; Object[] cannot be converted to byte[])\n\
    \    constructor String.String(StringBuffer) is not applicable\n      (argument\
    \ mismatch; Object[] cannot be converted to StringBuffer)\n    constructor String.String(StringBuilder)\
    \ is not applicable\n      (argument mismatch; Object[] cannot be converted to\
    \ StringBuilder)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659977320
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        return selectWords(Arrays.asList(s.split(\" \")), n);\n    }\n  \
    \  public static void main(String[] args) {\n    assert(selectWords((\"Mary had\
    \ a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp_8lobfv.java:26: error: incompatible types: no instance(s) of\
    \ type variable(s) T exist so that List<T> conforms to String\n        return\
    \ selectWords(Arrays.asList(s.split(\" \")), n);\n               ^\n  where T\
    \ is a type-variable:\n    T extends Object declared in method <T>asList(T...)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659977318
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        ArrayList<Character>\
    \ charArray = selectChars(s);\n        ArrayList<Character> tempCharArray = new\
    \ ArrayList<Character>();\n        long count = 0;\n        for(char c : charArray){\n\
    \            if(count==n){\n                result.add(new String(tempCharArray));\n\
    \            }\n            tempCharArray.add(c);\n            count++;\n    \
    \    }\n        if(count==0){\n            result.add(new String(tempCharArray));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprlb39x92.java:27: error: cannot find symbol\n        ArrayList<Character>\
    \ charArray = selectChars(s);\n                                         ^\n  symbol:\
    \   method selectChars(String)\n  location: class Problem\n/tmp/tmprlb39x92.java:32:\
    \ error: no suitable constructor found for String(ArrayList<Character>)\n    \
    \            result.add(new String(tempCharArray));\n                        \
    \   ^\n    constructor String.String(String) is not applicable\n      (argument\
    \ mismatch; ArrayList<Character> cannot be converted to String)\n    constructor\
    \ String.String(char[]) is not applicable\n      (argument mismatch; ArrayList<Character>\
    \ cannot be converted to char[])\n    constructor String.String(byte[]) is not\
    \ applicable\n      (argument mismatch; ArrayList<Character> cannot be converted\
    \ to byte[])\n    constructor String.String(StringBuffer) is not applicable\n\
    \      (argument mismatch; ArrayList<Character> cannot be converted to StringBuffer)\n\
    \    constructor String.String(StringBuilder) is not applicable\n      (argument\
    \ mismatch; ArrayList<Character> cannot be converted to StringBuilder)\n/tmp/tmprlb39x92.java:38:\
    \ error: no suitable constructor found for String(ArrayList<Character>)\n    \
    \        result.add(new String(tempCharArray));\n                       ^\n  \
    \  constructor String.String(String) is not applicable\n      (argument mismatch;\
    \ ArrayList<Character> cannot be converted to String)\n    constructor String.String(char[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Character> cannot be\
    \ converted to char[])\n    constructor String.String(byte[]) is not applicable\n\
    \      (argument mismatch; ArrayList<Character> cannot be converted to byte[])\n\
    \    constructor String.String(StringBuffer) is not applicable\n      (argument\
    \ mismatch; ArrayList<Character> cannot be converted to StringBuffer)\n    constructor\
    \ String.String(StringBuilder) is not applicable\n      (argument mismatch; ArrayList<Character>\
    \ cannot be converted to StringBuilder)\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full ou"
  stdout: ''
  timestamp: 1659977320
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // Write your code here\n        ArrayList<String> wordsFound = new\
    \ ArrayList<String>();\n        if (n == 0) {\n            return wordsFound;\n\
    \        }\n        if (s.length() == 0) {\n            return wordsFound;\n \
    \       }\n        String[] words = s.split(\" \");\n        for (String word\
    \ : words) {\n            String wordWithoutSpaces = word.replaceAll(\" \", \"\
    \");\n            int count = 0;\n            char[] letters = wordWithoutSpaces.toCharArray();\n\
    \            for (char letter : letters) {\n                if (Character.isLetter(letter))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count == n) {\n                wordsFound.add(word);\n            }\n\
    \        }\n        return wordsFound;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0qrbkvk5.java:51)\n"
  stdout: ''
  timestamp: 1659977320
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        return \"\";\n    }\n    public static void main(String[] args) {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj8scddpc.java:26: error: incompatible types: String cannot be converted\
    \ to ArrayList<String>\n        return \"\";\n               ^\n1 error\n"
  stdout: ''
  timestamp: 1659977320
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        \n \
    \       if (n == 0) return result;\n        \n        ArrayList<String> words\
    \ = s.split(\"\\\\s+\");\n        \n        for (String word : words) {\n    \
    \        // System.out.println(word);\n            if (word.matches(\"[aeiou]{\"\
    \ + n + \"}\")) {\n                result.add(word);\n            }\n        }\n\
    \        \n        // System.out.println(result);\n        return result;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgjh81ogq.java:30: error: incompatible types: String[] cannot be\
    \ converted to ArrayList<String>\n        ArrayList<String> words = s.split(\"\
    \\\\s+\");\n                                         ^\n1 error\n"
  stdout: ''
  timestamp: 1659977320
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        if (s.isEmpty())\
    \ return words;\n\n        char[] chars = s.toCharArray();\n        Arrays.sort(chars);\n\
    \        int minLength = 1;\n\n        boolean first = true;\n        for (int\
    \ i = 0; i < chars.length; i++) {\n            char c = chars[i];\n          \
    \  if (c == ' ' || c == '.' || c == '?' || c == '!' || c == ';' || c == ':' ||\
    \ c == ',') continue;\n            if (first == true) {\n                if (n\
    \ == chars.length - i) break;\n                first = false;\n            } else\
    \ if (n == chars.length - i - 1) {\n                words.add(s);\n          \
    \      break;\n            }\n        }\n\n        return words;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmldraa0k.java:49)\n"
  stdout: ''
  timestamp: 1659977320
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> list = new ArrayList<String>();\n        Arrays.stream(s.split(\"\
    \\\\s\")).filter(s -> s.length() == n).forEach(s -> list.add(s));\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        for (String str : list) {\n     \
    \       ArrayList<String> sub = selectWords(str, n);\n            result.addAll(sub);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpir0bh_o5.java:27: error: variable s is already defined in method\
    \ selectWords(String,long)\n        Arrays.stream(s.split(\"\\\\s\")).filter(s\
    \ -> s.length() == n).forEach(s -> list.add(s));\n                           \
    \                  ^\n/tmp/tmpir0bh_o5.java:27: error: variable s is already defined\
    \ in method selectWords(String,long)\n        Arrays.stream(s.split(\"\\\\s\"\
    )).filter(s -> s.length() == n).forEach(s -> list.add(s));\n                 \
    \                                                          ^\n2 errors\n"
  stdout: ''
  timestamp: 1659977320
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        if (s.equals(\"\")) {\n            return new ArrayList<>();\n  \
    \      }\n        String consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n        ArrayList<String> result = new ArrayList<>();\n        ArrayList<String>\
    \ temp = new ArrayList<>();\n        StringBuilder sb = new StringBuilder();\n\
    \        sb.append(s);\n        boolean match = false;\n        for (long i =\
    \ 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n            if\
    \ (ch == '[' || ch == ']') {\n                sb.append(ch);\n               \
    \ sb.append(consonants);\n                sb.append(ch);\n                match\
    \ = true;\n            }\n            if (match && Character.isUpperCase(ch))\
    \ {\n                sb.append(ch);\n                sb.append(consonants);\n\
    \                sb.append(ch);\n                match = true;\n            }\n\
    \            if (!match && Character.isLowerCase(ch)) {\n                sb.append(ch);\n\
    \                sb.append(consonants);\n                sb.append(ch);\n    \
    \            match = true;\n            }\n            if (!match && Character.isDigit(ch))\
    \ {\n                sb.append(ch);\n                sb.append(consonants);\n\
    \                sb.append(ch);\n                match = true;\n            }\n\
    \            if (!match && Character.isWhiteSpace(ch)) {\n                sb.append(ch);\n\
    \                sb.append(consonants);\n                sb.append(ch);\n    \
    \            match = true;\n            }\n        }\n        String[] words1\
    \ = sb.toString().replaceAll(\"[\\\\s]+\", \"\").split(\" \");\n        for (String\
    \ word : words) {\n            if (word.equals(sb.toString().replaceAll(\"[\\\\\
    s]+\", \"\").split(\" \")[words1.length])) {\n                temp.add(word);\n\
    \            }\n        }\n        result = new ArrayList<>(temp);\n        Arrays.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpen04r79z.java:36: error: incompatible types: possible lossy conversion\
    \ from long to int\n            char ch = s.charAt(i);\n                     \
    \          ^\n/tmp/tmpen04r79z.java:61: error: cannot find symbol\n          \
    \  if (!match && Character.isWhiteSpace(ch)) {\n                             \
    \      ^\n  symbol:   method isWhiteSpace(char)\n  location: class Character\n\
    /tmp/tmpen04r79z.java:69: error: cannot find symbol\n        for (String word\
    \ : words) {\n                           ^\n  symbol:   variable words\n  location:\
    \ class Problem\n/tmp/tmpen04r79z.java:75: error: no suitable method found for\
    \ sort(ArrayList<String>)\n        Arrays.sort(result);\n              ^\n   \
    \ method Arrays.sort(int[]) is not applicable\n      (argument mismatch; ArrayList<String>\
    \ cannot be converted to int[])\n    method Arrays.sort(long[]) is not applicable\n\
    \      (argument mismatch; ArrayList<String> cannot be converted to long[])\n\
    \    method Arrays.sort(short[]) is not applicable\n      (argument mismatch;\
    \ ArrayList<String> cannot be converted to short[])\n    method Arrays.sort(char[])\
    \ is not applicable\n      (argument mismatch; ArrayList<String> cannot be converted\
    \ to char[])\n    method Arrays.sort(byte[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<String> cannot be converted to byte[])\n    method Arrays.sort(float[])\
    \ is not applicable\n      (argument mismatch; ArrayList<String> cannot be converted\
    \ to float[])\n    method Arrays.sort(double[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<String> cannot be converted to double[])\n    method Arrays.sort(Object[])\
    \ is not applicable\n      (argument mismatch; ArrayList<String> cannot be converted\
    \ to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<? super T#1>) is\
    \ not applicable\n      (cannot infer type-variable(s) T#1\n        (actual and\
    \ formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  wh"
  stdout: ''
  timestamp: 1659977320
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        String words[] = selectWords(s.toLowerCase(), n, new StringBuffer());\n\
    \        ArrayList<String> result = new ArrayList<>();\n        for (String str\
    \ : words)\n            result.add(str);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfiy2zohx.java:26: error: method selectWords in class Problem cannot\
    \ be applied to given types;\n        String words[] = selectWords(s.toLowerCase(),\
    \ n, new StringBuffer());\n                         ^\n  required: String,long\n\
    \  found:    String,long,StringBuffer\n  reason: actual and formal argument lists\
    \ differ in length\n1 error\n"
  stdout: ''
  timestamp: 1659977320
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        return null;\n    }\n    public static void main(String[] args) {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ long)\" is null\n\tat Problem.main(tmpmjqq7hir.java:29)\n"
  stdout: ''
  timestamp: 1659977180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        if (s == null || n == 0) {\n            return new ArrayList<String>();\n\
    \        }\n\n        ArrayList<String> list = new ArrayList<String>();\n    \
    \    if (s.length() == 0) {\n            return list;\n        }\n\n        list.add(\"\
    \");\n        list.add(s);\n\n        for (int i = 0; i < s.length(); i++) {\n\
    \            int nCons = i + 1;\n            if (nCons >= s.length()) {\n    \
    \            nCons = s.length() - 1;\n            }\n\n            char c = s.charAt(nCons);\n\
    \n            if (Character.isLetter(c)) {\n                if (!list.contains(\"\
    \")) {\n                    list.add(\"\");\n                }\n\n           \
    \     list.add(s.substring(0, nCons));\n            }\n        }\n\n        if\
    \ (list.size() == n) {\n            return list;\n        }\n        else {\n\
    \            return new ArrayList<String>();\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppnxkxrxr.java:63)\n"
  stdout: ''
  timestamp: 1659977320
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        if (s.length()\
    \ == 0) {\n            return result;\n        }\n        String[] split = s.split(\"\
    \ \");\n        String[] subStrings = s.split(\"\");\n        int count = 0;\n\
    \        for (int i = 0; i < split.length; i++) {\n            if (subStrings[i].length()\
    \ == n) {\n                count++;\n            }\n        }\n        if (count\
    \ == n) {\n            for (int i = 0; i < split.length; i++) {\n            \
    \    if (subStrings[i].length() == n) {\n                    result.add(split[i]);\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk4svscvm.java:48)\n"
  stdout: ''
  timestamp: 1659977320
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        String regex = \"(?i)[\\\\p{L}\\\\p{M}\\\\p{N}]+\";\n        ArrayList<String>\
    \ res = new ArrayList<>();\n        if (s.equals(\"\")) {\n            return\
    \ res;\n        }\n        Matcher m = Pattern.compile(regex).matcher(s);\n  \
    \      Set<String> consonants = new HashSet<>();\n        while (m.find()) {\n\
    \            String word = m.group();\n            if (!consonants.contains(word))\
    \ {\n                consonants.add(word);\n                if (word.matches(\"\
    (?i)\" + regex)) {\n                    String sub = word.substring(1, word.length());\n\
    \                    res.add(sub);\n                }\n            }\n       \
    \ }\n        return res;\n    }\n    public static void main(String[] args) {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9n3mo3hy.java:31: error: cannot find symbol\n        Matcher m\
    \ = Pattern.compile(regex).matcher(s);\n        ^\n  symbol:   class Matcher\n\
    \  location: class Problem\n/tmp/tmp9n3mo3hy.java:31: error: cannot find symbol\n\
    \        Matcher m = Pattern.compile(regex).matcher(s);\n                    ^\n\
    \  symbol:   variable Pattern\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1659977320
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        if(s.isEmpty())\
    \ return result;\n        \n        if(n >= s.length()) {\n            for(String\
    \ s2 : s.split(\" \"))\n                if(s2.length() == n) result.add(s2);\n\
    \            return result;\n        }\n        \n        for(String s2 : s.split(\"\
    \ \"))\n            if(s2.length() == n && !s2.contains(\" \"))\n            \
    \    result.add(s2);\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph3b8v_oy.java:41)\n"
  stdout: ''
  timestamp: 1659977320
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> res = new ArrayList<>();\n        try{\n      \
    \      if(s.length() == 0) return res;\n            String one = s.replaceFirst(\"\
    \ \", \"\");\n            Pattern pattern = Pattern.compile(\"[\\\\p{Punct}\\\\\
    p{InCombiningDiacriticalMarks}]\");\n            Matcher matcher = pattern.matcher(one);\n\
    \            while(matcher.find()) {\n                String two = matcher.group();\n\
    \                Pattern pattern2 = Pattern.compile(\"[\\\\p{Punct}\\\\p{InCombiningDiacriticalMarks}]\"\
    );\n                Matcher matcher2 = pattern2.matcher(two);\n              \
    \  while(matcher2.find()) {\n                    String three = matcher2.group();\n\
    \                    Pattern pattern3 = Pattern.compile(\"[\\\\p{Punct}\\\\p{InCombiningDiacriticalMarks}]\"\
    );\n                    Matcher matcher3 = pattern3.matcher(three);\n        \
    \            while(matcher3.find()) {\n                        String four = matcher3.group();\n\
    \                        Pattern pattern4 = Pattern.compile(\"[\\\\p{Punct}\\\\\
    p{InCombiningDiacriticalMarks}]\");\n                        Matcher matcher4\
    \ = pattern4.matcher(four);\n                        while(matcher4.find()) {\n\
    \                            String five = matcher4.group();\n               \
    \             Pattern pattern5 = Pattern.compile(\"[\\\\p{Punct}\\\\p{InCombiningDiacriticalMarks}]\"\
    );\n                            Matcher matcher5 = pattern5.matcher(five);\n \
    \                           while(matcher5.find()) {\n                       \
    \         String six = matcher5.group();\n                                Pattern\
    \ pattern6 = Pattern.compile(\"[\\\\p{Punct}\\\\p{InCombiningDiacriticalMarks}]\"\
    );\n                                Matcher matcher6 = pattern6.matcher(six);\n\
    \                                while(matcher6.find()) {\n                  \
    \                  String seven = matcher6.group();\n                        \
    \            Pattern pattern7 = Pattern.compile(\"[\\\\p{Punct}\\\\p{InCombiningDiacriticalMarks}]\"\
    );\n                                    Matcher matcher7 = pattern7.matcher(seven);\n\
    \                                    while(matcher7.find()) {\n              \
    \                          String eight = matcher7.group();\n                \
    \                        Pattern pattern8 = Pattern.compile(\"[\\\\p{Punct}\\\\\
    p{InCombiningDiacriticalMarks}]\");\n                                        Matcher\
    \ matcher8 = pattern8.matcher(eight);\n                                      \
    \  while(matcher8.find()) {\n    }\n    public static void main(String[] args)\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp0br06wg.java:62: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpp0br06wg.java:27: error: 'try'\
    \ without 'catch', 'finally' or resource declarations\n        try{\n        ^\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659977320
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<>();\n        if (s.isEmpty())\
    \ return result;\n        if (n < 0) return result;\n        \n        ArrayList<String>\
    \ tmp = new ArrayList<>();\n        boolean hasLetter = false, hasLetter2 = false,\
    \ hasSpace = false;\n        char firstLetter = s.charAt(0);\n        long count\
    \ = 1;\n        \n        if (n>=2) {\n            if (s.contains(\"u\")) {\n\
    \                hasLetter = true;\n                hasSpace = true;\n       \
    \         count++;\n            }\n        }\n        if (n>=3) {\n          \
    \  if (s.contains(\"ll\")) {\n                hasLetter = true;\n            \
    \    hasSpace = true;\n                count++;\n            }\n        }\n  \
    \      if (n>=4) {\n            if (s.contains(\"y\")) {\n                hasLetter\
    \ = true;\n                hasSpace = true;\n                count++;\n      \
    \      }\n        }\n        if (n>=5) {\n            if (s.contains(\"o\")) {\n\
    \                hasLetter = true;\n                hasSpace = true;\n       \
    \         count++;\n            }\n        }\n        if (n>=6) {\n          \
    \  if (s.contains(\"e\")) {\n                hasLetter = true;\n             \
    \   hasSpace = true;\n                count++;\n            }\n        }\n   \
    \     if (n>=7) {\n            if (s.contains(\"s\")) {\n                hasLetter\
    \ = true;\n                hasSpace = true;\n                count++;\n      \
    \      }\n        }\n        if (n>=8) {\n            if (s.contains(\"t\")) {\n\
    \                hasLetter = true;\n                hasSpace = true;\n       \
    \         count++;\n            }\n        }\n        if (n>=9) {\n          \
    \  if (s.contains(\"p\")) {\n                hasLetter = true;\n             \
    \   hasSpace = true;\n                count++;\n            }\n        }\n   \
    \     if (n>=10) {\n            if (s.contains(\"r\")) {\n                hasLetter\
    \ = true;\n                hasSpace = true;\n                count++;\n      \
    \      }\n        }\n        if (n>=11) {\n            if (s.contains(\"a\"))\
    \ {\n                hasLetter = true;\n                hasSpace = true;\n   \
    \             count++;\n            }\n        }\n        if (n>=12) {\n     \
    \       if (s.contains(\"n\")) {\n                hasLetter = true;\n        \
    \        hasSpace = true;\n                count++;\n            }\n        }\n\
    \        if (n>=13) {\n            if (s.contains(\"g\")) {\n                hasLetter\
    \ = true;\n                hasSpace = true;\n                count++;\n      \
    \      }\n        }\n        if (n>=14) {\n            if (s.contains(\"a\"))\
    \ {\n                hasLetter = true;\n                hasSpace = true;\n   \
    \             count++;\n            }\n        }\n        if (n>=15) {\n     \
    \       if (s.contains(\"n\")) {\n                hasLetter = true;\n        \
    \        hasSpace = true;\n                count++;\n            }\n        }\n\
    \        if (n>=16) {\n            if (s.contains(\"g\")) {\n                hasLetter\
    \ = true;\n                has\n    }\n    public static void main(String[] args)\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8kprk9f2.java:136: error: not a statement\n                has\n\
    \                ^\n/tmp/tmp8kprk9f2.java:136: error: ';' expected\n         \
    \       has\n                   ^\n/tmp/tmp8kprk9f2.java:138: error: illegal start\
    \ of expression\n    public static void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659977320
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        System.out.println(s.replaceAll(\"\
    (?i)\\\\p{Punct}+\", \"\"));\n        if (s.isEmpty()) {\n            return result;\n\
    \        }\n        if (n < 0) {\n            return result;\n        }\n    \
    \    if (n <= 0) {\n            return result;\n        }\n        if (n >= s.length())\
    \ {\n            return result;\n        }\n        String word = s.replaceAll(\"\
    (?i)\\\\p{Punct}+\", \"\");\n        long l = word.length();\n        long count\
    \ = 0;\n        for (int i = 0; i < l; i++) {\n            if (word.charAt(i)\
    \ == 'l') {\n                count++;\n                if (count == n) {\n   \
    \                 result.add(word);\n                }\n            }\n      \
    \  }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp51lz7y37.java:54)\n"
  stdout: 'Mary had a little lamb

    '
  timestamp: 1659977321
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        \n \
    \       // If the string is empty return an empty ArrayList\n        if (s.isEmpty())\
    \ {\n            return result;\n        }\n        \n        // If the string\
    \ is empty return an empty ArrayList\n        if (n == 0) {\n            return\
    \ result;\n        }\n        \n        // Declare a String array that stores\
    \ all the consonants encountered in the string\n        // Declare an Integer\
    \ array that stores the number of consonants in each word\n        String[] consonants\
    \ = s.replaceAll(\"[aeiou]\", \"\").toLowerCase().split(\"\");\n        int[]\
    \ count = new int[consonants.length];\n        \n        // Loop through the array\
    \ of consonants and count the occurrences of each one\n        for (int i = 0;\
    \ i < consonants.length; i++) {\n            int count = 0;\n            for (int\
    \ j = 0; j < s.length(); j++) {\n                if (s.charAt(j) == consonants[i])\
    \ {\n                    count++;\n                }\n            }\n        \
    \    count[i] = count;\n        }\n        \n        // Sort the count array in\
    \ descending order\n        Arrays.sort(count, Collections.reverseOrder());\n\
    \        \n        // Loop through the count array and add each word which has\
    \ n occurrences to the result ArrayList\n        for (int i = 0; i < count.length;\
    \ i++) {\n            if (count[i] == n) {\n                result.add(s.substring(i,\
    \ i+1));\n            }\n        }\n        \n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn4by6q5v.java:45: error: variable count is already defined in method\
    \ selectWords(String,long)\n            int count = 0;\n                ^\n/tmp/tmpn4by6q5v.java:47:\
    \ error: bad operand types for binary operator '=='\n                if (s.charAt(j)\
    \ == consonants[i]) {\n                                ^\n  first type:  char\n\
    \  second type: String\n/tmp/tmpn4by6q5v.java:51: error: array required, but int\
    \ found\n            count[i] = count;\n                 ^\n/tmp/tmpn4by6q5v.java:55:\
    \ error: no suitable method found for sort(int[],Comparator<Object>)\n       \
    \ Arrays.sort(count, Collections.reverseOrder());\n              ^\n    method\
    \ Arrays.<T#1>sort(T#1[],Comparator<? super T#1>) is not applicable\n      (inference\
    \ variable T#1 has incompatible bounds\n        equality constraints: int\n  \
    \      lower bounds: Object)\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n4 errors\n"
  stdout: ''
  timestamp: 1659977321
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        if (s.isEmpty()) {\n            return new ArrayList<String>();\n\
    \        }\n        ArrayList<String> res = new ArrayList<String>();\n       \
    \ boolean found = true;\n        int k = 0;\n        Set<String> set = new HashSet<>();\n\
    \        while(found) {\n            k = findNext(s, k, set, n);\n           \
    \ if (k == 0) {\n                found = false;\n            } else {\n      \
    \          res.add(s.substring(k));\n                s = s.substring(k+1);\n \
    \           }\n        }\n        \n        return res;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnrpea7lb.java:34: error: cannot find symbol\n            k = findNext(s,\
    \ k, set, n);\n                ^\n  symbol:   method findNext(String,int,Set<String>,long)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977321
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> results = new ArrayList<>();\n\n        LinkedList<Character>\
    \ chars = new LinkedList<>();\n        for (char c : s.toCharArray()) {\n    \
    \        if (Character.isLetter(c)) {\n                chars.add(c);\n       \
    \     }\n        }\n\n        if (chars.size() <= n) {\n            results.add(s);\n\
    \        }\n\n        LinkedList<Character> restChars = new LinkedList<>();\n\
    \        while (chars.size() > n) {\n            restChars.addLast(chars.removeFirst());\n\
    \        }\n\n        for (Character restChar : restChars) {\n            String\
    \ restString = new String(new char[]{restChar});\n            results.addAll(selectWords(restString,\
    \ n));\n        }\n\n        return results;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl87pcz63.java:52)\n"
  stdout: ''
  timestamp: 1659977321
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        return Arrays.asList(s);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpctq2fz6b.java:26: error: incompatible types: no instance(s) of\
    \ type variable(s) T exist so that List<T> conforms to ArrayList<String>\n   \
    \     return Arrays.asList(s);\n                            ^\n  where T is a\
    \ type-variable:\n    T extends Object declared in method <T>asList(T...)\n1 error\n"
  stdout: ''
  timestamp: 1659977321
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // Your code goes here\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfbfom33b.java:27: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659977318
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> answer = new ArrayList<>();\n        // Do not\
    \ write main() methods in your solution.\n        // Only the functions are written\
    \ here.\n        if (s == null || s.length() == 0) {\n            return answer;\n\
    \        }\n        ArrayList<String> res = new ArrayList<>();\n        for (int\
    \ i = 0; i < s.length(); i++) {\n            boolean isOneConsonant = Character.isConsonant(s.charAt(i));\n\
    \            String word = s.substring(i, i + 1);\n            if (isOneConsonant)\
    \ {\n                long times = Long.parseLong(word);\n                if (times\
    \ == n) {\n                    answer.add(word);\n                }\n        \
    \        while (times >= 1) {\n                    word = s.substring(i, i + 1);\n\
    \                    isOneConsonant = Character.isConsonant(s.charAt(i));\n  \
    \                  if (isOneConsonant) {\n                        long times =\
    \ times - 1;\n                        if (times == n) {\n                    \
    \        answer.add(word);\n                        }\n                    } else\
    \ {\n                        break;\n                    }\n                }\n\
    \            }\n        }\n        return answer;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppmskbo_6.java:34: error: cannot find symbol\n            boolean\
    \ isOneConsonant = Character.isConsonant(s.charAt(i));\n                     \
    \                         ^\n  symbol:   method isConsonant(char)\n  location:\
    \ class Character\n/tmp/tmppmskbo_6.java:43: error: cannot find symbol\n     \
    \               isOneConsonant = Character.isConsonant(s.charAt(i));\n       \
    \                                       ^\n  symbol:   method isConsonant(char)\n\
    \  location: class Character\n/tmp/tmppmskbo_6.java:45: error: variable times\
    \ is already defined in method selectWords(String,long)\n                    \
    \    long times = times - 1;\n                             ^\n3 errors\n"
  stdout: ''
  timestamp: 1659977321
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String\
    \ word = s.toLowerCase();\n        StringBuilder wordBuilder = new StringBuilder();\n\
    \        // TODO: write your implementation\n\n        return words;\n    }\n\
    \    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3hego8cj.java:34)\n"
  stdout: ''
  timestamp: 1659977321
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        return Arrays.asList(s.split(\" \")).stream()\n                .filter(s\
    \ -> s.length() == n)\n                .flatMap(s -> selectWords(s, n))\n    \
    \            .collect(Collectors.toList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp247u6fat.java:27: error: variable s is already defined in method\
    \ selectWords(String,long)\n                .filter(s -> s.length() == n)\n  \
    \                      ^\n/tmp/tmp247u6fat.java:28: error: variable s is already\
    \ defined in method selectWords(String,long)\n                .flatMap(s -> selectWords(s,\
    \ n))\n                         ^\n/tmp/tmp247u6fat.java:28: error: incompatible\
    \ types: cannot infer type-variable(s) R\n                .flatMap(s -> selectWords(s,\
    \ n))\n                        ^\n    (argument mismatch; bad return type in lambda\
    \ expression\n      ArrayList<String> cannot be converted to Stream<? extends\
    \ R>)\n  where R,T are type-variables:\n    R extends Object declared in method\
    \ <R>flatMap(Function<? super T,? extends Stream<? extends R>>)\n    T extends\
    \ Object declared in interface Stream\n3 errors\n"
  stdout: ''
  timestamp: 1659977321
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n\n        if\
    \ (s.equals(\"\")) {\n            return result;\n        }\n\n        if (s.isEmpty())\
    \ {\n            return result;\n        }\n\n        // split string into tokens\
    \ and filter out all non letters\n        String[] tokens = s.replaceAll(\"[^\\\
    \\p{L}]\", \" \").split(\" \");\n        Arrays.sort(tokens);\n\n        // take\
    \ first n words from tokens\n        ArrayList<String> first = new ArrayList<String>();\n\
    \        for (String t : tokens) {\n            String[] temp = t.split(\"\");\n\
    \            if (temp.length >= n) {\n                first.add(t);\n        \
    \    }\n        }\n\n        if (first.size() >= n) {\n            // we have\
    \ enough words for given length\n            result.addAll(first);\n        }\n\
    \n        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo11sgqt3.java:57)\n"
  stdout: ''
  timestamp: 1659977321
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<>();\n        if (s.isEmpty())\n\
    \            return result;\n        ArrayList<String> temp = new ArrayList<>();\n\
    \        for (String word : s.split(\"\\\\s\")) {\n            if (word.length()\
    \ == n) {\n                temp.add(word);\n            } else {\n           \
    \     if (temp.contains(word)) {\n                    boolean included = false;\n\
    \                    for (String temp2 : temp) {\n                        if (temp2.equals(word))\n\
    \                            included = true;\n                    }\n       \
    \             if (!included) {\n                        result.add(word);\n  \
    \                  }\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw9kv__7o.java:49)\n"
  stdout: ''
  timestamp: 1659977321
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<>();\n\n        for(char\
    \ c : s.toCharArray()) {\n            if(c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u')\n                result.add(\"\");\n            else\n \
    \               result.add(String.valueOf(c));\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvk53hz0i.java:37)\n"
  stdout: ''
  timestamp: 1659977321
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> res = new ArrayList<>();\n        ArrayList<String>\
    \ arr = new ArrayList<>();\n        while(true){\n            String word = s.toLowerCase();\n\
    \            if(!word.contains(\"n\")){\n                arr.add(word);\n    \
    \            if(word.length()==n)\n                res.add(word);\n          \
    \  }\n            else{\n                while(!word.contains(\"n\")){\n     \
    \               s = s.substring(0,s.length()-1);\n                    word = s.toLowerCase();\n\
    \                    if(!word.contains(\"n\"))\n                        arr.add(word);\n\
    \                }\n            }\n            if(!s.isEmpty())\n            \
    \    s = s.substring(0,s.length()-1);\n            else\n                break;\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvyi9upei.java:51)\n"
  stdout: ''
  timestamp: 1659977321
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // write your logic here\n        String sd = \"\";\n        ArrayList<String>\
    \ result = new ArrayList<>();\n\n        if (s.isEmpty()) {\n            return\
    \ result;\n        }\n        Set<Character> s = new HashSet<Character>();\n \
    \       for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n\
    \            s.add(c);\n        }\n        if (s.contains(\" \")) {\n        \
    \    char[] schars = s.toCharArray();\n            for (char c : schars) {\n \
    \               sd += c;\n            }\n        }\n        char[] schars = s.toCharArray();\n\
    \n        ArrayList<String> resul = new ArrayList<>();\n        char c = ' ';\n\
    \        int count = 0;\n        for (int i = 0; i < schars.length; i++) {\n \
    \           if (c == schars[i]) {\n                count++;\n                if\
    \ (count == n) {\n                    resul.add(sd.toLowerCase());\n         \
    \       }\n                sd = \"\";\n                c = schars[i];\n      \
    \      }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp67td7h2l.java:33: error: variable s is already defined in method\
    \ selectWords(String,long)\n        Set<Character> s = new HashSet<Character>();\n\
    \                       ^\n/tmp/tmp67td7h2l.java:34: error: cannot find symbol\n\
    \        for (int i = 0; i < s.length(); i++) {\n                            \
    \ ^\n  symbol:   method length()\n  location: variable s of type Set<Character>\n\
    /tmp/tmp67td7h2l.java:35: error: cannot find symbol\n            char c = s.charAt(i);\n\
    \                      ^\n  symbol:   method charAt(int)\n  location: variable\
    \ s of type Set<Character>\n/tmp/tmp67td7h2l.java:39: error: cannot find symbol\n\
    \            char[] schars = s.toCharArray();\n                             ^\n\
    \  symbol:   method toCharArray()\n  location: variable s of type Set<Character>\n\
    /tmp/tmp67td7h2l.java:44: error: cannot find symbol\n        char[] schars = s.toCharArray();\n\
    \                         ^\n  symbol:   method toCharArray()\n  location: variable\
    \ s of type Set<Character>\n5 errors\n"
  stdout: ''
  timestamp: 1659977321
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        ArrayList<String>\
    \ words = new ArrayList<String>();\n        // TODO: Your code here\n        \n\
    \        // return the results\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc55031gb.java:34)\n"
  stdout: ''
  timestamp: 1659977321
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<>();\n\n        if (s ==\
    \ \"\") {\n            return result;\n        }\n\n        for (int i = 0; i\
    \ < s.length(); i++) {\n            String word = s.substring(i, i + 1);\n   \
    \         for (char c : word.toCharArray()) {\n                if (Character.isLetterOrDigit(c))\
    \ {\n                    result.add(word + \" \" + c);\n                    result.add(word\
    \ + \" \" + c.toLowerCase());\n                    result.add(word + \" \" + c.toUpperCase());\n\
    \                }\n            }\n        }\n\n        if (n < result.size())\
    \ {\n            return new ArrayList<String>(result);\n        } else {\n   \
    \         return result;\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4ryqr4d4.java:37: error: char cannot be dereferenced\n        \
    \            result.add(word + \" \" + c.toLowerCase());\n                   \
    \                          ^\n/tmp/tmp4ryqr4d4.java:38: error: char cannot be\
    \ dereferenced\n                    result.add(word + \" \" + c.toUpperCase());\n\
    \                                             ^\n2 errors\n"
  stdout: ''
  timestamp: 1659977321
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // implement the function here\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb1qu_2hs.java:27: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659977321
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<>();\n        if (s.isEmpty())\
    \ {\n            return result;\n        }\n        long total = 0;\n        long\
    \ max = 0;\n        final long mod = 1000000007;\n        for (int i = 0; i <\
    \ s.length(); i++) {\n            char c = s.charAt(i);\n            total +=\
    \ (c - 'a' + 1);\n            if (total >= n) {\n                result.add(s.substring(i,\
    \ i + 1));\n                total -= n;\n            }\n            max = Math.max(max,\
    \ total);\n        }\n        if (max < mod) {\n            throw new RuntimeException(\"\
    Too many consonants in string \" + s + \" with length \" + s.length());\n    \
    \    }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: Too many consonants\
    \ in string Mary had a little lamb with length 22\n\tat Problem.selectWords(tmp_fq7wd09.java:43)\n\
    \tat Problem.main(tmp_fq7wd09.java:48)\n"
  stdout: ''
  timestamp: 1659977321
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        for(String\
    \ word : splitWords(s, \" \")) {\n            long n = word.length();\n      \
    \      if(n == n)\n                result.add(word);\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiplj52zd.java:27: error: cannot find symbol\n        for(String\
    \ word : splitWords(s, \" \")) {\n                          ^\n  symbol:   method\
    \ splitWords(String,String)\n  location: class Problem\n/tmp/tmpiplj52zd.java:28:\
    \ error: variable n is already defined in method selectWords(String,long)\n  \
    \          long n = word.length();\n                 ^\n2 errors\n"
  stdout: ''
  timestamp: 1659977321
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // Your code here.\n        if(s == null || s.trim().equals(\"\"\
    )) return new ArrayList<String>();\n        \n        Set<String> uniqueWords\
    \ = new HashSet<>();\n        \n        for(String word : s.split(\"\\\\s\")){\n\
    \            if(uniqueWords.size() < n){\n                if(isConsonant(word)){\n\
    \                    uniqueWords.add(word);\n                }\n            }\n\
    \        }\n        \n        ArrayList<String> result = new ArrayList<>();\n\
    \        result.addAll(uniqueWords);\n        \n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk0k1icsr.java:33: error: cannot find symbol\n                if(isConsonant(word)){\n\
    \                   ^\n  symbol:   method isConsonant(String)\n  location: class\
    \ Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977321
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        if (s.isEmpty())\
    \ {\n            return words;\n        }\n        // find all possible number\
    \ of words with n consonants\n        List<List<String>> solutions = selectWordsRecursively(s.replaceAll(\"\
    [^aeiouAEIOU\\\\s]\", \"\"), n);\n        // filter all possible solutions\n \
    \       solutions.stream().filter(x -> !x.isEmpty()).forEach(x -> words.addAll(x));\n\
    \        return words;\n    }\n    public static void main(String[] args) {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6sver7hq.java:31: error: cannot find symbol\n        List<List<String>>\
    \ solutions = selectWordsRecursively(s.replaceAll(\"[^aeiouAEIOU\\\\s]\", \"\"\
    ), n);\n                                       ^\n  symbol:   method selectWordsRecursively(String,long)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977321
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        int n = Integer.valueOf(n);\n        if (n == 0) return new ArrayList<>();\n\
    \        ArrayList<String> result = new ArrayList<>();\n        \n        // Step\
    \ 1: Split the string in words\n        String[] words = s.split(\" \");\n   \
    \     \n        // Step 2: Get words that contain n consonants\n        Predicate<String>\
    \ wordContainsNConsonants = w -> w.toCharArray().length == n && isConsonants(w);\n\
    \        \n        // Step 3: Filter the words that contain n consonants from\
    \ our words array\n        List<String> filteredWords = Arrays.stream(words)\n\
    \                .filter(wordContainsNConsonants)\n                .collect(Collectors.toList());\n\
    \        \n        // Step 4: Add the filtered words to the result array\n   \
    \     filteredWords.forEach(w -> result.add(w));\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzatm8x9g.java:26: error: variable n is already defined in method\
    \ selectWords(String,long)\n        int n = Integer.valueOf(n);\n            ^\n\
    /tmp/tmpzatm8x9g.java:34: error: cannot find symbol\n        Predicate<String>\
    \ wordContainsNConsonants = w -> w.toCharArray().length == n && isConsonants(w);\n\
    \        ^\n  symbol:   class Predicate\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1659977321
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<>();\n        if(s == null\
    \ || s.isEmpty()) \n            return result;\n        if(s.length() < n) \n\
    \            return result;\n        String vowels = \"AEIOU\";\n        String\
    \ cons = \"bcdfghjklmnpqrstvwxyz\";\n        \n        //add string into result\n\
    \        for(String str : s.split(\" \"))\n            if(cons.contains(str.charAt(0))\
    \ && vowels.contains(str.charAt(str.length() - 1)))\n                result.add(str);\n\
    \        \n        //remove string from result\n        for(String str : result)\n\
    \            String removed = str.replaceAll(\"[AEIOU]\", \"\");\n           \
    \ if(removed.length() == n) \n                result.add(str);\n            \n\
    \        //remove first and last string in result if they only have n consonants\n\
    \        int first = result.indexOf(result.get(0));\n        if(result.size()\
    \ >= 2) {\n            String removed = result.get(first).replaceAll(\"[AEIOU]\"\
    , \"\");\n            if(removed.length() == n)\n                result.remove(first);\n\
    \            String removed2 = result.get(result.size() - 1).replaceAll(\"[AEIOU]\"\
    , \"\");\n            if(removed2.length() == n)\n                result.remove(result.size()\
    \ - 1);\n        }\n        \n        //remove first and last string in result\
    \ if they only have n vowels\n        if(result.size() >= 2) {\n            String\
    \ removed = result.get(first).replaceAll(\"[AEIOU]\", \"\");\n            if(removed.length()\
    \ == n)\n                result.remove(first);\n            String removed2 =\
    \ result.get(result.size() - 1).replaceAll(\"[AEIOU]\", \"\");\n            if(removed2.length()\
    \ == n)\n                result.remove(result.size() - 1);\n        }\n      \
    \  \n        //remove all consonants in first string\n        for(String str :\
    \ result)\n            str = str.replaceAll(\"[bcdfghjklmnpqrstvwxyz]\", \"\"\
    );\n        \n        //remove all vowels in last string\n        if(result.size()\
    \ >= 2)\n            result.get(result.size() - 1) = result.get(result.size()\
    \ - 1).replaceAll(\"[aeiou]\", \"\");\n        \n        //return result\n   \
    \     return result;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsqb_qlj3.java:41: error: variable declaration not allowed here\n\
    \            String removed = str.replaceAll(\"[AEIOU]\", \"\");\n           \
    \        ^\n1 error\n"
  stdout: ''
  timestamp: 1659977321
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        return null;\n    }\n    public static void main(String[] args) {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ long)\" is null\n\tat Problem.main(tmpmjqq7hir.java:29)\n"
  stdout: ''
  timestamp: 1659977180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        return new ArrayList<String>(Arrays.asList());\n    }\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr5bkgt4f.java:29)\n"
  stdout: ''
  timestamp: 1659977322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        if (s.isEmpty())\
    \ {\n            return words;\n        }\n        List<Character> arr = new ArrayList<Character>(s);\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            char c = arr.get(i);\n\
    \            if (((c >= 'a') && (c <= 'z')) || ((c >= 'A') && (c <= 'Z'))) {\n\
    \                if (Character.isLetter(c)) {\n                    if (Character.getNumericValue(c)\
    \ < n) {\n                        words.add((String)(c));\n                  \
    \  }\n                }\n            }\n        }\n        return words;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7nrjgib_.java:30: error: no suitable constructor found for ArrayList(String)\n\
    \        List<Character> arr = new ArrayList<Character>(s);\n                \
    \              ^\n    constructor ArrayList.ArrayList(int) is not applicable\n\
    \      (argument mismatch; String cannot be converted to int)\n    constructor\
    \ ArrayList.ArrayList(Collection<? extends Character>) is not applicable\n   \
    \   (argument mismatch; String cannot be converted to Collection<? extends Character>)\n\
    /tmp/tmp7nrjgib_.java:36: error: incompatible types: char cannot be converted\
    \ to String\n                        words.add((String)(c));\n               \
    \                           ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659977322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> arr = new ArrayList<>();\n\n        // Your code\
    \ here\n        int n1 = s.indexOf('n');\n        int l = n1 - 1;\n        int\
    \ h = s.length();\n        StringBuilder builder = new StringBuilder();\n    \
    \    while (n1 > -1 && n1 < h) {\n            String word = s.substring(n1, l\
    \ + 1) + \"n\" + s.substring(l, h);\n            if (word.matches(\".*[^n].*\"\
    )) {\n                arr.add(word);\n            }\n            l++;\n      \
    \      n1 = s.indexOf('n', l - 1);\n        }\n        \n        return arr;\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp92o0rx83.java:45)\n"
  stdout: ''
  timestamp: 1659977322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        if(s.length()==0){\n            return new ArrayList<>();\n     \
    \   }\n        long count = s.replaceAll(\"[^\" + Character.toString(\" \") +\
    \ \"]\", \"\").length();\n        long num = new BigInteger(s, 2).divide(new BigInteger(\"\
    \" + count, n)).longValue();\n        String[] list = new String[(int) num];\n\
    \        StringBuilder builder = new StringBuilder();\n        for(int i = 0;\
    \ i < num; i++){\n            builder.append(s.charAt(i));\n            list[i]\
    \ = builder.toString();\n            builder.setLength(0);\n        }\n      \
    \  return new ArrayList<>(Arrays.asList(list));\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprbwlly54.java:29: error: no suitable method found for toString(String)\n\
    \        long count = s.replaceAll(\"[^\" + Character.toString(\" \") + \"]\"\
    , \"\").length();\n                                                  ^\n    method\
    \ Character.toString(char) is not applicable\n      (argument mismatch; String\
    \ cannot be converted to char)\n    method Character.toString(int) is not applicable\n\
    \      (argument mismatch; String cannot be converted to int)\n/tmp/tmprbwlly54.java:30:\
    \ error: no suitable constructor found for BigInteger(String,long)\n        long\
    \ num = new BigInteger(s, 2).divide(new BigInteger(\"\" + count, n)).longValue();\n\
    \                                               ^\n    constructor BigInteger.BigInteger(int,byte[])\
    \ is not applicable\n      (argument mismatch; String cannot be converted to int)\n\
    \    constructor BigInteger.BigInteger(int,int[]) is not applicable\n      (argument\
    \ mismatch; String cannot be converted to int)\n    constructor BigInteger.BigInteger(String,int)\
    \ is not applicable\n      (argument mismatch; possible lossy conversion from\
    \ long to int)\n    constructor BigInteger.BigInteger(int,Random) is not applicable\n\
    \      (argument mismatch; String cannot be converted to int)\n    constructor\
    \ BigInteger.BigInteger(int[],int) is not applicable\n      (argument mismatch;\
    \ String cannot be converted to int[])\n    constructor BigInteger.BigInteger(byte[],int)\
    \ is not applicable\n      (argument mismatch; String cannot be converted to byte[])\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n2 errors\n"
  stdout: ''
  timestamp: 1659977322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> res = new ArrayList<String>();\n        boolean\
    \ isAllLettersFound = false;\n        int counter = 0;\n        while(!s.isEmpty()\
    \ && counter < 10000){\n            counter++;\n            String word = \"\"\
    ;\n            int length = s.length();\n            for(int i=0;i<length;i++){\n\
    \                if(Character.isLetter(s.charAt(i))){\n                    word\
    \ = word + s.charAt(i);\n                    if(word == \"\"){\n             \
    \           isAllLettersFound = true;\n                        break;\n      \
    \              }\n                }\n            }\n            if(isAllLettersFound){\n\
    \                if(n.longValue() == (counter)){\n                    if(word\
    \ != \"\"){\n                        res.add(word);\n                    }\n \
    \               }\n            }\n        }\n        return res;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpccf2eeax.java:43: error: long cannot be dereferenced\n        \
    \        if(n.longValue() == (counter)){\n                    ^\n1 error\n"
  stdout: ''
  timestamp: 1659977322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        ArrayList<String>\
    \ list = selectWords(s, n, result);\n        return list;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp8hi7s82.java:27: error: method selectWords in class Problem cannot\
    \ be applied to given types;\n        ArrayList<String> list = selectWords(s,\
    \ n, result);\n                                 ^\n  required: String,long\n \
    \ found:    String,long,ArrayList<String>\n  reason: actual and formal argument\
    \ lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1659977322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        int consonantCount = 0;\n        ArrayList<String> results = new\
    \ ArrayList<>();\n        ArrayList<String> candidateWords = new ArrayList<>();\n\
    \n        // If there is no input string, return an empty array list\n       \
    \ if (s == null) {\n            return results;\n        }\n\n        // If there\
    \ is no input string or there is only one character, return an empty array list\n\
    \        if (s.isEmpty() || s.length() == 1) {\n            return results;\n\
    \        }\n\n        // If input string contains less than or equal to n characters,\
    \ return an empty array list\n        if (s.length() <= n) {\n            return\
    \ results;\n        }\n\n        // Add the first word that has n consonants to\
    \ the candidateWords array list\n        for (int i = 0; i < s.length() - n; i++)\
    \ {\n            if (Character.isLetter(s.charAt(i))) {\n                candidateWords.add(s.substring(i,\
    \ i + n));\n            }\n        }\n\n        // Iterate through the remaining\
    \ words in the candidateWords array list\n        for (String candidate : candidateWords)\
    \ {\n            for (int i = 0; i < candidate.length(); i++) {\n            \
    \    if (Character.isLetter(candidate.charAt(i))) {\n                    if (consonantCount\
    \ > n) {\n                        results.add(candidate);\n                  \
    \  }\n                    consonantCount++;\n                }\n            }\n\
    \        }\n\n        return results;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnaz03su4.java:48: error: incompatible types: possible lossy conversion\
    \ from long to int\n                candidateWords.add(s.substring(i, i + n));\n\
    \                                                    ^\nNote: Some messages have\
    \ been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659977322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        if (s.isEmpty()){\n            return new ArrayList<String>();\n\
    \        }\n\n        String s1 = s.substring(0,n);\n        String[] result =\
    \ s1.split(\" \");\n        int count = 0;\n\n        for(int i=0;i<result.length;i++){\n\
    \            if(result[i].contains(\"a\") || result[i].contains(\"e\") || result[i].contains(\"\
    i\") || result[i].contains(\"o\") || result[i].contains(\"u\")){\n           \
    \     count++;\n            }\n        }\n        ArrayList<String> a = new ArrayList<String>();\n\
    \        a.add(\"a\");\n        a.add(\"e\");\n        a.add(\"i\");\n       \
    \ a.add(\"o\");\n        a.add(\"u\");\n        if(count==0){\n            return\
    \ a;\n        }\n        String s2 = s1.substring(0,n-1);\n        String[] result2\
    \ = s2.split(\" \");\n        for(int j=0;j<result2.length;j++){\n           \
    \ for(int k=0;k<a.size();k++){\n                if(result2[j].contains(a.get(k))){\n\
    \                    count--;\n                }\n            }\n        }\n \
    \       if(count==0){\n            a.add(\"a\");\n            a.add(\"e\");\n\
    \            a.add(\"i\");\n            a.add(\"o\");\n            a.add(\"u\"\
    );\n        }\n        for(int j=0;j<a.size();j++){\n            if(result[j].contains(a.get(j))){\n\
    \                a.add(result[j]);\n            }\n        }\n        return a;\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp03brc_tk.java:30: error: incompatible types: possible lossy conversion\
    \ from long to int\n        String s1 = s.substring(0,n);\n                  \
    \                ^\n/tmp/tmp03brc_tk.java:48: error: incompatible types: possible\
    \ lossy conversion from long to int\n        String s2 = s1.substring(0,n-1);\n\
    \                                    ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659977322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        int count = 1;\n        ArrayList<String> words = new ArrayList<String>();\n\
    \        // check if s is empty\n        if (s.isEmpty()) {\n            words.add(\"\
    Empty\");\n            return words;\n        }\n        // add the first word\n\
    \        words.add(s);\n        // check every word in the string\n        for\
    \ (String word : s.split(\"\\\\W+\")) {\n            // if the word has exactly\
    \ n consonants\n            String[] arr = word.replaceAll(\"[aeiouy]\", \"\"\
    ).replaceAll(\"[AEIOU]\", \"\").replaceAll(\"[\\\\p{Punct}]\", \"\").replaceAll(\"\
    [\\\\W]\", \"\").split(\"\\\\s+\");\n            if (arr.length == n) {\n    \
    \            // add the word to the list\n                words.add(word);\n \
    \               // check every consonant in the word\n                for (int\
    \ i = 0; i < arr.length; i++) {\n                    int count = 0;\n        \
    \            // if the consonant is in a letter\n                    for (int\
    \ j = 0; j < arr[i].length(); j++) {\n                        // count the number\
    \ of consonants in the current letter\n                        if (arr[i].charAt(j)\
    \ == arr[i].charAt(j)) {\n                            count++;\n             \
    \               // if the number of consonants in the current letter is equal\
    \ to n\n                            if (count == n) {\n                      \
    \          break;\n                            }\n                        }\n\
    \                    }\n                    // if the number of consonants in\
    \ the word is equal to n\n                    if (count == n) {\n            \
    \            break;\n                    }\n                }\n            }\n\
    \        }\n        return words;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd64tbo3g.java:44: error: variable count is already defined in method\
    \ selectWords(String,long)\n                    int count = 0;\n             \
    \           ^\n1 error\n"
  stdout: ''
  timestamp: 1659977322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        if (s.isEmpty()) {\n            return new ArrayList<>();\n     \
    \   }\n        ArrayList<String> words = new ArrayList<>();\n        if (n !=\
    \ 1l) throw new IllegalArgumentException(\"n must be 1\");\n        if (s.contains(\"\
    a\") && s.contains(\"e\") && s.contains(\"i\") && s.contains(\"o\") && s.contains(\"\
    u\")) words.addAll(Arrays.asList(new String[]{\"a\",\"e\",\"i\",\"o\",\"u\"}));\n\
    \        if (s.contains(\"b\") && s.contains(\"o\") && s.contains(\"u\")) words.addAll(Arrays.asList(new\
    \ String[]{\"b\",\"o\",\"u\"}));\n        if (s.contains(\"c\") && s.contains(\"\
    o\") && s.contains(\"u\")) words.addAll(Arrays.asList(new String[]{\"c\",\"o\"\
    ,\"u\"}));\n        if (s.contains(\"d\") && s.contains(\"e\") && s.contains(\"\
    i\") && s.contains(\"o\") && s.contains(\"u\")) words.addAll(Arrays.asList(new\
    \ String[]{\"d\",\"e\",\"i\",\"o\",\"u\"}));\n        if (s.contains(\"f\") &&\
    \ s.contains(\"o\") && s.contains(\"u\")) words.addAll(Arrays.asList(new String[]{\"\
    f\",\"o\",\"u\"}));\n        if (s.contains(\"g\") && s.contains(\"o\") && s.contains(\"\
    u\")) words.addAll(Arrays.asList(new String[]{\"g\",\"o\",\"u\"}));\n        if\
    \ (s.contains(\"h\") && s.contains(\"e\") && s.contains(\"i\") && s.contains(\"\
    o\") && s.contains(\"u\")) words.addAll(Arrays.asList(new String[]{\"h\",\"e\"\
    ,\"i\",\"o\",\"u\"}));\n        if (s.contains(\"j\") && s.contains(\"e\") &&\
    \ s.contains(\"i\") && s.contains(\"o\") && s.contains(\"u\")) words.addAll(Arrays.asList(new\
    \ String[]{\"j\",\"e\",\"i\",\"o\",\"u\"}));\n        if (s.contains(\"k\") &&\
    \ s.contains(\"e\") && s.contains(\"i\") && s.contains(\"o\") && s.contains(\"\
    u\")) words.addAll(Arrays.asList(new String[]{\"k\",\"e\",\"i\",\"o\",\"u\"}));\n\
    \        if (s.contains(\"l\") && s.contains(\"e\") && s.contains(\"i\") && s.contains(\"\
    o\") && s.contains(\"u\")) words.addAll(Arrays.asList(new String[]{\"l\",\"e\"\
    ,\"i\",\"o\",\"u\"}));\n        if (s.contains(\"m\") && s.contains(\"\n    }\n\
    \    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcrugk22h.java:41: error: unclosed string literal\n        if (s.contains(\"\
    m\") && s.contains(\"\n                                          ^\n1 error\n"
  stdout: ''
  timestamp: 1659977322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        ArrayList<String>\
    \ words = new ArrayList<String>();\n        if (s.isEmpty()) return result;\n\
    \        for (Character c : s.toCharArray()) {\n            if (isConsonant(c))\
    \ {\n                words.add(c.toString());\n            }\n        }\n    \
    \    for (String word : words) {\n            if (word.length() == n) {\n    \
    \            result.add(word);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppdljw3pp.java:30: error: cannot find symbol\n            if (isConsonant(c))\
    \ {\n                ^\n  symbol:   method isConsonant(Character)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // complete this function\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxpccyei7.java:27: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659977322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // Write your code here\n        ArrayList<String> list = new ArrayList<>();\n\
    \        if(s == null || s.isEmpty()){\n            list = new ArrayList<>();\n\
    \        }\n        ArrayList<String> words = new ArrayList<>();\n        for(\
    \ int i = 0; i < s.length();i++){\n            char c = s.charAt(i);\n       \
    \     if((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <=\
    \ '9')){\n                words.add(s);\n            }\n            else if(s.equals(\"\
    \ \") || s.equals(\"\\t\") || s.equals(\"\\n\")){\n                continue;\n\
    \            }\n            else{\n                list.add(s);\n            \
    \    break;\n            }\n        }\n        return list;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5tywh_30.java:48)\n"
  stdout: ''
  timestamp: 1659977323
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        int counter=0;\n        String letter=\"\";\n        ArrayList<String>\
    \ wordList = new ArrayList<String>();\n        for(int i=0; i<s.length(); i++)\
    \ {\n            if((s.charAt(i)=='a') || (s.charAt(i)=='e') || (s.charAt(i)=='i')\
    \ || (s.charAt(i)=='o') || (s.charAt(i)=='u'))\n                letter = letter+s.charAt(i);\n\
    \            else {\n                counter++;\n                if(counter==n)\
    \ {\n                    wordList.add(letter);\n                    letter=\"\"\
    ;\n                    counter=0;\n                }\n            }\n        }\n\
    \        if(!letter.isEmpty())\n            wordList.add(letter);\n        return\
    \ wordList;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4ky72kld.java:46)\n"
  stdout: ''
  timestamp: 1659977323
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // code here\n        return null;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ long)\" is null\n\tat Problem.main(tmprk18umb7.java:30)\n"
  stdout: ''
  timestamp: 1659977323
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        if (s.isEmpty())\
    \ {\n            return result;\n        }\n        ArrayList<String> result =\
    \ selectWords(s, n, result);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptztnxp28.java:30: error: variable result is already defined in\
    \ method selectWords(String,long)\n        ArrayList<String> result = selectWords(s,\
    \ n, result);\n                          ^\n/tmp/tmptztnxp28.java:30: error: method\
    \ selectWords in class Problem cannot be applied to given types;\n        ArrayList<String>\
    \ result = selectWords(s, n, result);\n                                   ^\n\
    \  required: String,long\n  found:    String,long,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n2 errors\n"
  stdout: ''
  timestamp: 1659977323
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        if (s == null || s.length() < 0) {\n            return new ArrayList<String>();\n\
    \        }\n        int n = s.split(\"\").length;\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        ArrayList<String> words = new ArrayList<String>();\n\
    \n        //  Word list construction\n        Matcher m = Pattern.compile(\"(\\\
    \\w*)\").matcher(s);\n        while (m.find()) {\n            words.add(m.group());\n\
    \        }\n\n        Set<String> set = new HashSet<String>(words);\n        Collections.sort(set);\n\
    \n        // Scan for substrings\n        for (String w : set) {\n           \
    \ if (wlength(n) == w.length()) {\n                if (containsConsonants(w))\
    \ {\n                    result.add(w);\n                }\n            }\n  \
    \      }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp78_8ourn.java:29: error: variable n is already defined in method\
    \ selectWords(String,long)\n        int n = s.split(\"\").length;\n          \
    \  ^\n/tmp/tmp78_8ourn.java:34: error: cannot find symbol\n        Matcher m =\
    \ Pattern.compile(\"(\\\\w*)\").matcher(s);\n        ^\n  symbol:   class Matcher\n\
    \  location: class Problem\n/tmp/tmp78_8ourn.java:34: error: cannot find symbol\n\
    \        Matcher m = Pattern.compile(\"(\\\\w*)\").matcher(s);\n             \
    \       ^\n  symbol:   variable Pattern\n  location: class Problem\n/tmp/tmp78_8ourn.java:40:\
    \ error: no suitable method found for sort(Set<String>)\n        Collections.sort(set);\n\
    \                   ^\n    method Collections.<T#1>sort(List<T#1>) is not applicable\n\
    \      (cannot infer type-variable(s) T#1\n        (argument mismatch; Set<String>\
    \ cannot be converted to List<T#1>))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Comparable<? super T#1> declared in method\
    \ <T#1>sort(List<T#1>)\n    T#2 extends Object declared in method <T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>)\n/tmp/tmp78_8ourn.java:44: error: cannot find symbol\n         \
    \   if (wlength(n) == w.length()) {\n                ^\n  symbol:   method wlength(int)\n\
    \  location: class Problem\n/tmp/tmp78_8ourn.java:45: error: cannot find symbol\n\
    \                if (containsConsonants(w)) {\n                    ^\n  symbol:\
    \   method containsConsonants(String)\n  location: class Problem\n6 errors\n"
  stdout: ''
  timestamp: 1659977323
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> res = new ArrayList<String>();\n        if(s.isEmpty())\
    \ {\n            return res;\n        }\n        String rem = s;\n        \n \
    \       while(rem.length() > 0) {\n            rem = rem.replaceAll(\"\\\\p{Punct}\"\
    , \"\");\n            if(rem.length() >= n) {\n                res.add(rem);\n\
    \            }\n        }\n        return res;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659977328
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<>();\n        if (s.isEmpty())\
    \ {\n            return new ArrayList<>();\n        }\n        Collection<String>\
    \ consonants = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\",\
    \ \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\");\n        boolean start = false;\n        for (int i =\
    \ 0; i < s.length(); i++) {\n            if (start) {\n                words.add(s.substring(i,\
    \ i + 1));\n                start = false;\n            }\n            char c\
    \ = s.charAt(i);\n            if (Character.isLetter(c)) {\n                boolean\
    \ isConsonant = consonants.contains(c);\n                if (isConsonant) {\n\
    \                    start = true;\n                } else if (Character.getNumericValue(c)\
    \ == n) {\n                    start = true;\n                } else {\n     \
    \               start = false;\n                }\n            }\n        }\n\
    \        return words;\n    }\n    public static void main(String[] args) {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1ixq206m.java:52)\n"
  stdout: ''
  timestamp: 1659977323
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        // Solution\
    \ 1:\n        // Use StringUtils split method to split the word into single characters\
    \ and return the list.\n        // Use ArrayUtils.contains() method to check if\
    \ the word contains n consonants.\n        // Solution 2:\n        // Use Stream::split\
    \ to split the string into words, then use Collectors.groupingBy to group\n  \
    \      // the words by character count. Group the map by the number of consonants\
    \ in the word and \n        // then map the values to the words themselves.\n\
    \        return Stream.of(s.split(\"\")).collect(groupingBy(StringUtils::countChars)).values().stream().flatMap(List::stream).collect(toList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp42tnl36_.java:34: error: cannot find symbol\n        return Stream.of(s.split(\"\
    \")).collect(groupingBy(StringUtils::countChars)).values().stream().flatMap(List::stream).collect(toList());\n\
    \                                                         ^\n  symbol:   variable\
    \ StringUtils\n  location: class Problem\n/tmp/tmp42tnl36_.java:34: error: cannot\
    \ find symbol\n        return Stream.of(s.split(\"\")).collect(groupingBy(StringUtils::countChars)).values().stream().flatMap(List::stream).collect(toList());\n\
    \                                                                            \
    \                                                       ^\n  symbol:   method\
    \ toList()\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1659977323
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        //TODO:\
    \ implement this function\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa0t5te4u.java:31)\n"
  stdout: ''
  timestamp: 1659977323
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<>();\n\n        for (String\
    \ word : splitWords(s))\n            result.add(checkConsonants(word, n, result)\
    \ ? word : null);\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn6m1ui4e.java:28: error: cannot find symbol\n        for (String\
    \ word : splitWords(s))\n                           ^\n  symbol:   method splitWords(String)\n\
    \  location: class Problem\n/tmp/tmpn6m1ui4e.java:29: error: cannot find symbol\n\
    \            result.add(checkConsonants(word, n, result) ? word : null);\n   \
    \                    ^\n  symbol:   method checkConsonants(String,long,ArrayList<String>)\n\
    \  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1659977323
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<>();\n        if (s.isEmpty())\
    \ return result;\n        ArrayList<String> sub = new ArrayList<>();\n       \
    \ int cnt = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if\
    \ (s.charAt(i) == ' ') {\n                result.add(new ArrayList<>(sub));\n\
    \                sub = new ArrayList<>();\n                cnt = 0;\n        \
    \    } else if (s.charAt(i) == ' ' && cnt < n) {\n                cnt++;\n   \
    \         } else if (s.charAt(i) == ' ' && cnt == n) {\n                result.add(new\
    \ ArrayList<>(sub));\n                sub = new ArrayList<>();\n             \
    \   cnt = 0;\n            } else if (s.charAt(i) != ' ' && cnt < n) {\n      \
    \          cnt++;\n            } else {\n                sub.add(s.charAt(i));\n\
    \            }\n        }\n        result.add(new ArrayList<>(sub));\n       \
    \ return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpanr098i4.java:32: error: incompatible types: cannot infer type\
    \ arguments for ArrayList<>\n                result.add(new ArrayList<>(sub));\n\
    \                                        ^\n    reason: no instance(s) of type\
    \ variable(s) E exist so that ArrayList<E> conforms to String\n  where E is a\
    \ type-variable:\n    E extends Object declared in class ArrayList\n/tmp/tmpanr098i4.java:38:\
    \ error: incompatible types: cannot infer type arguments for ArrayList<>\n   \
    \             result.add(new ArrayList<>(sub));\n                            \
    \            ^\n    reason: no instance(s) of type variable(s) E exist so that\
    \ ArrayList<E> conforms to String\n  where E is a type-variable:\n    E extends\
    \ Object declared in class ArrayList\n/tmp/tmpanr098i4.java:44: error: incompatible\
    \ types: char cannot be converted to String\n                sub.add(s.charAt(i));\n\
    \                                ^\n/tmp/tmpanr098i4.java:47: error: incompatible\
    \ types: cannot infer type arguments for ArrayList<>\n        result.add(new ArrayList<>(sub));\n\
    \                                ^\n    reason: no instance(s) of type variable(s)\
    \ E exist so that ArrayList<E> conforms to String\n  where E is a type-variable:\n\
    \    E extends Object declared in class ArrayList\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n4 errors\n"
  stdout: ''
  timestamp: 1659977323
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        if(!s.isEmpty()) {\n            // use Pattern and Matcher to find\
    \ all words of length 4 or more\n            // that contain exactly n consonants\
    \ in the input string\n            // and put them into an array list\n      \
    \      ArrayList<String> words = new ArrayList<String>();\n            Pattern\
    \ p = Pattern.compile(\"^[A-z]{4,}$\");\n            Matcher m = p.matcher(s);\n\
    \            while(m.find()) {\n                words.add(m.group());\n      \
    \      }\n            words.sort();\n            // return words if they contain\
    \ exactly n consonants, or an empty list if they do not.\n            if((long)\
    \ words.size() % n == 0) {\n                return words;\n            } else\
    \ {\n                return new ArrayList<String>();\n            }\n        }\
    \ else {\n            return new ArrayList<String>();\n        }\n    }\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9n466z2r.java:31: error: cannot find symbol\n            Pattern\
    \ p = Pattern.compile(\"^[A-z]{4,}$\");\n            ^\n  symbol:   class Pattern\n\
    \  location: class Problem\n/tmp/tmp9n466z2r.java:31: error: cannot find symbol\n\
    \            Pattern p = Pattern.compile(\"^[A-z]{4,}$\");\n                 \
    \       ^\n  symbol:   variable Pattern\n  location: class Problem\n/tmp/tmp9n466z2r.java:32:\
    \ error: cannot find symbol\n            Matcher m = p.matcher(s);\n         \
    \   ^\n  symbol:   class Matcher\n  location: class Problem\n/tmp/tmp9n466z2r.java:36:\
    \ error: method sort in class ArrayList<E> cannot be applied to given types;\n\
    \            words.sort();\n                 ^\n  required: Comparator<? super\
    \ String>\n  found:    no arguments\n  reason: actual and formal argument lists\
    \ differ in length\n  where E is a type-variable:\n    E extends Object declared\
    \ in class ArrayList\n4 errors\n"
  stdout: ''
  timestamp: 1659977323
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> wordList = new ArrayList<String>();\n        if\
    \ (s == null || s.equals(\"\")) {\n            return wordList;\n        }\n \
    \       s = s.toLowerCase();\n        int size = s.length();\n        char []\
    \ charArray = s.toCharArray();\n        Arrays.sort(charArray);\n        if (n\
    \ == 0) {\n            wordList.add(s);\n            return wordList;\n      \
    \  }\n        boolean isAllConsonants = true;\n        boolean isAllConsonants2\
    \ = true;\n        boolean isAllConsonants3 = true;\n        boolean isAllConsonants4\
    \ = true;\n        long index = 0;\n        long index2 = 0;\n        long index3\
    \ = 0;\n        long index4 = 0;\n        int count = 0;\n        int count2 =\
    \ 0;\n        int count3 = 0;\n        int count4 = 0;\n        for (int i = 0;\
    \ i < size; i++) {\n            char c = charArray[i];\n            if (i == 0)\
    \ {\n                isAllConsonants = true;\n            }\n            else\
    \ if (c != ' ') {\n                isAllConsonants = false;\n            }\n \
    \           if (isAllConsonants) {\n                if (c == ' ') {\n        \
    \            wordList.add(s);\n                    isAllConsonants = false;\n\
    \                    isAllConsonants2 = true;\n                    isAllConsonants3\
    \ = true;\n                    isAllConsonants4 = true;\n                    wordList.add(charArray[index]);\n\
    \                    index++;\n                    count++;\n                }\n\
    \                else {\n                    count++;\n                }\n   \
    \         }\n            else if (isAllConsonants2) {\n                if (c ==\
    \ ' ') {\n                    wordList.add(s);\n                    isAllConsonants\
    \ = false;\n                    isAllConsonants2 = false;\n                  \
    \  isAllConsonants3 = true;\n                    isAllConsonants4 = true;\n  \
    \                  wordList.add(charArray[index]);\n                    index++;\n\
    \                    count++;\n                }\n                else {\n   \
    \                 count2++;\n                }\n            }\n            else\
    \ if (isAllConsonants3) {\n                if (c == ' ') {\n                 \
    \   wordList.add(s);\n                    isAllConsonants = false;\n         \
    \           isAllConsonants2 = false;\n                    isAllConsonants3 =\
    \ false;\n                    isAllConsonants4 = true;\n                    wordList.add(charArray[index]);\n\
    \                    index++;\n                    count++;\n                }\n\
    \                else {\n                    count3++;\n                }\n  \
    \          }\n            else if (isAllConsonants4) {\n                if (c\
    \ == ' ') {\n                    wordList.add(s);\n                    isAllConsonants\
    \ = false;\n                    isAllConsonants2 = false;\n                  \
    \  isAllConsonants3 = false;\n                    isAllConsonants4 = false;\n\
    \                    wordList.add(charArray[index]);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpycktks_u.java:112: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659977323
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        if (s.isEmpty()) {\n            return new ArrayList<>();\n     \
    \   }\n        ArrayList<T> result = new ArrayList<T>();\n        HashSet<T> set\
    \ = new HashSet<T>();\n        StringBuilder sb = new StringBuilder();\n     \
    \   for (char c : s.toCharArray()) {\n            sb.append(c);\n            if\
    \ (Character.isLetter(c)) {\n                if (set.contains(sb.toString()))\
    \ {\n                    continue;\n                }\n                result.add(sb.toString());\n\
    \                set.add(sb.toString());\n            }\n        }\n        ArrayList<T>\
    \ finalResult = new ArrayList<>();\n        for (T t : result) {\n           \
    \ finalResult.add((String) t);\n        }\n        long n = s.chars().filter(Character::isLetter).count();\n\
    \        for (String p : finalResult) {\n            if (p.length() == n) {\n\
    \                long n2 = p.chars().filter(Character::isLetter).count();\n  \
    \              if (n == n2) {\n                    finalResult.remove(p);\n  \
    \              }\n            }\n        }\n        return finalResult;\n    }\n\
    \    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjq8o48f8.java:29: error: cannot find symbol\n        ArrayList<T>\
    \ result = new ArrayList<T>();\n                  ^\n  symbol:   class T\n  location:\
    \ class Problem\n/tmp/tmpjq8o48f8.java:29: error: cannot find symbol\n       \
    \ ArrayList<T> result = new ArrayList<T>();\n                                \
    \            ^\n  symbol:   class T\n  location: class Problem\n/tmp/tmpjq8o48f8.java:30:\
    \ error: cannot find symbol\n        HashSet<T> set = new HashSet<T>();\n    \
    \            ^\n  symbol:   class T\n  location: class Problem\n/tmp/tmpjq8o48f8.java:30:\
    \ error: cannot find symbol\n        HashSet<T> set = new HashSet<T>();\n    \
    \                                 ^\n  symbol:   class T\n  location: class Problem\n\
    /tmp/tmpjq8o48f8.java:42: error: cannot find symbol\n        ArrayList<T> finalResult\
    \ = new ArrayList<>();\n                  ^\n  symbol:   class T\n  location:\
    \ class Problem\n/tmp/tmpjq8o48f8.java:43: error: cannot find symbol\n       \
    \ for (T t : result) {\n             ^\n  symbol:   class T\n  location: class\
    \ Problem\n/tmp/tmpjq8o48f8.java:46: error: variable n is already defined in method\
    \ selectWords(String,long)\n        long n = s.chars().filter(Character::isLetter).count();\n\
    \             ^\n7 errors\n"
  stdout: ''
  timestamp: 1659977323
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // Complete the implementation of the function below.\n        ArrayList<String>\
    \ wordList = new ArrayList<String>();\n        ArrayList<String> tempWordList\
    \ = new ArrayList<String>();\n        boolean consonant = false;\n        for(String\
    \ word : s.split(\" \")){\n            tempWordList.clear();\n            consonant\
    \ = false;\n            for(char c : word.substring(word.length() - 1).split(\"\
    \")){\n                consonant = c > 'a' && c < 'z';\n                tempWordList.addAll(selectWords(word.substring(0,\
    \ word.length() - 1), n));\n                if(consonant){\n                 \
    \   break;\n                }\n            }\n            if(!tempWordList.isEmpty()){\n\
    \                wordList.addAll(tempWordList);\n            }\n        }\n  \
    \      if(wordList.isEmpty() || wordList.size() > n){\n            return wordList;\n\
    \        }\n        return wordList;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxj194apj.java:33: error: incompatible types: String cannot be converted\
    \ to char\n            for(char c : word.substring(word.length() - 1).split(\"\
    \")){\n                                                                ^\n1 error\n"
  stdout: ''
  timestamp: 1659977323
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        if (s.length() <= 0) return new ArrayList<>();\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        boolean inWord = false;\n        long cur\
    \ = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i)\
    \ == ' ')\n                words.add(s.substring(inWord, i - 1));\n          \
    \  if (s.charAt(i) == '.' && words.size() > 0) {\n                if (n == 1l)\n\
    \                    inWord = true;\n                else if (cur != i)\n    \
    \                words.add(s.substring(inWord, i - 1));\n                cur =\
    \ i + 1;\n                inWord = false;\n            }\n            if (s.charAt(i)\
    \ != '.' || words.size() > 0)\n                cur = i + 1;\n        }\n     \
    \   words.add(s.substring(inWord));\n        return words;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtqskw5e.java:32: error: incompatible types: boolean cannot be\
    \ converted to int\n                words.add(s.substring(inWord, i - 1));\n \
    \                                     ^\n/tmp/tmprtqskw5e.java:37: error: incompatible\
    \ types: boolean cannot be converted to int\n                    words.add(s.substring(inWord,\
    \ i - 1));\n                                          ^\n/tmp/tmprtqskw5e.java:44:\
    \ error: incompatible types: boolean cannot be converted to int\n        words.add(s.substring(inWord));\n\
    \                              ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1659977324
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> list = new ArrayList<String>();\n        Scanner\
    \ scanner = new Scanner(s);\n        scanner.useDelimiter(\"\\\\D+\");\n     \
    \   while(scanner.hasNext()) {\n            String str = scanner.next();\n   \
    \         list.add(str);\n        }\n        scanner.close();\n        if(list.isEmpty())\
    \ {\n            return new ArrayList<String>();\n        }\n        int count\
    \ = 0;\n        for(int i = 0; i< list.size(); i++) {\n            if(list.contains(String.valueOf(count)+\"\
    l\")) {\n                count++;\n            }\n        }\n        scanner.useDelimiter(\"\
    \\\\D+\");\n        long num = 0;\n        while(scanner.hasNext()) {\n      \
    \      String str = scanner.next();\n            if(str.contains(String.valueOf(count)+\"\
    l\")) {\n                num++;\n            }\n        }\n        scanner.close();\n\
    \        ArrayList<String> newList = new ArrayList<String>();\n        while(list.isEmpty())\
    \ {\n            newList.add(\"empty\");\n        }\n        if(num == list.size())\
    \ {\n            while(list.isEmpty()) {\n                newList.add(\"empty\"\
    );\n            }\n            return newList;\n        }\n        while(num >\
    \ list.size()) {\n            int k = 0;\n            for(int j = 0; j< list.size();\
    \ j++) {\n                if(list.contains(String.valueOf(k)+\"l\")) {\n     \
    \               k++;\n                }\n            }\n            while(list.contains(String.valueOf(k-1)+\"\
    l\")) {\n                k++;\n            }\n        }\n        while(num < list.size())\
    \ {\n            int k = 0;\n            for(int j = 0; j< list.size(); j++) {\n\
    \                if(list.contains(String.valueOf(k)+\"l\")) {\n              \
    \      k++;\n                }\n            }\n            while(list.contains(String.valueOf(k+1)+\"\
    l\")) {\n                k++;\n            }\n        }\n        if(num == list.size())\
    \ {\n            for(int j = 0; j< list.size(); j++) {\n                String\
    \ str = list.get(j);\n                list.add(j+1);\n            }\n        \
    \    return list;\n        } else {\n            for(int j = 0; j< list.size();\
    \ j++) {\n                String str = list.get(j);\n                list.add(j+1);\n\
    \            }\n            return list;\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprv3tw0ne.java:87: error: incompatible types: int cannot be converted\
    \ to String\n                list.add(j+1);\n                          ^\n/tmp/tmprv3tw0ne.java:93:\
    \ error: incompatible types: int cannot be converted to String\n             \
    \   list.add(j+1);\n                          ^\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659977324
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // Your code goes here\n        \n        // We are going to use\
    \ Java's collections framework for this task\n        ArrayList<String> result\
    \ = new ArrayList<>();\n        \n        if(s == null || s.isEmpty()){\n    \
    \        return result;\n        }\n        \n        // Here we create a stream\
    \ of characters in string s\n        Stream<Character> stream = s.chars().map(c\
    \ -> Character.valueOf((char) c));\n        \n        // Here we use the Java\
    \ 8 stream features to find all words having n characters\n        List<String>\
    \ allWordsWithNCharacters = stream.collect(Collectors.groupingBy(c -> Character.toUpperCase(c),\
    \ Collectors.counting()));\n        \n        // Here we find the words containing\
    \ exactly n characters\n        List<String> words = new ArrayList<>();\n    \
    \    for (String allWord : allWordsWithNCharacters) {\n            if (allWordsWithNCharacters.get(allWord).equals(n))\
    \ {\n                words.add(allWord);\n            }\n        }\n        \n\
    \        // Here we add any remaining words to the result list\n        result.addAll(words);\n\
    \        \n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2a2zg2u1.java:36: error: incompatible types: IntStream cannot be\
    \ converted to Stream<Character>\n        Stream<Character> stream = s.chars().map(c\
    \ -> Character.valueOf((char) c));\n                                         \
    \       ^\n/tmp/tmp2a2zg2u1.java:39: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        List<String> allWordsWithNCharacters = stream.collect(Collectors.groupingBy(c\
    \ -> Character.toUpperCase(c), Collectors.counting()));\n                    \
    \                                         ^\n    equality constraints: Map<K,D>\n\
    \    lower bounds: List<String>,Object\n  where R,A#1,T#1,K,T#2,A#2,D are type-variables:\n\
    \    R extends Object declared in method <R,A#1>collect(Collector<? super T#1,A#1,R>)\n\
    \    A#1 extends Object declared in method <R,A#1>collect(Collector<? super T#1,A#1,R>)\n\
    \    T#1 extends Object declared in interface Stream\n    K extends Object declared\
    \ in method <T#2,K,A#2,D>groupingBy(Function<? super T#2,? extends K>,Collector<?\
    \ super T#2,A#2,D>)\n    T#2 extends Object declared in method <T#2,K,A#2,D>groupingBy(Function<?\
    \ super T#2,? extends K>,Collector<? super T#2,A#2,D>)\n    A#2 extends Object\
    \ declared in method <T#2,K,A#2,D>groupingBy(Function<? super T#2,? extends K>,Collector<?\
    \ super T#2,A#2,D>)\n    D extends Object declared in method <T#2,K,A#2,D>groupingBy(Function<?\
    \ super T#2,? extends K>,Collector<? super T#2,A#2,D>)\n/tmp/tmp2a2zg2u1.java:44:\
    \ error: incompatible types: String cannot be converted to int\n            if\
    \ (allWordsWithNCharacters.get(allWord).equals(n)) {\n                       \
    \                     ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1659977324
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> res = new ArrayList<String>();\n        for(String\
    \ word : s.split(\" \")){\n            boolean isMatch = true;\n            for(int\
    \ i = 0; i < word.length(); i++){\n                if(Character.isLetter(word.charAt(i))){\n\
    \                    if(Character.getNumericValue(word.charAt(i)) != n){\n   \
    \                     isMatch = false;\n                    }\n              \
    \  }else{\n                    isMatch = false;\n                    break;\n\
    \                }\n            }\n            if(isMatch){\n                res.add(word);\n\
    \            }\n        }\n        return res;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmzs5fry7.java:46)\n"
  stdout: ''
  timestamp: 1659977324
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        if (s.isEmpty()) {\n            return new ArrayList<>();\n     \
    \   }\n\n        ArrayList<String> result = new ArrayList<>();\n\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            result.addAll(wordContainsExactly(word,\
    \ new char[] {' ', '\\\\s', '\\\\s', '\\\\n', '\\\\t', '\\\\v', '\\\\f', 'i',\
    \ 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',\
    \ 'z', '\\\\x', '\\\\u0', '\\\\u00'}, n));\n        }\n\n        List<String>\
    \ l = new ArrayList<>();\n        for (String r : result) {\n            l.add(r);\n\
    \        }\n\n        return l.isEmpty() ? new ArrayList<>() : new ArrayList<>(l);\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv77x9cmy.java:34: error: unclosed character literal\n         \
    \   result.addAll(wordContainsExactly(word, new char[] {' ', '\\\\s', '\\\\s',\
    \ '\\\\n', '\\\\t', '\\\\v', '\\\\f', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p',\
    \ 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '\\\\x', '\\\\u0', '\\\\u00'},\
    \ n));\n                                                                     ^\n\
    /tmp/tmpv77x9cmy.java:34: error: unclosed character literal\n            result.addAll(wordContainsExactly(word,\
    \ new char[] {' ', '\\\\s', '\\\\s', '\\\\n', '\\\\t', '\\\\v', '\\\\f', 'i',\
    \ 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',\
    \ 'z', '\\\\x', '\\\\u0', '\\\\u00'}, n));\n                                 \
    \                                        ^\n/tmp/tmpv77x9cmy.java:34: error: not\
    \ a statement\n            result.addAll(wordContainsExactly(word, new char[]\
    \ {' ', '\\\\s', '\\\\s', '\\\\n', '\\\\t', '\\\\v', '\\\\f', 'i', 'j', 'k', 'l',\
    \ 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '\\\\\
    x', '\\\\u0', '\\\\u00'}, n));\n                                             \
    \                           ^\n/tmp/tmpv77x9cmy.java:34: error: unclosed character\
    \ literal\n            result.addAll(wordContainsExactly(word, new char[] {' ',\
    \ '\\\\s', '\\\\s', '\\\\n', '\\\\t', '\\\\v', '\\\\f', 'i', 'j', 'k', 'l', 'm',\
    \ 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '\\\\x', '\\\
    \\u0', '\\\\u00'}, n));\n                                                    \
    \                        ^\n/tmp/tmpv77x9cmy.java:34: error: unclosed character\
    \ literal\n            result.addAll(wordContainsExactly(word, new char[] {' ',\
    \ '\\\\s', '\\\\s', '\\\\n', '\\\\t', '\\\\v', '\\\\f', 'i', 'j', 'k', 'l', 'm',\
    \ 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '\\\\x', '\\\
    \\u0', '\\\\u00'}, n));\n                                                    \
    \                            ^\n/tmp/tmpv77x9cmy.java:34: error: not a statement\n\
    \            result.addAll(wordContainsExactly(word, new char[] {' ', '\\\\s',\
    \ '\\\\s', '\\\\n', '\\\\t', '\\\\v', '\\\\f', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\
    \ 'p', 'q', 'r', 's', 't', 'u',"
  stdout: ''
  timestamp: 1659977323
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // Your code here!\n        int i = 0;\n        ArrayList<String>\
    \ ans = new ArrayList<>();\n        for (char c : s.toCharArray()){\n        \
    \    if(c==' '){\n                i++;\n                continue;\n          \
    \  }\n            if(c=='a'){\n                if(s.substring(0,i+1).equalsIgnoreCase(\"\
    a\")){\n                    i++;\n                    continue;\n            \
    \    }\n            }\n            if(c=='e'){\n                if(s.substring(0,i+1).equalsIgnoreCase(\"\
    e\")){\n                    i++;\n                    continue;\n            \
    \    }\n            }\n            if(c=='i'){\n                if(s.substring(0,i+1).equalsIgnoreCase(\"\
    i\")){\n                    i++;\n                    continue;\n            \
    \    }\n            }\n            if(c=='o'){\n                if(s.substring(0,i+1).equalsIgnoreCase(\"\
    o\")){\n                    i++;\n                    continue;\n            \
    \    }\n            }\n            if(c=='u'){\n                if(s.substring(0,i+1).equalsIgnoreCase(\"\
    u\")){\n                    i++;\n                    continue;\n            \
    \    }\n            }\n            if(c=='y'){\n                if(s.substring(0,i+1).equalsIgnoreCase(\"\
    y\")){\n                    i++;\n                    continue;\n            \
    \    }\n            }\n            if(c=='s'){\n                if(s.substring(0,i+1).equalsIgnoreCase(\"\
    s\")){\n                    i++;\n                    continue;\n            \
    \    }\n            }\n            if(c=='h'){\n                if(s.substring(0,i+1).equalsIgnoreCase(\"\
    h\")){\n                    i++;\n                    continue;\n            \
    \    }\n            }\n            if(c=='l'){\n                if(s.substring(0,i+1).equalsIgnoreCase(\"\
    l\")){\n                    i++;\n                    continue;\n            \
    \    }\n            }\n            if(c=='z'){\n                if(s.substring(0,i+1).equalsIgnoreCase(\"\
    z\")){\n                    i++;\n                    continue;\n            \
    \    }\n            }\n            if(c=='t'){\n                if(s.substring(0,i+1).equalsIgnoreCase(\"\
    t\")){\n                    i++;\n                    continue;\n            \
    \    }\n            }\n            if(c=='d'){\n                if(s.substring(0,i+1).equalsIgnoreCase(\"\
    d\")){\n                    i++;\n                    continue;\n            \
    \    }\n            }\n            if(c=='w'){\n                if(s.substring(0,i+1).equalsIgnoreCase(\"\
    w\")){\n                    i++;\n                    continue;\n            \
    \    }\n            }\n            if(c=='m'){\n                if(s.substring(0,i+1).equalsIgnoreCase(\"\
    m\")){\n                    i++;\n                    continue;\n            \
    \    }\n\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4a04gtj3.java:119: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659977323
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        if(isEmpty(s)) return new ArrayList<>();\n\n        String[] words\
    \ = s.split(\" \");\n        ArrayList<String> result = new ArrayList<>();\n \
    \       for(String word : words) {\n            ArrayList<String> wordsInLine\
    \ = new ArrayList<>();\n            int length = word.length();\n            for(int\
    \ i=0; i<length; i++) {\n                if(word.charAt(i) == 'a' || word.charAt(i)\
    \ == 'e' || word.charAt(i) == 'i'\n                    || word.charAt(i) == 'o'\
    \ || word.charAt(i) == 'u') {\n                    wordsInLine.add(word.substring(0,\
    \ i));\n                    wordsInLine.add(word.substring(i+1, length));\n  \
    \                  break;\n                }\n            }\n            if(wordsInLine.size()\
    \ == n) result.addAll(wordsInLine);\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvovg6zrw.java:26: error: cannot find symbol\n        if(isEmpty(s))\
    \ return new ArrayList<>();\n           ^\n  symbol:   method isEmpty(String)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977324
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n       long countConsonant = 0;\n       for (int i = 0; i < s.length(); i++)\
    \ {\n           char c = s.charAt(i);\n           if (Character.isLetter(c)) {\n\
    \               if (Character.isUpperCase(c)) {\n                   countConsonant\
    \ += 2;\n               } else {\n                   countConsonant += 1;\n  \
    \             }\n           }\n       }\n       ArrayList<String> a = new ArrayList<String>();\n\
    \       if (n == 0l) {\n           return a;\n       }\n       if ((countConsonant\
    \ == n) || (countConsonant == (long) n)) {\n           return a;\n       }\n \
    \      if (s.isEmpty()) {\n           return a;\n       }\n       StringTokenizer\
    \ st = new StringTokenizer(s, \"\");\n       while (st.hasMoreTokens()) {\n  \
    \         a.add(st.nextToken());\n       }\n       return a;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsicfogi7.java:54)\n"
  stdout: ''
  timestamp: 1659977324
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        if (!s.isEmpty())\
    \ {\n            StringTokenizer tokenizer = new StringTokenizer(s);\n       \
    \     while (tokenizer.hasMoreTokens()) {\n                String token = tokenizer.nextToken();\n\
    \                if (token.matches(\"[^\" + Pattern.quote(\"aeiou\") + \"]*\"\
    )) {\n                    result.add(token);\n                    if (result.size()\
    \ == n) {\n                        break;\n                    }\n           \
    \     }\n            }\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpojewg_2i.java:31: error: cannot find symbol\n                if\
    \ (token.matches(\"[^\" + Pattern.quote(\"aeiou\") + \"]*\")) {\n            \
    \                             ^\n  symbol:   variable Pattern\n  location: class\
    \ Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977324
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        StringBuilder\
    \ word = new StringBuilder();\n        boolean flag = false;\n        if(s ==\
    \ null || !s.matches(\"[a-z]+\")) {\n            return new ArrayList<String>();\n\
    \        }\n        char[] chars = s.toCharArray();\n        int n = Integer.valueOf(n);\n\
    \        char[] newChars = new char[chars.length];\n        int index = 0;\n \
    \       for(int i = 0; i < chars.length; i++) {\n            char c = chars[i];\n\
    \            if(c == ' ' || c == ',' || c == '.' || c == '!' || c == '?' || c\
    \ == '\\'' || c == '?' || c == ';' || c == ':' || c == ';' || c == '(' || c ==\
    \ ')' || c == ':' || c == '<' || c == '>' || c == '|' || c == '\\\\' || c == '/')\
    \ {\n                if(word.length() > 0) {\n                    words.add(word.toString());\n\
    \                    word = new StringBuilder();\n                }\n        \
    \        flag = false;\n                index++;\n            }\n            if(c\
    \ == 'l') {\n                flag = true;\n                index++;\n        \
    \    }\n            if(flag) {\n                word.append(c);\n            }\n\
    \        }\n        if(word.length() > 0) {\n            words.add(word.toString());\n\
    \        }\n        return words;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp80glpmh7.java:33: error: variable n is already defined in method\
    \ selectWords(String,long)\n        int n = Integer.valueOf(n);\n            ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659977324
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        String [] arr = s.split(\" \");\n        if (arr.length == 0) {\n\
    \            return new ArrayList<String>();\n        }\n        ArrayList<String>\
    \ r = new ArrayList<String>();\n        for (String w : arr) {\n            if\
    \ (selectWords(w, n).size() == n) {\n                r.add(w);\n            }\n\
    \        }\n        return r;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat java.base/java.lang.String.indexOf(String.java:2421)\n\
    \tat java.base/java.lang.String.indexOf(String.java:2378)\n\tat java.base/java.lang.String.split(String.java:3110)\n\
    \tat java.base/java.lang.String.split(String.java:3199)\n\tat Problem.selectWords(tmpo4uqd535.java:26)\n\
    \tat Problem.selectWords(tmpo4uqd535.java:32)\n\tat Problem.selectWords(tmpo4uqd535.java:32)\n\
    \tat Problem.selectWords(tmpo4uqd535.java:32)\n\tat Problem.selectWords(tmpo4uqd535.java:32)\n\
    \tat Problem.selectWords(tmpo4uqd535.java:32)\n\tat Problem.selectWords(tmpo4uqd535.java:32)\n\
    \tat Problem.selectWords(tmpo4uqd535.java:32)\n\tat Problem.selectWords(tmpo4uqd535.java:32)\n\
    \tat Problem.selectWords(tmpo4uqd535.java:32)\n\tat Problem.selectWords(tmpo4uqd535.java:32)\n\
    \tat Problem.selectWords(tmpo4uqd535.java:32)\n\tat Problem.selectWords(tmpo4uqd535.java:32)\n\
    \tat Problem.selectWords(tmpo4uqd535.java:32)\n\tat Problem.selectWords(tmpo4uqd535.java:32)\n\
    \tat Problem.selectWords(tmpo4uqd535.java:32)\n\tat Problem.selectWords(tmpo4uqd535.java:32)\n\
    \tat Problem.selectWords(tmpo4uqd535.java:32)\n\tat Problem.selectWords(tmpo4uqd535.java:32)\n\
    \tat Problem.selectWords(tmpo4uqd535.java:32)\n\tat Problem.selectWords(tmpo4uqd535.java:32)\n\
    \tat Problem.selectWords(tmpo4uqd535.java:32)\n\tat Problem.selectWords(tmpo4uqd535.java:32)\n\
    \tat Problem.selectWords(tmpo4uqd535.java:32)\n\tat Problem.selectWords(tmpo4uqd535.java:32)\n\
    \tat Problem.selectWords(tmpo4uqd535.java:32)\n\tat Problem.selectWords(tmpo4uqd535.java:32)\n\
    \tat Problem.selectWords(tmpo4uqd535.java:32)\n\tat Problem.selectWords(tmpo4uqd535.java:32)\n\
    \tat Problem.selectWords(tmpo4uqd535.java:32)\n\tat Problem.selectWords(tmpo4uqd535.java:32)\n\
    \tat Problem.selectWords(tmpo4uqd535.java:32)\n\tat Problem.selectWords(tmpo4uqd535.java:32)\n\
    \tat Problem.selectWords(tmpo4uqd535.java:32)\n\tat Problem.selectWords(tmpo4uqd535.java:32)\n\
    \tat Problem.selectWords(tmpo4uqd535.java:32)\n\tat Problem.selectWords(tmpo4uqd535.java:32)\n\
    \tat Problem.selectWords(tmpo4uqd535.java:32)\n\tat Problem.selectWords(tmpo4uqd535.java:32)\n\
    \tat Problem.s"
  stdout: ''
  timestamp: 1659977324
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // Complete the function definition here\n        // The function\
    \ should return an empty array list if n is not positive\n        // or if n is\
    \ less than 1\n        ArrayList<String> arr = new ArrayList<>();\n        if\
    \ (s.isEmpty()) {\n            return arr;\n        }\n        if (n <= 0) {\n\
    \            return arr;\n        }\n        char[] arr = s.toCharArray();\n \
    \       Arrays.sort(arr);\n        int flag = 1;\n        for (char c : arr) {\n\
    \            if (c == ' ' || c == ',' || c == '.' || c == '!' || c == '?') {\n\
    \                flag = 0;\n            }\n            if (flag == n) {\n    \
    \            arr.add((String) c.toString());\n            }\n        }\n     \
    \   return arr;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzewd1smy.java:36: error: variable arr is already defined in method\
    \ selectWords(String,long)\n        char[] arr = s.toCharArray();\n          \
    \     ^\n/tmp/tmpzewd1smy.java:44: error: char cannot be dereferenced\n      \
    \          arr.add((String) c.toString());\n                                 \
    \ ^\n/tmp/tmpzewd1smy.java:44: error: cannot find symbol\n                arr.add((String)\
    \ c.toString());\n                   ^\n  symbol:   method add(String)\n  location:\
    \ variable arr of type char[]\n/tmp/tmpzewd1smy.java:47: error: incompatible types:\
    \ char[] cannot be converted to ArrayList<String>\n        return arr;\n     \
    \          ^\n4 errors\n"
  stdout: ''
  timestamp: 1659977324
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> ans = new ArrayList<String>();\n        if (n ==\
    \ 0) return ans;\n        String[] strs = s.split(\" \");\n        for (String\
    \ str : strs) {\n            boolean consonant = str.matches(\".*[aeiouAEIOU].*\"\
    );\n            ans.addAll(selectWords(str, n-1));\n            if (n==1 && consonant)\
    \ ans.add(str);\n        }\n        return ans;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3su0_vw.java:37)\n"
  stdout: ''
  timestamp: 1659977324
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int count\
    \ = 0;\n        ArrayList<String> words = new ArrayList<String>();\n        if\
    \ (s.length() > 0) {\n            for (i = 0; i < s.length(); i++) {\n       \
    \         if (s.charAt(i) == ' ') {\n                    j = 0;\n            \
    \        for (k = 0; k <= j; k++) {\n                        count ++;\n     \
    \               }\n                }\n                if (count == n) {\n    \
    \                words.add(s.substring(i, j));\n                    count = n-1;\n\
    \                }\n                j++;\n            }\n        }\n        return\
    \ words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp58h7535l.java:41: error: incompatible types: possible lossy conversion\
    \ from long to int\n                    count = n-1;\n                       \
    \      ^\n1 error\n"
  stdout: ''
  timestamp: 1659977324
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        if (s.isEmpty()) return new ArrayList<String>();\n        ArrayList<String>\
    \ results = new ArrayList<String>();\n        char[] letters = s.toCharArray();\n\
    \        char[] arr = new char[letters.length];\n        Arrays.fill(arr, ' ');\n\
    \        arr[0] = 'A';\n        arr[1] = 'B';\n        arr[2] = 'C';\n       \
    \ arr[3] = 'D';\n        arr[4] = 'E';\n        arr[5] = 'F';\n        arr[6]\
    \ = 'G';\n        arr[7] = 'H';\n        arr[8] = 'I';\n        arr[9] = 'J';\n\
    \        arr[10] = 'K';\n        arr[11] = 'L';\n        arr[12] = 'M';\n    \
    \    arr[13] = 'N';\n        arr[14] = 'O';\n        arr[15] = 'P';\n        arr[16]\
    \ = 'Q';\n        arr[17] = 'R';\n        arr[18] = 'S';\n        arr[19] = 'T';\n\
    \        arr[20] = 'U';\n        arr[21] = 'V';\n        arr[22] = 'W';\n    \
    \    arr[23] = 'X';\n        arr[24] = 'Y';\n        arr[25] = 'Z';\n        arr[26]\
    \ = 'a';\n        arr[27] = 'b';\n        arr[28] = 'c';\n        arr[29] = 'd';\n\
    \        arr[30] = 'e';\n        arr[31] = 'f';\n        arr[32] = 'g';\n    \
    \    arr[33] = 'h';\n        arr[34] = 'i';\n        arr[35] = 'j';\n        arr[36]\
    \ = 'k';\n        arr[37] = 'l';\n        arr[38] = 'm';\n        arr[39] = 'n';\n\
    \        arr[40] = 'o';\n        arr[41] = 'p';\n        arr[42] = 'q';\n    \
    \    arr[43] = 'r';\n        arr[44] = 's';\n        arr[45] = 't';\n        arr[46]\
    \ = 'u';\n        arr[47] = 'v';\n        arr[48] = 'w';\n        arr[49] = 'x';\n\
    \        arr[50] = 'y';\n        arr[51] = 'z';\n        arr[52] = ' ';\n    \
    \    arr[53] = '!';\n        arr[54] = '\"';\n        arr[55] = '%';\n       \
    \ arr[56] = '&';\n        arr[57] = '(';\n        arr[58] = ')';\n        arr[59]\
    \ = '*';\n        arr[60] = '+';\n        arr[61] = '-';\n        arr[62] = '{';\n\
    \        arr[63] = '}';\n        arr[64] = '|';\n        \n    }\n    public static\
    \ void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpltqu6ddu.java:97: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659977324
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> arrayList = new ArrayList<String>();\n        String[]\
    \ wordsArray = s.split(\" \");\n\n        ArrayList<String> arrayList2 = new ArrayList<String>();\n\
    \n        for(String word: wordsArray){\n            if (word.contains(String.valueOf(Character.toUpperCase('Q')))){\n\
    \                arrayList2.add(word);\n            }\n        }\n\n        if\
    \ (arrayList2.size() == 0){\n            return arrayList;\n        }\n\n    \
    \    Iterator<String> iterator = arrayList2.iterator();\n        while (iterator.hasNext()){\n\
    \            if (n == 4l){\n                arrayList.add(iterator.next());\n\
    \            }\n            else if (n == 3l){\n                arrayList.add(iterator.next());\n\
    \                arrayList.add(iterator.next());\n            }\n            else\
    \ if (n == 2l){\n                arrayList.add(iterator.next());\n           \
    \     arrayList.add(iterator.next());\n                arrayList.add(iterator.next());\n\
    \            }\n            else if (n == 2l){\n                arrayList.add(iterator.next());\n\
    \                arrayList.add(iterator.next());\n            }\n            else\
    \ if (n == 1l){\n                arrayList.add(iterator.next());\n           \
    \ }\n            else if (n == 1l){\n                arrayList.add(iterator.next());\n\
    \            }\n            else if (n == 0l){\n                arrayList.add(iterator.next());\n\
    \            }\n            else if (n == 0l){\n                arrayList.add(iterator.next());\n\
    \            }\n            else if (n == 0l){\n                arrayList.add(iterator.next());\n\
    \            }\n            else{\n                break;\n            }\n\n \
    \           iterator.remove();\n        }\n\n        return arrayList;\n    }\n\
    \    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppyyup143.java:84)\n"
  stdout: ''
  timestamp: 1659977324
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        \n \
    \       if (s.isEmpty())\n            return result;\n        if (n == 0L)\n \
    \           return result;\n        \n        // Count consonants in s up to n\n\
    \        // Note: this can be done in linear time\n        long count = 0;\n \
    \       for (int i = 0; i < s.length() && count < n; i++) {\n            if (s.charAt(i)\
    \ != 'c'\n                    && s.charAt(i) != 'k'\n                    && s.charAt(i)\
    \ != 's'\n                    && s.charAt(i) != 'e'\n                    && s.charAt(i)\
    \ != 'o'\n                    && s.charAt(i) != 'u')\n                count++;\n\
    \        }\n        if (count != n)\n            return result;\n        \n  \
    \      // Count all words in s up to n\n        // Note: this can be done in linear\
    \ time\n        int charCount = 0;\n        int wordCount = 0;\n        for (int\
    \ i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'c' || s.charAt(i)\
    \ == 'k' || s.charAt(i) == 's'\n                    || s.charAt(i) == 'e' || s.charAt(i)\
    \ == 'o' || s.charAt(i) == 'u')\n                charCount++;\n            if\
    \ (charCount >= n)\n                wordCount++;\n        }\n        if (wordCount\
    \ != 0)\n            return result;\n        \n        // Count the letters in\
    \ the first word\n        // Note: this can be done in linear time\n        int\
    \ firstLetterCount = 0;\n        for (int i = 0; i < s.length(); i++) {\n    \
    \        if (s.charAt(i) != 'c')\n                firstLetterCount++;\n      \
    \  }\n        if (firstLetterCount != n)\n            return result;\n       \
    \ \n        // Count the consonants in the first word\n        // Note: this can\
    \ be done in linear time\n        int firstConsonantCount = 0;\n        for (int\
    \ i = 0; i < s.length(); i++) {\n            if (s.charAt(i) != 'c'\n        \
    \            && s.charAt(i) != 'k'\n                    && s.charAt(i) != 's'\n\
    \                    && s.charAt(i) != 'e'\n                    && s.charAt(i)\
    \ != 'o'\n                    && s.charAt(i) != 'u')\n                firstConsonantCount++;\n\
    \        }\n        if (firstConsonantCount != n)\n            return result;\n\
    \        \n        // Count the vowels in the first word\n        // Note: this\
    \ can be done in linear time\n        int firstVowelCount = 0;\n        for (int\
    \ i = 0; i < s.length(); i++) {\n            if (s.charAt(i) != 'a' && s.charAt(i)\
    \ != 'e' && s.charAt(i) != 'i'\n                    && s.charAt(i) != 'o' && s.charAt(i)\
    \ != 'u')\n                firstVowelCount++;\n        }\n        if (firstVowelCount\
    \ != n)\n            return result;\n        \n        // Collect all remaining\
    \ words\n        // Note: this can be done in linear time\n    }\n    public static\
    \ void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn_7jcez9.java:100: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  stdout: ''
  timestamp: 1659977325
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> list = new ArrayList<String>();\n        ArrayList<String>\
    \ subs = new ArrayList<String>();\n        ArrayList<String> wordsContainingN\
    \ = new ArrayList<String>();\n        HashSet<String> hashset = new HashSet<String>();\n\
    \        if (s.isEmpty()) \n            return new ArrayList<String>();\n    \
    \    for (String word : s.split(\" \")) {\n            char [] letters = s.toCharArray();\n\
    \            for (int i = 0; i < letters.length; i++) {\n                if (Character.isLetterOrDigit(letters[i])\
    \ && n == Long.parseLong(String.valueOf(letters[i]))) {\n                    if\
    \ (hashset.contains(word)) {\n                        words.add(0, word);\n  \
    \                      break;\n                    }\n                    hashset.add(word);\n\
    \                    int count = 0;\n                    for (int j = 1; j < letters.length;\
    \ j++) {\n                        if (Character.isLetter(letters[j]) && Character.isLetter(letters[j\
    \ - 1])\n                                && n == Long.parseLong(String.valueOf(letters[j\
    \ - 1]) + String.valueOf(letters[j])) && n >= 0) {\n                         \
    \   count++;\n                            if (count == n) {\n                \
    \                words.add(0, word);\n                                break;\n\
    \                            }\n                        } else {\n           \
    \                 break;\n                        }\n                    }\n \
    \                   if (count == n) {\n                        words.add(0, word);\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n        for (String word : words) {\n            list.add(word);\n\
    \        }\n        return list;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcl3yinn2.java:37: error: cannot find symbol\n                 \
    \       words.add(0, word);\n                        ^\n  symbol:   variable words\n\
    \  location: class Problem\n/tmp/tmpcl3yinn2.java:47: error: cannot find symbol\n\
    \                                words.add(0, word);\n                       \
    \         ^\n  symbol:   variable words\n  location: class Problem\n/tmp/tmpcl3yinn2.java:55:\
    \ error: cannot find symbol\n                        words.add(0, word);\n   \
    \                     ^\n  symbol:   variable words\n  location: class Problem\n\
    /tmp/tmpcl3yinn2.java:61: error: cannot find symbol\n        for (String word\
    \ : words) {\n                           ^\n  symbol:   variable words\n  location:\
    \ class Problem\n4 errors\n"
  stdout: ''
  timestamp: 1659977324
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<>();\n        // Base case\n\
    \        if(s.length() < n) return result;\n        // Recursion\n        for(int\
    \ i = 0; i<s.length(); i++) {\n            if(s.charAt(i) >= 'A' && s.charAt(i)\
    \ <= 'Z' && (i==0 || s.charAt(i) != s.charAt(i-1))) result.add(s.substring(i,i+1));\n\
    \        }\n        // Return result\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc0hzpv_q.java:37)\n"
  stdout: ''
  timestamp: 1659977325
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> res = new ArrayList<>();\n        ArrayList<String>\
    \ temp = new ArrayList<>();\n        ArrayList<String> temp2 = new ArrayList<>();\n\
    \        char[] letters = s.toCharArray();\n        if (letters.length == 0) {\n\
    \            return res;\n        }\n        for (char letter : letters) {\n \
    \           if (letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u' ||\n                    letter == 'y') {\n                temp.add(letter);\n\
    \            } else if (letter != ' ') {\n                temp2.add(letter);\n\
    \            }\n        }\n        temp.add(String.valueOf(temp2));\n        if\
    \ (n == 0l) {\n            return res;\n        }\n        long total = 0;\n \
    \       long count = 0;\n        for (int i = 0; i < temp.size() - 1; i++) {\n\
    \            if (temp.get(i).equalsIgnoreCase(temp.get(i + 1))) {\n          \
    \      count++;\n            } else {\n                total++;\n            \
    \    count = 1;\n                temp2.clear();\n            }\n        }\n  \
    \      while (count != n) {\n            total++;\n            count = 1;\n  \
    \          temp2.clear();\n            for (int i = 0; i < temp.size() - 1; i++)\
    \ {\n                if (temp.get(i).equalsIgnoreCase(temp.get(i + 1))) {\n  \
    \                  count++;\n                } else {\n                    temp2.add(temp.get(i));\n\
    \                }\n            }\n            temp.add(String.valueOf(temp2));\n\
    \        }\n        if (total == n) {\n            res.add(temp.get(0));\n   \
    \     }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsucm_7w4.java:36: error: incompatible types: char cannot be converted\
    \ to String\n                temp.add(letter);\n                         ^\n/tmp/tmpsucm_7w4.java:38:\
    \ error: incompatible types: char cannot be converted to String\n            \
    \    temp2.add(letter);\n                          ^\nNote: Some messages have\
    \ been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659977324
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        if(s == null || s.isEmpty()){\n            return new ArrayList<>();\n\
    \        }\n        ArrayList<String> result = new ArrayList<>();\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        for(String t : s.split(\" \")){\n      \
    \      if(t.length() == n){\n                words.add(t);\n            }\n  \
    \      }\n        return words.stream().filter(e -> e.contains(\"n\")).collect(Collectors.toList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkx96itmd.java:36: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        return words.stream().filter(e -> e.contains(\"\
    n\")).collect(Collectors.toList());\n                                        \
    \                          ^\n    equality constraints: List<T#2>\n    lower bounds:\
    \ ArrayList<String>,Object\n  where R,A,T#1,T#2 are type-variables:\n    R extends\
    \ Object declared in method <R,A>collect(Collector<? super T#1,A,R>)\n    A extends\
    \ Object declared in method <R,A>collect(Collector<? super T#1,A,R>)\n    T#1\
    \ extends Object declared in interface Stream\n    T#2 extends Object declared\
    \ in method <T#2>toList()\n1 error\n"
  stdout: ''
  timestamp: 1659977325
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> ans = new ArrayList<String>();\n        if (s.length()\
    \ == 0) {\n            ans.add(\"\");\n            return ans;\n        }\n  \
    \      ArrayList<String> leftWords = selectWords(s.substring(0,1), n);\n     \
    \   ArrayList<String> rightWords = selectWords(s.substring(1), n);\n        if\
    \ (leftWords.isEmpty() && rightWords.isEmpty()) {\n            ans.add(\"\");\n\
    \        }\n        boolean first = true;\n        for (String leftWord : leftWords)\
    \ {\n            for (String rightWord : rightWords) {\n                if (first)\
    \ {\n                    first = false;\n                    ans.add(rightWord);\n\
    \                }\n                if (leftWord.contains(rightWord)) {\n    \
    \                ans.add(leftWord + \" \" + rightWord);\n                }\n \
    \           }\n        }\n        return ans;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat java.base/java.util.AbstractCollection.<init>(AbstractCollection.java:68)\n\
    \tat java.base/java.util.AbstractList.<init>(AbstractList.java:78)\n\tat java.base/java.util.ArrayList.<init>(ArrayList.java:168)\n\
    \tat Problem.selectWords(tmpv3mmeg8c.java:26)\n\tat Problem.selectWords(tmpv3mmeg8c.java:31)\n\
    \tat Problem.selectWords(tmpv3mmeg8c.java:31)\n\tat Problem.selectWords(tmpv3mmeg8c.java:31)\n\
    \tat Problem.selectWords(tmpv3mmeg8c.java:31)\n\tat Problem.selectWords(tmpv3mmeg8c.java:31)\n\
    \tat Problem.selectWords(tmpv3mmeg8c.java:31)\n\tat Problem.selectWords(tmpv3mmeg8c.java:31)\n\
    \tat Problem.selectWords(tmpv3mmeg8c.java:31)\n\tat Problem.selectWords(tmpv3mmeg8c.java:31)\n\
    \tat Problem.selectWords(tmpv3mmeg8c.java:31)\n\tat Problem.selectWords(tmpv3mmeg8c.java:31)\n\
    \tat Problem.selectWords(tmpv3mmeg8c.java:31)\n\tat Problem.selectWords(tmpv3mmeg8c.java:31)\n\
    \tat Problem.selectWords(tmpv3mmeg8c.java:31)\n\tat Problem.selectWords(tmpv3mmeg8c.java:31)\n\
    \tat Problem.selectWords(tmpv3mmeg8c.java:31)\n\tat Problem.selectWords(tmpv3mmeg8c.java:31)\n\
    \tat Problem.selectWords(tmpv3mmeg8c.java:31)\n\tat Problem.selectWords(tmpv3mmeg8c.java:31)\n\
    \tat Problem.selectWords(tmpv3mmeg8c.java:31)\n\tat Problem.selectWords(tmpv3mmeg8c.java:31)\n\
    \tat Problem.selectWords(tmpv3mmeg8c.java:31)\n\tat Problem.selectWords(tmpv3mmeg8c.java:31)\n\
    \tat Problem.selectWords(tmpv3mmeg8c.java:31)\n\tat Problem.selectWords(tmpv3mmeg8c.java:31)\n\
    \tat Problem.selectWords(tmpv3mmeg8c.java:31)\n\tat Problem.selectWords(tmpv3mmeg8c.java:31)\n\
    \tat Problem.selectWords(tmpv3mmeg8c.java:31)\n\tat Problem.selectWords(tmpv3mmeg8c.java:31)\n\
    \tat Problem.selectWords(tmpv3mmeg8c.java:31)\n\tat Problem.selectWords(tmpv3mmeg8c.java:31)\n\
    \tat Problem.selectWords(tmpv3mmeg8c.java:31)\n\tat Problem.selectWords(tmpv3mmeg8c.java:31)\n\
    \tat Problem.selectWords(tmpv3mmeg8c.java:31)\n\tat Problem.selectWords(tmpv3mmeg8c.java:31)\n\
    \tat Problem.selectWords(tmpv3mmeg8c.java:31)\n\tat Problem.selectWords(tmpv3mmeg8c.java:31)\n\
    \tat Problem.selectWords(tmpv3mmeg8c.java:31)\n\tat Problem.selectWords(tmpv3mme"
  stdout: ''
  timestamp: 1659977325
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        int k = 0;\n        if(s == null || s.length() == 0)\n          \
    \  return new ArrayList<>();\n\n        ArrayList<String> result = new ArrayList<>();\n\
    \n        char[] chars = s.toCharArray();\n        char[] tempChars = new char[chars.length];\n\
    \n        for(int i = 0; i < chars.length; i++){\n            if(Character.isLetter(chars[i])){\n\
    \                tempChars[k] = chars[i];\n                k++;\n            }\n\
    \            else if(Character.isSpaceChar(chars[i])){\n                k = 0;\n\
    \            }\n        }\n        char[] newChars = new char[chars.length - k];\n\
    \        System.arraycopy(tempChars, k, newChars, 0, newChars.length);\n     \
    \   result.add(new String(newChars));\n\n        for(int i = chars.length - k;\
    \ i < chars.length; i++){\n            if(Character.isLetter(chars[i])){\n   \
    \             tempChars[k] = chars[i];\n                k++;\n            }\n\
    \            else if(Character.isSpaceChar(chars[i])){\n                k = 0;\n\
    \            }\n        }\n        char[] newChars1 = new char[chars.length -\
    \ k];\n        System.arraycopy(tempChars, k, newChars1, 0, newChars1.length);\n\
    \        result.add(new String(newChars1));\n\n        for(int i = chars.length\
    \ - k; i < chars.length; i++){\n            if(Character.isLetter(chars[i])){\n\
    \                tempChars[k] = chars[i];\n                k++;\n            }\n\
    \            else if(Character.isSpaceChar(chars[i])){\n                k = 0;\n\
    \            }\n        }\n        char[] newChars2 = new char[chars.length -\
    \ k];\n        System.arraycopy(tempChars, k, newChars2, 0, newChars2.length);\n\
    \        result.add(new String(newChars2));\n\n        for(int i = chars.length\
    \ - k; i < chars.length; i++){\n            if(Character.isLetter(chars[i])){\n\
    \                tempChars[k] = chars[i];\n                k++;\n            }\n\
    \            else if(Character.isSpaceChar(chars[i])){\n                k = 0;\n\
    \            }\n        }\n        char[] newChars3 = new char[chars.length -\
    \ k];\n        System.arraycopy(tempChars, k, newChars3, 0, newChars3.length);\n\
    \        result.add(new String(newChars3));\n\n        for(int i = chars.length\
    \ - k; i < chars.length; i++){\n            if(Character.isLetter(chars[i])){\n\
    \                tempChars[k] = chars[i];\n                k++;\n            }\n\
    \            else if(Character.isSpaceChar(chars[i])){\n                k = 0;\n\
    \            }\n        }\n        char[] newChars4 = new char[chars.length -\
    \ k];\n        \n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpljl4xja2.java:98: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659977325
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        String[] words =\n            s.replaceAll(\"[^a-zA-Z ]\", \" \"\
    ).split(\" \");\n        long count = new AtomicLong();\n        long sum = new\
    \ AtomicLong();\n        long maxWords = sum.updateAndGet(sum -> s.trim().length());\n\
    \        if (words.length == 0 || maxWords < n) {\n            return new ArrayList<>();\n\
    \        }\n        boolean isLastWord = words[words.length - 1].matches(\"[^a-zA-Z\
    \ ]\");\n        for (String word : words) {\n            long w = sum.updateAndGet(sum1\
    \ -> sum1 + word.length());\n            if (w <= n) {\n                count.updateAndGet(count1\
    \ -> count1 + 1);\n                sum.updateAndGet(sum1 -> sum1 + word.length());\n\
    \            } else {\n                if (isLastWord) {\n                   \
    \ return new ArrayList<>(Arrays.asList(word));\n                }\n          \
    \  }\n        }\n        return selectWords(s, n, count, sum, maxWords);\n   \
    \ }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp738xo7wh.java:28: error: cannot find symbol\n        long count\
    \ = new AtomicLong();\n                         ^\n  symbol:   class AtomicLong\n\
    \  location: class Problem\n/tmp/tmp738xo7wh.java:29: error: cannot find symbol\n\
    \        long sum = new AtomicLong();\n                       ^\n  symbol:   class\
    \ AtomicLong\n  location: class Problem\n/tmp/tmp738xo7wh.java:30: error: long\
    \ cannot be dereferenced\n        long maxWords = sum.updateAndGet(sum -> s.trim().length());\n\
    \                           ^\n/tmp/tmp738xo7wh.java:30: error: variable sum is\
    \ already defined in method selectWords(String,long)\n        long maxWords =\
    \ sum.updateAndGet(sum -> s.trim().length());\n                              \
    \           ^\n/tmp/tmp738xo7wh.java:36: error: long cannot be dereferenced\n\
    \            long w = sum.updateAndGet(sum1 -> sum1 + word.length());\n      \
    \                  ^\n/tmp/tmp738xo7wh.java:38: error: long cannot be dereferenced\n\
    \                count.updateAndGet(count1 -> count1 + 1);\n                 \
    \    ^\n/tmp/tmp738xo7wh.java:39: error: long cannot be dereferenced\n       \
    \         sum.updateAndGet(sum1 -> sum1 + word.length());\n                  \
    \ ^\n/tmp/tmp738xo7wh.java:46: error: method selectWords in class Problem cannot\
    \ be applied to given types;\n        return selectWords(s, n, count, sum, maxWords);\n\
    \               ^\n  required: String,long\n  found:    String,long,long,long,long\n\
    \  reason: actual and formal argument lists differ in length\n8 errors\n"
  stdout: ''
  timestamp: 1659977325
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        if(s.isEmpty())\n\
    \            return result;\n\n        char[] chars = s.toCharArray();\n     \
    \   Arrays.sort(chars);\n\n        for(char c: chars){\n            if(n == Character.getNumericValue(c)){\n\
    \                result.add(c);\n            }\n        }\n\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpib6g9of9.java:35: error: incompatible types: char cannot be converted\
    \ to String\n                result.add(c);\n                           ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n1 error\n"
  stdout: ''
  timestamp: 1659977325
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        if (s.isEmpty())\n            return new ArrayList<>();\n       \
    \ if (n == 0)\n            return new ArrayList<>();\n        ArrayList<String>\
    \ res = new ArrayList<>();\n        char[] arr = s.toCharArray();\n        Arrays.sort(arr);\n\
    \        long counter = 0;\n        for(int i = 0; i < arr.length - n; i++) {\n\
    \            if (arr[i] == ' ') {\n                if (counter < n) {\n      \
    \              counter++;\n                } else {\n                    res.add(new\
    \ String(arr, 0, i));\n                }\n            } else {\n             \
    \   counter = 0;\n            }\n        }\n        return res;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq61xjy8l.java:48)\n"
  stdout: ''
  timestamp: 1659977325
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        if (s.isEmpty())\
    \ {\n            return result;\n        }\n\n        char[] chars = s.toCharArray();\n\
    \        Arrays.sort(chars);\n\n        LinkedList<String> candidates = new LinkedList<String>();\n\
    \        for (String candidate : selectWordsRecursive(s, n, candidates)) {\n \
    \           if (candidates.size() > n) {\n                result.addAll(candidates);\n\
    \                candidates = new LinkedList<String>();\n            }\n     \
    \       candidates.add(candidate);\n        }\n        if (candidates.size() >\
    \ 0) {\n            result.addAll(candidates);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmyp13wyc.java:35: error: cannot find symbol\n        for (String\
    \ candidate : selectWordsRecursive(s, n, candidates)) {\n                    \
    \            ^\n  symbol:   method selectWordsRecursive(String,long,LinkedList<String>)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977325
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        long\
    \ length = s.length();\n        for(long i = 0; i < length; i ++) {\n        \
    \    char c = s.charAt(i);\n            if(c == 'a') {\n                words.add(\"\
    a\");\n            } else if(c == 'e') {\n                words.add(\"e\");\n\
    \            } else if(c == 'i') {\n                words.add(\"i\");\n      \
    \      } else if(c == 'o') {\n                words.add(\"o\");\n            }\
    \ else if(c == 'u') {\n                words.add(\"u\");\n            } else if(c\
    \ == 'y') {\n                words.add(\"y\");\n            } else if(c == 'n')\
    \ {\n                words.add(\"n\");\n            } else if(c == 's') {\n  \
    \              words.add(\"s\");\n            } else if(c == 't') {\n        \
    \        words.add(\"t\");\n            } else if(c == 'h') {\n              \
    \  words.add(\"h\");\n            } else if(c == 'l') {\n                words.add(\"\
    l\");\n            } else if(c == 'd') {\n                words.add(\"d\");\n\
    \            } else if(c == 'e') {\n                words.add(\"e\");\n      \
    \      } else if(c == 'l') {\n                words.add(\"l\");\n            }\
    \ else if(c == 'l') {\n                words.add(\"l\");\n            } else if(c\
    \ == 'o') {\n                words.add(\"o\");\n            } else if(c == 'r')\
    \ {\n                words.add(\"r\");\n            } else if(c == 'e') {\n  \
    \              words.add(\"e\");\n            } else if(c == 't') {\n        \
    \        words.add(\"t\");\n            } else if(c == 'h') {\n              \
    \  words.add(\"h\");\n            } else if(c == 'e') {\n                words.add(\"\
    e\");\n            } else if(c == 'i') {\n                words.add(\"i\");\n\
    \            } else if(c == 's') {\n                words.add(\"s\");\n      \
    \      } else if(c == 's') {\n                words.add(\"s\");\n            }\
    \ else if(c == 'a') {\n                words.add(\"a\");\n            } else if(c\
    \ == 'e') {\n                words.add(\"e\");\n            } else if(c == 'u')\
    \ {\n                words.add(\"u\");\n            } else if(c == 'y') {\n  \
    \              words.add(\"y\");\n            } else if(c == 'a') {\n        \
    \        words.add(\"a\");\n            } else if(c == 'a') {\n              \
    \  words.add(\"a\");\n            } else if(c == 'a') {\n                words.add(\"\
    a\");\n            } else if(c == 'a') {\n                words.add(\"a\");\n\
    \            } else if(c == 'e') {\n                \n    }\n    public static\
    \ void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjtpao6j5.java:97: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659977324
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        // TODO:\
    \ complete the implementation\n    }\n    public static void main(String[] args)\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzitbt42a.java:28: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659977325
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> ret = new ArrayList<String>();\n        if (n ==\
    \ 0) {\n            return ret;\n        }\n        ArrayList<String> words =\
    \ new ArrayList<String>();\n        // String words[] = s.split(\" \");\n    \
    \    char[] chars = s.toCharArray();\n        Arrays.sort(chars);\n        for\
    \ (char c : chars) {\n            if (n > 0) {\n                String word =\
    \ new String(new char[]{c});\n                if (word.length() == n) {\n    \
    \                words.add(word);\n                    n -= word.length();\n \
    \               }\n            }\n            else if (n == 0) {\n           \
    \     words.add(new String(new char[]{c}));\n            }\n        }\n      \
    \  ret.addAll(words);\n        if (n == 0) {\n            return ret;\n      \
    \  }\n        ArrayList<String> newlist = new ArrayList<String>();\n        for\
    \ (String word : ret) {\n            if (word.length() == n) {\n             \
    \   newlist.add(word);\n                n -= word.length();\n            }\n \
    \       }\n        return ret.addAll(newlist);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptmlngu7u.java:57: error: incompatible types: boolean cannot be\
    \ converted to ArrayList<String>\n        return ret.addAll(newlist);\n      \
    \                   ^\n1 error\n"
  stdout: ''
  timestamp: 1659977326
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        char[]\
    \ chars = s.toCharArray();\n        int[] counts = countSubstrings(chars, n);\n\
    \        for (int i = 0; i < counts.length; i++) {\n            for (int j = 0;\
    \ j < counts[i]; j++) {\n                result.add(new String(chars, i + 1, j));\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3tt2r7ws.java:28: error: cannot find symbol\n        int[] counts\
    \ = countSubstrings(chars, n);\n                       ^\n  symbol:   method countSubstrings(char[],long)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977325
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> res = new ArrayList<>();\n        ArrayList<String>\
    \ t = new ArrayList<>();\n        if (n == 0l) res.add(\"\");\n        else if\
    \ (s.length() == 0) res.add(\"\");\n        else if (s.length() % 2 == 0) t.add(\"\
    \");\n        else t.add(\"\");\n        if (s.length() == 0 || s.length() % 2\
    \ == 0) return res;\n        final Pattern p = Pattern.compile(\"([aeiouy])\"\
    , Pattern.CASE_INSENSITIVE);\n        Matcher m = p.matcher(s);\n        while\
    \ (m.find()) {\n            String s = m.group(0);\n            String word =\
    \ s;\n            boolean add = false;\n            for (int i = 0; i < s.length();\
    \ i++) {\n                if (s.charAt(i) == 'o') {\n                    add =\
    \ true;\n                    if (!t.contains(word)) {\n                      \
    \  t.add(word);\n                    }\n                    break;\n         \
    \       }\n                word = \"\";\n            }\n            if (add) {\n\
    \                res.add(word);\n            }\n        }\n        return res;\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgvp9u05k.java:33: error: cannot find symbol\n        final Pattern\
    \ p = Pattern.compile(\"([aeiouy])\", Pattern.CASE_INSENSITIVE);\n           \
    \   ^\n  symbol:   class Pattern\n  location: class Problem\n/tmp/tmpgvp9u05k.java:33:\
    \ error: cannot find symbol\n        final Pattern p = Pattern.compile(\"([aeiouy])\"\
    , Pattern.CASE_INSENSITIVE);\n                                               \
    \         ^\n  symbol:   variable Pattern\n  location: class Problem\n/tmp/tmpgvp9u05k.java:33:\
    \ error: cannot find symbol\n        final Pattern p = Pattern.compile(\"([aeiouy])\"\
    , Pattern.CASE_INSENSITIVE);\n                          ^\n  symbol:   variable\
    \ Pattern\n  location: class Problem\n/tmp/tmpgvp9u05k.java:34: error: cannot\
    \ find symbol\n        Matcher m = p.matcher(s);\n        ^\n  symbol:   class\
    \ Matcher\n  location: class Problem\n/tmp/tmpgvp9u05k.java:36: error: variable\
    \ s is already defined in method selectWords(String,long)\n            String\
    \ s = m.group(0);\n                   ^\n5 errors\n"
  stdout: ''
  timestamp: 1659977325
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // TODO: Complete this\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptixnjfqe.java:27: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659977326
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> res = new ArrayList<>();\n        if (s == null\
    \ || s.length() < 1) return res;\n        HashSet<String> words = new HashSet<>();\n\
    \        boolean wordMatch = false;\n        for (String str : s.split(\" \"))\
    \ {\n            str = str.trim();\n            if (str.matches(\".*[aeiouy].*\"\
    )) {\n                wordMatch = true;\n                words.add(str);\n   \
    \             if (words.size() == n) {\n                    wordMatch = false;\n\
    \                }\n            }\n            if (wordMatch) {\n            \
    \    words.add(str);\n                if (words.size() == n) {\n             \
    \       wordMatch = false;\n                }\n            }\n        }\n    \
    \    res.addAll(words);\n        return res;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg1uvyagy.java:50)\n"
  stdout: ''
  timestamp: 1659977326
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> list = new ArrayList<>();\n        StringBuilder\
    \ wordBuilder = new StringBuilder();\n        for(char c : s.toCharArray()){\n\
    \            if(c=='a' || c=='e' || c=='i' || c=='o' || c=='u' || c=='A' || c=='E'\
    \ || c=='I'\n                    || c=='O' || c=='U'){\n                wordBuilder.append(c);\n\
    \            }\n            if((int)c>=65 && (int)c<=90){\n                wordBuilder.append(String.valueOf(c));\n\
    \            }\n        }\n        if(wordBuilder.length()>0){\n            for(String\
    \ word : words.split(wordBuilder)){\n                if(n==word.trim().length()){\n\
    \                    list.add(word);\n                }\n            }\n     \
    \   }\n        return list;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9bnvwuh0.java:38: error: cannot find symbol\n            for(String\
    \ word : words.split(wordBuilder)){\n                              ^\n  symbol:\
    \   variable words\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977326
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // Your code here\n        ArrayList<String> result = new ArrayList<>();\n\
    \        int len = s.length();\n        if (len == 0) {\n            return result;\n\
    \        }\n        if (s.contains(\"<\")) {\n            result.add(\"\");\n\
    \        }\n        ArrayList<String> list = new ArrayList<>();\n        for (int\
    \ i = 0; i < len; i++) {\n            char c = s.charAt(i);\n            if (isConsonant(c))\
    \ {\n                list.add(String.valueOf(c));\n                list.add(s.substring(i,\
    \ i + 1));\n            }\n        }\n        if (list.isEmpty()) {\n        \
    \    return result;\n        }\n        list = sortArray(list);\n        if (n\
    \ == 0l) {\n            return result;\n        }\n        if (n == 1l) {\n  \
    \          return list.stream().map(s -> {\n                result.add(s);\n \
    \               return s;\n            }).collect(Collectors.toList());\n    \
    \    }\n        ArrayList<String> arrayList = new ArrayList<>();\n        arrayList.addAll(list);\n\
    \        ArrayList<String> ans = new ArrayList<>();\n        for (int i = 1; i\
    \ < arrayList.size(); i++) {\n            String temp = \"\";\n            for\
    \ (int j = 0; j < i; j++) {\n                temp = temp + arrayList.get(j);\n\
    \            }\n            if (arrayList.size() - 1 == i) {\n               \
    \ ans.add(temp);\n            }\n        }\n        return ans.stream().map(s\
    \ -> {\n            result.add(s);\n            return s;\n        }).collect(Collectors.toList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpywilsnfl.java:38: error: cannot find symbol\n            if (isConsonant(c))\
    \ {\n                ^\n  symbol:   method isConsonant(char)\n  location: class\
    \ Problem\n/tmp/tmpywilsnfl.java:46: error: cannot find symbol\n        list =\
    \ sortArray(list);\n               ^\n  symbol:   method sortArray(ArrayList<String>)\n\
    \  location: class Problem\n/tmp/tmpywilsnfl.java:51: error: variable s is already\
    \ defined in method selectWords(String,long)\n            return list.stream().map(s\
    \ -> {\n                                     ^\n/tmp/tmpywilsnfl.java:54: error:\
    \ incompatible types: inference variable R has incompatible bounds\n         \
    \   }).collect(Collectors.toList());\n                      ^\n    equality constraints:\
    \ List<T#2>\n    lower bounds: ArrayList<String>,Object\n  where R,A,T#1,T#2 are\
    \ type-variables:\n    R extends Object declared in method <R,A>collect(Collector<?\
    \ super T#1,A,R>)\n    A extends Object declared in method <R,A>collect(Collector<?\
    \ super T#1,A,R>)\n    T#1 extends Object declared in interface Stream\n    T#2\
    \ extends Object declared in method <T#2>toList()\n/tmp/tmpywilsnfl.java:68: error:\
    \ variable s is already defined in method selectWords(String,long)\n        return\
    \ ans.stream().map(s -> {\n                                ^\n/tmp/tmpywilsnfl.java:71:\
    \ error: incompatible types: inference variable R has incompatible bounds\n  \
    \      }).collect(Collectors.toList());\n                  ^\n    equality constraints:\
    \ List<T#2>\n    lower bounds: ArrayList<String>,Object\n  where R,A,T#1,T#2 are\
    \ type-variables:\n    R extends Object declared in method <R,A>collect(Collector<?\
    \ super T#1,A,R>)\n    A extends Object declared in method <R,A>collect(Collector<?\
    \ super T#1,A,R>)\n    T#1 extends Object declared in interface Stream\n    T#2\
    \ extends Object declared in method <T#2>toList()\n6 errors\n"
  stdout: ''
  timestamp: 1659977326
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // Your code here\n        ArrayList<String> words = new ArrayList<String>();\n\
    \        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n\
    \            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \                int count = 0;\n                for (int j = i + 1; j < s.length();\
    \ j++) {\n                    if (s.charAt(j) == c && j >= i) {\n            \
    \            count++;\n                    }\n                }\n            \
    \    if (count != n) {\n                    words.add(s.substring(i, i + count));\n\
    \                }\n            }\n        }\n        return words;\n    }\n \
    \   public static void main(String[] args) {\n    assert(selectWords((\"Mary had\
    \ a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9k5p27q6.java:45)\n"
  stdout: ''
  timestamp: 1659977326
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // YOUR CODE HERE\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4e6_ju7i.java:28: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659977326
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<>();\n        if (s == null\
    \ || s.length() == 0) {\n            return result;\n        }\n        ArrayList<String>\
    \ result1 = selectWords(s.replaceAll(\"[^a-zA-Z ]\", \"\"), n);\n        result.addAll(result1);\n\
    \        ArrayList<String> result2 = selectWords(s.replaceAll(\"[^a-zA-Z ]\",\
    \ \"\"), n);\n        result.addAll(result2);\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.util.regex.PatternSyntaxException: Stack\
    \ overflow during pattern compilation near index 4\n[^a-zA-Z ]\n    ^\n\tat java.base/java.util.regex.Pattern.error(Pattern.java:2028)\n\
    \tat java.base/java.util.regex.Pattern.<init>(Pattern.java:1432)\n\tat java.base/java.util.regex.Pattern.compile(Pattern.java:1069)\n\
    \tat java.base/java.lang.String.replaceAll(String.java:2942)\n\tat Problem.selectWords(tmpmx2t09sj.java:30)\n\
    \tat Problem.selectWords(tmpmx2t09sj.java:30)\n\tat Problem.selectWords(tmpmx2t09sj.java:30)\n\
    \tat Problem.selectWords(tmpmx2t09sj.java:30)\n\tat Problem.selectWords(tmpmx2t09sj.java:30)\n\
    \tat Problem.selectWords(tmpmx2t09sj.java:30)\n\tat Problem.selectWords(tmpmx2t09sj.java:30)\n\
    \tat Problem.selectWords(tmpmx2t09sj.java:30)\n\tat Problem.selectWords(tmpmx2t09sj.java:30)\n\
    \tat Problem.selectWords(tmpmx2t09sj.java:30)\n\tat Problem.selectWords(tmpmx2t09sj.java:30)\n\
    \tat Problem.selectWords(tmpmx2t09sj.java:30)\n\tat Problem.selectWords(tmpmx2t09sj.java:30)\n\
    \tat Problem.selectWords(tmpmx2t09sj.java:30)\n\tat Problem.selectWords(tmpmx2t09sj.java:30)\n\
    \tat Problem.selectWords(tmpmx2t09sj.java:30)\n\tat Problem.selectWords(tmpmx2t09sj.java:30)\n\
    \tat Problem.selectWords(tmpmx2t09sj.java:30)\n\tat Problem.selectWords(tmpmx2t09sj.java:30)\n\
    \tat Problem.selectWords(tmpmx2t09sj.java:30)\n\tat Problem.selectWords(tmpmx2t09sj.java:30)\n\
    \tat Problem.selectWords(tmpmx2t09sj.java:30)\n\tat Problem.selectWords(tmpmx2t09sj.java:30)\n\
    \tat Problem.selectWords(tmpmx2t09sj.java:30)\n\tat Problem.selectWords(tmpmx2t09sj.java:30)\n\
    \tat Problem.selectWords(tmpmx2t09sj.java:30)\n\tat Problem.selectWords(tmpmx2t09sj.java:30)\n\
    \tat Problem.selectWords(tmpmx2t09sj.java:30)\n\tat Problem.selectWords(tmpmx2t09sj.java:30)\n\
    \tat Problem.selectWords(tmpmx2t09sj.java:30)\n\tat Problem.selectWords(tmpmx2t09sj.java:30)\n\
    \tat Problem.selectWords(tmpmx2t09sj.java:30)\n\tat Problem.selectWords(tmpmx2t09sj.java:30)\n\
    \tat Problem.selectWords(tmpmx2t09sj.java:30)\n\tat Problem.selectWords(tmpmx2t09sj.java:30)\n\
    \tat Problem.selectWords(tmpmx2t09sj.java:30)\n\tat Problem.selectWords(tmpmx2t09sj.j"
  stdout: ''
  timestamp: 1659977327
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        return null;\n    }\n    public static void main(String[] args) {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ long)\" is null\n\tat Problem.main(tmpmjqq7hir.java:29)\n"
  stdout: ''
  timestamp: 1659977180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        if (n == 0l) {\n            return new ArrayList<>();\n        }\n\
    \        ArrayList<String> result = new ArrayList<>();\n        \n        // Split\
    \ String s into String array\n        String[] words = s.split(\" \");\n     \
    \   \n        // Get number of consonants\n        long nConsonants = countConsonants(words);\n\
    \        \n        // Go over each word and check it contains the number of consonants\
    \ specified\n        for (String word : words) {\n            long count = countConsonants(word);\n\
    \            if (count == n) {\n                result.add(word);\n          \
    \  }\n        }\n        \n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzmb_g9ab.java:35: error: cannot find symbol\n        long nConsonants\
    \ = countConsonants(words);\n                           ^\n  symbol:   method\
    \ countConsonants(String[])\n  location: class Problem\n/tmp/tmpzmb_g9ab.java:39:\
    \ error: cannot find symbol\n            long count = countConsonants(word);\n\
    \                         ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1659977326
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // Your code goes here\n        ArrayList<String> ans = new ArrayList<String>();\n\
    \        if(s == null || s.length() < n) return ans;\n\n        int count = (int)\
    \ Math.ceil(s.length() / n);\n        for(int i = 0; i < count; i++) {\n     \
    \       int from = i * n;\n            int to = (i+1) * n;\n            for(int\
    \ j = from; j < to; j++) {\n                String s = s.substring(from, to);\n\
    \                if(s.matches(\"\\\\p{L}+\")) ans.add(s);\n            }\n   \
    \     }\n        return ans;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4ut6hn35.java:32: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int from = i * n;\n                         ^\n\
    /tmp/tmp4ut6hn35.java:33: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int to = (i+1) * n;\n                        \
    \   ^\n/tmp/tmp4ut6hn35.java:35: error: variable s is already defined in method\
    \ selectWords(String,long)\n                String s = s.substring(from, to);\n\
    \                       ^\n3 errors\n"
  stdout: ''
  timestamp: 1659977326
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<>();\n        for (String\
    \ word : s.split(\" \")) {\n            if (selectWords(word, n).stream().anyMatch(i\
    \ -> i.length() == n)) {\n                result.add(word);\n            }\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat java.base/java.lang.StringLatin1.indexOf(StringLatin1.java:203)\n\
    \tat java.base/java.lang.String.indexOf(String.java:2421)\n\tat java.base/java.lang.String.indexOf(String.java:2378)\n\
    \tat java.base/java.lang.String.split(String.java:3110)\n\tat java.base/java.lang.String.split(String.java:3199)\n\
    \tat Problem.selectWords(tmpkbnh18o9.java:27)\n\tat Problem.selectWords(tmpkbnh18o9.java:28)\n\
    \tat Problem.selectWords(tmpkbnh18o9.java:28)\n\tat Problem.selectWords(tmpkbnh18o9.java:28)\n\
    \tat Problem.selectWords(tmpkbnh18o9.java:28)\n\tat Problem.selectWords(tmpkbnh18o9.java:28)\n\
    \tat Problem.selectWords(tmpkbnh18o9.java:28)\n\tat Problem.selectWords(tmpkbnh18o9.java:28)\n\
    \tat Problem.selectWords(tmpkbnh18o9.java:28)\n\tat Problem.selectWords(tmpkbnh18o9.java:28)\n\
    \tat Problem.selectWords(tmpkbnh18o9.java:28)\n\tat Problem.selectWords(tmpkbnh18o9.java:28)\n\
    \tat Problem.selectWords(tmpkbnh18o9.java:28)\n\tat Problem.selectWords(tmpkbnh18o9.java:28)\n\
    \tat Problem.selectWords(tmpkbnh18o9.java:28)\n\tat Problem.selectWords(tmpkbnh18o9.java:28)\n\
    \tat Problem.selectWords(tmpkbnh18o9.java:28)\n\tat Problem.selectWords(tmpkbnh18o9.java:28)\n\
    \tat Problem.selectWords(tmpkbnh18o9.java:28)\n\tat Problem.selectWords(tmpkbnh18o9.java:28)\n\
    \tat Problem.selectWords(tmpkbnh18o9.java:28)\n\tat Problem.selectWords(tmpkbnh18o9.java:28)\n\
    \tat Problem.selectWords(tmpkbnh18o9.java:28)\n\tat Problem.selectWords(tmpkbnh18o9.java:28)\n\
    \tat Problem.selectWords(tmpkbnh18o9.java:28)\n\tat Problem.selectWords(tmpkbnh18o9.java:28)\n\
    \tat Problem.selectWords(tmpkbnh18o9.java:28)\n\tat Problem.selectWords(tmpkbnh18o9.java:28)\n\
    \tat Problem.selectWords(tmpkbnh18o9.java:28)\n\tat Problem.selectWords(tmpkbnh18o9.java:28)\n\
    \tat Problem.selectWords(tmpkbnh18o9.java:28)\n\tat Problem.selectWords(tmpkbnh18o9.java:28)\n\
    \tat Problem.selectWords(tmpkbnh18o9.java:28)\n\tat Problem.selectWords(tmpkbnh18o9.java:28)\n\
    \tat Problem.selectWords(tmpkbnh18o9.java:28)\n\tat Problem.selectWords(tmpkbnh18o9.java:28)\n\
    \tat Problem.selectWords(tmpkbnh18o9.java:28)\n\tat Problem.selectWords(tmpkbnh18o9"
  stdout: ''
  timestamp: 1659977327
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        ArrayList<String>\
    \ vowels = new ArrayList<String>();\n        ArrayList<String> consonants = new\
    \ ArrayList<String>();\n        vowels.addAll(Arrays.asList(\"a\", \"e\", \"i\"\
    , \"o\", \"u\", \"y\"));\n        consonants.addAll(Arrays.asList(\"b\", \"c\"\
    , \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"));\n        String word\
    \ = \"\";\n        long countVowels = 0;\n        long countConsonants = 0;\n\
    \        boolean isVowel = false;\n        boolean isConsonant = false;\n    \
    \    for (int i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n\
    \            boolean isLetter = Character.isLetter(ch);\n            if (!isLetter)\
    \ {\n                word = word + ch;\n                continue;\n          \
    \  }\n            if (isVowel) {\n                if (ch == 'a' || ch == 'e' ||\
    \ ch == 'i' || ch == 'o' || ch == 'u') {\n                    if (word != \"\"\
    ) {\n                        countVowels++;\n                    }\n         \
    \       }\n            } else {\n                if (ch == 'a' || ch == 'b' ||\
    \ ch == 'c' || ch == 'd' || ch == 'f' || ch == 'g' || ch == 'h' || ch == 'j' ||\
    \ ch == 'k' || ch == 'l' || ch == 'm' || ch == 'n' || ch == 'p' || ch == 'q' ||\
    \ ch == 'r' || ch == 's' || ch == 't' || ch == 'v' || ch == 'w' || ch == 'x' ||\
    \ ch == 'y' || ch == 'z') {\n                    if (word != \"\") {\n       \
    \                 countConsonants++;\n                    }\n                }\n\
    \            }\n            isVowel = vowels.contains(ch);\n            isConsonant\
    \ = consonants.contains(ch);\n        }\n        if (countVowels + countConsonants\
    \ == n) {\n            result.add(word);\n        }\n        if (countConsonants\
    \ == n) {\n            word = \"\";\n        }\n        if (countVowels == n)\
    \ {\n            word = \"\";\n        }\n        if (word != \"\") {\n      \
    \      result.add(word);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpep24tbyw.java:74)\n"
  stdout: ''
  timestamp: 1659977327
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> list = new ArrayList<String>();\n\n        for\
    \ (String word : s.split(\" \")) {\n            if (word.matches(\"[a-zA-Z]+\"\
    )) {\n                ArrayList<String> temp = selectWords(word, n / 2);\n   \
    \             if (temp.size() > 0) {\n                    list.addAll(temp);\n\
    \                }\n            }\n        }\n\n        if (list.size() == 0)\
    \ {\n            return new ArrayList<String>();\n        } else {\n         \
    \   Collections.sort(list);\n            return list;\n        }\n    }\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.util.regex.PatternSyntaxException: Stack\
    \ overflow during pattern compilation near index 3\n[a-zA-Z]+\n   ^\n\tat java.base/java.util.regex.Pattern.error(Pattern.java:2028)\n\
    \tat java.base/java.util.regex.Pattern.<init>(Pattern.java:1432)\n\tat java.base/java.util.regex.Pattern.compile(Pattern.java:1069)\n\
    \tat java.base/java.util.regex.Pattern.matches(Pattern.java:1174)\n\tat java.base/java.lang.String.matches(String.java:2842)\n\
    \tat Problem.selectWords(tmpqtwkvmy8.java:29)\n\tat Problem.selectWords(tmpqtwkvmy8.java:30)\n\
    \tat Problem.selectWords(tmpqtwkvmy8.java:30)\n\tat Problem.selectWords(tmpqtwkvmy8.java:30)\n\
    \tat Problem.selectWords(tmpqtwkvmy8.java:30)\n\tat Problem.selectWords(tmpqtwkvmy8.java:30)\n\
    \tat Problem.selectWords(tmpqtwkvmy8.java:30)\n\tat Problem.selectWords(tmpqtwkvmy8.java:30)\n\
    \tat Problem.selectWords(tmpqtwkvmy8.java:30)\n\tat Problem.selectWords(tmpqtwkvmy8.java:30)\n\
    \tat Problem.selectWords(tmpqtwkvmy8.java:30)\n\tat Problem.selectWords(tmpqtwkvmy8.java:30)\n\
    \tat Problem.selectWords(tmpqtwkvmy8.java:30)\n\tat Problem.selectWords(tmpqtwkvmy8.java:30)\n\
    \tat Problem.selectWords(tmpqtwkvmy8.java:30)\n\tat Problem.selectWords(tmpqtwkvmy8.java:30)\n\
    \tat Problem.selectWords(tmpqtwkvmy8.java:30)\n\tat Problem.selectWords(tmpqtwkvmy8.java:30)\n\
    \tat Problem.selectWords(tmpqtwkvmy8.java:30)\n\tat Problem.selectWords(tmpqtwkvmy8.java:30)\n\
    \tat Problem.selectWords(tmpqtwkvmy8.java:30)\n\tat Problem.selectWords(tmpqtwkvmy8.java:30)\n\
    \tat Problem.selectWords(tmpqtwkvmy8.java:30)\n\tat Problem.selectWords(tmpqtwkvmy8.java:30)\n\
    \tat Problem.selectWords(tmpqtwkvmy8.java:30)\n\tat Problem.selectWords(tmpqtwkvmy8.java:30)\n\
    \tat Problem.selectWords(tmpqtwkvmy8.java:30)\n\tat Problem.selectWords(tmpqtwkvmy8.java:30)\n\
    \tat Problem.selectWords(tmpqtwkvmy8.java:30)\n\tat Problem.selectWords(tmpqtwkvmy8.java:30)\n\
    \tat Problem.selectWords(tmpqtwkvmy8.java:30)\n\tat Problem.selectWords(tmpqtwkvmy8.java:30)\n\
    \tat Problem.selectWords(tmpqtwkvmy8.java:30)\n\tat Problem.selectWords(tmpqtwkvmy8.java:30)\n\
    \tat Problem.selectWords(tmpqtwkvmy8.java:30)\n\tat Problem.selectWord"
  stdout: ''
  timestamp: 1659977327
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        if(s.isEmpty()) {\n            return new ArrayList<String>();\n\
    \        }\n        \n        ArrayList<String> result = new ArrayList<String>();\n\
    \        \n        for(int i = 0; i < s.length(); i++) {\n            if(s.charAt(i)\
    \ == 'a') {\n                if(n == 0) {\n                    return new ArrayList<String>();\n\
    \                }\n                \n                result.add(s.substring(0,\
    \ i));\n                \n                result.addAll(selectWords(s.substring(i\
    \ + 1, s.length()), n - 1));\n                \n                result.add(s.substring(s.length()\
    \ - 1));\n                \n                return result;\n            }\n  \
    \      }\n        \n        return new ArrayList<String>();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp46hv00y7.java:51)\n"
  stdout: ''
  timestamp: 1659977327
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<>();\n        StringBuilder\
    \ sb = new StringBuilder();\n        int count = 0;\n\n        if (n == 0)\n \
    \           return result;\n\n        sb.append(s);\n        for (String word\
    \ : s.split(\" \")) {\n            count++;\n            if (word.length() >=\
    \ n) {\n                result.add(word);\n            }\n        }\n        System.out.println(sb.toString());\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpktj9ij0l.java:44)\n"
  stdout: 'Mary had a little lamb

    '
  timestamp: 1659977327
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // Complete the function.\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx_zctr6j.java:27: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659977327
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        if(s.equals(\"\
    \"))\n            return result;\n        String[] arr = s.split(\" \");\n   \
    \     for(String each: arr) {\n            String word = new String();\n     \
    \       boolean flag = true;\n            for(int i = 0; i<each.length(); i++)\
    \ {\n                if(Character.isLetter(each.charAt(i)))\n                \
    \    continue;\n                else\n                    flag = false;\n    \
    \        }\n            if(flag)\n                result.add(each);\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpov45vw3i.java:45)\n"
  stdout: ''
  timestamp: 1659977327
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> arr = new ArrayList<>();\n        if (s == null\
    \ || s.length() == 0)\n            return arr;\n        int length = s.length();\n\
    \        if (n <= 0)\n            return arr;\n        String str = \"\";\n  \
    \      int i = 0;\n        while (i < length) {\n            str = s.substring(i,\
    \ i + 1);\n            if (str.contains(\"a\") || str.contains(\"e\") || str.contains(\"\
    i\") || str.contains(\"o\") || str.contains(\"u\")) {\n                if (n <=\
    \ str.length()) {\n                    arr.add(str);\n                    i++;\n\
    \                    n--;\n                }\n            } else {\n         \
    \       if (str.contains(\"z\")) {\n                    String str = s.substring(i,\
    \ i + 1);\n                    if (str.length() == n && str.contains(\"z\")) {\n\
    \                        arr.add(str);\n                        i++;\n       \
    \                 n--;\n                    } else {\n                       \
    \ i += 2;\n                    }\n                } else {\n                 \
    \   i += 1;\n                }\n            }\n        }\n        return arr;\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpazk7n9c3.java:44: error: variable str is already defined in method\
    \ selectWords(String,long)\n                    String str = s.substring(i, i\
    \ + 1);\n                           ^\n1 error\n"
  stdout: ''
  timestamp: 1659977327
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // TODO\n    }\n    public static void main(String[] args) {\n  \
    \  assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpatiry63v.java:27: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659977327
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> res = new ArrayList<>();\n        if (n.longValue()\
    \ > 0) {\n            final String vowels = \"aeiouAEIOU\";\n            final\
    \ String cons = \"bcdfghjklmnpqrstvwxzBCDFGHJKLMNPQRSTVWXZ\";\n            for\
    \ (char c : s.toCharArray()) {\n                if (cons.indexOf(c) == -1) {\n\
    \                    if (vowels.indexOf(c) >= 0)\n                        continue;\n\
    \                    else\n                        res.add(c);\n             \
    \   }\n            }\n        }\n        return res;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd0oe3jfs.java:27: error: long cannot be dereferenced\n        if\
    \ (n.longValue() > 0) {\n             ^\n/tmp/tmpd0oe3jfs.java:35: error: incompatible\
    \ types: char cannot be converted to String\n                        res.add(c);\n\
    \                                ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659977327
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // TODO: Implement me!\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmped7ssbte.java:27: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659977327
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        return null;\n    }\n    public static void main(String[] args) {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ long)\" is null\n\tat Problem.main(tmpmjqq7hir.java:29)\n"
  stdout: ''
  timestamp: 1659977180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        if(s==null\
    \ || s.isEmpty())\n            return result;\n        String[] words = s.split(\"\
    \ \");\n        for(String word : words) {\n            String s = word;\n   \
    \         String p = \"\";\n            String vowels = \"aeiou\";\n         \
    \   for(int i = 1; i < word.length(); i++) {\n                char c = word.charAt(i);\n\
    \                p = p + c;\n                if(!vowels.contains(p)) {\n     \
    \               s = s.substring(i);\n                    break;\n            \
    \    }\n            }\n            if(s.length() == n) {\n                result.add(word);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr0ufqmlz.java:31: error: variable s is already defined in method\
    \ selectWords(String,long)\n            String s = word;\n                   ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659977327
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        if(s == null || s.length() == 0) {\n            return new ArrayList<String>();\n\
    \        }\n\n        ArrayList<String> list = new ArrayList<String>();\n    \
    \    for(String word : s.split(\" \")) {\n            if((new ArrayList<String>(Arrays.asList(word)).contains(new\
    \ ArrayList<String>(Arrays.asList(\" \"))))\n                list.add(word);\n\
    \            else if(new ArrayList<String>(Arrays.asList(word)).contains(new ArrayList<String>(Arrays.asList(\"\
    .\"))))\n                list.add(word);\n            else if(new ArrayList<String>(Arrays.asList(word)).contains(new\
    \ ArrayList<String>(Arrays.asList(\"!\"))))\n                list.add(word);\n\
    \            else if(new ArrayList<String>(Arrays.asList(word)).contains(new ArrayList<String>(Arrays.asList(\"\
    ?\"))))\n                list.add(word);\n            else if(new ArrayList<String>(Arrays.asList(word)).contains(new\
    \ ArrayList<String>(Arrays.asList(\";\"))))\n                list.add(word);\n\
    \            else if(new ArrayList<String>(Arrays.asList(word)).contains(new ArrayList<String>(Arrays.asList(\"\
    :\"))))\n                list.add(word);\n            else if(new ArrayList<String>(Arrays.asList(word)).contains(new\
    \ ArrayList<String>(Arrays.asList(\",\"))))\n                list.add(word);\n\
    \            else if(new ArrayList<String>(Arrays.asList(word)).contains(new ArrayList<String>(Arrays.asList(\"\
    (\"))))\n                list.add(word);\n            else if(new ArrayList<String>(Arrays.asList(word)).contains(new\
    \ ArrayList<String>(Arrays.asList(\")\"))))\n                list.add(word);\n\
    \            else if(new ArrayList<String>(Arrays.asList(word)).contains(new ArrayList<String>(Arrays.asList(\"\
    =\"))))\n                list.add(word);\n            else if(new ArrayList<String>(Arrays.asList(word)).contains(new\
    \ ArrayList<String>(Arrays.asList(\"'\"))))\n                list.add(word);\n\
    \            else if(new ArrayList<String>(Arrays.asList(word)).contains(new ArrayList<String>(Arrays.asList(\"\
    \\\"\"))))\n                list.add(word);\n            else if(new ArrayList<String>(Arrays.asList(word)).contains(new\
    \ ArrayList<String>(Arrays.asList(\"$\"))))\n                list.add(word);\n\
    \            else if(new ArrayList<String>(Arrays.asList(word)).contains(new ArrayList<String>(Arrays.asList(\"\
    @\"))))\n                list.add(word);\n            else if(new ArrayList<String>(Arrays.asList(word)).contains(new\
    \ ArrayList<String>(Arrays.asList(\"~\"))))\n                list.add(word);\n\
    \            else if(\n    }\n    public static void main(String[] args) {\n \
    \   assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj0s40qoo.java:32: error: ')' expected\n            if((new ArrayList<String>(Arrays.asList(word)).contains(new\
    \ ArrayList<String>(Arrays.asList(\" \"))))\n                                \
    \                                                                            \
    \   ^\n/tmp/tmpj0s40qoo.java:63: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpj0s40qoo.java:64: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659977326
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        //create new array list of words\n        ArrayList<String> ret =\
    \ new ArrayList<String>();\n        // split string into words\n        String[]\
    \ words = s.split(\"\\\\s+\");\n        //create array list to hold words until\
    \ n consonants are found\n        ArrayList<String> list = new ArrayList<String>();\n\
    \        for (String w : words) {\n            if (w.matches(\".*\\\\b.*\")) {\n\
    \                continue;\n            }\n            boolean consonant = false;\n\
    \            int count = 0;\n            for(int i=0;i<w.length();i++) {\n   \
    \             char ch = w.charAt(i);\n                if (ch >= 'a' && ch <= 'z')\
    \ {\n                    //checks to make sure letter in string contains exactly\
    \ n consonants\n                    consonant = true;\n                    count++;\n\
    \                }\n            }\n            if (count == n) {\n           \
    \     list.add(w);\n            }\n        }\n        if (list.size() > 0) {\n\
    \            ret.add(list.get(0));\n            //if string has less than n consonants\
    \ then add the first word\n            if (list.size() > 1) {\n              \
    \  ret.add(list.get(1));\n            }\n        }\n        return ret;\n    }\n\
    \    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg2hak8aw.java:60)\n"
  stdout: ''
  timestamp: 1659977327
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        return null;\n    }\n    public static void main(String[] args) {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ long)\" is null\n\tat Problem.main(tmpmjqq7hir.java:29)\n"
  stdout: ''
  timestamp: 1659977180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> ret = new ArrayList<>();\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        if (s.isEmpty()) {\n            return ret;\n\
    \        }\n        char[] arr = s.toCharArray();\n        boolean flag = false;\n\
    \        long count = n;\n        long index = 0;\n        long counter = 0;\n\
    \        long i = 0;\n        while (i < arr.length) {\n            if (arr[i]\
    \ == 'a') {\n                flag = true;\n            } else if (flag) {\n  \
    \              words.add(String.valueOf(arr[i]));\n                flag = false;\n\
    \                count--;\n                if (count == 0) {\n               \
    \     ret.addAll(words);\n                    flag = true;\n                }\n\
    \            } else if (arr[i] == ' ') {\n                flag = false;\n    \
    \            count++;\n                if (count == 0) {\n                   \
    \ ret.addAll(words);\n                }\n            } else {\n              \
    \  flag = true;\n            }\n            i++;\n        }\n        return ret;\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9alqqzj0.java:38: error: incompatible types: possible lossy conversion\
    \ from long to int\n            if (arr[i] == 'a') {\n                    ^\n\
    /tmp/tmp9alqqzj0.java:41: error: incompatible types: possible lossy conversion\
    \ from long to int\n                words.add(String.valueOf(arr[i]));\n     \
    \                                        ^\n/tmp/tmp9alqqzj0.java:48: error: incompatible\
    \ types: possible lossy conversion from long to int\n            } else if (arr[i]\
    \ == ' ') {\n                           ^\n3 errors\n"
  stdout: ''
  timestamp: 1659977327
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<>();\n        char letter\
    \ = ' ';\n        long count = 1;\n        \n        if (s == null) {\n      \
    \      return result;\n        }\n        // Use String#toCharArray to convert\
    \ s to a char array.\n        char[] chars = s.toCharArray();\n        \n    \
    \    // Iterate through all the characters in chars.\n        for (int i = 0;\
    \ i < chars.length; i++) {\n            letter = chars[i];\n            count++;\n\
    \            \n            if (count > n) {\n                break;\n        \
    \    }\n            \n            if (Character.isLetter(letter)) {\n        \
    \        result.add(s.substring(i, i + 1));\n            }\n        }\n      \
    \  \n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqg1h22ee.java:53)\n"
  stdout: ''
  timestamp: 1659977327
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        if (s.isEmpty())\
    \ {\n            return words;\n        }\n        String lastWord = \"\";\n \
    \       String lastChar = \"\";\n        for (char c : s.toCharArray()) {\n  \
    \          if (Character.isLetter(c)) {\n                lastChar = c;\n     \
    \       } else {\n                if (lastChar.length() == n) {\n            \
    \        words.add(lastWord);\n                    lastWord = \"\";\n        \
    \        }\n                lastChar = \"\";\n            }\n        }\n     \
    \   if (lastWord.length() > 0) {\n            words.add(lastWord);\n        }\n\
    \        return words;\n    }\n    public static void main(String[] args) {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2vbzr4gf.java:34: error: incompatible types: char cannot be converted\
    \ to String\n                lastChar = c;\n                           ^\n1 error\n"
  stdout: ''
  timestamp: 1659977327
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // TODO Implement this function\n        \n    }\n    public static\
    \ void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpktseui4n.java:28: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659977327
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        \n        if (s.isEmpty()) {\n            return new ArrayList<String>();\n\
    \        }\n        \n        ArrayList<String> result = new ArrayList<String>();\n\
    \        \n        \n        \n        ArrayList<String> words = new ArrayList<String>();\n\
    \        \n        \n        \n        if (n >= 2 && n <= s.length() - 2) {\n\
    \            \n            String currentWord = s.substring(0, 1);\n         \
    \   String remainingWord = s.substring(1);\n            \n            \n     \
    \       \n            \n            \n            while (true) {\n           \
    \     \n                if (currentWord.matches(\"[aeiouAEIOU]\")) {\n       \
    \             \n                    words.add(currentWord);\n                \
    \    \n                    if (remainingWord.matches(\"[aeiouAEIOU]\")) {\n  \
    \                      \n                        result.addAll(words);\n     \
    \                   \n                        \n                        \n   \
    \                     break;\n                    }\n                    \n  \
    \                  currentWord = remainingWord;\n                    remainingWord\
    \ = s.substring(1);\n                }\n                \n                else\
    \ if (remainingWord.matches(\"[aeiouAEIOU]\")) {\n                    \n     \
    \               words.add(currentWord);\n                    \n              \
    \      if (currentWord.matches(\"[aeiouAEIOU]\")) {\n                        \n\
    \                        result.addAll(words);\n                        \n   \
    \                     \n                        \n                        break;\n\
    \                    }\n                    \n                    currentWord\
    \ = s.substring(0, 1);\n                    remainingWord = s.substring(1);\n\
    \                }\n                \n                else {\n               \
    \     break;\n                }\n                \n                \n        \
    \    }\n        }\n        \n        \n        \n        \n        \n        \n\
    \        \n        return result;\n        \n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdo0hrkb2.java:102)\n"
  stdout: ''
  timestamp: 1659977328
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // Your code here\n        if (s.isEmpty()) return new ArrayList<String>();\n\
    \        return s.toLowerCase().replaceAll(\"[^a-zA-Z ]\", \"\").split(\"\\\\\
    s+\")\n                .stream()\n                .filter(x -> x.matches((\"[^\"\
    \ + String.valueOf(Character.valueOf('a')) + \"]{\" + n + \"}\"))).collect(Collectors.toList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj0iuaptp.java:29: error: cannot find symbol\n                .stream()\n\
    \                ^\n  symbol:   method stream()\n  location: class String[]\n\
    1 error\n"
  stdout: ''
  timestamp: 1659977327
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> list = new ArrayList<>();\n        if (s.isEmpty())\
    \ {\n            return list;\n        }\n\n        String word = \"\";\n    \
    \    char temp;\n        long count = 0;\n\n        for (long i = 0; i < s.length();\
    \ i++) {\n            temp = s.charAt(i);\n            if (temp == '_') {\n  \
    \              if (count == n) {\n                    list.add(word);\n      \
    \              word = \"\";\n                    count = 0;\n                }\
    \ else {\n                    count++;\n                }\n            } else\
    \ {\n                word += temp;\n            }\n        }\n\n        if (count\
    \ > 0) {\n            list.add(word);\n        }\n\n        return list;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_wrgzm35.java:36: error: incompatible types: possible lossy conversion\
    \ from long to int\n            temp = s.charAt(i);\n                        \
    \    ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659977327
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        return null;\n    }\n    public static void main(String[] args) {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ long)\" is null\n\tat Problem.main(tmpmjqq7hir.java:29)\n"
  stdout: ''
  timestamp: 1659977180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        if (s == null || s.isEmpty())\n            return new ArrayList<String>();\n\
    \        ArrayList<String> result = new ArrayList<String>();\n        int wordCount\
    \ = 0;\n        boolean found = false;\n        long lastWordIndex = 0;\n    \
    \    char lastChar;\n        \n        Iterator<String> iterator = s.iterator();\n\
    \        while (iterator.hasNext()) {\n            String word = iterator.next();\n\
    \            if (word.length() == n) {\n                if (n == 1) {\n      \
    \              result.add(word);\n                } else {\n                 \
    \   wordCount++;\n                    if (wordCount > n) {\n                 \
    \       found = true;\n                        if (word.length() > n) {\n    \
    \                        lastChar = word.charAt(word.length() - 1);\n        \
    \                    if (Character.isLetter(lastChar))\n                     \
    \           result.add(word.substring(0, word.length() - 1));\n              \
    \              else {\n                                char letter = Character.toLowerCase(lastChar);\n\
    \                                if (Character.isLetter(letter))\n           \
    \                         result.add(word.substring(0, word.length() - 1));\n\
    \                                else\n                                    result.add(word);\n\
    \                            }\n                        } else {\n           \
    \                 result.add(word);\n                        }\n             \
    \       }\n                }\n                lastWordIndex = wordCount;\n   \
    \         }\n        }\n        if (!found) {\n            if (wordCount > 0)\
    \ {\n                char lastLetter = s.charAt(lastWordIndex - 1);\n        \
    \        if (Character.isLetter(lastLetter))\n                    result.add(s.substring(0,\
    \ lastWordIndex));\n                else {\n                    char letter =\
    \ Character.toLowerCase(lastLetter);\n                    if (Character.isLetter(letter))\n\
    \                        result.add(s.substring(0, lastWordIndex));\n        \
    \            else\n                        result.add(s);\n                }\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_h64fiof.java:34: error: cannot find symbol\n        Iterator<String>\
    \ iterator = s.iterator();\n                                     ^\n  symbol:\
    \   method iterator()\n  location: variable s of type String\n/tmp/tmp_h64fiof.java:65:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \            char lastLetter = s.charAt(lastWordIndex - 1);\n                \
    \                                         ^\n/tmp/tmp_h64fiof.java:67: error:\
    \ incompatible types: possible lossy conversion from long to int\n           \
    \         result.add(s.substring(0, lastWordIndex));\n                       \
    \                       ^\n/tmp/tmp_h64fiof.java:71: error: incompatible types:\
    \ possible lossy conversion from long to int\n                        result.add(s.substring(0,\
    \ lastWordIndex));\n                                                  ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n4 errors\n"
  stdout: ''
  timestamp: 1659977328
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> list = new ArrayList<String>();\n        System.out.println(s);\n\
    \        System.out.println(s);\n        if(s.length() == 0) return list;\n  \
    \      String[] arr = s.split(\"\\\\s+\");\n        \n        for(String s : arr)\
    \ {\n            for(int i = 0; i < s.length(); i++) {\n                if(s.charAt(i)\
    \ == 'H' || s.charAt(i) == 'h' || s.charAt(i) == 'a' || s.charAt(i) == 'a' ||\
    \ s.charAt(i) == 'u' || s.charAt(i) == 'u') {\n                    if(s.indexOf('Mary',\
    \ i) > -1) {\n                        if(s.indexOf('lamb', i) > -1) {\n      \
    \                      list.add(s);\n                        }\n             \
    \           if(s.indexOf('little', i) > -1) {\n                            list.add(s);\n\
    \                        }\n                        if(s.indexOf('white', i) >\
    \ -1) {\n                            list.add(s);\n                        }\n\
    \                    }\n                }\n                if(s.charAt(i) == 'e'\
    \ || s.charAt(i) == 'e') {\n                    if(s.indexOf('had', i) > -1) {\n\
    \                        if(s.indexOf('little', i) > -1) {\n                 \
    \           list.add(s);\n                        }\n                        if(s.indexOf('lamb',\
    \ i) > -1) {\n                            list.add(s);\n                     \
    \   }\n                        if(s.indexOf('little', i) > -1) {\n           \
    \                 list.add(s);\n                        }\n                  \
    \  }\n                }\n                if(s.charAt(i) == 'l' || s.charAt(i)\
    \ == 'l') {\n                    if(s.indexOf('had', i) > -1) {\n            \
    \            if(s.indexOf('little', i) > -1) {\n                            list.add(s);\n\
    \                        }\n                        if(s.indexOf('lamb', i) >\
    \ -1) {\n                            list.add(s);\n                        }\n\
    \                        if(s.indexOf('little', i) > -1) {\n                 \
    \           list.add(s);\n                        }\n                    }\n \
    \               }\n            }\n        }\n        return list;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(selectWords((\"Mary had\
    \ a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppxxd8ey1.java:35: error: unclosed character literal\n         \
    \           if(s.indexOf('Mary', i) > -1) {\n                                \
    \ ^\n/tmp/tmppxxd8ey1.java:35: error: unclosed character literal\n           \
    \         if(s.indexOf('Mary', i) > -1) {\n                                  \
    \    ^\n/tmp/tmppxxd8ey1.java:35: error: not a statement\n                   \
    \ if(s.indexOf('Mary', i) > -1) {\n                                   ^\n/tmp/tmppxxd8ey1.java:35:\
    \ error: not a statement\n                    if(s.indexOf('Mary', i) > -1) {\n\
    \                                         ^\n/tmp/tmppxxd8ey1.java:35: error:\
    \ ';' expected\n                    if(s.indexOf('Mary', i) > -1) {\n        \
    \                                  ^\n/tmp/tmppxxd8ey1.java:36: error: unclosed\
    \ character literal\n                        if(s.indexOf('lamb', i) > -1) {\n\
    \                                     ^\n/tmp/tmppxxd8ey1.java:36: error: unclosed\
    \ character literal\n                        if(s.indexOf('lamb', i) > -1) {\n\
    \                                          ^\n/tmp/tmppxxd8ey1.java:36: error:\
    \ not a statement\n                        if(s.indexOf('lamb', i) > -1) {\n \
    \                                      ^\n/tmp/tmppxxd8ey1.java:36: error: not\
    \ a statement\n                        if(s.indexOf('lamb', i) > -1) {\n     \
    \                                        ^\n/tmp/tmppxxd8ey1.java:36: error: ';'\
    \ expected\n                        if(s.indexOf('lamb', i) > -1) {\n        \
    \                                      ^\n/tmp/tmppxxd8ey1.java:39: error: unclosed\
    \ character literal\n                        if(s.indexOf('little', i) > -1) {\n\
    \                                     ^\n/tmp/tmppxxd8ey1.java:39: error: unclosed\
    \ character literal\n                        if(s.indexOf('little', i) > -1) {\n\
    \                                            ^\n/tmp/tmppxxd8ey1.java:39: error:\
    \ not a statement\n                        if(s.indexOf('little', i) > -1) {\n\
    \                                       ^\n/tmp/tmppxxd8ey1.java:39: error: not\
    \ a statement\n                        if(s.indexOf('little"
  stdout: ''
  timestamp: 1659977327
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        if(s == null || s.length() < n) return new ArrayList<String>();\n\
    \        if(s.length() == n) return new ArrayList<String>(Arrays.asList((String)\
    \ s));\n\n        ArrayList<String> w = new ArrayList<String>();\n\n        StringBuilder\
    \ buf = new StringBuilder();\n        for(int i=0; i<s.length(); i++) {\n    \
    \        if(s.charAt(i) == ' ') {\n                if(buf.length() > 0) w.add(buf.toString());\n\
    \                buf.setLength(0);\n            } else {\n                buf.append(s.charAt(i));\n\
    \            }\n\n            if(buf.length() == n) w.add(buf.toString());\n \
    \       }\n\n        if(buf.length() > 0) {\n            w.add(buf.toString());\n\
    \        }\n\n        return w;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9lyobw9z.java:50)\n"
  stdout: ''
  timestamp: 1659977328
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // Your code here\n        ArrayList<String> words = new ArrayList<>();\n\
    \        StringBuilder builder = new StringBuilder();\n        String sub = \"\
    \";\n        for(Character letter : s.toUpperCase().toCharArray()){\n        \
    \    if(isConsonant(letter) && builder.toString().length() >= n){\n          \
    \      sub += letter;\n            }\n            if(isConsonant(letter) && !builder.toString().contains(sub)){\n\
    \                words.add(builder.toString());\n                builder.setLength(0);\n\
    \                builder.append(letter);\n            }else{\n               \
    \ builder.append(letter);\n            }\n        }\n        if(builder.toString().length()\
    \ > 0){\n            words.add(builder.toString());\n        }\n        return\
    \ words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0q7kcdy_.java:31: error: cannot find symbol\n            if(isConsonant(letter)\
    \ && builder.toString().length() >= n){\n               ^\n  symbol:   method\
    \ isConsonant(Character)\n  location: class Problem\n/tmp/tmp0q7kcdy_.java:34:\
    \ error: cannot find symbol\n            if(isConsonant(letter) && !builder.toString().contains(sub)){\n\
    \               ^\n  symbol:   method isConsonant(Character)\n  location: class\
    \ Problem\n2 errors\n"
  stdout: ''
  timestamp: 1659977328
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> list = new ArrayList<>();\n        if (s.length()\
    \ <= n) {\n            return list;\n        }\n        long[] arr = new long[26];\n\
    \        for (int i = 0; i < s.length; i++) {\n            char c = s.charAt(i);\n\
    \            if (c >= 'A' && c <= 'Z') {\n                arr[(c - 'A') - 1]++;\n\
    \            }\n        }\n        ArrayList<Integer> arr = IntStream.range(0,\
    \ 26)\n                .boxed().collect(ArrayList::new, ArrayList::add, ArrayList::addAll);\n\
    \        int[] counts = arr.stream().mapToInt(c -> c > 0 ? c : 0).boxed().toArray();\n\
    \        long sum = 0;\n        for (int i = 0; i < 26; i++) {\n            sum\
    \ += counts[i];\n        }\n        for (int i = 0; i < 26; i++) {\n         \
    \   if (counts[i] > 0 && sum - n <= counts[i]) {\n                list.add(((char)\
    \ ('A' + i)) + s);\n            }\n        }\n        return list;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(selectWords((\"Mary had\
    \ a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdrkvnxql.java:31: error: cannot find symbol\n        for (int i\
    \ = 0; i < s.length; i++) {\n                             ^\n  symbol:   variable\
    \ length\n  location: variable s of type String\n/tmp/tmpdrkvnxql.java:37: error:\
    \ variable arr is already defined in method selectWords(String,long)\n       \
    \ ArrayList<Integer> arr = IntStream.range(0, 26)\n                          \
    \ ^\n/tmp/tmpdrkvnxql.java:39: error: incompatible types: Object[] cannot be converted\
    \ to int[]\n        int[] counts = arr.stream().mapToInt(c -> c > 0 ? c : 0).boxed().toArray();\n\
    \                                                                            \
    \    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659977328
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // Write your code here\n        ArrayList<String> result = new ArrayList<>();\n\
    \        \n        // Write your code here\n        \n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfobg1w0f.java:34)\n"
  stdout: ''
  timestamp: 1659977328
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<>();\n        if(s == null\
    \ || s.length() == 0){\n            return result;\n        }\n        ArrayList<String>\
    \ a = new ArrayList<String>();\n        for(String word : s.split(\" \")){\n \
    \           a.addAll(Arrays.asList(word));\n        }\n        long countCons\
    \ = a\n                .stream()\n                .filter(s->s.matches(\"[^aeiouAEIOU]\"\
    ))\n                .filter(s->s.length() == n)\n                .count();\n \
    \       if(countCons == n) {\n            result.addAll(a);\n        }\n     \
    \   return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxzlc8rhy.java:36: error: variable s is already defined in method\
    \ selectWords(String,long)\n                .filter(s->s.matches(\"[^aeiouAEIOU]\"\
    ))\n                        ^\n/tmp/tmpxzlc8rhy.java:37: error: variable s is\
    \ already defined in method selectWords(String,long)\n                .filter(s->s.length()\
    \ == n)\n                        ^\n2 errors\n"
  stdout: ''
  timestamp: 1659977328
