name: HumanEval_121_solution
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given a non-empty array list of integers, return the sum\
  \ of all of the odd elements that are in even positions.\n    // Examples\n    //\
  \ >>> solution((new ArrayList<Long>(Arrays.asList((long)5l, (long)8l, (long)7l,\
  \ (long)1l))))\n    // (12l)\n    // >>> solution((new ArrayList<Long>(Arrays.asList((long)3l,\
  \ (long)3l, (long)3l, (long)3l, (long)3l))))\n    // (9l)\n    // >>> solution((new\
  \ ArrayList<Long>(Arrays.asList((long)30l, (long)13l, (long)24l, (long)321l))))\n\
  \    // (0l)\n    public static long solution(ArrayList<Long> lst) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(solution((new\
  \ ArrayList<Long>(Arrays.asList((long)5l, (long)8l, (long)7l, (long)1l)))) == (12l));\n\
  \    assert(solution((new ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l,\
  \ (long)3l, (long)3l)))) == (9l));\n    assert(solution((new ArrayList<Long>(Arrays.asList((long)30l,\
  \ (long)13l, (long)24l, (long)321l)))) == (0l));\n    assert(solution((new ArrayList<Long>(Arrays.asList((long)5l,\
  \ (long)9l)))) == (5l));\n    assert(solution((new ArrayList<Long>(Arrays.asList((long)2l,\
  \ (long)4l, (long)8l)))) == (0l));\n    assert(solution((new ArrayList<Long>(Arrays.asList((long)30l,\
  \ (long)13l, (long)23l, (long)32l)))) == (23l));\n    assert(solution((new ArrayList<Long>(Arrays.asList((long)3l,\
  \ (long)13l, (long)2l, (long)9l)))) == (3l));\n    }\n\n}\n"
completions: ["        long evenSum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (lst.get(i) % 2 == 0) {\n                evenSum += lst.get(i);\n\
    \            }\n        }\n        return evenSum;", "        long sum = 0;\n\
    \        for (long l : lst) {\n            sum += (l & 1) * (l % 2 == 1 ? 1 :\
    \ 2);\n        }\n        return sum;", "        long sum = 0;\n        for(int\
    \ i=0; i < lst.size(); i++) {\n            if(lst.get(i) % 2 == 1) {\n       \
    \         sum += lst.get(i);\n            }\n        }\n        return sum;",
  "        // Write your code here\n        long sum = 0;\n        for (int i = 0;\
    \ i < lst.size(); i += 2) {\n            sum += lst.get(i);\n        }\n     \
    \   return sum;", "        // Write your code here\n        Long sum = 0l;\n \
    \       for(long i : lst){\n            if(i%2==0){\n                sum += i;\n\
    \            }\n        }\n        return sum;", "        ArrayList<Long> evens\
    \ = lst.stream().filter(i -> i % 2 == 0).collect(Collectors.toList());\n     \
    \   long total = 0;\n        int even = 0;\n        for(Long i: evens) {\n   \
    \         total += i;\n            even++;\n        }\n        return total %\
    \ 2 == 1 ? total : total;", "        int sum = 0;\n        List<Long> list = new\
    \ ArrayList<Long>(lst);\n        for (int i = 0; i< list.size(); i++) {\n    \
    \        if (i % 2 == 1) {\n                sum += list.get(i);\n            }\n\
    \        }\n        return sum;", "        if (lst.isEmpty()) {\n            return\
    \ 0l;\n        }\n        return lst.stream().filter(e -> e % 2 == 1).map(e ->\
    \ e + lst.get(lst.indexOf(e))).reduce(0, Math::addExact).orElse(0l);", "     \
    \   // Initialize result as zero.\n        long result = 0;\n        \n      \
    \  // Iterate through the array list.\n        for (long num : lst) {\n      \
    \      // If the number is even, add the number to the result and increase the\
    \ count by 1.\n            if (num % 2 == 0) {\n                result += num;\n\
    \                count++;\n            }\n        }\n        \n        // Return\
    \ the result.\n        return result;", "        long ans = 0l;\n        for (int\
    \ i=0; i<lst.size()-1; i++) {\n            if (lst.get(i) %2 == 0) {\n       \
    \         ans += lst.get(i);\n            }\n        }\n        return ans;",
  "        long sum = 0;\n        for (int i = 0; i < lst.size(); i += 2) {\n    \
    \        sum += lst.get(i);\n        }\n        return sum;", "        long sum\
    \ = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if ((i % 2)\
    \ == 0) {\n                sum += lst.get(i);\n            }\n        }\n    \
    \    return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (lst.get(i) % 2 != 0) {\n                sum = sum +\
    \ lst.get(i);\n            }\n        }\n        return sum;", "        // Using\
    \ streams\n        return lst.stream()\n            .filter(x -> x % 2 != 0)\n\
    \            .mapToLong(x -> x)\n            .sum();", "        long sum = 0;\n\
    \        boolean even = true;\n        for(int i = 0; i < lst.size(); i++){\n\
    \            if(lst.get(i).longValue() % 2 == 0)\n                even = false;\n\
    \            if(even){\n                sum = sum + lst.get(i);\n            }\n\
    \        }\n        return sum;", '        return lst.stream().reduce(0, (acc,
    val) -> acc + ((val%2) == 1 ? val : 0));', "        // TODO: write your code in\
    \ Java (8 or 10 lines)\n        long sum = 0;\n        for (int i=0; i<lst.size();i++)\
    \ {\n            if (lst.get(i)%2 == 0) {\n                sum+=lst.get(i);\n\
    \            }\n        }\n        return sum;", '        return lst.stream().filter((i)->(i%2l==0l)).sum();',
  "        ArrayList<T> evens = new ArrayList<T>();\n        ArrayList<T> odd = new\
    \ ArrayList<T>();\n        Long sum = 0L;\n        ArrayList<T> oddity = new ArrayList<T>();\n\
    \        Set<Long> set = new HashSet<Long>();\n        for (long i : lst) {\n\
    \            if (!set.contains(i)) {\n                set.add(i);\n          \
    \      if (i % 2 == 0) {\n                    evens.add(i);\n                }\n\
    \                else {\n                    oddity.add(i);\n                }\n\
    \            }\n        }\n        for (long i : evens) {\n            sum +=\
    \ i;\n        }\n        for (long i : oddity) {\n            sum += i;\n    \
    \    }\n        return sum;", "        long sum = 0l;\n        for (int i = 0;\
    \ i < lst.size(); i++) {\n            if (i % 2 != 0) {\n                sum +=\
    \ lst.get(i);\n            }\n        }\n        return sum;", "        long result\
    \ = 0;\n\n        if(lst.isEmpty()){\n            return result;\n        }\n\n\
    \        for(int i = 0; i < lst.size(); i++){\n            result += (lst.get(i)\
    \ / 2);\n        }\n\n        return result;", "        if (lst == null || lst.size()\
    \ <= 0) {\n            return 0L;\n        }\n        long sum = 0L;\n       \
    \ for (long i : lst) {\n            if (i % 2 == 1) {\n                sum +=\
    \ i;\n            }\n        }\n        return sum;", "        long sum = 0l;\n\
    \        Iterator<Long> it = lst.iterator();\n        while (it.hasNext()) {\n\
    \            if (it.next() %2 == 0) {\n                sum += it.next();\n   \
    \         }\n        }\n        return sum;", "        List<Long> odd = lst.stream().filter(x\
    \ -> x % 2 != 0).collect(Collectors.toList());\n        long sum = 0;\n      \
    \  for (Long odd : odd) {\n            for (long ev : lst.subList(odd, lst.size()))\
    \ {\n                sum += ev;\n            }\n        }\n        return sum;",
  "        // write your code in Java SE 8\n        return IntStream.range(2, lst.size())\n\
    \                .filter(i -> i % 2 == 0)\n                .filter(i -> lst.contains(lst.stream().skip(i).findFirst().orElse(0L)))\n\
    \                .sum();", "        long sum = 0l;\n        final int SIZE = lst.size();\n\
    \        for (int i = 0; i < SIZE; i += 2) {\n            sum += lst.get(i);\n\
    \        }\n        return sum;", "        if (lst.isEmpty()) return 0l;\n   \
    \     ArrayList<Long> evenList = lst.stream().filter(x -> x % 2 == 0).collect(Collectors.toList());\n\
    \        Long sum = evenList.stream().filter(x -> x % 2 == 1).sum();\n       \
    \ return sum;", "        ArrayList<Long> evenPos = lst.stream()\n            .filter(i\
    \ -> i % 2 == 0)\n            .collect(Collectors.toList());\n\n        return\
    \ evenPos.stream()\n            .mapToLong(i -> i)\n            .filter(i -> i\
    \ % 2 != 0)\n            .reduce((i1, i2) -> i1 + i2)\n            .orElse(0l);",
  "        long even = 0l;\n        for (long i : lst) {\n            if (i % 2 ==\
    \ 0) {\n                even += i;\n            }\n        }\n        return even;",
  "        long[] even = new long[lst.size()];\n        int evenCount = 0;\n     \
    \   int oddCount = 0;\n        for (int i = 0; i < evenCount; i++) {\n       \
    \     if (i % 2 == 0) {\n                even[evenCount] = lst.get(i);\n     \
    \           evenCount++;\n            }\n        }\n        for (int i = 0; i\
    \ < evenCount - 1; i++) {\n            if (even[i] % 2 == 1) {\n             \
    \   oddCount++;\n            }\n        }\n        return lst.get(evenCount -\
    \ 1) + lst.get(evenCount - 2) + oddCount;", "        if (lst.isEmpty()) return\
    \ 0l;\n        long sum = 0l;\n        Iterator<Long> it = lst.iterator();\n \
    \       if (lst.size() % 2 == 1) { // even\n            while (it.hasNext()) {\n\
    \                long n = it.next();\n                if (n % 2 == 1) sum += n;\n\
    \            }\n        } else if (lst.size() % 2 == 0l) { // odd\n          \
    \  while (it.hasNext()) {\n                long n = it.next();\n             \
    \   if (n % 2 == 0) sum += n;\n            }\n        } else {\n            throw\
    \ new IllegalArgumentException();\n        }\n        return sum;", "        long\
    \ sum = 0;\n        for (long l : lst) {\n            sum +=\n               \
    \     (l & 1) == 0 ? lst.get(l) : 0; // If an odd number is at even position,\
    \ sum it\n        }\n        return sum;", "        if (lst.size() <= 0)\n   \
    \         return 0L;\n        long sum = 0L;\n        int i = 0;\n        for\
    \ (; i < lst.size(); i++) {\n            if (lst.get(i) % 2 == 0)\n          \
    \      sum += lst.get(i);\n        }\n        return sum;", "        return lst.stream()\n\
    \                .filter(n -> n % 2 == 1)\n                .map(n -> n - 1)\n\
    \                .sum();", "        if(lst.isEmpty()) return 0;\n        \n  \
    \      long sum = 0;\n        for(int i=1; i<lst.size(); i++) {\n            if(lst.get(i).isEven()\
    \ && (lst.get(i-1) % 2 == 0)) {\n                sum += lst.get(i);\n        \
    \    }\n        }\n        return sum;", "        long res = 0;\n        for (int\
    \ i = 0; i < lst.size(); i++) {\n            if (lst.get(i) % 2 != 0) {\n    \
    \            res += lst.get(i);\n            }\n        }\n        return res;",
  "        long sum = 0;\n        for (long i : lst) {\n            if (i % 2 == 0)\
    \ {\n                sum += i;\n            }\n        }\n        return sum;",
  "        long sum = 0;\n        Set<Long> evens = lst.stream().filter(e -> e % 2\
    \ == 0).collect(toSet());\n        evens.stream().filter(e -> e % 2 == 1).forEach(e\
    \ -> sum += e);\n        return sum;", "        long sum = 0;\n        final int\
    \ n = lst.size();\n        final long evenPositions = lst.get(n/2);\n        for(int\
    \ i = n/2; i < n; i++) {\n            if(lst.get(i) % 2 == 0) {\n            \
    \    sum += lst.get(i) - evenPositions;\n            }\n        }\n        return\
    \ sum;", "        long evenSum = 0;\n        long oddSum = 0;\n        for(Long\
    \ num: lst) {\n            if(num%2==0) {\n                evenSum+=num;\n   \
    \         }\n            else {\n                oddSum+=num;\n            }\n\
    \        }\n        return evenSum+oddSum;", "        if (lst.isEmpty()) {\n \
    \           return 0;\n        }\n\n        // If lst is empty, the sum of all\
    \ elements is 0.\n        long result = 0;\n\n        // Get the even positions.\n\
    \        ArrayList evenPositions = new ArrayList();\n        for (int i = 0; i\
    \ < lst.size(); i++) {\n            if (lst.get(i) % 2 == 0) {\n             \
    \   evenPositions.add(lst.get(i));\n            }\n        }\n        if (evenPositions.isEmpty())\
    \ {\n            return result;\n        }\n\n        // Get their odds.\n   \
    \     long oddSum = 0;\n        for (int i = 0; i < evenPositions.size(); i++)\
    \ {\n            oddSum += evenPositions.get(i);\n        }\n\n        // Add\
    \ the odd positions to the result of the even positions.\n        result = evenPositions.get(evenPositions.size()\
    \ - 1) + oddSum;\n\n        // Add the sum of all of the odd elements.\n     \
    \   long sumOfOdds = lst.get(lst.size() - 1);\n        result += sumOfOdds;\n\
    \        return result;", "        long sum = 0;\n        for (long l : lst) {\n\
    \            if (l % 2 == 0) {\n                sum += l;\n            }\n   \
    \     }\n        return sum;", '        return lst.stream().filter(i -> i % 2
    == 1).reduce(Math::addExact).orElse(0);', '        return lst.stream().filter(i
    -> i % 2 == 1).reduce((a, b) -> a + b).orElse(0);', "        long result = 0;\n\
    \        if (lst != null) {\n            for (int i = 0; i < lst.size(); i++)\
    \ {\n                if ((i % 2) == 1) {\n                    result += lst.get(i);\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   long sum = 0;\n        Iterator<Long> it = lst.iterator();\n        int count\
    \ = 0;\n        while (it.hasNext()) {\n            if (count % 2 == 0) {\n  \
    \              sum += it.next();\n            }\n            count++;\n      \
    \  }\n        return sum;", "        ArrayList<Long> even = lst.stream().filter(l\
    \ -> l % 2 == 0).toList();\n        long sum = even.get(0).intValue();\n     \
    \   for (int i = 1; i < even.size(); i++) {\n            if (even.get(i).intValue()\
    \ != sum) {\n                sum += even.get(i).intValue();\n            } else\
    \ {\n                sum += even.get(i).intValue();\n            }\n        }\n\
    \        return sum;", "        if (lst.isEmpty()) {\n            return 0l;\n\
    \        }\n        if (lst.size() % 2 == 0) {\n            ArrayList<Long> evenPositions\
    \ = new ArrayList<>();\n            int i = 0;\n            while (lst.size()\
    \ > 0 && i <= (lst.size() - 1) / 2) {\n                if (lst.get(i) % 2 == 0)\
    \ {\n                    evenPositions.add(lst.get(i));\n                }\n \
    \               i += 1;\n            }\n            ArrayList<Long> oddPositions\
    \ = new ArrayList<>();\n            int j = 0;\n            while (lst.size()\
    \ > 0 && j <= (lst.size() - 1) / 2) {\n                if (lst.get(j) % 2 != 0)\
    \ {\n                    oddPositions.add(lst.get(j));\n                }\n  \
    \              j += 1;\n            }\n            long oddSum = 0l;\n       \
    \     for (Long l : oddPositions) {\n                oddSum += l;\n          \
    \  }\n            long evenSum = 0l;\n            for (Long l : evenPositions)\
    \ {\n                evenSum += l;\n            }\n            long sum = oddSum\
    \ + evenSum;\n            return sum;\n        } else {\n            long sum\
    \ = 0l;\n            for (long l : lst) {\n                sum += l;\n       \
    \     }\n            long odd = sum;\n            long even = 0l;\n          \
    \  for (long l : lst) {\n                if (l % 2 == 0) {\n                 \
    \   even += l;\n                }\n            }\n            return even + odd;\n\
    \        }", '        return lst.stream().filter(x -> x % 2 == 1).reduce((x,y)
    -> x + y).get();', "        int i = 0;\n        int oddSum = 0;\n        while\
    \ (i < lst.size()) {\n            if (lst.get(i) % 2 == 1) {\n               \
    \ oddSum += lst.get(i);\n            }\n            i++;\n        }\n        return\
    \ oddSum;", "        long total = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (lst.get(i) % 2 != 0) {\n                total = total\
    \ + lst.get(i);\n            }\n        }\n        return total;", '        return
    lst.stream().filter(i -> i % 2 != 0).reduce((i1, i2) -> i1 + i2).orElse(0l);',
  "        long sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n       \
    \     if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n \
    \       }\n        return sum;", "        long sum = 0l;\n        for (Long val\
    \ : lst) {\n            if (val.intValue() % 2 == 0) {\n                sum +=\
    \ val;\n            }\n        }\n        return sum;", "        if (lst.size()\
    \ <= 0) {\n            return 0l;\n        }\n        long sum = 0l;\n       \
    \ IntSummaryStatistics summary = lst.stream().collect(Collectors.summarizingInt(Long::longValue));\n\
    \        if (summary.getCount() % 2 != 0) {\n            return 0l;\n        }\n\
    \        summary.forEach((k, v) -> {\n            if (k % 2 == 1) {\n        \
    \        sum += v;\n            }\n        });\n        return sum;", "      \
    \  long sum = 0;\n        if (lst.size() % 2 == 0) {\n            for (int i =\
    \ 0; i < lst.size(); i = i + 2) {\n                sum = sum + lst.get(i);\n \
    \           }\n        } else {\n            System.out.println(\"Invalid input\"\
    );\n        }\n        return sum;", "        if (lst.isEmpty()) {\n         \
    \   return 0;\n        }\n        long odd = lst.get(0);\n        if (odd % 2\
    \ != 0) {\n            return odd + solution(lst.subList(1, lst.size()));\n  \
    \      }\n        return solution(lst.subList(1, lst.size()));", "        List<Long>\
    \ even = new ArrayList<>();\n        List<Long> odd = new ArrayList<>();\n   \
    \     for(int i = 0; i < lst.size(); i++){\n            if(i % 2 == 0){\n    \
    \            even.add(lst.get(i));\n            }else{\n                odd.add(lst.get(i));\n\
    \            }\n        }\n        return IntStream.range(0, even.size()).filter(i\
    \ -> i % 2 != 0).sum();", "        long result = lst.get(0);\n        for(long\
    \ i=1;i<lst.size();i++) {\n            long next = lst.get(i);\n            if(next%2==0)\
    \ {\n                result += next;\n            }\n        }\n        return\
    \ result;", "        if (lst.isEmpty())\n            return 0L;\n        ArrayList<Long>\
    \ evens = lst.stream().filter(l -> l.intValue() % 2 == 0).collect(Collectors.toCollection(ArrayList::new));\n\
    \        ArrayList<Long> odds = lst.stream().filter(l -> l.intValue() % 2 != 0).collect(Collectors.toCollection(ArrayList::new));\n\
    \        Long[] evensArray = evens.toArray(new Long[evens.size()]);\n        Long[]\
    \ oddsArray = odds.toArray(new Long[odds.size()]);\n        long sum = 0;\n  \
    \      for (int i = 0; i < evensArray.length; i++) {\n            sum += oddsArray[i];\n\
    \        }\n        return sum;", "        \n        ArrayList<Long> evens = new\
    \ ArrayList<>();\n        \n        for(Long i : lst){\n            if(i%2 ==\
    \ 0){\n                evens.add(i);\n            }\n        }\n        \n   \
    \     ArrayList<Long> odds = new ArrayList<>();\n        \n        for(int i =\
    \ 0; i<evens.size(); i++){\n            odds.add(evens.get(i));\n        }\n \
    \       \n        long res = 0;\n        \n        for(int i = 0; i<evens.size();\
    \ i++){\n            for(int j = 0; j<evens.size();j++){\n                if(j%2\
    \ == 1){\n                    res += odds.get(j);\n                }\n       \
    \     }\n        }\n        \n        return res;", "        // write your code\
    \ in Java SE 8\n        List<Long> evens = lst.stream().filter(e -> e%2 == 0).collect(Collectors.toList());\n\
    \        long sumOddEven = 0;\n        for (int i : evens) {\n            sumOddEven\
    \ += i;\n        }\n        return sumOddEven;", "        ArrayList<Long> even\
    \ = new ArrayList<>();\n        ArrayList<Long> odd = new ArrayList<>();\n   \
    \     odd.add(lst.get(0));\n        even.add(lst.get(0));\n        \n        for\
    \ (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) % 2 == 0) {\n\
    \                even.add(lst.get(i));\n            } else {\n               \
    \ odd.add(lst.get(i));\n            }\n        }\n        \n        long res =\
    \ 0;\n        \n        for (Long l : odd) {\n            res += l;\n        }\n\
    \        \n        for (Long l : even) {\n            res -= l;\n        }\n \
    \       \n        return res;", "        long sum = 0;\n        for (long i :\
    \ lst) {\n            if (i % 2 != 0) {\n                sum += i;\n         \
    \   }\n        }\n        return sum;", '        return lst.stream().map(l ->
    l & 1l == 1l).filter(l -> l).sum();', "        long sum = 0l;\n        for (Long\
    \ val : lst) {\n            if (val % 2 == 0) {\n                sum += val;\n\
    \            }\n        }\n        return sum;", "        Set<Integer> evenPositions\
    \ = new HashSet<Integer>();\n        for (Long value : lst) {\n            if\
    \ (value % 2 == 0) {\n                evenPositions.add(Integer.valueOf((int)value));\n\
    \            }\n        }\n        return evenPositions.stream().filter(i -> i\
    \ % 2 == 1).sum();", "        int odd = 0;\n        for (long l : lst) {\n   \
    \         if (l & 1) {\n                odd += l;\n            }\n        }\n\
    \        if (odd > 0)\n            return odd;\n        else\n            return\
    \ 0l;", "        long sum = 0;\n        for(Long i : lst) {\n            if(i.intValue()\
    \ % 2 != 0) {\n                sum += i;\n            }\n        }\n        return\
    \ sum;", '        return lst.stream().filter(x -> lst.contains(x & 1l)).mapToLong(Long::longValue).sum();',
  "        long sum = 0l;\n        if (lst.size() <= 1) return 0l;\n        int count\
    \ = -1;\n        for (int i = 0; i < lst.size() - 1; i++) {\n            if (lst.get(i)\
    \ & 1 == 1 && lst.get(i) & 3 == 2) count++;\n            sum += lst.get(i);\n\
    \        }\n        if (count == 0) return 0l;\n        long odd = 1l;\n     \
    \   for (int i = lst.size() - 1; i >= 0; i--) {\n            if (lst.get(i) &\
    \ 1 == 1 && lst.get(i) & 3 == 2) odd++;\n        }\n        return sum + odd;",
  "        long res = 0;\n        for (long i : lst) {\n            if (i & 1 == 1)\
    \ {\n                res = res + i;\n            }\n        }\n        return\
    \ res;", '        return lst.stream().filter(i -> i % 2 == 0).mapToLong(i -> i).sum();',
  "        int evenIndex = lst.stream().filter(n -> n % 2 == 0).count();\n       \
    \ return lst.stream().filter(n -> n % 2 == 1).filter(n -> n != evenIndex).reduce(0,\
    \ Long::sum);", "        ArrayList <Long> even = new ArrayList<>();\n        ArrayList\
    \ <Long> odd = new ArrayList<>();\n\n        for(Long n : lst){\n            if(n\
    \ % 2 == 0){\n                even.add(n);\n            }else{\n             \
    \   odd.add(n);\n            }\n        }\n        int count = 0;\n        long\
    \ evenSum = 0;\n        for(Long n : even){\n            evenSum += n;\n     \
    \       count += 1;\n        }\n        count -= evenSum;\n        long oddSum\
    \ = 0;\n        for(Long n : odd){\n            oddSum += n;\n            count\
    \ -= 1;\n        }\n        count -= oddSum;\n        return (count > 0) ? oddSum\
    \ : evenSum;", "        Set<Long> evens = lst.stream().filter(x -> x % 2 == 0).collect(Collectors.toSet());\n\
    \        Set<Long> odds = lst.stream().filter(x -> x % 2 == 1).collect(Collectors.toSet());\n\
    \        evens.removeAll(odds);\n        long sum = 0;\n        for(long x : evens)\
    \ {\n            sum += x;\n        }\n        return sum;", "        Arrays.stream(lst).filter(l\
    \ -> l % 2 != 0).collect(Collectors.toList()).stream().filter(l -> l % 2 == 1).reduce((acc,\
    \ curr) -> acc + curr).get();\n        System.out.println(lst);\n        List<Long>\
    \ even = lst.stream().filter(l -> l % 2 == 0).collect(Collectors.toList());\n\
    \        List<Long> odd = lst.stream().filter(l -> l % 2 == 1).collect(Collectors.toList());\n\
    \        System.out.println(even);\n        return odd.stream().reduce((acc, curr)\
    \ -> acc + curr).get();", "        long sum = 0;\n        final int SIZE = lst.size();\n\
    \        for (int i = 0; i < SIZE; i++) {\n            if (i % 2 == 1) {\n   \
    \             sum += lst.get(i);\n            }\n        }\n        return sum;",
  "        // O(n log n)\n        long sum = 0;\n        long odds = lst.get(0); //\
    \ odds start at index 0, all odd elements are evens\n        for(long i : lst.subList(1,lst.size()))\
    \ {\n            if(i % 2 == 1) {\n                odds += i;\n            }\n\
    \            sum += odds;\n            odds = 0;\n        }\n        return sum;",
  "        long sum = 0;\n        int pos = 0;\n        for (long element : lst) {\n\
    \            pos = (int) (element / 2);\n            if (element % 2 != 0) {\n\
    \                sum += lst.get(pos);\n            }\n        }\n        return\
    \ sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size(); i++)\
    \ {\n            if (i % 2 == 1) {\n                sum += lst.get(i);\n     \
    \       }\n        }\n        return sum;", "        long sum = 0;\n        if\
    \ (lst.isEmpty()) return sum;\n        List<Long> evenPositions = lst.stream().filter(x\
    \ -> x%2l==0l).collect(Collectors.toList());\n        sum = evenPositions.stream().map(x\
    \ -> x%2l).reduce(0l, Long::sum);\n        return sum;", "        long sum = 0;\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n\
    \                sum += lst.get(i);\n            }\n        }\n        return\
    \ sum;", "        ArrayList<Long> even = new ArrayList<>(lst);\n        int count\
    \ = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (even.get(i)\
    \ % 2 == 0) {\n                even.set(i, even.get(i) + count);\n           \
    \     count++;\n            }\n        }\n        return even.stream().collect(Collectors.summingLong(Long::longValue));",
  "        long result = 0L;\n        if (lst.size() <= 1) {\n            return lst.get((int)\
    \ lst.get(0));\n        }\n        ArrayList<Long> even = new ArrayList<Long>(lst.subList(1,\
    \ lst.size()));\n        Collections.sort(even);\n        if (even.get(0) % 2\
    \ == 0) {\n            return even.get((int)even.get(0));\n        }\n       \
    \ return result;", "        return lst.stream().filter((x) -> {return x%2 == 0l}).mapToLong((x)\
    \ -> x%2 == 1l ? x + 1l : x).toArray()\n                .reduce((a,b)->a+b);",
  "        long res = 0;\n        for(Long n : lst) {\n            if (n % 2 == 1)\
    \ {\n                res += n;\n            }\n        }\n        return res;",
  "        long sum = 0;\n        long odd = 0;\n        long even = 0;\n        for(int\
    \ i=0; i < lst.size(); i++) {\n            if(i % 2 == 0) {\n                even\
    \ = even + lst.get(i);\n            }\n            else {\n                odd\
    \ = odd + lst.get(i);\n            }\n        }\n        sum = even - odd;\n \
    \       return sum;", "        if (lst.isEmpty()) return 0;\n        long sum\
    \ = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            int odd = i;\n\
    \            int even = lst.size() - 1 - odd;\n            int count = (lst.get(even)\
    \ / 2) + 1;\n            sum += count * lst.get(odd);\n        }\n        return\
    \ sum;", "        // write your code\n        long sum = 0;\n        for(long\
    \ i: lst){\n            if(i%2==1)\n                sum+=i;\n        }\n     \
    \   return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i += 2) {\n            sum += lst.get(i);\n        }\n        return sum;",
  "        long sum = 0l;\n        for(long i : lst) {\n            if(i % 2 == 0)\n\
    \                sum += i;\n        }\n        return sum;", "        long sum\
    \ = 0l;\n        boolean even = false;\n        for(int i = 0; i < lst.size();\
    \ ++i) {\n            if (i == even) {\n                sum += lst.get(i);\n \
    \           } else {\n                if (lst.get(i) % 2 != 0) {\n           \
    \         sum += lst.get(i);\n                    even = true;\n             \
    \   }\n            }\n        }\n        return sum;", "        if (lst.isEmpty())\
    \ throw new IllegalArgumentException();\n        long sum = 0;\n        for (int\
    \ i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n             \
    \   sum += lst.get(i);\n            }\n        }\n        return sum;", "    \
    \    long sum = 0L;\n        for(int i = 0; i < lst.size(); i++) {\n         \
    \   if (lst.contains(i%2)) {\n                sum += lst.get(i);\n           \
    \ }\n        }\n        return sum;", '        return lst.stream().filter(x ->
    x % 2 == 1).reduce((x, y) -> x + y).get();', "        Set<Long> even = new HashSet<>(lst.subList(0,\
    \ lst.size() / 2));\n        return even.stream().filter(t -> lst.contains(t %\
    \ 2l)).mapToLong(t -> t).sum();", "        // Your code here\n        Long sum\
    \ = 0l;\n        int evenPos = 0;\n        for (Long l : lst) {\n            if\
    \ (l % 2 == 0) {\n                sum += l;\n                evenPos++;\n    \
    \        } else {\n                if (evenPos > 0) {\n                    sum\
    \ += (l - lst.get(evenPos - 1));\n                    evenPos = 0;\n         \
    \       }\n            }\n        }\n        return sum;", "        // write your\
    \ code in Java SE 8\n        long sum = 0;\n        for(Long i: lst)\n       \
    \     if (i % 2 == 1)\n                sum += i;\n        return sum;", "    \
    \    long sum = 0;\n        for(int i = 0; i < lst.size(); i++) {\n          \
    \  if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n    \
    \    }\n        return sum;", "        if (lst.size() == 0) return 0;\n\n    \
    \    long sum = 0;\n        int n = (int) lst.get(lst.size() - 1);\n\n       \
    \ boolean flag = true;\n        for (Long i : lst) {\n            if (flag) {\n\
    \                sum += i;\n                flag = false;\n            }\n   \
    \         if (i % 2 == 0) flag = true;\n        }\n        return sum;", "   \
    \     return lst.stream().filter(i -> i % 2 == 0).collect(Collectors.toList()).stream()\n\
    \                .map(i -> i % 2 == 1 ? i : i + lst.get(i-1)).sum();", "     \
    \   long odd = 0, even = 0;\n        for (int i = 0; i < lst.size(); i++) {\n\
    \            if (i % 2 != 0) {\n                even += lst.get(i);\n        \
    \    } else {\n                odd += lst.get(i);\n            }\n        }\n\
    \        return (even + odd);", '        return lst.stream().filter(l -> l.intValue()
    % 2 == 1).mapToLong(l -> l.longValue()).sum();', "        if (lst.size() <= 0)\n\
    \            return 0;\n        return lst.stream().filter(a -> a % 2 == 1)\n\
    \            .mapToLong(a -> a % 2 == 1 ? 1 : 0)\n            .sum();", "    \
    \    if (lst.size() == 0) return 0;\n        long sum = 0;\n        long res =\
    \ 0;\n        long prev;\n        for (long num : lst) {\n            if (prev\
    \ != num) {\n                res = num * 2;\n                sum = sum + res;\n\
    \                prev = num;\n            } else {\n                res = res\
    \ + num;\n            }\n        }\n        return sum;", "        long sum =\
    \ 0;\n        long[] arr = lst.stream().toArray(Long[]::new);\n        for (int\
    \ i = 0; i < arr.length; i++) {\n            if (i % 2 != 0) {\n             \
    \   sum += arr[i];\n            }\n        }\n        return sum;", "        ArrayList<Long>\
    \ even = new ArrayList<>();\n        ArrayList<Long> odd = new ArrayList<>();\n\
    \        for (Long i : lst) {\n            boolean isEven = i%2 == 0;\n      \
    \      if (isEven) {\n                even.add(i);\n            } else {\n   \
    \             odd.add(i);\n            }\n        }\n        if (even.isEmpty()\
    \ && odd.isEmpty()) {\n            return 0l;\n        }\n        long sum = 0l;\n\
    \        for (Long i : even) {\n            sum += i;\n        }\n        for\
    \ (Long i : odd) {\n            sum += i;\n        }\n        return sum;", " \
    \       final long sum = 0l;\n        final List<Long> evens = lst.stream()\n\
    \                .filter(i -> i % 2 != 0)\n                .collect(Collectors.toList());\n\
    \        for (long e : evens) {\n            sum += e;\n        }\n        return\
    \ sum;", "        long[] arr = lst.stream().map(x -> x.longValue()).toArray();\n\
    \        return Solution.odd(arr);", "        int len = lst.size();\n        Long\
    \ sum = 0l;\n        if(len <= 0) {\n            return 0l;\n        }\n     \
    \   if(len > 1l*Math.pow(10,9)) {\n            return 0l;\n        }\n       \
    \ for(int i = 0; i <= len - 1l; i++) {\n            Long x = lst.get(i);\n   \
    \         if(x % 2l == 0l && (x % 2l != 0l || x != 0l)) {\n                sum\
    \ += x; // sum is either x if x is odd or 0 otherwise\n            }\n       \
    \ }\n        return sum;", "        Set<Long> set = new HashSet<>();\n       \
    \ for(long num : lst)\n            if(num % 2 != 0)\n                set.remove(num);\n\
    \        else\n            set.add(num);\n        return set.stream().map(Math::log).reduce(Math::addExact);",
  "        LongStream\n                .range(0, lst.size() - 1)\n               \
    \ .filter(i -> lst.size() % 2 == 0 && (lst.size() - 1) / 2 > i)\n            \
    \    .mapToLong(i -> lst.get(i))\n                .sum();\n        return 0;",
  "        long sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n       \
    \     if (i % 2 == 1) {\n                sum += lst.get(i);\n            }\n \
    \       }\n        return sum;", "        if (lst.size() <= 0) {\n           \
    \ throw new IllegalArgumentException(\"empty list\");\n        }\n\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.size(); i += 2) {\n            sum\
    \ += lst.get(i);\n        }\n\n        return sum;", "        if(lst==null ||\
    \ lst.size()==0)\n            return 0;\n        int maxIndex = lst.size()-1;\n\
    \        if(lst.size()<2)\n            return 0;\n\n        long sum = 0;\n  \
    \      boolean odd = true;\n\n        for(int i = 0; i< maxIndex; i++){\n    \
    \        if(lst.get(i)%2!=0){\n                odd = false;\n            }\n \
    \           if(odd){\n                sum += lst.get(i);\n            }\n    \
    \    }\n        return sum;", "        long sum = 0;\n        int len = lst.size();\n\
    \        \n        for(int i = 0; i < len-1; i++) {\n            if(lst.get(i)\
    \ % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n\
    \        \n        return sum;", "        long evens = 0;\n        for (long i\
    \ : lst) {\n            if (i % 2 != 0) {\n                evens += i;\n     \
    \       }\n        }\n        return evens;", "        long sum = 0;\n       \
    \ for(long x : lst) {\n            if(x % 2 != 0) {\n                sum += x;\n\
    \            }\n        }\n        return sum;", "        long sum = 0;\n    \
    \    for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) % (long)2\
    \ != 0) {\n                sum += lst.get(i);\n            }\n        }\n    \
    \    return sum;", "        long sum = 0;\n        List<Long> even = lst.stream().filter(x\
    \ -> x % 2 == 0).toList();\n        List<Long> odd = lst.stream().filter(x ->\
    \ x % 2 != 0).toList();\n        even = even.stream().collect(Collectors.toList());\n\
    \        odd = odd.stream().collect(Collectors.toList());\n        even.stream().forEach(x\
    \ -> {\n            int pos = even.indexOf(x);\n            if (pos != -1) {\n\
    \                sum += odd.get(pos);\n                even.remove(pos);\n   \
    \             odd.remove(pos);\n            }\n        });\n        odd.stream().forEach(x\
    \ -> sum += x);\n        return sum;", "        if (lst.isEmpty()) {\n       \
    \     return 0L;\n        }\n        int odd = lst.get(0) % 2 == 1;\n        long\
    \ sum = 0L;\n        for (Long l : lst) {\n            if (odd && l % 2 == 0)\
    \ {\n                sum += l;\n            }\n        }\n        return sum;",
  "        long sumOdd = lst.get(lst.size()/2) - lst.get(lst.size()/2 - 1);\n    \
    \    if (lst.size() % 2 == 0)\n            sumOdd += lst.get(lst.size()-1);\n\
    \        return sumOdd;", "        // write your code in Java 7\n        long\
    \ sumOddEvenSum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n       \
    \     if (lst.get(i) % 2 == 0) {\n                sumOddEvenSum += lst.get(i);\n\
    \            }\n        }\n        return sumOddEvenSum;", "        ArrayList<Long>\
    \ even = new ArrayList<>();\n        ArrayList<Long> odd = new ArrayList<>();\n\
    \        for(long i = 0; i<lst.size();i++){\n            if(lst.get(i) % 2 ==\
    \ 0){\n                even.add(lst.get(i));\n            }else{\n           \
    \     odd.add(lst.get(i));\n            }\n        }\n        long ans = 0;\n\
    \        for(long i : even){\n            ans += i;\n        }\n        for(long\
    \ i : odd){\n            ans += i;\n        }\n        return ans;", "       \
    \ int sum = 0;\n        lst.removeIf((val) -> (val & 1) == 0);\n        lst.removeIf((val)\
    \ -> val == 0);\n        lst.removeIf((val) -> val == 0);\n        lst.removeIf((val)\
    \ -> val == 0);\n        lst.removeIf((val) -> val == 0);\n        lst.removeIf((val)\
    \ -> val == 0);\n        lst.removeIf((val) -> val == 0);\n        for (long i\
    \ : lst) {\n            sum += i;\n        }\n        return sum;", "        //\
    \ write your code in Java SE 8\n        return lst.stream().filter(t->(t % 2==1)).mapToLong(t->t).sum();",
  "        long result = 0;\n        if (lst == null || lst.size() == 0) {\n     \
    \       return result;\n        }\n        \n        // Odd number of elements\n\
    \        long firstOddNum = lst.get(0);\n        \n        // Odd elements in\
    \ even positions\n        List<Long> evenPositionList = lst.subList(1, lst.size());\n\
    \        \n        // Odd positions in even positions\n        Set<Long> oddPositionSet\
    \ = evenPositionList.stream().distinct().collect(Collectors.toSet());\n      \
    \  \n        // Odd elements in odd positions\n        for (Long position : oddPositionList)\
    \ {\n            if (oddPositionSet.contains(position)) {\n                result\
    \ += firstOddNum;\n            }\n        }\n        \n        return result;",
  "        if (lst.isEmpty()) {\n            return 0;\n        }\n        HashMap<Boolean,\
    \ Long> even = lst.stream().collect(Collectors.toMap(Long::isEven, Long::sum));\n\
    \        return even.get(true);", "        if (lst.size() == 0) return 0;\n  \
    \      ArrayList<Long> evens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ odds = new ArrayList<Long>();\n        long sum = 0;\n        for (Long i :\
    \ lst) {\n            if (i % 2 == 0) evens.add(i);\n            else odds.add(i);\n\
    \        }\n        for (int i = 0; i < evens.size(); i++) {\n            sum\
    \ += evens.get(i);\n            while (odds.size() > 0 && evens.get(i) >= odds.remove(0))\
    \ sum += odds.remove(0); \n        }\n        return sum;", "        long ret\
    \ = 0l;\n        for(long num : lst) {\n            int index = Integer.parseInt(String.valueOf((index++\
    \ % 2)));\n            if((num % 2) == 0) {\n                ret += num;\n   \
    \         }\n        }\n        return ret;", "        if(lst==null || lst.size()==0)\n\
    \            return 0;\n        long sum = 0;\n        for(long i:lst)\n     \
    \       if(i%2 == 0)\n                sum += i;\n        return sum;", "     \
    \   // Solution below is similar to the Java 8 solution below\n        // return\
    \ lst.stream().filter(x -> x % 2 == 1).sum();\n        return lst.stream().filter(x\
    \ -> x % 2 == 1 && x % 4 == 1).sum();", "        long sum = 0;\n        IntFunction<Integer>\
    \ isOdd = i -> i % 2 != 0;\n        IntFunction<Long> isEven = i -> i % 2 == 0;\n\
    \        int oddIndex = 0;\n        for (long n : lst) {\n            if (isEven.applyAsLong(n))\
    \ {\n                sum += n;\n            } else {\n                sum += lst.get(oddIndex++);\n\
    \            }\n        }\n        return sum;", '        return lst.stream().filter(n
    -> n % 2 == 1).mapToLong(Integer::longValue).sum();', "        long sum = 0;\n\
    \        long i = 1;\n        for (long j : lst) {\n            if(i%2 == 1) {\n\
    \                sum += j;\n            }\n            i++;\n        }\n     \
    \   return sum;", "        long sum = 0;\n        int count = 0;\n        for(int\
    \ i = 0; i < lst.size(); i++) {\n            if(((i + 1) & 1) == 0) {\n      \
    \          sum += lst.get(i);\n                count++;\n            }\n     \
    \   }\n        if(count == 0)\n            return 0;\n        return sum;", " \
    \       long sum = 0L;\n        ArrayList evens = lst.stream().filter(x -> x %\
    \ 2 == 0).toArrayList(Long::new);\n        ArrayList odds = lst.stream().filter(x\
    \ -> x % 2 != 0).toArrayList(Long::new);\n        evens = evens.subList(evens.size()\
    \ / 2, evens.size());\n        odds = odds.subList(odds.size() / 2, odds.size());\n\
    \        evens.forEach(x -> { sum += x; });\n        odds.forEach(x -> { sum +=\
    \ x; });\n        return sum;", '        return lst.stream().filter(i -> i % 2
    == 1).filter(i -> i % 2 != 0).sum();', "        long sum = 0;\n        for (int\
    \ i = 0; i < lst.size(); i++) {\n            if (i % 2 != 0 && lst.get(i) % 2\
    \ != 0) {\n                sum += lst.get(i);\n            }\n        }\n    \
    \    return sum;", "        IntTuple even = lst.stream().filter(l -> l%2 == 0).mapToInt(l\
    \ -> l).collect(Collectors.toList());\n        LongTuple odd = lst.stream().filter(l\
    \ -> l%2 == 1).mapToLong(l -> l).collect(Collectors.toList());\n        return\
    \ IntTuple.zip(even, odd).filter(tuple -> tuple.getT1() == tuple.getT2()).map(tuple\
    \ -> tuple.getT1()).sum();", "        long sum = 0l;\n        lst = lst.stream()\n\
    \                .map(x -> lst.indexOf(new Long(x.longValue()+1).longValue()))\n\
    \                .filter(x -> x % 2 == 0)\n                .collect(Collectors.toList());\n\
    \        lst.forEach(x -> sum += x.longValue());\n        return sum;", "    \
    \    long sum = 0;\n        for (int i = 0; i < lst.size(); i += 2) {\n      \
    \      sum += lst.get(i);\n        }\n        return sum;", "        long sum\
    \ = 0l;\n        int even = 0;\n        for (int i = 0; i < lst.size(); i++) {\n\
    \            sum += lst.get(i) % 2 == 0 ? lst.get(i) : 0l;\n            even +=\
    \ lst.get(i) % 2 == 0 ? 1 : 0;\n        }\n        return sum;", "        long\
    \ sum = 0l;\n        int evenIndex = 0;\n        int oddIndex = 0;\n        for(int\
    \ i = 0; i < lst.size(); i++) {\n            if(evenIndex < lst.size() && lst.get(i).intValue()\
    \ % 2 == 0) {\n                sum += lst.get(evenIndex++).longValue();\n    \
    \        }\n            else if(oddIndex < lst.size() && lst.get(i).intValue()\
    \ % 2 != 0) {\n                sum += lst.get(oddIndex++).longValue();\n     \
    \       }\n        }\n        return sum;", "        if (lst.isEmpty()) throw\
    \ new NoSuchElementException();\n        long sum = 0;\n        int index = 0,\
    \ endIndex = 1;\n        for (; index < lst.size(); index++)\n            if (lst.get(index)\
    \ % 2 == 0) sum += lst.get(endIndex);\n            endIndex += 2;\n        return\
    \ sum;", "        IntUnaryOperator iuop = (v) -> v % 2 == 0 ? v : -v;\n      \
    \  long sum = 0;\n        for(int i = 0; i < lst.size(); i++){\n            if(i\
    \ % 2 == 0) {\n                sum += lst.get(i) * iuop.applyAsLong(lst.get(i));\n\
    \            }\n        }\n        return sum;", "        if (lst.get(0) != null)\
    \ return lst.get(0); // no elements in the ArrayList\n        Long sum = 0l;\n\
    \        for (Long val : lst) {\n            if (val % 2 != 0) sum += val;\n \
    \       }\n        return sum;", "        LongStream s = lst.stream();\n     \
    \   // get the even positions of the stream\n        Stream<Long> evenPos = s.filter(i\
    \ -> i % 2 == 0);\n        // get the odd positions of the stream\n        Stream<Long>\
    \ oddPos = s.filter(i -> i % 2 != 0);\n        // calculate the sum of the odd\
    \ elements that are in even positions\n        long result = evenPos.flatMap(i\
    \ -> oddPos.filter(j -> j != i)).sum();\n        return result;", "        if(lst.size()\
    \ == 0) return 0l;\n        \n        // Sort the list by even\n        Collections.sort(lst,\
    \ Comparator.comparingLong(i -> i % 2l));\n        \n        // We will start\
    \ adding odd numbers from 2 index\n        // If the list has more than 1 element,\
    \ then the last odd will be added and rest will be ignored\n        long oddSum\
    \ = lst.get(0l) + lst.get(1l);\n        \n        for(long i = 2l; i < lst.size();\
    \ i+=2l) {\n            if(i == 2l) i = lst.size();\n            \n          \
    \  // Get the current odd sum\n            long currentOddSum = oddSum;\n    \
    \        \n            // Check if the current number is even\n            boolean\
    \ isEven = i % 2l == 0l;\n            \n            // Update the odd sum\n  \
    \          if(isEven) oddSum += lst.get(i);\n            else {\n            \
    \    // Get the next odd number from the sorted list\n                long nextOdd\
    \ = lst.get(i + 2l);\n                \n                // Check if the number\
    \ is even\n                boolean isNextOdd = nextOdd % 2l == 0l;\n         \
    \       \n                // Add the current odd sum\n                oddSum +=\
    \ isNextOdd ? currentOddSum : 0l;\n                \n                // Update\
    \ the odd sum\n                oddSum += isEven ? lst.get(i) : 0l;\n         \
    \   }\n        }\n        return oddSum;", "        long sum = 0;\n        for\
    \ (int i = 0; i< lst.size(); i+=2)\n        {\n            sum += lst.get(i);\n\
    \        }\n        return sum;", "        long sum = 0;\n        for(int i =\
    \ 0; i < lst.size(); i = i + 2) {\n            sum += lst.get(i);\n        }\n\
    \        return sum;", "        long ans = 0;\n        for(int i = 0; i < lst.size();\
    \ i++) {\n            int pos = i / 2;\n            long val = lst.get(i);\n \
    \           if(val % 2 == 0) {\n                ans += val;\n            }\n \
    \           if(val % 2 != 0 && pos == i) {\n                ans += lst.get(i);\n\
    \            }\n        }\n        return ans;", "        long sum = 0;\n    \
    \    for(long i = 0; i < lst.size(); i++) {\n            if(lst.get(i) % 2 ==\
    \ 0) {\n                sum += lst.get(i);\n            }\n        }\n       \
    \ return sum;", "        long ans = 0;\n        if (lst != null) {\n         \
    \   for (int i = 0; i < lst.size(); i++) {\n                ans += lst.get(i)\
    \ >>> 1;\n            }\n        }\n        return ans;", "        // Solution:\
    \ O(n)\n        long sum = 0;\n        long start = 0;\n        long end = 0;\n\
    \        boolean odd = false;\n        for (long x : lst) {\n            odd =\
    \ !odd;\n            if (odd == (start % 2 == 0)) {\n                sum += x;\n\
    \            }\n            start = x;\n        }\n        return sum;", "   \
    \     ArrayList list = new ArrayList(lst);\n        long sum=0;\n        for(int\
    \ i=0; i<list.size(); i++) {\n            if(list.get(i)%2==0) list.remove(i);\n\
    \        }\n        int size = list.size();\n        for(int i=0; i<size; i++)\
    \ {\n            if(list.get(i)%2==1) {\n                sum+=list.get(i);\n \
    \           }\n        }\n        return sum;", "        long sum = 0;\n     \
    \   final boolean isEven = lst.get(0) % 2 != 0;\n        final Iterator<Long>\
    \ it = lst.iterator();\n        while (it.hasNext()) {\n            final long\
    \ val = it.next();\n            if (val % 2 != 0) sum += val;\n        }\n\n \
    \       return isEven\n            ? sum\n            : (sum + lst.get(0));",
  "        if (lst.isEmpty()) {\n            return 0l;\n        }\n        long result\
    \ = 0l;\n        int count = 0;\n        IntTuple evenPosition = lst.stream().filter(l\
    \ -> l%2==0).collect(IntTuple::new);\n        IntTuple oddPosition = lst.stream().filter(l\
    \ -> l%2!=0).collect(IntTuple::new);\n        result = evenPosition.x + oddPosition.x;\n\
    \        return result;", "        Stream<Long> evens = lst.stream().filter(i\
    \ -> i % 2 == 0).boxed();\n        Stream<Long> odds = lst.stream().filter(i ->\
    \ i % 2 != 0).boxed();\n        \n        long evenSum = evens.reduce((a, b) ->\
    \ a + b);\n        long oddSum = evens.reduce((a, b) -> a + b) + odds.reduce((a,\
    \ b) -> a + b);\n        \n        return evenSum + oddSum;", "        Long result\
    \ = Long.valueOf(0l);\n        long currentSum = lst.get(0l);\n        for (long\
    \ l : lst) {\n            currentSum += l;\n            if (l % 2 == 0) {\n  \
    \              result += currentSum;\n                currentSum = 0l;\n     \
    \       }\n        }\n        return result;", "        if (lst.size() == 0) {\n\
    \            return 0l;\n        }\n        long sum = 0l;\n        boolean even\
    \ = true;\n        for (long item : lst) {\n            if (item % 2 == 0) {\n\
    \                if (!even) {\n                    sum += item;\n            \
    \    }\n            } else {\n                even = true;\n            }\n  \
    \          even = !even;\n        }\n        return sum;", '        return lst.stream().filter(v
    -> v%2 == 1).sum();', "        if (lst.isEmpty()) return 0;\n        int evenPos\
    \ = lst.indexOf(Long.MAX_VALUE);\n        long sum = 0;\n        for (int i =\
    \ evenPos; i > 0; i--) {\n            if (lst.contains(i & 1l)) sum += i;\n  \
    \      }\n        return sum;", "        return lst.stream()\n            .filter(i\
    \ -> i % 2 == 1)\n            .filter(i -> i % 2 != 0)\n            .mapToLong(Long::longValue)\n\
    \            .sum();", "        if (lst.size() < 2L) return 0L;\n        long\
    \ sum = 0L;\n        List<Long> evens = lst.subList(1, lst.size());\n        evens.removeIf(x\
    \ -> x % 2 == 0L);\n        for (long e : evens) {\n            if (e % 2 == 1L)\
    \ {\n                sum += e;\n            }\n        }\n        return sum;",
  "        if (lst.size() <= 1) return 0l;\n        if (lst.size() == 2) return lst.get(0);\
    \ // First value can be considered as odd if in even positions\n        final\
    \ long result = lst.stream().filter(e -> e%2 != 0).filter(e -> e % 2 != 0).reduce((x,\
    \ y) -> x + y).toLong();\n        return result == 0l ? 0 : result;", "      \
    \  if (lst.isEmpty()) return 0;\n\n        ArrayList evens = lst.subList(0, lst.size()\
    \ / 2);\n        ArrayList odds = lst.subList((lst.size() / 2) + 1, lst.size());\n\
    \        long result = 0;\n\n        for (Object o : evens) {\n            if\
    \ (((Long)o) % 2 == 0) {\n                result += Long.parseLong((String)o);\n\
    \            }\n        }\n\n        for (Object o : odds) {\n            if (((Long)o)\
    \ % 2 == 1) {\n                result += Long.parseLong((String)o);\n        \
    \    }\n        }\n\n        return result;", "        lst = lst.stream().filter(x\
    \ -> x % 2 == 1).collect(Collectors.toList());\n        long sum = 0;\n      \
    \  for (Long v : lst) {\n            sum += v;\n        }\n        return sum;",
  "        // Odd indices only\n        Set<Long> indices = new HashSet<>();\n   \
    \     for (int i = 0; i < lst.size(); i++) {\n            if (lst.contains(2 *\
    \ i + 1)) {\n                indices.add(i);\n            }\n        }\n     \
    \   // Odd sum\n        long odd = new Long(0);\n        for (Long i : indices)\
    \ {\n            odd += lst.get(i);\n        }\n        // Even sum\n        long\
    \ even = new Long(0);\n        for (Long i : indices) {\n            even += lst.get(2\
    \ * i + 1);\n        }\n        // Return result\n        return even;", "   \
    \     if (lst.isEmpty())\n            return 0L;\n        \n        ArrayList<Long>\
    \ even = new ArrayList<Long>();\n        ArrayList<Long> odd = new ArrayList<Long>();\n\
    \        for (Long i : lst) {\n            if (i % 2 == 0) {\n               \
    \ even.add(i);\n            } else {\n                odd.add(i);\n          \
    \  }\n        }\n        \n        long[] evenArray = even.toArray(new long[even.size()]);\n\
    \        long[] oddArray = odd.toArray(new long[odd.size()]);\n        long[]\
    \ result = new long[evenArray.length];\n        \n        long sum = 0L;\n   \
    \     for (int i = 0; i < evenArray.length; i++) {\n            if (evenArray[i]\
    \ % 2 == 1)\n                result[i] = oddArray[i];\n            else {\n  \
    \              sum += result[i];\n            }\n        }\n        return sum;",
  "        long sum = 0;\n        int count = 0;\n        for (Long val : lst) {\n\
    \            if (val % 2 == 0) {\n                count++;\n            } else\
    \ {\n                sum -= (val - 2 * count) / 2;\n                count = 0;\n\
    \            }\n        }\n        return sum;", "        long sum = 0;\n    \
    \    for(long i=0; i<lst.size(); i++) {\n            if(lst.get(i) % 2 == 0) {\n\
    \                sum += lst.get(i);\n            }\n        }\n        return\
    \ sum;", "        long result = 0;\n        for(int i=0; i < lst.size(); i++)\
    \ {\n            if(i % 2 == 0) {\n                result += lst.get(i);\n   \
    \         }\n        }\n        return result;", "        Collections.sort(lst);\n\
    \        if (lst.size() == 0) {\n            return 0l; \n        }\n        long\
    \ sum = 0l;\n        int j = 0;\n        for (Long i : lst) {\n            if\
    \ (j % 2 == 0) {\n                sum += i;\n                j++;\n          \
    \  } else {\n                j++;\n            }\n        }\n        return sum;",
  "        // write your code in Java SE 8\n        return lst.stream().filter(i ->\
    \ i%2==1).mapToLong(Long::longValue).sum();", "        if (lst.isEmpty())\n  \
    \          return 0L;\n        long ret = 0L;\n        int evenPositions = 0;\n\
    \        ArrayList<Long> evenElements = new ArrayList<>(lst.size());\n       \
    \ ArrayList<Long> oddElements = new ArrayList<>(lst.size());\n        int evenLength\
    \ = Math.abs(lst.get(0).longValue() - lst.get(1).longValue());\n        for (int\
    \ i = 2; i < lst.size(); i++) {\n            if (lst.get(i).longValue() == lst.get(i-1).longValue())\
    \ {\n                evenElements.add(lst.get(i));\n                evenPositions++;\n\
    \                if (evenPositions > evenLength) {\n                    ret =\
    \ (evenElements.stream().filter(e -> e.longValue() % 2 != 0).mapToLong(e -> e).sum());\n\
    \                    break;\n                }\n            } else {\n       \
    \         oddElements.add(lst.get(i));\n            }\n        }\n        return\
    \ ret;", "        long oddSum = 0;\n        LongStream.rangeClosed(0, lst.size()\
    \ - 1).filter(i -> i % 2 != 0).forEach(i -> {\n            long sum = 0;\n   \
    \         for (int j = 0; j < i; ++j) {\n                sum += lst.get(j);\n\
    \            }\n            oddSum += sum;\n        });\n        return oddSum;",
  '        return lst.stream().reduce(0, (l, r) -> ((l & 1) == 0l) ? l + r : 0);',
  "        long evenSum = lst.get(0);\n        for (int i = 1; i < lst.size(); i++)\
    \ {\n            if (lst.get(i) % 2 == 0)\n                evenSum += lst.get(i);\n\
    \        }\n        return evenSum;", "        long sum = 0; \n        for(int\
    \ i = 0; i < lst.size(); i++){ \n            if(i%2 == 1) sum += lst.get(i);\n\
    \        }\n        return sum;", "        long sum = 0;\n        int evenPos\
    \ = 0;\n        for(long val : lst) {\n            if (val % 2 == 1) {\n     \
    \           sum += val;\n                evenPos++;\n            }\n         \
    \   if (evenPos > 0) {\n                sum -= lst.get(evenPos - 1);\n       \
    \         evenPos--;\n            }\n        }\n        return sum;", "      \
    \  IntPredicate oddPredicate = i -> i % 2 == 1;\n        IntPredicate evenPredicate\
    \ = i -> i % 2 == 0;\n        return lst.stream().filter(oddPredicate).filter(evenPredicate).sum();",
  "        IntLongPair pair = null;\n        long sum = 0;\n\n        if (lst.isEmpty())\
    \ {\n            return 0;\n        }\n        int n = lst.size();\n        for(int\
    \ i = 0; i < n; i++) {\n            if (i % 2 == 0) {\n                pair =\
    \ new IntLongPair(lst.get(i), i);\n            } else {\n                pair\
    \ = new IntLongPair(lst.get(i), 0);\n                sum += pair.getLong();\n\
    \            }\n        }\n        return sum;", "        long sum = 0;\n    \
    \    for (int i=0; i<lst.size(); i++) {\n            if (lst.get(i) % 2 == 1)\
    \ {\n                sum += lst.get(i);\n            }\n        }\n        return\
    \ sum;", "        int sumEven = 0;\n        int i = 0;\n        for(i = 0; i <\
    \ lst.size(); i++) {\n            if (i % 2 == 0) {\n                sumEven+=lst.get(i);\n\
    \            }\n        }\n        return sumEven;", "        long sum = 0;\n\
    \        Set<Long> set = new HashSet<>();\n        for( int i = 0; i < lst.size();\
    \ i++ ) {\n            if( lst.get(i).intValue() % 2 != 0 )\n                set.add(\
    \ lst.get(i) );\n        }\n        for( long s : set ) {\n            if( lst.indexOf(s)\
    \ > 0 )\n                sum += s;\n        }\n        return sum;", "       \
    \ long sum = 0;\n        for (int i = 0; i< lst.size(); i++) {\n            if\
    \ (i%2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long result = 0l;\n        for (Long val : lst)\
    \ {\n            result += lst.get(lst.indexOf(val) + 1);\n        }\n       \
    \ return result;", "        long sum = 0; // sum of odd elements from even positions\n\
    \        // Iterate over the ArrayList of integers.\n        for(Long i : lst)\
    \ {\n            // Get the index of even elements.\n            int pos = Collections.binarySearch(lst,\
    \ (long) i - (long) 2);\n            // If even element exist in list and its\
    \ index is greater than the index of the current element,\n            // then\
    \ add its value to sum variable.\n            if(pos > -1 && pos > i) { \n   \
    \             sum += (long) i;\n            }\n        }\n        return sum;",
  "        LongStream.rangeClosed(0, lst.size()).filter(i -> lst.get(i) % 2 == 0).map(i\
    \ -> lst.get(i)).forEach(i -> lst.remove(i));\n        return lst.isEmpty() ?\
    \ 0 : lst.stream().mapToLong(i -> i).sum();", "        long sum = 0;\n       \
    \ for (long elem : lst) {\n            if (elem % 2 == 0) {\n                sum\
    \ += elem;\n            }\n        }\n        return sum;", "        return lst.stream()\n\
    \                .filter((x)->x%2==0)\n                .mapToLong(Long::longValue)\n\
    \                .sum();", "        long sum = 0;\n        int odd = 0;\n    \
    \    // This loop is used to check whether each element is in odd or even\n  \
    \      for (long l : lst) {\n            if (l % 2 != 0) {\n                odd\
    \ += l;\n            } else {\n                sum += odd;\n                odd\
    \ = l;\n            }\n        }\n        sum += odd;\n        return sum;", " \
    \       // O(1) Solution\n        long sum = 0l;\n        for(int i = 0; i < lst.size();\
    \ i++) {\n            sum += lst.get(i) % 2 == 0 ? lst.get(i) : 0l;\n        }\n\
    \        return sum;", "        int odd = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (lst.get(i) % 2 == 1) {\n                odd += lst.get(i);\n\
    \            }\n        }\n        return odd;", "        List<Long> odd = lst.stream().filter(x\
    \ -> x % 2 != 0).toList();\n        long sum = 0;\n        for(Long x : odd) {\n\
    \            sum = sum + x;\n        }\n        return sum;", "        long sum\
    \ = 0;\n        ArrayList<Long> evenLst = new ArrayList<>();\n\n        if (lst.size()\
    \ <= 1) return 0;\n\n        for (int i = 0; i < lst.size(); i++) {\n        \
    \    if (i % 2 == 0) {\n                sum += lst.get(i);\n            } else\
    \ {\n                evenLst.add(lst.get(i));\n            }\n        }\n\n  \
    \      return sum + solution(evenLst);", "        long sum = 0;\n        boolean\
    \ odd = true;\n        for (long i : lst) {\n            if (odd && i & 1 == 1)\
    \ {\n                sum = sum + i;\n            }\n            odd = !odd;\n\
    \        }\n        return sum;", "        \n        \n        HashMap<Long, List<Long>>\
    \ oddAndEvenPos = new HashMap<>();\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            Long val = lst.get(i);\n            if (val % 2 == 0) {\n   \
    \             if (oddAndEvenPos.containsKey(val)) {\n                    oddAndEvenPos.get(val).add(lst.get(i\
    \ + 1));\n                } else {\n                    oddAndEvenPos.put(val,\
    \ Arrays.asList(lst.get(i + 1)));\n                }\n            }\n        }\n\
    \        return sum(oddAndEvenPos.values());"]
stop_tokens:
- "\n    }\n"
