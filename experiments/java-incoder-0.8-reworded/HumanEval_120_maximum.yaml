name: HumanEval_120_maximum
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given an array array list arr of integers and a positive\
  \ integer k, return a sorted array list \n    // of length k with the maximum k\
  \ numbers in arr.\n    // Example 1:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
  \ (long)-4l, (long)5l))), (3l))\n    // (new ArrayList<Long>(Arrays.asList((long)-4l,\
  \ (long)-3l, (long)5l)))\n    // Example 2:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
  \ (long)-4l, (long)4l))), (2l))\n    // (new ArrayList<Long>(Arrays.asList((long)4l,\
  \ (long)4l)))\n    // Example 3:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
  \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l))\n    //\
  \ (new ArrayList<Long>(Arrays.asList((long)2l)))\n    // Note:\n    // 1. The length\
  \ of the array array list will be in the range of [1, 1000].\n    // 2. The elements\
  \ in the array array list will be in the range of [-1000, 1000].\n    // 3. 0 <=\
  \ k <= len(arr)\n    public static ArrayList<Long> maximum(ArrayList<Long> arr,\
  \ long k) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(maximum((new\
  \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new\
  \ ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new\
  \ ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l,\
  \ (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
  \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
  \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
  \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
  \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
  \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
  \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
  \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
  \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
  \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
  \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))), (2l)).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n    assert(maximum((new\
  \ ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l,\
  \ (long)10l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)3l, (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new\
  \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
completions: ["        return Collections.max(new LongArrayList(arr), new Comparator<Long>()\
    \ {\n            public int compare(Long o1, Long o2) {\n                return\
    \ (int) (o2 - o1);\n            }\n        }).stream().limit(k).collect(Collectors.toCollection(ArrayList::new));",
  "        ArrayList<Long> result = new ArrayList<Long>(k);\n        Collections.sort(arr);\n\
    \        long max = arr.get(0);\n        int i = 0;\n        for (int j = 0; j\
    \ < arr.size(); j++) {\n            if (j == 0 && arr.get(j) < max) {\n      \
    \          result.add(max);\n            } else {\n                if (arr.get(j)\
    \ == max) {\n                    result.add(max);\n                } else {\n\
    \                    result.add(arr.get(j));\n                }\n            }\n\
    \            if (++i % k == 0) {\n                Collections.swap(arr, j, i);\n\
    \            }\n        }\n        return result;", "        int n = arr.size();\n\
    \        ArrayList<Long> max_arr = new ArrayList<>(k);\n        max_arr.add(Long.MAX_VALUE);\n\
    \        for (int i = 0; i < n; i++) {\n            if (max_arr.get(i) < arr.get(i))\
    \ {\n                max_arr.set(i, arr.get(i));\n            }\n        }\n \
    \       for (int i = k; i < max_arr.size(); i++) {\n            max_arr.set(i,\
    \ Long.MAX_VALUE);\n        }\n        return max_arr;", "        int n = arr.size();\n\
    \        if(k > n) {\n            return arr;\n        }\n        ArrayList<Long>\
    \ res = new ArrayList<>(k);\n        int i = 0;\n        while(i < k) {\n    \
    \        long m = Collections.max(arr);\n            res.add(m);\n           \
    \ i++;\n            arr.remove(m);\n        }\n        return res;", "       \
    \ ArrayList<Long> res = new ArrayList<Long>();\n        if (arr.size() <= k) {\n\
    \            Collections.sort(arr);\n            res.add(arr.get(arr.size() -\
    \ 1));\n            for (int i = arr.size() - 1; i >= 0; i--) {\n            \
    \    if (arr.size() <= k) {\n                    res.add(arr.get(i));\n      \
    \          } else {\n                    res.add(Collections.max(arr.subList(i\
    \ + 1, arr.size())));\n                }\n            }\n        } else if (k\
    \ <= arr.size()) {\n            Collections.sort(arr);\n            for (int i\
    \ = 0; i < k; i++) {\n                res.add(Collections.max(arr.subList(i, i\
    \ + 1)));\n            }\n        }\n        return res;", "        if (arr.isEmpty()\
    \ || k < 1)\n            return arr;\n        ArrayList<Long> big = new ArrayList<>();\n\
    \        BigInteger bigInt = BigInteger.valueOf(0);\n        BigInteger bigInt1\
    \ = BigInteger.valueOf(0);\n        BigInteger bigInt2 = BigInteger.valueOf(0);\n\
    \        BigInteger bigInt3 = BigInteger.valueOf(0);\n        BigInteger bigInt4\
    \ = BigInteger.valueOf(0);\n        for (int i = 0; i< arr.size(); i++) {\n  \
    \          if (bigInt.compareTo(arr.get(i)) < 0) {\n                if (bigInt.compareTo(bigInt1)\
    \ < 0) {\n                    if (bigInt.compareTo(bigInt2) < 0) {\n         \
    \               if (bigInt.compareTo(bigInt3) < 0) {\n                       \
    \     big.add(bigInt.longValue());\n                            bigInt1 = bigInt;\n\
    \                        } else {\n                            big.add(bigInt.longValue());\n\
    \                            bigInt2 = bigInt;\n                        }\n  \
    \                  } else {\n                        big.add(bigInt.longValue());\n\
    \                        bigInt3 = bigInt;\n                    }\n          \
    \      } else {\n                    big.add(bigInt.longValue());\n          \
    \          bigInt4 = bigInt;\n                }\n            }\n            bigInt\
    \ = BigInteger.valueOf(arr.get(i));\n        }\n        if (bigInt.compareTo(bigInt1)\
    \ < 0) {\n            if (bigInt.compareTo(bigInt2) < 0) {\n                if\
    \ (bigInt.compareTo(bigInt3) < 0) {\n                    big.add(bigInt.longValue());\n\
    \                    bigInt1 = bigInt;\n                } else {\n           \
    \         big.add(bigInt.longValue());\n                    bigInt2 = bigInt;\n\
    \                }\n            } else {\n                big.add(bigInt.longValue());\n\
    \                bigInt3 = bigInt;\n            }\n        }\n        if (bigInt.compareTo(bigInt2)\
    \ < 0) {\n            if (bigInt.compareTo(bigInt3) < 0) {\n                big.add(bigInt.longValue());\n\
    \                bigInt1 = bigInt;\n            } else {\n                big.add(bigInt.longValue());\n\
    \                bigInt2 = bigInt;\n            }\n        }\n        if (bigInt.compareTo(bigInt3)\
    \ < 0) {\n            big.add(bigInt.longValue());\n            bigInt1 = bigInt;\n\
    \        }\n        if (bigInt.compareTo(bigInt4) < 0) {\n            big.add(bigInt.longValue());\n\
    \            bigInt1 = bigInt;\n        }\n        return big;", "        // write\
    \ your code here\n        ArrayList<Long> results = new ArrayList<>();\n     \
    \   long big = Integer.MIN_VALUE;\n        for (int i = 0; i < k; i++) {\n   \
    \         if (big < arr.get(i)) {\n                big = arr.get(i);\n       \
    \     }\n        }\n        results.add(big);\n        for (int i = k + 1; i <\
    \ arr.size(); i++) {\n            if (big < arr.get(i)) {\n                big\
    \ = arr.get(i);\n            }\n            results.add(big);\n        }\n   \
    \     return results;", "        ArrayList<Long> result = new ArrayList<>(k);\n\
    \        sort(arr, k);\n        Collections.sort(result, new Comparator<Long>()\
    \ {\n            public int compare(Long o1, Long o2) {\n                return\
    \ Double.compare(Math.abs(o1 - o2), k);\n            }\n        });\n        return\
    \ result;", "        int count = 0;\n        int n = arr.size();\n        ArrayList<Long>\
    \ result = new ArrayList<>(k);\n        long tempMax = 0;\n        long maxValue\
    \ = -1;\n        boolean max = true;\n        for (Long element : arr) {\n   \
    \         count++;\n            if (count < k) {\n                if (tempMax\
    \ < element) {\n                    tempMax = element;\n                }\n  \
    \          } else {\n                if (tempMax < element) {\n              \
    \      tempMax = element;\n                    maxValue = max;\n             \
    \       max = true;\n                } else {\n                    maxValue =\
    \ max;\n                    max = false;\n                }\n            }\n \
    \       }\n        if (count >= k) {\n            result.add(maxValue);\n    \
    \    }\n        return result;", "        // write your code here\n        Arrays.sort(arr);\n\
    \        ArrayList<Long> ans = new ArrayList<>();\n        for(int i=0;i<arr.size();i++){\n\
    \            long elem = arr.get(i);\n            if(k>elem)\n               \
    \ ans.add(elem);\n            else\n                ans.add(k);\n        }\n \
    \       return ans;", "        long max_ = arr.stream().max().getAsLong();\n \
    \       return arr.stream().filter((x) -> x <= max_).collect(Collectors.toCollection(()\
    \ -> new ArrayList<>(k)));", "        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        \n        long largest = Long.MIN_VALUE;\n        \n        // For each\
    \ element in the array\n        for (Long e: arr) {\n            // If current\
    \ element is greater than or equal to largest\n            if (e >= largest) {\n\
    \                res.add(e);\n            }\n            \n            // If current\
    \ element is less than or equal to largest \n            else if (e <= largest)\
    \ {\n                // Update the largest element\n                largest =\
    \ e;\n            }\n        }\n        \n        // If k is greater than largest\n\
    \        if (k > largest) {\n            k = largest;\n        }\n        \n \
    \       // If k is less than largest\n        else if (k < largest) {\n      \
    \      // Add as many elements as required to satisfy k\n            for (int\
    \ i = k; i < arr.size(); i++) {\n                res.add(arr.get(i));\n      \
    \      }\n        }\n        \n        return res;", "        ArrayList<Long>\
    \ result = new ArrayList<>(k);\n        long maxValue = arr.get(0);\n        for\
    \ (int i = 1; i < k; i++) {\n            if (maxValue < arr.get(i)) {\n      \
    \          maxValue = arr.get(i);\n            }\n        }\n        int j = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (maxValue < arr.get(i))\
    \ {\n                result.add(arr.get(i));\n            } else if (maxValue\
    \ == arr.get(i)) {\n                result.add(arr.get(i));\n            }\n \
    \           if (result.size() >= k) {\n                j++;\n            }\n \
    \       }\n        return result;", "        ArrayList<Long> max = new ArrayList<Long>();\n\
    \        ArrayList<Long> maxTmp = new ArrayList<Long>();\n        long tmp;\n\
    \        Arrays.sort(arr);\n        maxTmp.addAll(arr);\n        long temp;\n\
    \        for (int i = (arr.size() - 1); i >= 0; i--) {\n            temp = maxTmp.get(i);\n\
    \            maxTmp.remove(i);\n            if (temp.equals(maxTmp.get(0)) ||\
    \ temp.equals(maxTmp.get(1))) {\n                maxTmp.remove(i);\n         \
    \   } else {\n                break;\n            }\n        }\n        temp =\
    \ maxTmp.get(0);\n        while (temp.equals(maxTmp.get(0) || temp.equals(maxTmp.get(1)))\
    \ {\n            maxTmp.remove(0);\n            temp = maxTmp.get(0);\n      \
    \  }\n        for (int i = 0; i < maxTmp.size(); i++) {\n            max = max.add(maxTmp.get(i));\n\
    \        }\n        Arrays.sort(max);\n        if (k == max.size()) {\n      \
    \      return max;\n        } else {\n            if (k > max.size()) {\n    \
    \            k = max.size();\n            }\n            ArrayList<Long> ret =\
    \ new ArrayList<Long>();\n            for (int i = 0; i < k; i++) {\n        \
    \        ret.add(max.get(i));\n            }\n            return ret;\n      \
    \  }", "        ArrayList<Long> result = new ArrayList<>();\n        if (arr.size()\
    \ == 0 || arr.size() <= k) {\n            return result;\n        }\n        ArrayList<Long>\
    \ max = new ArrayList<>();\n        ArrayList<Long> tmp = new ArrayList<>();\n\
    \        Collections.sort(arr);\n        tmp.clear();\n        for (long i : arr)\
    \ {\n            if (max.size() == k) {\n                break;\n            }\n\
    \            if (tmp.contains(i)) {\n                continue;\n            }\n\
    \            tmp.add(i);\n            if (k.equals(i)) {\n                result.addAll(tmp);\n\
    \                max.addAll(tmp);\n                tmp.clear();\n            }\n\
    \        }\n        if (result.size() > 0) {\n            result.addAll(tmp);\n\
    \            max.addAll(tmp);\n            tmp.clear();\n        }\n        return\
    \ result;", "        if (arr.isEmpty()) throw new RuntimeException(\"Invalid array\
    \ list\");\n        if (k <= 0) throw new RuntimeException(\"Invalid k\");\n \
    \       Collections.sort(arr);\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        for (int i = 0; i < arr.size() - k + 1; i++) {\n            ArrayList<Long>\
    \ newResult = new ArrayList<>();\n            for (int j = 0; j < k; j++) {\n\
    \                newResult.add(arr.get(i + j));\n            }\n            result.addAll(newResult);\n\
    \        }\n        return result;", "        long max = Long.MIN_VALUE;\n   \
    \     ArrayList<Long> arr1 = new ArrayList<Long>();\n        arr1.add(Long.MIN_VALUE);\n\
    \        arr1.add(Long.MAX_VALUE);\n        arr1.add(Long.NEGATIVE_INFINITY);\n\
    \        arr1.add(Long.POSITIVE_INFINITY);\n        ArrayList<Long> arr2 = new\
    \ ArrayList<Long>();\n        arr2.add(Long.MIN_VALUE);\n        arr2.add(Long.MAX_VALUE);\n\
    \        arr2.add(Long.NEGATIVE_INFINITY);\n        arr2.add(Long.POSITIVE_INFINITY);\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) >\
    \ max) {\n                max = arr.get(i);\n                arr1.set(i, max);\n\
    \            }\n            if (arr1.get(i) > max && arr.get(i) < arr1.get(i +\
    \ 1)) {\n                arr1.set(i, arr.get(i));\n            }\n        }\n\
    \        arr2.addAll(arr1);\n        Arrays.sort(arr2);\n        for (int i =\
    \ 0; i < arr2.size(); i++) {\n            arr2.set(i, arr2.get(i));\n        }\n\
    \        return arr2.subList(0, k);", "        if (arr.isEmpty() || k <= 0 ||\
    \ k > arr.size()) {\n            return new ArrayList<>();\n        }\n      \
    \  // Find maximum element in the given array\n        long maxElem = -1000000;\n\
    \        for (Long element : arr) {\n            if (element > maxElem) {\n  \
    \              maxElem = element;\n            }\n        }\n        // Remove\
    \ all elements that are greater than the maxElem\n        List<Long> result =\
    \ new ArrayList<>();\n        Iterator<Long> iterator = arr.iterator();\n    \
    \    while (iterator.hasNext()) {\n            if (iterator.next() != maxElem)\
    \ {\n                result.add(iterator.next());\n            }\n        }\n\
    \        // Sort the resultant array list\n        Arrays.sort(result.subList(result.size()\
    \ - k, result.size()));\n        return result;", "        if (arr.size() < k)\
    \ {\n            return arr;\n        }\n\n        ArrayList<Long> max = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp = new ArrayList<Long>();\n\n        for (Long i\
    \ : arr) {\n            temp.add(i);\n        }\n\n        Collections.sort(temp,\
    \ (a, b) -> Long.compare(a, b));\n\n        for (Long i : temp) {\n          \
    \  if (max.size() < k) {\n                max.add(i);\n            } else {\n\
    \                if (max.get(i) < i) {\n                    max.set(i, i);\n \
    \               }\n            }\n        }\n\n        return max;", "       \
    \ // Complete this function\n        return null;", "        if (arr.size() >\
    \ k) return arr;\n        // sort array list and remove k largest elements\n \
    \       Collections.sort(arr);\n        return arr.removeLast(k);", "        long\
    \ max = arr.get(0);\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) >\
    \ max) {\n                max = arr.get(i);\n            }\n        }\n      \
    \  for (int i = 0; i < k; i++) {\n            result.add(max);\n        }\n  \
    \      return result;", "        if (arr.size() == 0) return arr;\n        ArrayList<Long>\
    \ sortedArr = new ArrayList<Long>();\n        long maxNum = -1000;\n        long\
    \ curNum = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n     \
    \       if (curNum < arr.get(i)) {\n                maxNum = Math.max(maxNum,\
    \ curNum);\n                curNum = arr.get(i);\n            } else {\n     \
    \           curNum = arr.get(i);\n            }\n        }\n        sortedArr.add(maxNum);\n\
    \        long nextNum = arr.get(0);\n        for (int i = 1; i < arr.size(); i++)\
    \ {\n            if (curNum < nextNum) {\n                maxNum = Math.max(maxNum,\
    \ curNum);\n                curNum = nextNum;\n                nextNum = arr.get(i);\n\
    \            } else {\n                curNum = nextNum;\n                nextNum\
    \ = arr.get(i);\n            }\n        }\n        sortedArr.add(maxNum);\n  \
    \      return sortedArr;", "        // write your code here\n        if (arr.size()\
    \ < k)\n            throw new RuntimeException(\"The length of the array list\
    \ will be in the range of [1, 1000].\");\n        if (k > arr.size())\n      \
    \      throw new RuntimeException(\"The elements in the array list will be in\
    \ the range of [-1000, 1000].\");\n        \n        ArrayList<Long> res = new\
    \ ArrayList<>(k);\n        for (int i = 0; i < k; i++)\n            res[i] = Collections.max(arr);\n\
    \        return res;", "        long max = 0;\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        for (long element : arr) {\n            if (max\
    \ < element) {\n                max = element;\n            }\n        }\n   \
    \     for (long element : arr) {\n            if (element == max) {\n        \
    \        result.add(element);\n            }\n        }\n        if (result.size()\
    \ < k) {\n            for (int i = result.size(); i < k; i++) {\n            \
    \    result.add((long) 0);\n            }\n        }\n        return result;",
  "        ArrayList<Long> output = new ArrayList<>();\n        // get max number\
    \ from input list\n        long max = Collections.max(arr);\n        // if max\
    \ number < 0 then return empty list\n        if (max < 0) {\n            return\
    \ output;\n        }\n        // if k is not more than the length of the list\
    \ then return empty list\n        if (k > arr.size()) {\n            return output;\n\
    \        }\n        // if k is less than the length of the list then return k\
    \ number of elements\n        if (k < arr.size()) {\n            output = arr;\n\
    \        } else {\n            // split the original list and get the max number\
    \ from the first k elements\n            ArrayList<Long> list1 = arr.subList(0,\
    \ k);\n            // sort the list1\n            list1.sort(Long::compareTo);\n\
    \            // copy list1 to output list\n            output = list1;\n     \
    \   }\n        return output;", "        int n = arr.size();\n        ArrayList<Long>\
    \ result = new ArrayList<>(k);\n        ArrayList<Long> current = new ArrayList<>();\n\
    \        for (int i = 0; i < n; ++i) {\n            current.add(arr.get(i));\n\
    \            if (current.size() > k) {\n                result.add(Collections.max(current));\n\
    \                current.clear();\n            }\n        }\n        result.add(Collections.max(current));\n\
    \        return result;", "        if (k <= arr.size()) {\n            Arrays.sort(arr);\n\
    \            return arr;\n        } else {\n            ArrayList<Long> maxList\
    \ = new ArrayList<>();\n            int low = 0;\n            int high = arr.size()\
    \ - 1;\n            while (low < high) {\n                while (low + 1 < high\
    \ && arr.get(low) < arr.get(low + 1)) {\n                    low++;\n        \
    \        }\n                while (high + 1 < low && arr.get(high) > arr.get(high\
    \ + 1)) {\n                    high--;\n                }\n                if\
    \ (low < high) {\n                    maxList.add(arr.get(low));\n           \
    \         if (low + 1 < high) {\n                        if (arr.get(low) < arr.get(low\
    \ + 1)) {\n                            low++;\n                        } else\
    \ {\n                            high--;\n                        }\n        \
    \            } else {\n                        low++;\n                      \
    \  high--;\n                    }\n                }\n            }\n        \
    \    while (low * 2 < maxList.size()) {\n                if (maxList.get(low *\
    \ 2) < maxList.get(low * 2 + 1)) {\n                    maxList.set(low * 2, maxList.get(low\
    \ * 2 + 1));\n                    maxList.remove(low * 2 + 1);\n             \
    \   } else {\n                    break;\n                }\n            }\n \
    \           while (high * 2 < maxList.size()) {\n                if (maxList.get(high\
    \ * 2) < maxList.get(high * 2 + 1)) {\n                    maxList.set(high *\
    \ 2, maxList.get(high * 2 + 1));\n                    maxList.remove(high * 2\
    \ + 1);\n                } else {\n                    break;\n              \
    \  }\n            }\n            Arrays.sort(maxList);\n            return maxList;\n\
    \        }", "        // write your code here\n        if(k>arr.size())\n    \
    \        return arr;\n        ArrayList<Long> temp = new ArrayList<Long>(arr.size());\n\
    \        ArrayList<Long> maximum = new ArrayList<Long>(arr.size());\n        for(int\
    \ i=0;i<arr.size()-k;i++){\n            for(int j=i;j<arr.size();j++){\n     \
    \           if(arr.get(i)>arr.get(j)){\n                    temp.add(arr.get(j));\n\
    \                    arr.set(j,arr.get(i));\n                    arr.set(i,temp.get(i));\n\
    \                }\n            }\n            maximum.add(arr.get(i));\n    \
    \    }\n        return maximum;", "        // write your code here\n        arr.sort(Comparator.reverseOrder());\n\
    \        ArrayList<Long> ret = new ArrayList<>();\n        for(long i : arr)\n\
    \        {\n            if((arr.size()-1) > k)\n            {\n              \
    \  ret.add(arr.get((arr.size() - 1) - k));\n            }\n            else\n\
    \            {\n                ret.add(i);\n            }\n        }\n      \
    \  return ret;", "        if (arr.size() <= k) {\n            return arr;\n  \
    \      }\n\n        // sort arr by greatest to least element\n        Collections.sort(arr);\n\
    \n        // return k greatest elements\n        if (k <= arr.size()) {\n    \
    \        ArrayList<Long> result = new ArrayList<>();\n            result.addAll(arr.subList(0,\
    \ k));\n            return result;\n        }\n\n        // k greater than length\
    \ of arr\n        ArrayList<Long> result = new ArrayList<>();\n        result.addAll(arr);\n\
    \        return result;", "        ArrayList<Long> res = new ArrayList<>();\n\
    \        if(arr == null || arr.size() == 0 || k > arr.size()){\n            return\
    \ res;\n        }\n        long max = Integer.MIN_VALUE;\n        for(Long element\
    \ : arr) {\n            if(element>max){\n                max = element;\n   \
    \         }\n        }\n        for(int i=0; i<arr.size()-k;i++){\n          \
    \  long start = max;\n            long end = arr.get(i);\n            while(end\
    \ < start) {\n                res.add(end);\n                end = arr.get(i+1);\n\
    \            }\n        }\n        return res;", "        Collections.sort(arr);\n\
    \        if (k <= 0 || k > arr.size())\n            return arr;\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        int len = arr.size();\n        while\
    \ (len-- > k) {\n            result.add(arr.get(len));\n        }\n        return\
    \ result;", "        if (arr.size() < k || k <= 0) {\n            throw new IllegalArgumentException(\"\
    Invalid argument!\");\n        }\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        arr.forEach(e -> {\n            List<Long> l = new ArrayList<>();\n \
    \           l.add(e);\n            Collections.sort(l);\n            while (l.size()\
    \ >= k) {\n                res.add(l.remove(0));\n            }\n        });\n\
    \        return res;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        if (arr.size() <= k) {\n            return arr;\n        }\n\n      \
    \  long max = arr.get(0);\n\n        for (long i : arr) {\n            if (i >\
    \ max) {\n                result.clear();\n                result.addAll(arr);\n\
    \                return result;\n            }\n            max = i;\n       \
    \ }\n\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        Arrays.sort(arr);\n        long end = arr.size() - k;\n        for (int\
    \ i = arr.size() - k; i < arr.size(); i++) {\n            result.add(arr.get(i));\n\
    \        }\n        return result;", "        Arrays.sort(arr);\n        ArrayList\
    \ list = new ArrayList(arr.subList(0, k));\n        list.add(Collections.max(arr));\n\
    \        return list;", "        if (arr.size() == 0 || k <= 0) {\n          \
    \  return arr;\n        }\n        List<Long> list = new ArrayList<>(k);\n   \
    \     Collections.sort(arr);\n        long maxNum = arr.get(arr.size() - 1);\n\
    \        arr.subList(arr.size() - 1, arr.size()).forEach((element) -> {\n    \
    \        if (element > maxNum) {\n                maxNum = element;\n        \
    \    }\n        });\n        list.add(maxNum);\n        arr.subList(0, arr.size()\
    \ - 1).forEach((element) -> {\n            if (element > maxNum) {\n         \
    \       maxNum = element;\n            }\n        });\n        Collections.sort(list);\n\
    \        return list;", "        ArrayList<Long> maxArr = new ArrayList<Long>(arr.size());\n\
    \        Collections.sort(arr);\n        long max = arr.get(arr.size() - 1);\n\
    \        for(int i=0; i<arr.size(); i++){\n            if(i+k > arr.size()){\n\
    \                maxArr.add(max);\n                break;\n            }\n   \
    \         if(arr.get(i) > max){\n                max = arr.get(i);\n         \
    \   }\n        }\n        return maxArr;", "        if (k == 1) {\n          \
    \  return arr;\n        } else {\n            long l = arr.get(0);\n         \
    \   ArrayList<Long> maximums = new ArrayList<>(k);\n            for (int i = 1;\
    \ i < k; i++) {\n                if (arr.get(i) > l) {\n                    l\
    \ = arr.get(i);\n                    maximums.clear();\n                }\n  \
    \              maximums.add(arr.get(i));\n            }\n            return maximums;\n\
    \        }", "        ArrayList<Long> result = new ArrayList<>();\n        arr.stream().sorted().filter(x\
    \ -> x >= 0).forEach(x -> result.add(x));\n        if (result.size() > k) {\n\
    \            return result.stream().limit(k).collect(Collectors.toList());\n \
    \       } else {\n            return result;\n        }", "        // Complete\
    \ the function below.\n        if (arr.size() < k) return arr;\n        arr.sort(Comparator.comparingLong(l\
    \ -> -l));\n        return arr.subList(arr.size() - k, arr.size());", "      \
    \  ArrayList<Long> arrList = new ArrayList<>();\n        arr.stream().forEach((num)\
    \ -> {\n            Collections.sort(arrList, (num1, num2) -> {\n            \
    \    if (num2 > num1) {\n                    return num2;\n                } else\
    \ if (num2 != num1) {\n                    return num1;\n                } else\
    \ {\n                    return num2;\n                }\n            });\n  \
    \      });\n        int length = arrList.size();\n        for (int i = 0; i <\
    \ length; i++){\n            if (k == arrList.get(i)) {\n                arrList.remove(i);\n\
    \            }\n        }\n        return arrList;", '        return Arrays.stream(new
    Integer[k]).map(i -> new Long(arr.get(i)).compareTo(new Long(arr.get(i+1))) >
    0 ? arr.get(i) : arr.get(i+1)).sorted().limit(k).toArrayList();', "        if\
    \ (arr.size() < 1 || k > arr.size()) {\n            return null;\n        }\n\n\
    \        if (arr.size() == 1) {\n            ArrayList<Long> result = new ArrayList<>();\n\
    \            result.add(arr.get(0));\n            return result;\n        }\n\n\
    \        long low = 0;\n        long high = arr.size() - 1;\n\n        while (low\
    \ <= high) {\n            long mid = low + ((high - low) / 2);\n\n           \
    \ if (arr.get(mid) > k) {\n                low = mid + 1;\n            } else\
    \ if (arr.get(mid) < k) {\n                high = mid - 1;\n            } else\
    \ {\n                ArrayList<Long> result = new ArrayList<>();\n           \
    \     result.add(arr.get(mid));\n                return result;\n            }\n\
    \        }\n\n        return null;", "        int count = 0;\n        ArrayList<Long>\
    \ res = new ArrayList<Long>();\n        Collections.sort(arr);\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            if (count == k) {\n             \
    \   res.add(arr.get(i));\n                count++;\n            }\n          \
    \  else if (count < k) {\n                res.add(arr.get(i));\n             \
    \   count++;\n            }\n        }\n        return res;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        int len = arr.size();\n        long\
    \ max = Long.MIN_VALUE;\n        for(long i: arr){\n            if(max < i) max\
    \ = i;\n        }\n        long tempMax = max;\n        int count = 0;\n     \
    \   while(tempMax > 0){\n            count++;\n            tempMax = tempMax %\
    \ 10;\n        }\n        System.out.println(count);\n        for(int i = 0; i\
    \ < count - 1; i++){\n            long tempSum = 0;\n            for(long j =\
    \ 1; j < len; j++){\n                tempSum = tempSum + (long) arr.get(j) * (long)\
    \ Math.pow(10, i);\n            }\n            long tempSumMax = tempSum / 10;\n\
    \            result.add(tempSumMax);\n        }\n        System.out.println(result);\n\
    \        return result;", "        int count = 0;\n        for (int i = 0; i <\
    \ arr.size(); i++) {\n            long currentMax = arr.get(i);\n            int\
    \ count2 = 0;\n            for (int j = i + 1; j < arr.size(); j++) {\n      \
    \          if (currentMax < arr.get(j)) {\n                    currentMax = arr.get(j);\n\
    \                    count2++;\n                }\n            }\n           \
    \ if (count2 == k) {\n                arr.add(currentMax);\n                count++;\n\
    \            }\n        }\n        return arr;", "        // Do not write main()\
    \ function.\n        // Do not read input, instead use the arguments to the function.\n\
    \        // Do not print the output, instead return values to the caller.\n\n\
    \        // Write your code here\n        ArrayList<Long> arr2 = new ArrayList<>();\n\
    \n        Collections.sort(arr);\n\n        arr2 = arr.subList(0, k);\n\n    \
    \    return arr2;", "        ArrayList<Long> result = new ArrayList<>();\n\n \
    \       for (long i : arr) {\n            while (result.size() < k) {\n      \
    \          if (!result.contains(i))\n                    result.add(i);\n    \
    \            else\n                    break;\n            }\n        }\n\n  \
    \      return result;", "        if (k <= 0) {\n            return new ArrayList<>(arr);\n\
    \        }\n        long[] result = new long[k];\n        Arrays.sort(arr);\n\
    \        long maxNum = arr.get(arr.size() - 1);\n        int j = 0;\n        for\
    \ (int i = 0; i < arr.size() - 1; i++) {\n            if (i == arr.size() - 1)\
    \ {\n                result[j] = maxNum;\n            } else {\n             \
    \   if (maxNum < arr.get(i)) {\n                    maxNum = arr.get(i);\n   \
    \                 j = i;\n                }\n            }\n        }\n      \
    \  return Arrays.asList(result);", "        int n = arr.size();\n        ArrayList\
    \ <Long> results = new ArrayList<Long>();\n        Arrays.sort(arr.toArray());\n\
    \        for (int i = 0 ; i < n - k ; i++){\n            Long value = arr.get(i);\n\
    \            results.add(value);\n        }\n        return results;", "     \
    \   if (arr.size() == 0) {\n            return new ArrayList<>();\n        }\n\
    \        ArrayList<Long> res = new ArrayList<>(k);\n        long maxValue = 0;\n\
    \        for (Long i : arr) {\n            if (i > maxValue) {\n             \
    \   maxValue = i;\n            }\n        }\n        for (Long i : arr) {\n  \
    \          if (i > maxValue) {\n                res.add(i);\n            }\n \
    \       }\n        Collections.sort(res);\n        return res;", "        if (arr.size()\
    \ == 0) {\n            return new ArrayList<Long>();\n        }\n        if (k\
    \ == 0) {\n            return arr;\n        }\n        ArrayList<Long> m = new\
    \ ArrayList<Long>();\n        int i = 0;\n        long max = arr.get(0); // find\
    \ max value\n        while (i < arr.size()) {\n            max = Math.max(max,\
    \ arr.get(i));\n            if (max >= k) {\n                m.add(max);\n   \
    \         }\n            i++;\n        }\n        return m;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        int len = arr.size();\n        PriorityQueue<Long>\
    \ maxHeap = new PriorityQueue<>(k);\n        for(long e : arr)\n            maxHeap.offer(e);\n\
    \        while(!maxHeap.isEmpty()) {\n            long e = maxHeap.poll();\n \
    \           int pos = (int) e;\n            result.add(e);\n            if(pos\
    \ < len-1)\n                maxHeap.offer(arr[pos+1]);\n            else\n   \
    \             maxHeap.poll();\n        }\n        return result;", "        //\
    \ write your code here\n        long max = 0;\n        ArrayList<Long> res = new\
    \ ArrayList<>();\n        for(long i = 0; i < arr.size(); i++){\n            max\
    \ = Math.max(max, arr.get(i));\n        }\n        res.add(max);\n        for(int\
    \ i = 0; i < arr.size(); i++){\n            if((max != 0) && arr.get(i) > max){\n\
    \                res.add(arr.get(i));\n            }\n        }\n        return\
    \ res;", "        if (arr.isEmpty())\n            return arr;\n        Map<Long,\
    \ Long> memo = new TreeMap<Long, Long>();\n        ArrayList<Long> max = new ArrayList<>();\n\
    \        for (long e : arr)\n            memo.put(e, memo.getOrDefault(e, 0) +\
    \ 1);\n        for (long e : memo.keySet()) {\n            if (memo.get(e) > k)\n\
    \                max.add(e);\n        }\n        return max;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>(k);\n        Map<Long, Long> map = new HashMap<>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            map.put(arr.get(i),\
    \ i);\n        }\n        for (Map.Entry<Long, Long> entry : map.entrySet()) {\n\
    \            int index = entry.getValue();\n            if (index >= arr.size())\
    \ {\n                index = arr.size() - 1;\n            }\n            ArrayList<Long>\
    \ subArrList = new ArrayList<Long>();\n            for (int i = 0; i < arr.size();\
    \ i++) {\n                if (i == index) {\n                    subArrList.add(arr.get(i));\n\
    \                } else {\n                    subArrList.add(0);\n          \
    \      }\n            }\n            Collections.sort(subArrList, Long::compareTo);\n\
    \            for (int i = 0; i < subArrList.size(); i++) {\n                result.add(subArrList.get(i));\n\
    \            }\n        }\n        return result;", "        arr.sort(new Comparator<Long>()\
    \ {\n            @Override\n            public int compare(Long o1, Long o2) {\n\
    \                long n1 = Math.abs(o1);\n                long n2 = Math.abs(o2);\n\
    \                if (n1 < n2) {\n                    return -1;\n            \
    \    }\n                if (n1 > n2) {\n                    return 1;\n      \
    \          }\n                return 0;\n            }\n        });\n\n      \
    \  ArrayList<Long> reminder = new ArrayList<>(k);\n        for (Long element :\
    \ arr) {\n            reminder.add(element % k);\n        }\n        return reminder;",
  "        int m = arr.size();\n        int n = k;\n        int index = 0;\n     \
    \   ArrayList<Long> result = new ArrayList<Long>();\n        long max = arr.get(0);\n\
    \        long maxNum = max;\n\n        if (m < n) {\n            System.out.println(\"\
    Not the correct size\");\n            System.out.println(\"m is \" + m + \" n\
    \ is \" + n);\n            return result;\n        }\n\n        for (int i = 0;\
    \ i < n; i++) {\n            max = arr.get(index);\n            index += 1;\n\n\
    \            while (index >= m) index -= 1;\n            if (max > maxNum) {\n\
    \                maxNum = max;\n            }\n            result.add(maxNum);\n\
    \        }\n        return result;", "        List<Long> res = new ArrayList<Long>(k);\n\
    \        Arrays.sort(arr, (a, b) -> Long.compare(b, a));\n        if (arr.get(arr.size()\
    \ - 1) == k) arr.remove(arr.size() - 1);\n        for (int i = 0; i < arr.size();\
    \ i++)\n            if (arr.get(i) == k) res.add(0, arr.get(i));\n           \
    \ else res.add(arr.get(i));\n        if (res.size() >= k) res.remove(0);\n   \
    \     return res;", "        ArrayList<Long> resultList = new ArrayList<>(k);\n\
    \        Set<Long> set = new HashSet<>(arr.size());\n        Long max = null;\n\
    \        Long maxValue = null;\n        for (long element : arr) {\n         \
    \   if (set.contains(element)) {\n                if (max == null) {\n       \
    \             max = element;\n                    maxValue = element;\n      \
    \          } else {\n                    if (maxValue < element) {\n         \
    \               max = element;\n                        maxValue = element;\n\
    \                    } else if (maxValue == element) {\n                     \
    \   maxValue = max;\n                    }\n                }\n            } else\
    \ {\n                set.add(-element);\n            }\n        }\n        int\
    \ maxPosition = -1;\n        for (long element : arr) {\n            if (set.contains(element))\
    \ {\n                if (maxPosition == -1) {\n                    maxPosition\
    \ = set.indexOf(element);\n                } else {\n                    if (set.indexOf(element)\
    \ > maxPosition) {\n                        maxPosition = set.indexOf(element);\n\
    \                    }\n                }\n            } else {\n            \
    \    set.add(-element);\n            }\n        }\n        for (int i = 0; i <\
    \ k; i++) {\n            if (set.contains(-i)) {\n                resultList.add(set.get(-i));\n\
    \            } else {\n                resultList.add(max);\n            }\n \
    \       }\n        return resultList;", "        if (arr == null) {\n        \
    \    throw new IllegalArgumentException();\n        }\n        Arrays.sort(arr);\n\
    \        return arr.subList(0, Math.min(k, arr.size()));", "        if (arr.size()\
    \ <= k)\n            return arr;\n        ArrayList<Long> result = new ArrayList<>(arr.size());\n\
    \        long max = arr.get(0);\n        for (int i = 1; i < k; i++) {\n     \
    \       if (max < arr.get(i))\n                max = arr.get(i);\n        }\n\
    \        Collections.sort(arr);\n        int i = k - 1;\n        while (i-- >\
    \ 0 && max < arr.get(i))\n            max = Math.max(max, arr.get(i));\n     \
    \   while (i++ < arr.size() && max > arr.get(i))\n            max = Math.max(max,\
    \ arr.get(i));\n        for (int j = i; j < arr.size(); j++) {\n            if\
    \ (max < arr.get(j))\n                max = arr.get(j);\n        }\n        int\
    \ j = 0;\n        for (int k = 0; k < arr.size(); k++)\n            result.add(arr.get(j++));\n\
    \        return result;", "        ArrayList<Long> ret = new ArrayList<Long>(arr.size());\n\
    \        Collections.sort(arr);\n        ret.addAll(arr);\n        if (k <= 0)\
    \ {\n            return ret;\n        } else if (k > arr.size()) {\n         \
    \   return ret;\n        }\n        ret.remove(ret.size() - k);\n        Collections.sort(ret);\n\
    \        return ret;", "        if (k > arr.size())\n            return arr;\n\
    \        // sort arr\n        Collections.sort(arr);\n        // if k == arr.size()\
    \ then return arr\n        if (k == arr.size())\n            return arr;\n   \
    \     ArrayList<Long> maximums = new ArrayList<Long>();\n        // find maximums\n\
    \        for (Long x : arr) {\n            if (maximums.size() < k)\n        \
    \        maximums.add(x);\n            else\n                if (maximums.size()\
    \ == k)\n                    maximums.set(maximums.size() - 1, x);\n         \
    \       else\n                    if (x > maximums.get(maximums.size() - 1))\n\
    \                        maximums.set(maximums.size() - 1, x);\n        }\n  \
    \      return maximums;", "        boolean ok = k <= arr.size();\n        ArrayList<Long>\
    \ res = new ArrayList<>();\n        if (ok) {\n            Comparator<Long> comparator\
    \ = Comparator.comparingLong(o -> -(-o));\n            Collections.sort(arr, comparator);\n\
    \            int start = 0;\n            int end = arr.size() - k;\n         \
    \   while (start < end) {\n                res.add(arr.get(start++));\n      \
    \      }\n        }\n        return res;", "        long max = 0;\n        if\
    \ (arr.isEmpty()) {\n            return arr;\n        }\n        Long current\
    \ = arr.get(0);\n        for (long i : arr) {\n            max = Math.max(max,\
    \ i);\n            if (max >= k) {\n                arr.add(max);\n          \
    \  }\n        }\n        arr = arr.subList(0, k);\n        return arr;", "   \
    \     ArrayList<Long> ans = new ArrayList<Long>();\n        ArrayList<Long> sorted\
    \ = arr.stream().sorted(Comparator.comparing(Long::longValue)).collect(Collectors.toCollection(ArrayList::new));\n\
    \        int minLen = sorted.size();\n        if (k <= minLen) {\n           \
    \ return ans;\n        }\n        ArrayList<Long> max = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < minLen; i++) {\n            if (k == sorted.size()) {\n                break;\n\
    \            }\n            if (k > 0 && k > i) {\n                max.add(sorted.get(i));\n\
    \            } else {\n                if (sorted.get(i) > sorted.get(i - 1))\
    \ {\n                    max.add(sorted.get(i));\n                    temp.add(sorted.get(i\
    \ - 1));\n                }\n            }\n        }\n        ans.addAll(max);\n\
    \        ans.addAll(temp);\n        return ans;", "        int n = arr.size();\n\
    \        if (n <= 1) return arr;\n        Map<Integer, Long> map = new HashMap<>();\n\
    \        ArrayList<Long> result = new ArrayList<Long>();\n        int j = 0;\n\
    \        for (int i = 0; i < n; i++) {\n            map.put(i, arr.get(i));\n\
    \            while (j < k && map.containsKey(j)) {\n                result.add(map.get(j++));\n\
    \            }\n        }\n        while (j < k) {\n            result.add(map.get(j++));\n\
    \        }\n        return result;", "        int len = arr.size();\n        ArrayList<Long>\
    \ res = new ArrayList<>();\n        for(int i = 0; i<len; i+=k) {\n          \
    \  Long[] a = new Long[k];\n            for(int j = 0; j < k; j++){\n        \
    \        a[j] = arr.get(i+j);\n            }\n            Collections.sort(a);\n\
    \            res.addAll(a);\n        }\n        return res;", "        long result[]\
    \ = new long[k];\n        for (int i = 0; i < k; i++) {\n            result[i]\
    \ = Collections.max(arr);\n            arr.remove(Collections.max(arr));\n   \
    \     }\n        return new ArrayList<Long>(Arrays.asList(result));", "      \
    \  ArrayList<Long> res = new ArrayList<Long>();\n        Collections.sort(arr);\n\
    \        long i = 0;\n        for ( ; i < arr.size(); i++ ) {\n            if\
    \ ( k >= res.size() ) break;\n            if ( arr.get(i) > res.get(k) ) break;\n\
    \            res.add(arr.get(i));\n            k++;\n        }\n        return\
    \ res;", "        ArrayList<Long> res = new ArrayList<>();\n        Collections.sort(arr);\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (i >= k && res.size()\
    \ > 0) {\n                break;\n            }\n            res.add(arr.get(i));\n\
    \        }\n        return res;", "        if (arr.size() < k) throw new RuntimeException(\"\
    k is out of range\");\n        int len = arr.size();\n        ArrayList<Long>\
    \ max = new ArrayList<>();\n        long maxVal = arr.get(0);\n        for (int\
    \ i = 1; i < len; i++) {\n            if (arr.get(i) > maxVal) {\n           \
    \     maxVal = arr.get(i);\n                max.clear();\n                max\
    \ = arr;\n            }\n            if (arr.get(i) == maxVal && max.size() <\
    \ k) {\n                max.add(arr.get(i));\n            }\n        }\n     \
    \   if (max.size() < k) {\n            max = arr.subList(0, k);\n        }\n \
    \       return max;", "        if (arr.size() <= k) return arr;\n        ArrayList<Long>\
    \ max = new ArrayList<Long>();\n        long max = arr.get(0);\n        for (Long\
    \ i : arr) {\n            if (i > max) {\n                max = i;\n         \
    \   }\n        }\n        max.set(0);\n        return maximum(new ArrayList<Long>(Arrays.asList((long)max)),\
    \ k - 1);", "        ArrayList<Long> list = new ArrayList<Long>();\n        //\
    \ sort the array list from biggest to smallest\n        Collections.sort(arr);\n\
    \        \n        // check k is within bounds\n        if(k <= 0) {\n       \
    \     return list;\n        } else if(k >= arr.size()) {\n            return list;\n\
    \        }\n\n        // get the index position of k\n        long kIndex = arr.indexOf(Math.min(k,\
    \ arr.size() - 1));\n\n        // loop through the array list\n        for(long\
    \ i = arr.size() - k; i < arr.size(); i++) {\n            // add the max number\
    \ in list\n            list.add(arr.get(i));\n        }\n        return list;",
  "        Collections.sort(arr);\n        return arr.subList(0, k);", "        final\
    \ ArrayList<Long> result = new ArrayList<>(k);\n        final Collections.sort(arr,\
    \ new Comparator<Long>() {\n            public int compare(Long o1, Long o2) {\n\
    \                return o1.compareTo(o2);\n            }\n        });\n      \
    \  for (int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n      \
    \  }\n        return result;", "        final long MOD = (long)1e9 + 7;\n    \
    \    final ArrayList<Long> result = new ArrayList<Long>(k);\n        if (arr.size()\
    \ <= k) {\n            System.out.println(\"the length of the array list will\
    \ be in the range of [1, 1000].\");\n        }\n        long max = Long.MIN_VALUE,\
    \ cur = Long.MIN_VALUE;\n        for (long i = 0; i < arr.size(); i++) {\n   \
    \         if (arr.get(i) > max) {\n                max = arr.get(i);\n       \
    \     }\n            if (arr.get(i) > cur) {\n                cur = arr.get(i);\n\
    \            }\n        }\n        long l = max;\n        for (long i = 0; i <\
    \ arr.size(); i++) {\n            if (arr.get(i) > l) {\n                l = arr.get(i);\n\
    \            }\n        }\n        if (cur > l) {\n            result.add(l);\n\
    \        }\n        int left = 0;\n        int right = 0;\n        int middle\
    \ = (int) Math.floor((arr.size() / 2) + 1);\n        while (left < arr.size()\
    \ && right < arr.size()) {\n            if (max < arr.get(middle)) {\n       \
    \         result.add(arr.get(middle));\n                middle++;\n          \
    \  }\n            if (max > arr.get(right)) {\n                result.add(arr.get(right));\n\
    \                right++;\n            }\n            if (max < arr.get(left))\
    \ {\n                result.add(arr.get(left));\n                left++;\n   \
    \         }\n        }\n        while (left < arr.size()) {\n            result.add(arr.get(left));\n\
    \            left++;\n        }\n        while (right < arr.size()) {\n      \
    \      result.add(arr.get(right));\n            right++;\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<>();\n        int\
    \ max = 0;\n        long largest = arr.get(0);\n\n        for (long elem : arr)\
    \ {\n            if (elem > largest) {\n                max = arr.size() - 1;\n\
    \                largest = elem;\n            } else if (elem == largest) {\n\
    \                max = max + 1;\n            }\n        }\n\n        for (int\
    \ i = 0; i < k; i++) {\n            result.add(arr.get(max + i));\n        }\n\
    \        return result;", "        long[] nums = arr.stream().mapToLong(Long::longValue).toArray();\n\
    \        Arrays.sort(nums);\n        Arrays.stream(nums).limit(k).forEach(System.out::println);\n\
    \        return new ArrayList<>(nums);", "        ArrayList<Long> ans = new ArrayList<>();\n\
    \        // get all the numbers in arr\n        List<Long> numbers = arr.stream().sorted().collect(Collectors.toList());\n\
    \        // get the maximum k numbers\n        numbers = numbers.stream().limit(k).collect(Collectors.toList());\n\
    \        // add the numbers to the answer\n        ans.addAll(numbers);\n    \
    \    return ans;", "        long maxValue = -1l;\n        int maxCount = 0;\n\
    \        int index = 0;\n        for(int i = 0; i < arr.size(); i++) {\n     \
    \       long currValue = arr.get(i);\n            for(int j = i + 1; j < arr.size();\
    \ j++) {\n                long nextValue = arr.get(j);\n                if(currValue\
    \ < nextValue) {\n                    break;\n                }\n            }\n\
    \            if(currValue > maxValue) {\n                maxValue = currValue;\n\
    \                maxCount = i;\n            }\n        }\n        ArrayList<Long>\
    \ sortedArr = new ArrayList<>();\n        while(maxCount > 0 && maxCount < k)\
    \ {\n            sortedArr.add(arr.get(maxCount));\n            arr.remove(maxCount);\n\
    \            maxCount++;\n        }\n        return sortedArr;", "        if (arr\
    \ == null || arr.isEmpty() || k <= 0 || arr.size() < 1 || k >= arr.size())\n \
    \           return new ArrayList<Long>();\n        if (arr.get(k) == null || arr.get(k).longValue()\
    \ > k)\n            return maximum(arr, k + 1);\n        else if (arr.get(k).longValue()\
    \ < k)\n            return maximum(arr, k);\n        else if (arr.get(k).longValue()\
    \ == k)\n            return new ArrayList<Long>(arr);\n        else\n        \
    \    return maximum(arr, k);", "        \n        if (arr.isEmpty()) {\n     \
    \       return arr;\n        }\n        \n        // Find the max number\n   \
    \     long max = 0;\n        long maxNumber = 0;\n        for (long i : arr) {\n\
    \            max = Math.max(i, max);\n            max = Math.max(maxNumber, max);\n\
    \            maxNumber = max;\n        }\n        \n        // Find the k max\
    \ number\n        int maxIndex = 0;\n        int count = 1;\n        boolean isMax\
    \ = true;\n        for(int i = arr.size()-1; i >= 0; i--) {\n            int count\
    \ = 0;\n            for(int j = 0; j < i; j++) {\n                long number\
    \ = arr.get(j);\n                long current = arr.get(i);\n                \n\
    \                if(count == k) {\n                    isMax = false;\n      \
    \              break;\n                } else if (number > current) {\n      \
    \              break;\n                } else {\n                    count++;\n\
    \                }\n            }\n            if(isMax) {\n                maxIndex\
    \ = i;\n                maxNumber = arr.get(maxIndex);\n                break;\n\
    \            }\n        }\n        \n        // Sort the array list\n        ArrayList<Long>\
    \ res = new ArrayList<>();\n        for(int i = 0; i < arr.size(); i++) {\n  \
    \          if (i != maxIndex) {\n                res.add(arr.get(i));\n      \
    \      }\n        }\n        \n        return res;", "        ArrayList<Long>\
    \ max = new ArrayList<Long>();\n        if (arr.isEmpty()) {\n            return\
    \ max;\n        }\n        Comparator<Long> cmp = Comparator.comparingLong(Long::longValue);\n\
    \        Long maxElem = null;\n        int index = 0;\n        for (long element\
    \ : arr) {\n            if (maxElem == null || cmp.compare(element, maxElem) <\
    \ 0) {\n                maxElem = element;\n                index = 0;\n     \
    \       } else if (cmp.compare(element, maxElem) == 0) {\n                index++;\n\
    \            }\n            if (index == k) {\n                max.add(maxElem);\n\
    \                index = 0;\n                maxElem = null;\n            }\n\
    \        }\n        return max;", "        Collections.sort(arr);\n        int\
    \ len = arr.size();\n        if (k < 0 || k >= len) {\n            return new\
    \ ArrayList<Long>();\n        }\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        for (int i = 0; i < k; i++) {\n            res.add(arr.get(i));\n   \
    \     }\n        return res;", "        // write your code here\n        ArrayList<Long>\
    \ max = new ArrayList<>();\n        long biggestNum = arr.get(0);\n        long\
    \ smallestNum = arr.get(0);\n\n        for (int i = 1; i < arr.size(); i++) {\n\
    \            long curr = arr.get(i);\n            if (biggestNum < curr) {\n \
    \               biggestNum = curr;\n            } else if (smallestNum > curr)\
    \ {\n                smallestNum = curr;\n            }\n        }\n\n       \
    \ if (biggestNum == k) {\n            max.add(0, biggestNum);\n        } else\
    \ if (k == smallestNum) {\n            max.add(0, smallestNum);\n        } else\
    \ {\n            for (int i = 1; i < arr.size(); i++) {\n                long\
    \ curr = arr.get(i);\n                if (k == biggestNum) {\n               \
    \     max.add(0, curr);\n                } else if (k == smallestNum) {\n    \
    \                max.add(0, curr);\n                } else {\n               \
    \     if (k > curr) {\n                        max.add(0, curr);\n           \
    \         } else if (k < curr) {\n                        max.add(0, k);\n   \
    \                 }\n                }\n            }\n        }\n        return\
    \ max;", "        ArrayList<Long> res = new ArrayList<Long>();\n        if (k\
    \ == 1) {\n            long max = Collections.max(arr);\n            res.add(max);\n\
    \            return res;\n        }\n        if (arr.isEmpty() || k < 1 || k >=\
    \ arr.size()) {\n            return res;\n        }\n        ArrayList<Long> arr2\
    \ = new ArrayList<Long>(Arrays.asList(arr.subList(0, k)));\n        if (k > arr2.size())\
    \ {\n            arr2.addAll(Arrays.asList(arr.subList(arr.size() - k, arr.size())));\n\
    \        }\n        ArrayList<Long> arr3 = maximum(arr2, k - 1);\n        List<Long>\
    \ re = arr3.stream().map(x -> ((Long)x).longValue()).collect(Collectors.toList());\n\
    \        Collections.sort(re);\n        return res.addAll(re);", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if(k > arr.size())\n            return\
    \ result;\n        else if(k == arr.size())\n            k = arr.size() - 1;\n\
    \        ArrayList<Long> first = new ArrayList<>();\n        ArrayList<Long> second\
    \ = new ArrayList<>();\n        Arrays.asList(arr).stream().sorted(Comparator.comparingLong(a\
    \ -> (long)a)).limit(k).forEach(a -> {\n            if((first.isEmpty() || a >\
    \ first.get(first.size() - 1)) && !first.isEmpty())\n                result.add((first.get(first.size()\
    \ - 1)));\n            first.add(a);\n        });\n        for(int i = 0; i <\
    \ k - second.size(); i++)\n            result.add((first.get(0) - second.get(0)));\n\
    \        return result;", "        if(k>arr.size())\n            throw new RuntimeException(\"\
    k cannot be greater than length of array\");\n        ArrayList<Long> result =\
    \ new ArrayList<>(k);\n        Collections.sort(arr);\n        for(int i=0; i<k;\
    \ i++){\n            result.add(arr.get(i));\n        }\n        return result;",
  "        int size = arr.size();\n        if (size == 0)\n            return arr;\n\
    \        \n        if (size <= 1)\n            return arr;\n        \n       \
    \ if (k >= size) \n            return arr;\n        \n        \n        ArrayList<Long>\
    \ res = new ArrayList<>(size);\n        \n        \n        // sort arr in descending\
    \ order\n        Arrays.sort(arr, (o1, o2) -> {\n            int v1 = o1.longValue();\n\
    \            int v2 = o2.longValue();\n            \n            return (v1 >\
    \ v2) ? 1 : ((v1 < v2) ? -1 : 0); \n        });\n        \n        long curVal\
    \ = arr.get(0).longValue();\n        \n        // remove first element from arr\n\
    \        arr.remove(0);\n        \n        \n        // loop through the array\
    \ arr to find the maximum k elements\n        for (int i = 0; i < size - 1; i++)\
    \ {\n            long curElem = arr.get(i).longValue();\n            \n      \
    \      // if the number of elements in the array arr are greater than or equal\
    \ to k\n            if (curVal + 1 > (curElem + k)) {\n                res.add(curElem);\n\
    \                curVal = curElem;\n            }\n        }\n        \n     \
    \   return res;", "        if (arr.size() < 1 || arr.size() > (long)1000 || k\
    \ < 0 || k > (long)arr.size()) return (ArrayList<Long>)null;\n        if (arr.size()\
    \ == 1) return arr;\n\n        boolean swap = false;\n        ArrayList<Long>\
    \ maxList = new ArrayList<Long>(arr.size());\n\n        for (int i = 1; i < k;\
    \ i++) {\n            if (arr.get(i) > arr.get(i-1)) {\n                swap =\
    \ true;\n            }\n        }\n        if (swap) {\n            Collections.sort(arr);\n\
    \            maxList.add(arr.get(0));\n            for (int i = 1; i < arr.size();\
    \ i++) {\n                maxList.add(arr.get(i));\n            }\n        } else\
    \ {\n            Collections.sort(arr);\n            maxList.add(arr.get(arr.size()-1));\n\
    \            for (int i = arr.size()-2; i >= 0; i--) {\n                maxList.add(arr.get(i));\n\
    \            }\n        }\n        return maxList;", "        // Your code here\n\
    \        return arr;", "        if (arr.size() <= k)\n            return arr;\n\
    \        if (arr.size() < k)\n            throw new IllegalArgumentException(\"\
    The length of the array must be greater than or equal to the length of k.\");\n\
    \        if (k < 0)\n            throw new IllegalArgumentException(\"The value\
    \ of k must be greater than 0.\");\n\n        long max = 0;\n        int i = 0;\n\
    \        while (i < arr.size() && max < arr.get(i))\n            max = Math.max(max,\
    \ arr.get(i));\n        int j = arr.size() - 1;\n        while (i >= 0 && j >=\
    \ 0 && max < arr.get(j))\n            max = Math.max(max, arr.get(j));\n     \
    \   if (max < k)\n            throw new IllegalArgumentException(\"The maximum\
    \ value cannot be less than the value of k.\");\n        if (k > arr.size())\n\
    \            throw new IllegalArgumentException(\"The length of array must be\
    \ greater than or equal to the value of k.\");\n        ArrayList<Long> result\
    \ = new ArrayList<Long>(arr.size());\n        while (i < arr.size() && max < arr.get(i))\n\
    \            result.add(arr.get(i++));\n        while (i >= 0 && max < arr.get(i))\n\
    \            result.remove(0);\n        ArrayList<Long> rresult = new ArrayList<Long>(arr.size());\n\
    \        if (k == result.size())\n            rresult = arr;\n        else\n \
    \           for (long i = 0; i < k; i++)\n                rresult.add(result.get(i));\n\
    \        return rresult;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        for (long element : arr) {\n            if (result.size() <= k)\n   \
    \             result.add(element);\n            else if (result.size() > k)\n\
    \                result.remove(result.get((result.size() - 1) - 1));\n       \
    \ }\n        return result;", "        long largest = arr.get(0);\n        ArrayList<Long>\
    \ result = new ArrayList<>(k);\n        for (long i : arr) {\n            if (largest\
    \ < i) {\n                largest = i;\n            }\n        }\n        result.add(0,\
    \ largest);\n        return result;", "        ArrayList<Long> max = new ArrayList<Long>();\n\
    \        if (arr.size() == 0 || k <= 0 || k > arr.size()) {\n            return\
    \ max;\n        }\n        Arrays.sort(arr);\n        for (long num : arr) {\n\
    \            if (max.size() < k) {\n                max.add(num);\n          \
    \  } else if (num > max.get(k - 1)) {\n                max.set(k - 1, num);\n\
    \            }\n        }\n        return max;", "        if (arr.isEmpty() ||\
    \ k <= 0) {\n            return arr;\n        }\n        ArrayList<Long> res =\
    \ new ArrayList<>();\n        ArrayList<Long> tmpArr = new ArrayList<>();\n  \
    \      List<Long> list = arr.stream().collect(Collectors.toList());\n        tmpArr.add(list.get(0));\n\
    \        int startIndex = 1;\n        for (int i = startIndex; i < list.size();\
    \ i++) {\n            long curr = list.get(i);\n            if (curr > tmpArr.get(tmpArr.size()\
    \ - 1)) {\n                tmpArr.add(curr);\n                if (tmpArr.size()\
    \ > k) {\n                    for (int j = k - 1; j > tmpArr.size() - 1; j --)\
    \ {\n                        res.add(tmpArr.get(j));\n                    }\n\
    \                    tmpArr.clear();\n                }\n            } else {\n\
    \                for (int j = tmpArr.size() - 1; j > 0; j --) {\n            \
    \        if (tmpArr.get(j) == curr) {\n                        res.add(tmpArr.get(j));\n\
    \                        tmpArr.remove(j);\n                    }\n          \
    \      }\n                tmpArr.add(curr);\n            }\n        }\n      \
    \  if (tmpArr.size() > k) {\n            for (int j = 0; j < k - tmpArr.size();\
    \ j++) {\n                res.add(tmpArr.get(j));\n            }\n        }\n\
    \        return res;", "        if (k > arr.size()) return new ArrayList<Long>();\n\
    \        ArrayList<Long> ans = new ArrayList<Long>();\n        long max = 0;\n\
    \        int i = 0;\n        boolean flag = false;\n        for (long x : arr)\
    \ {\n            if (max < x) { // If current max is less than x, then we set\
    \ max\n                max = x;\n            } if (x == max) {\n             \
    \   i++;\n            } else {\n                if (i == k) {\n              \
    \      ans.add(max);\n                    i = 0; // reset the value of i for next\
    \ iteration\n                    flag = true;\n                    break;\n  \
    \              } else {\n                    ans.add(max);\n                 \
    \   i = 0; // reset the value of i for next iteration\n                }\n   \
    \         }\n        }\n        if (max == arr.size()) {\n            ans.add(max);\n\
    \            flag = true;\n        }\n        if (flag) {\n            ans.add(max);\n\
    \        }\n        return ans;", "        Arrays.sort(arr);\n        ArrayList<Long>\
    \ maximum = new ArrayList<>();\n        if (arr.size() <= k) {\n            for\
    \ (long i = 0; i < arr.size(); i++) {\n                maximum.add(arr.get(i));\n\
    \            }\n        } else {\n            int i = arr.size() - k;\n      \
    \      while (i > 0) {\n                maximum.add(arr.get(i));\n           \
    \     i -= 1;\n            }\n        }\n        return maximum;", "        Arrays.sort(arr);\n\
    \        ArrayList<Long> max = new ArrayList<>();\n        for (int i = 0; i <\
    \ k; i++) {\n            max.add(arr.get(i));\n        }\n        return max;",
  "        ArrayList <Long> result = new ArrayList <Long>();\n        for(int i=0;\
    \ i<arr.size(); i++) {\n            boolean add = false;\n            for(int\
    \ j=0; j<result.size(); j++){\n                if(arr.get(i) > result.get(j)){\n\
    \                    add = true;\n                    result.set(j, arr.get(i));\n\
    \                    break;\n                }\n            }\n            if(add)\
    \ {\n                continue;\n            }\n            result.add(0, arr.get(i));\n\
    \        }\n        for(int i=0; i<k; i++) {\n            Collections.sort(result);\n\
    \            result.add(0,Long.MIN_VALUE);\n        }\n        return result;",
  "        long ans = arr.get(0);\n        if (k <= arr.size() - 1) {\n          \
    \  long max = (long) arr.stream().max(Long::compareTo).get();\n            arr\
    \ = arr.stream().filter(i -> i <= max).collect(Collectors.toCollection(ArrayList::new));\n\
    \            ans = arr.get(0);\n        }\n        return arr;", "        if (arr.isEmpty())\
    \ {\n            return new ArrayList<Long>();\n        }\n        Arrays.sort(arr);\n\
    \        if (k > arr.size())\n            k = 0;\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        for (long i = 1; i <= k; i++) {\n        \
    \    result.add(arr.get(arr.size() - i));\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for(int i = 0;\
    \ i < arr.size(); i++) {\n            if(i == k - 1) {\n                result.add(arr.get(i));\n\
    \            } else {\n                if(arr.get(i) > arr.get(i + 1)) {\n   \
    \                 result.add(arr.get(i));\n                }\n            }\n\
    \        }\n        return result;", "        // Write your code here\n      \
    \  ArrayList<Long> results = new ArrayList<>();\n        Set<Long> set = new HashSet<>();\n\
    \        for (Long num : arr) {\n            if (set.size() == k) {\n        \
    \        results.add(set.first());\n                set.clear();\n           \
    \ }\n            if (set.size() < k) {\n                set.add(num);\n      \
    \      }\n        }\n        if (set.size() != 0) {\n            results.add(set.first());\n\
    \        }\n        return results;", "        int l1 = arr.size();\n        ArrayList<Long>\
    \ result = new ArrayList<>(k);\n        if (l1 < k) result.addAll(arr);\n    \
    \    if (k == l1) {\n            result.add(0);\n            return result;\n\
    \        }\n        int m = l1 / (k + 1) + 1;\n        int n = l1 - m * k;\n \
    \       int index = 0;\n        ArrayList<Long> arr = new ArrayList<>();\n   \
    \     arr.add(0);\n        for (int i = k + 1; i < l1 + k; i++) {\n          \
    \  if (index == m) arr.add(0);\n            if (arr.get(index) > arr.get(i)) arr.set(index,\
    \ arr.get(i));\n            arr.add(i, arr.get(i));\n            index++;\n  \
    \          if (index == n) arr.add(0);\n            if (arr.get(index) > arr.get(i))\
    \ arr.set(index, arr.get(i));\n            arr.add(i, arr.get(i));\n         \
    \   index++;\n        }\n        result.addAll(arr);\n        return result;",
  "        // write your code here\n        return null;", "        // write your\
    \ code here\n        if(arr.size() > k) {\n            return arr;\n        }\n\
    \        \n        ArrayList<Long> m = new ArrayList<Long>();\n        Collections.sort(arr);\n\
    \        \n        for(int i = 0; i < k; i++) {\n            m.add(arr.get(i));\n\
    \        }\n        \n        return m;", "        if (arr.size() < 1 || arr.size()\
    \ > 1000 || (k <= 0)) {\n            throw new IllegalArgumentException();\n \
    \       }\n        ArrayList<Long> result = new ArrayList<>();\n        Map<Long,\
    \ Long> temp = new HashMap<>();\n        for (Long t : arr) {\n            if\
    \ (temp.containsKey(t)) {\n                Long last = temp.get(t);\n        \
    \        if (last.compareTo(arr.get(t)) > 0) {\n                    temp.put(t,\
    \ last);\n                    result.add(last);\n                }\n         \
    \   } else {\n                temp.put(t, t);\n                result.add(t);\n\
    \            }\n        }\n        result.addAll(temp.entrySet().stream().sorted(Map.Entry.<Long,\
    \ Long>comparingByValue().reversed()).limit(Math.max(0, k)).collect(Collectors.toList()));\n\
    \        return result;", "        if (arr.isEmpty() || k <= 0) {\n          \
    \  return arr;\n        }\n        if (arr.size() <= k) {\n            return\
    \ arr;\n        }\n        final int[] intArr = new int[k];\n        final int[]\
    \ intArr2 = new int[arr.size()];\n        final int intArrLen = intArr.length;\n\
    \        int j = arr.size() - 1;\n        int i = 0;\n        int l = arr.size();\n\
    \        while (i < intArrLen && j >= 0) {\n            if (arr.get(i) < arr.get(j))\
    \ {\n                intArr[i] = arr.get(i);\n                i++;\n         \
    \   } else {\n                intArr[i] = arr.get(j);\n                j--;\n\
    \            }\n            i++;\n            j--;\n        }\n        while (i\
    \ < intArrLen) {\n            intArr[i] = arr.get(i);\n            i++;\n    \
    \    }\n        i = intArrLen - 1;\n        while (i >= 0 && intArr[i] <= 0) {\n\
    \            intArr[i] = arr.get(i);\n            i--;\n        }\n        boolean\
    \ flag = true;\n        int temp = intArrLen - 1;\n        while (true) {\n  \
    \          if (intArr[temp] < 0) {\n                intArr[temp] = 0;\n      \
    \          flag = false;\n            } else {\n                break;\n     \
    \       }\n            temp--;\n        }\n        while (temp > 0 && intArr[temp]\
    \ == 0) {\n            intArr[temp] = 0;\n            temp--;\n        }\n   \
    \     while (flag) {\n            if (intArr[i] < intArr[temp]) {\n          \
    \      intArr[i] = intArr[temp];\n                i++;\n            } else {\n\
    \                intArr[i] = intArr[temp];\n                temp--;\n        \
    \    }\n            i--;\n        }\n        Arrays.sort(intArr);\n        ArrayList<Long>\
    \ result = new ArrayList<Long>(intArr.length);\n        for (int j = 0; j < intArr.length;\
    \ j++) {\n            result.add(new Long(intArr[j]));\n        }\n        return\
    \ result;", "        if (arr.isEmpty())\n            return new ArrayList<>();\n\
    \        if (arr.size() == 1 || arr.size() == k || arr.size() <= k)\n        \
    \    return arr;\n\n        ArrayList<Long> largest = new ArrayList<>();\n   \
    \     Long max = Collections.max(arr);\n        largest.add(max);\n        arr\
    \ = arr.stream().filter(e -> e != max).collect(Collectors.toCollection(() -> new\
    \ ArrayList<Long>()));\n        largest = maximum(largest, k);\n        if (arr.isEmpty())\n\
    \            return largest;\n        largest.add(max);\n        return largest;",
  "        if (arr.isEmpty() || k > arr.size()) {\n            return arr;\n     \
    \   }\n        Long[] a = new Long[arr.size()];\n        for (int i = 0; i < a.length;\
    \ i++) {\n            a[i] = arr.get(i);\n        }\n        Arrays.sort(a);\n\
    \        ArrayList<Long> max = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < k; i++) {\n            max.add(a[i]);\n        }\n        return max;",
  "        Arrays.sort(arr);\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long maximum = 0;\n        if (arr.size() == 0) {\n            result.add(maximum);\n\
    \        } else {\n            maximum = arr.get(0);\n            for (long i\
    \ = 1; i < arr.size(); i++) {\n                if (arr.get(i) > maximum) {\n \
    \                   maximum = arr.get(i);\n                    result.add(maximum);\n\
    \                } else {\n                    if (result.size() < k) {\n    \
    \                    result.add(maximum);\n                    }\n           \
    \         maximum = arr.get(i);\n                }\n            }\n          \
    \  if (result.size() < k) {\n                result.add(maximum);\n          \
    \  }\n        }\n        return result;", "        long result = arr.get(0);\n\
    \        ArrayList<Long> list = new ArrayList<Long>();\n        for(int i = 1;\
    \ i < arr.size(); i++) {\n            if(arr.get(i) > result) {\n            \
    \    result = arr.get(i);\n                list.clear();\n            }\n    \
    \        else if(arr.get(i) == result) {\n                list.add((long)arr.get(i));\n\
    \            }\n        }\n        for(int i = 1; i < list.size(); i++) {\n  \
    \          if(list.get(i) > k) {\n                list.remove(i);\n          \
    \      i--;\n            }\n        }\n        for(int i = 1; i < list.size();\
    \ i++) {\n            list.set(i, list.get(i) - k);\n        }\n        return\
    \ list;", "        if (k >= arr.size())\n            return arr;\n        ArrayList<Long>\
    \ res = new ArrayList<Long>();\n        for (Long i : arr)\n            Collections.sort(res);\n\
    \        return res;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        Arrays.sort(arr);\n        if(arr.size() > k) {\n            k = arr.size();\n\
    \        }\n        for (int i = arr.size(); i > k; i--) {\n            result.add(arr.get(i\
    \ - 1));\n        }\n        return result;", "        if (arr.size() > k) return\
    \ arr;\n        Arrays.sort(arr);\n        ArrayList<Long> ans = new ArrayList<Long>(k);\n\
    \        for (int i = 0; i < arr.size(); i++) ans.add(arr.get(i));\n        return\
    \ ans;", "        PriorityQueue<Long> pq = new PriorityQueue<>();\n        //\
    \ fill the priority queue with the k largest elements\n        for (int i = 0;\
    \ i < k; i++) {\n            pq.add(arr.get(i));\n        }\n        // remove\
    \ the first k largest elements\n        for (int i = 0; i < k; i++) {\n      \
    \      arr.remove(0);\n        }\n        // add remaining elements to the priority\
    \ queue\n        while (!pq.isEmpty()) {\n            pq.add(arr.remove(0));\n\
    \        }\n        // return a sorted ArrayList\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n\
    \        }\n        return result;", "        ArrayList<Long> resultArr = new\
    \ ArrayList<Long>();\n\n        if (k > 0) {\n            Collections.sort(arr);\n\
    \            for (int i = 0; i < arr.size(); i++) {\n                if (k ==\
    \ arr.size() || arr.get(i) < arr.get(i + 1) || arr.get(i) == arr.get(i + 1) &&\
    \ k == i) {\n                    k = k - 1;\n                    resultArr.add(arr.get(i));\n\
    \                } else if (k > arr.size() || arr.get(i) >= arr.get(i + 1) &&\
    \ k > i) {\n                    k = k - 1;\n                    resultArr.add(arr.get(i));\n\
    \                }\n            }\n        }\n        return resultArr;", "  \
    \      if (arr.size() < k) {\n            k = arr.size();\n        }\n       \
    \ ArrayList<Long> maximum = new ArrayList<Long>();\n        long[] nums = arr.stream().mapToLong(Long::longValue).toArray();\n\
    \        Arrays.sort(nums);\n        int start = 0;\n        int end = 0;\n  \
    \      while (end < nums.length - 1) {\n            if (nums[end] == nums[end+1])\
    \ {\n                end++;\n                continue;\n            }\n      \
    \      maximum.add(nums[end]);\n            end = end + 1;\n        }\n      \
    \  while (start < end) {\n            maximum.add(nums[start]);\n            start\
    \ = start + 1;\n        }\n        return maximum;", '        return maximumHelper(arr,
    new HashSet<Long>(), k);', "        List<Long> result = new ArrayList<>();\n \
    \       long max = Collections.max(arr);\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            if (arr.get(i) == max) {\n                result.add(max);\n\
    \                break;\n            }\n        }\n        Arrays.sort(result.toArray(new\
    \ Long[result.size()]));\n        return result.subList(result.size() - k, result.size());",
  "        long maxNum = 0;\n        int index = 0;\n        long max = -Long.MAX_VALUE;\n\
    \        int size = arr.size();\n        if (size >= k) {\n            for (int\
    \ i = 0; i <= size / k; i++) {\n                for (long num : arr) {\n     \
    \               if (num > max) {\n                        max = num;\n       \
    \                 index = i;\n                    }\n                }\n     \
    \       }\n        }\n        return new ArrayList<Long>(arr.subList(index, index\
    \ + 1));", "        long max = Long.MIN_VALUE;\n        ArrayList<Long> ret =\
    \ new ArrayList<Long>();\n        ArrayList<Long> copy = new ArrayList<Long>();\n\
    \n        for (long num : arr) {\n            if (num > max) {\n             \
    \   max = num;\n            }\n        }\n\n        long mid = max;\n\n      \
    \  for (long num : arr) {\n            if (num > mid) {\n                ret.add(num);\n\
    \            } else {\n                copy.add(num);\n            }\n       \
    \ }\n\n        ret.addAll(copy);\n        return ret;", "        long max = -Long.MAX_VALUE;\n\
    \        long ans = -Long.MAX_VALUE;\n        for (long i : arr) {\n         \
    \   if (i > max) {\n                ans = max;\n                max = i;\n   \
    \         } else {\n                max = Math.max(max, i);\n            }\n \
    \       }\n        ArrayList<Long> result = new ArrayList<>();\n        for (int\
    \ i = 0; i < k; i++) {\n            if (ans > 0) {\n                result.add(ans);\n\
    \            }\n            ans = 0;\n        }\n        result.add(max);\n  \
    \      return result;", "        int arr_size = arr.size();\n        ArrayList<Long>\
    \ res = new ArrayList<Long>();\n        if(arr_size < k)\n            return res;\n\
    \        if(k > arr_size || k < 0)\n            throw new IllegalArgumentException();\n\
    \        ArrayList<Long> arr1 = arr;\n        Collections.sort(arr1);\n      \
    \  int i = 0;\n        while(i<arr_size && k>0){\n            Long value = arr1.get(i);\n\
    \            if(value >= 0)\n                res.add(value);\n            k--;\n\
    \            i++;\n        }\n        return res;", "        if (k > arr.size())\n\
    \            throw new IllegalArgumentException();\n        ArrayList<Long> res\
    \ = new ArrayList<>(k);\n        Arrays.sort(arr.stream().map(Long::longValue).boxed().collect(Collectors.toList()));\n\
    \        for (int i = 0; i < k; i++) {\n            res.add(arr.get(i));\n   \
    \     }\n        return res;", "        Arrays.sort(arr);\n        ArrayList<Long>\
    \ ret = new ArrayList<>();\n        for (int i = 1; i < arr.size(); i++) {\n \
    \           if (arr.get(i) > arr.get(i-1)) {\n                ret.add(arr.get(i));\n\
    \            }\n        }\n        return ret;", "        if (arr.isEmpty()) {\n\
    \            return new ArrayList<>();\n        }\n        long m = arr.get(0);\n\
    \        for (int i = 1; i < arr.size(); i++) {\n            long n = arr.get(i);\n\
    \            if (n > m) {\n                m = n;\n            }\n        }\n\
    \        ArrayList<Long> res = new ArrayList<>();\n        res.add(m);\n     \
    \   for (long i = 1; i < k; i++) {\n            long m = arr.get(0);\n       \
    \     for (int j = 1; j < arr.size(); j++) {\n                long n = arr.get(j);\n\
    \                if (n > m) {\n                    m = n;\n                }\n\
    \            }\n            res.add(m);\n        }\n        Collections.sort(res);\n\
    \        return res;", "        PriorityQueue<Long> maxHeap = new PriorityQueue<>(k,\
    \ (x, y) -> -((Long)x).compareTo((Long)y));\n        ArrayList<Long> result =\
    \ new ArrayList<>();\n        for (Long num : arr) {\n            maxHeap.add(num);\n\
    \        }\n        while (!maxHeap.isEmpty()) {\n            result.add(maxHeap.poll());\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        // Sort the arr to get the maximum k numbers in arr\n        Collections.sort(arr);\n\
    \        // Check whether arr has less than k numbers\n        if (arr.size()\
    \ < k) {\n            // If arr has less than k numbers, append arr to result\n\
    \            result.addAll(arr);\n            return result;\n        }\n    \
    \    // Check whether arr has exactly k numbers\n        if (arr.size() == k)\
    \ {\n            // If arr has exactly k numbers, just return the arr\n      \
    \      return arr;\n        }\n        // Iterate arr to get the maximum k numbers\n\
    \        int size = arr.size();\n        for (int i = 0; i <= size - k; i++) {\n\
    \            ArrayList<Long> sub = new ArrayList<Long>();\n            sub.addAll(arr.subList(0,\
    \ i));\n            sub.addAll(arr.subList(i, i + k));\n            result.addAll(maximum(new\
    \ ArrayList<Long>(sub), k));\n        }\n        return result;", "        PriorityQueue<Long>\
    \ max = new PriorityQueue<Long>(arr.size());\n        max.add(0l);\n        //\
    \ Initialize min for traversal all element\n        PriorityQueue<Long> min =\
    \ new PriorityQueue<Long>(arr.size());\n        // Traversal all element in the\
    \ array\n        for (Long e : arr) {\n            if (k < e) {\n            \
    \    min.add(e);\n                min.add(e);\n                k -= e;\n     \
    \       } else if (k > e) {\n                max.add(e);\n                max.add(e);\n\
    \                k -= e;\n            } else {\n                // if k == e\n\
    \                max.add(e);\n            }\n        }\n        // Traversal all\
    \ element in max\n        while (!max.isEmpty()) {\n            Long item = max.remove();\n\
    \            min.add(item);\n            // if min is empty and max is not empty\
    \ ,then add one more element of max.\n            if (min.isEmpty() && !max.isEmpty())\
    \ {\n                max.add(max.remove());\n            }\n        }\n      \
    \  // Traversal all element in min\n        while (!min.isEmpty()) {\n       \
    \     Long item = min.remove();\n            max.add(item);\n            // if\
    \ min is empty and max is not empty ,then add one more element of max.\n     \
    \       if (min.isEmpty() && !max.isEmpty()) {\n                max.add(max.remove());\n\
    \            }\n        }\n        return new ArrayList<Long>(max);", "      \
    \  ArrayList<Long> maxList = new ArrayList<>();\n        Arrays.sort(arr);\n \
    \       if (arr.size() < k) {\n            ArrayList<Long> remain = maximum(arr,\
    \ k - arr.size());\n            arr.addAll(remain);\n            return arr;\n\
    \        }\n        if (arr.size() == k) {\n            ArrayList<Long> remain\
    \ = maximum(arr, k);\n            arr.addAll(remain);\n            return arr;\n\
    \        }\n        for (int i = 0; i < arr.size() - k + 1; i++) {\n         \
    \   maxList.add(arr.get(i));\n        }\n        return maxList;", "        if\
    \ (k == 0)\n            return new ArrayList<Long>(arr);\n        if (k == 1)\n\
    \            return new ArrayList<Long>((arr));\n\n        // Find the maximum\
    \ among all the numbers in the array\n        long max = 0;\n        for (long\
    \ element : arr) {\n            max = Math.max(max, element);\n        }\n\n \
    \       // Now add the maximum k numbers from arr\n        ArrayList<Long> res\
    \ = new ArrayList<>();\n        for (long i = 0; i < k; i++) {\n            res.add(max,\
    \ false);\n        }\n\n        // Recursively call maximum for each of the remaining\
    \ elements\n        for (long e : arr) {\n            if (e == max) {\n      \
    \          for (int i = 0; i < k; i++) {\n                    res.set(i,\n   \
    \                         (res.get(i) == null ? e : Math.max(e, res.get(i))),\n\
    \                            false);\n                }\n            } else {\n\
    \                for (int i = 0; i < k; i++) {\n                    res.set(i,\n\
    \                            (res.get(i) == null ? e : Math.max(e, res.get(i))),\n\
    \                            true);\n                }\n            }\n      \
    \  }\n        return res;", "        // TODO Auto-generated method stub\n    \
    \    ArrayList<Long> result = new ArrayList<>();\n        long maxValue = arr.get(0);\n\
    \        long maxIndex = 0;\n        for(int i = 1; i < arr.size(); i++){\n  \
    \          if(maxValue < arr.get(i)){\n                maxValue = arr.get(i);\n\
    \                maxIndex = i;\n            }\n        }\n        if(maxIndex\
    \ - k < 0){\n            return arr;\n        }\n        for(int i = maxIndex;\
    \ i >= k; i--){\n            result.add(arr.get(i));\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ long max = 0;\n        for(int i = 0; i < k; i++){\n            max = arr.get(i);\n\
    \            for(int j = 0; j < k; j++){\n                if(arr.get(j) > max){\n\
    \                    max = arr.get(j);\n                }\n            }\n   \
    \         result.add(max);\n        }\n        return result;", "        ArrayList<Long>\
    \ maximum = new ArrayList<>(k);\n        if (arr.size() > k) arr.remove(k);\n\
    \        int count = 0;\n        for (Long x : arr) {\n            if (maximum.size()\
    \ <= count + 1) {\n                maximum.add(count, x);\n                count\
    \ += 1;\n            } else {\n                if (x > maximum.get(count)) maximum.set(count,\
    \ x);\n            }\n        }\n        return maximum;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        int min = 0;\n\
    \        int max = arr.size() - 1;\n        while (max - min > k) {\n        \
    \    long value = arr[max];\n            int index = Arrays.binarySearch(arr,\
    \ value);\n            if (index < 0) {\n                result.add(value);\n\
    \                max = max;\n            }\n            else {\n             \
    \   result.add(arr[max]);\n                max--;\n            }\n        }\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Arrays.sort(arr);\n        long kMax = Long.MIN_VALUE;\n        for (long\
    \ ele : arr) {\n            if (ele >= kMax) {\n                result.add(ele);\n\
    \                kMax = ele;\n            }\n        }\n        return result;",
  "        long max = arr.stream().max().getAsLong();\n        if (k > max)\n    \
    \        k = max;\n        // sort first k elements of arr\n        arr = arr.stream().sorted(Comparator.comparing(e\
    \ -> e)).limit(k).collect(Collectors.toCollection(ArrayList::new));\n        //\
    \ merge the rest into the first k\n        arr = arr.stream().map(e -> e).collect(Collectors.toCollection(ArrayList::new));\n\
    \        return arr;", "        ArrayList<Long> result = new ArrayList<>();\n\n\
    \        Collections.sort(arr);\n\n        ArrayList<Long> maximums = new ArrayList<>();\n\
    \n        for (Long i : arr) {\n            if (maximums.size() <= k) {\n    \
    \            maximums.add(i);\n            } else {\n                Long max\
    \ = maximums.get(k);\n\n                if (max < i) {\n                    maximums.clear();\n\
    \                    maximums.add(i);\n                } else {\n            \
    \        maximums.set(k, max);\n                }\n            }\n        }\n\n\
    \        result.addAll(maximums);\n        return result;", "        Arrays.sort(arr);\n\
    \        ArrayList<Long> res = new ArrayList<>();\n        if (arr.size() < k)\
    \ {\n            return res;\n        }\n        for (int i = k - 1; i >= 0; i--)\
    \ {\n            if (arr.get(i) > arr.get(i + 1)) {\n                res.add(arr.get(i));\n\
    \                arr.remove(i);\n            } else {\n                arr.remove(i);\n\
    \            }\n        }\n        res.addAll(arr);\n        return res;", " \
    \       Arrays.sort(arr);\n        Arrays.binarySearch(k < arr.size() ? arr :\
    \ arr.subList(0, arr.size() - k), arr.get(k - 1), Collections.reverseOrder());\n\
    \        return new ArrayList<Long>(Arrays.asList(arr.subList(0, k)));", "   \
    \     if (arr.size() <= k)\n            return arr;\n        \n        ArrayList<Long>\
    \ res = new ArrayList<>(k);\n        \n        Arrays.sort(arr);\n        \n \
    \       for (long i = arr.size() - k; i <= arr.size(); i++)\n            res.add(arr.get(i));\n\
    \        \n        return res;", "        if (arr.size() == 0 || k > arr.size())\n\
    \            return null;\n        ArrayList<Long> maximum = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp = new ArrayList<Long>();\n        int count = 0;\n\
    \        // Find all elements greater or equal than the first element\n      \
    \  for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) >= arr.get(0))\
    \ {\n                count++;\n                temp.add(arr.get(i));\n       \
    \         if (count == k) {\n                    maximum = temp;\n           \
    \         break;\n                }\n            }\n        }\n        return\
    \ maximum;", "        boolean sorted = false;\n        ArrayList<Long> res = new\
    \ ArrayList<>(k);\n        List<Long> list = arr.stream().sorted(Collections.reverseOrder()).collect(Collectors.toList());\n\
    \        for (int i = 0; i < k; i++) {\n            sorted = true;\n         \
    \   for (int j = i; j < list.size(); j++) {\n                if (list.get(i) >\
    \ list.get(j)) {\n                    res.add(list.remove(j));\n             \
    \       sorted = false;\n                    break;\n                }\n     \
    \       }\n            if (sorted) {\n                break;\n            }\n\
    \        }\n        list = res.stream().sorted(Collections.reverseOrder()).collect(Collectors.toList());\n\
    \        Arrays.sort(list);\n        return list;", "        if (arr.size() <=\
    \ k) {\n            return arr;\n        }\n        ArrayList<Long> result = new\
    \ ArrayList<>(k);\n        long max = 0;\n        Collections.sort(arr);\n   \
    \     for (long elem : arr) {\n            if (elem > max) {\n               \
    \ result.clear();\n                max = elem;\n            }\n            if\
    \ (result.size() < k) {\n                result.add(elem);\n            }\n  \
    \      }\n        return result;", "        long max = 0;\n        int i = 0;\n\
    \        ArrayList<Long> ans = new ArrayList<>();\n        while (i < arr.size())\
    \ {\n            max = Math.max(max, arr.get(i));\n            while (max >= k)\
    \ {\n                ans.add(arr.get(i++));\n                max -= k;\n     \
    \       }\n        }\n        return ans;", "        if(arr.size() <= k) return\
    \ arr;\n        long min = arr.get(0);\n        ArrayList<Long> res = new ArrayList<Long>(k);\n\
    \        for(int i = 1; i < k; i++) {\n            if(arr.get(i) > min) {\n  \
    \              min = arr.get(i);\n                res.clear();\n            }\n\
    \            if(arr.get(i) == min) {\n                res.add(arr.get(i));\n \
    \           }\n        }\n        return res;", "        ArrayList<Long> ans =\
    \ new ArrayList<>(k);\n        Arrays.sort(arr);\n        for (int i = 0; i <\
    \ k; i++)\n            ans.add(arr.get(i));\n        return ans;", "        if\
    \ (k <= 0 || k > arr.size()) {\n            return null;\n        }\n        ArrayList<Long>\
    \ res = new ArrayList<>();\n        PriorityQueue<Long> maxHeap = new PriorityQueue<>(arr.size());\n\
    \        for (long el : arr) {\n            if (maxHeap.size() > k) {\n      \
    \          maxHeap.poll();\n            }\n            maxHeap.offer(el);\n  \
    \      }\n        for (int i = k; i < maxHeap.size(); i++) {\n            res.add(maxHeap.poll());\n\
    \        }\n        return res;", "        if (k > arr.size())\n            return\
    \ new ArrayList<>();\n        long maxVal = Long.MIN_VALUE;\n        long maxCount\
    \ = Long.MIN_VALUE;\n        long maxIndex = -1;\n        for (int i = 0; i <\
    \ arr.size(); i++) {\n            long cur = arr.get(i);\n            if (cur\
    \ > maxVal) {\n                maxVal = cur;\n                maxCount = 1;\n\
    \                maxIndex = i;\n            } else if (cur > maxVal && cur ==\
    \ maxVal) {\n                maxCount++;\n            }\n        }\n        ArrayList<Long>\
    \ ret = new ArrayList<>();\n        while (maxIndex + 1 < arr.size() && maxIndex\
    \ + 2 < arr.size() && maxCount > 1) {\n            ret.insert(maxIndex + 1, arr.get(maxIndex\
    \ + 1));\n            ret.insert(maxIndex + 2, arr.get(maxIndex + 2));\n     \
    \       maxIndex += 2;\n            maxCount--;\n        }\n        return ret;",
  "        ArrayList<Long> result = new ArrayList<>();\n        Arrays.sort(arr);\n\
    \        int m = arr.size() - 1;\n        long max = arr.get(m);\n        for\
    \ (int i = m; i >= 0; i--) {\n            if (arr.get(i) > max) {\n          \
    \      max = arr.get(i);\n            }\n        }\n        if (k > m) {\n   \
    \         k = m;\n        }\n        while (k >= 0) {\n            result.add(max);\n\
    \            k--;\n        }\n        return result;", "        // Complete this\
    \ function\n        if (arr.isEmpty() || k > arr.size())\n            throw new\
    \ IllegalArgumentException();\n        ArrayList<Long> result=new ArrayList<>(arr.size());\n\
    \        Collections.sort(arr);\n        result.addAll(arr);\n        result.subList(0,\
    \ k)=arr;\n        return result;", "        if (arr.size() > k) {\n         \
    \   ArrayList<Long> result = new ArrayList<Long>(k);\n            Long maxNum\
    \ = Collections.max(arr);\n            Long minNum = Collections.min(arr);\n \
    \           while (result.size() < k) {\n                if (maxNum == minNum)\
    \ {\n                    maxNum = Collections.max(arr);\n                    minNum\
    \ = Collections.min(arr);\n                }\n                if (maxNum > minNum)\
    \ {\n                    result.add(maxNum);\n                    maxNum = Collections.max(arr);\n\
    \                } else {\n                    result.add(minNum);\n         \
    \           minNum = Collections.min(arr);\n                }\n            }\n\
    \            return result;\n        } else {\n            return arr;\n     \
    \   }", "        ArrayList<Long> res = new ArrayList<>();\n\n        int len =\
    \ arr.size();\n        long max = Long.MIN_VALUE;\n\n        for (int i = 0; i\
    \ < len; i++) {\n            if (arr.get(i) > max) {\n                max = arr.get(i);\n\
    \            }\n        }\n\n        if (k > max) {\n            k = max;\n  \
    \      }\n\n        for (int i = 0; i < len; i++) {\n            if (arr.get(i)\
    \ == max) {\n                res.add(max);\n            } else if (arr.get(i)\
    \ < k) {\n                res.add(arr.get(i));\n            }\n        }\n\n \
    \       return res;", "        ArrayList<Long> res = new ArrayList<Long>(arr.size());\n\
    \        if (k > arr.size()) throw new IllegalArgumentException();\n        if\
    \ (k == 0) return res;\n        if (k == 1) return arr;\n        PriorityQueue<Long>\
    \ pq = new PriorityQueue<Long>((a, b) -> Integer.compare(a, b));\n        for\
    \ (Long v : arr) {\n            if (pq.isEmpty() || pq.poll() < v)\n         \
    \       pq.add(v);\n            else if (pq.poll() == v) continue;\n         \
    \   else\n                res.add(v);\n            if (res.size() == k)\n    \
    \            break;\n        }\n        return res;", "        if (k > arr.size())\n\
    \            return new ArrayList<>();\n        ArrayList<Long> res = new ArrayList<>(k);\n\
    \        long largest = arr.get(0);\n        long minValue = arr.get(0);\n   \
    \     for (int i = 1; i < k; i++) {\n            long maxValue = getMax(largest,\
    \ arr.get(i));\n            largest = maxValue;\n            minValue = getMin(minValue,\
    \ arr.get(i));\n            res.add(maxValue);\n        }\n        System.out.println(res);\n\
    \        return res;", "        int n = arr.size();\n        // O(nlogk + n) time:\
    \ O(n log k) space.\n        ArrayList<Long> largest = new ArrayList<Long>();\n\
    \        // O(nlogk) time: O(n log k) space.\n        for (int i = 0; i < n; i++)\
    \ {\n            int j = i + k;\n            while (j < n && arr.get(j) > arr.get(i))\n\
    \                j++;\n            if (j - i > k)\n                largest.addAll(Arrays.copyOfRange(arr.subList(i,\
    \ j), i, j));\n        }\n        return largest;", '        // TODO', "     \
    \   long max = arr.get(0);\n        ArrayList<Long> result = new ArrayList<>(k);\n\
    \        for(int i = 0; i < k; i++) {\n            if(i == arr.size() - 1) {\n\
    \                break;\n            }\n            max = Math.max(arr.get(i),\
    \ max);\n            result.add(max);\n        }\n        return result;", " \
    \       ArrayList<Long> arr = new ArrayList<>();\n        ArrayList<Long> newArr\
    \ = new ArrayList<>();\n        for (int i = 0; i <= arr.size(); i++) {\n    \
    \        arr.add(i, arr.get(i));\n        }\n        Collections.sort(arr);\n\
    \        int count = 0;\n        ArrayList<Long> maxArr = new ArrayList<>();\n\
    \        Arrays.stream(arr).forEach(\n            e -> {\n                if (count\
    \ < k) {\n                    newArr.add(e);\n                    count++;\n \
    \               }\n                else {\n                    if (e > maxArr.stream().max().get())\
    \ {\n                        maxArr.add(e);\n                    }\n         \
    \       }\n            });\n        return newArr;", "        // write your code\
    \ here\n        if(arr.size()==1){\n            return arr;\n        }\n     \
    \   ArrayList<Long> maxArr=new ArrayList<>();\n        Long[] sorted=arr.stream().sorted().toArray();\n\
    \        for(int i=0;i<k;i++){\n            long max=sorted[i];\n            for(int\
    \ j=i+1;j<sorted.length;j++){\n                if(sorted[j]>max){\n          \
    \          max=sorted[j];\n                }\n            }\n            maxArr.add(max);\n\
    \        }\n        return maxArr;", "        long max = arr.get(0);\n       \
    \ for (long element : arr) {\n            max = Math.max(max, element);\n    \
    \    }\n        ArrayList<Long> list = new ArrayList<>(k);\n        for (int i\
    \ = 0; i < (k); i++) {\n            list.add(max);\n        }\n        return\
    \ list;", "        List<Long> result = new ArrayList<>();\n        if (arr.size()\
    \ < 1 || k < 1)\n            return result;\n        BinaryOperator<Long> comp\
    \ = (l, r) -> Long.compare(l, r);\n        Collections.sort(arr, comp);\n    \
    \    int last = arr.size() - 1;\n        for (int i = 1; i <= k; i++) {\n    \
    \        if (arr.get(i) > arr.get(last))\n                break;\n           \
    \ result.add(arr.get(i));\n            last -= 1;\n        }\n        return result;",
  "        Arrays.sort(arr);\n        ArrayList<Long> ans = new ArrayList<Long>();\n\
    \        int maxK = arr.size();\n        if(k <= maxK) return ans;\n        for(int\
    \ i = maxK - k; i <= maxK; i++){\n            ans.add((long) arr.get(i));\n  \
    \      }\n        return ans;", "        ArrayList<Long> res = new ArrayList<>();\n\
    \        \n        \n        // get max element from input list\n        long\
    \ maxElement = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n \
    \           if (arr.get(i) > maxElement) {\n                maxElement = arr.get(i);\n\
    \            }\n        }\n        \n        // generate all possible permutations\
    \ of k elements and sort them in descending order\n        long start = (long)Math.pow(k,\
    \ arr.size());\n        long end = start + k + 1;\n        long currElement =\
    \ 0;\n        long tmp = 0;\n        do {\n            tmp = maxElement;\n   \
    \         for (int i = 0; i < arr.size(); i++) {\n                currElement\
    \ = tmp;\n                tmp = arr.get(i) + currElement;\n            }\n   \
    \         res.add(tmp);\n        } while (start <= end);\n\n        return res;",
  "        ArrayList<Long> res = new ArrayList<>();\n        int len = arr.size();\n\
    \        long max = Long.MIN_VALUE;\n        long maxIndex = -1;\n        for\
    \ (int i = 0; i < len; i++) {\n            long elem = arr.get(i);\n         \
    \   if (elem > max) {\n                max = elem;\n                maxIndex =\
    \ i;\n            }\n        }\n        int count = 0;\n        while (res.size()\
    \ < k && count < len) {\n            res.add(max);\n            count++;\n   \
    \     }\n        if (res.size() < k) {\n            for (int i = k; i < len; i++)\
    \ {\n                res.add(arr.get(i));\n            }\n        }\n        return\
    \ res;", "        if (arr.size() < k) {\n            return arr;\n        }\n\n\
    \        Arrays.sort(arr);\n        ArrayList<Long> max = new ArrayList<Long>(k);\n\
    \        long curMax = arr.get(0);\n        for (int i = 1; i < k; i++) {\n  \
    \          curMax = arr.get(i);\n            max.add(curMax);\n        }\n\n \
    \       return max;", "        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            res.add(arr.get(i));\n   \
    \     }\n        Arrays.sort(res);\n        return res;", "        ArrayList<Long>\
    \ ans = new ArrayList<>();\n        if(k == 0) {\n            return ans;\n  \
    \      }\n        ArrayList<Long> max = new ArrayList<>();\n        ArrayList<Long>\
    \ cur = new ArrayList<>();\n        cur.add(arr.get(0));\n        max.add(arr.get(0));\n\
    \        for(int i = 1; i < arr.size(); i++) {\n            if(max.get(0) > arr.get(i))\
    \ {\n                cur.add(arr.get(i));\n                max.add(arr.get(i));\n\
    \            } else {\n                if(max.size() > k) {\n                \
    \    ans.add(cur.remove(0));\n                    max.remove(0);\n           \
    \     }\n            }\n        }\n        return ans;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        int num = 0;\n        \n        while(num\
    \ < k) {\n            if(num == 0)\n                num++;\n            if(arr.get(num)\
    \ > arr.get(num - 1))\n                num++;\n            else {\n          \
    \      result.add(arr.get(num));\n                num++;\n            }\n    \
    \    }\n        return result;", "        \n        if (k == 0) return new ArrayList<>(arr);\n\
    \        \n        ArrayList<Long> ret = new ArrayList<>();\n        \n      \
    \  ArrayList<Long> max = new ArrayList<>();\n        \n        long maxSum = -1000000000;\n\
    \        \n        // find max of arr\n        for (Long l : arr) {\n        \
    \    if (l > maxSum) {\n                maxSum = l;\n            }\n        }\n\
    \        \n        // find max of k\n        for (Long l : arr) {\n          \
    \  if (l > maxSum) {\n                maxSum = l;\n            }\n        }\n\
    \        \n        // add maxSum to arr\n        for (Long l : arr) {\n      \
    \      if (l > maxSum) {\n                maxSum = l;\n            }\n       \
    \ }\n        \n        // find sum\n        long sum = 0;\n        for (Long l\
    \ : arr) {\n            sum += l;\n        }\n        \n        // add sum of\
    \ arr\n        for (Long l : arr) {\n            sum += l;\n        }\n      \
    \  \n        // add max to ret\n        ret.add(maxSum);\n        \n        //\
    \ add max to ret\n        for (Long l : arr) {\n            if (l > maxSum) {\n\
    \                ret.add(l);\n            }\n        }\n        \n        return\
    \ ret;", "        ArrayList<Long> res = new ArrayList<>(k);\n        boolean flag\
    \ = false;\n        // sort the arr arrayList\n        arr.sort((a, b) -> {\n\
    \            long c = a;\n            if (a < b) {\n                c = b;\n \
    \           }\n            return c;\n        });\n\n        // find the max number\n\
    \        for (int i = 0; i < k; i++) {\n            // if arr[i]==arr[i+1], then\
    \ flag is true\n            if (arr.get(i) == arr.get(i + 1)) {\n            \
    \    flag = true;\n            }\n            else if (flag == false) {\n    \
    \            res.add(arr.get(i));\n            }\n        }\n        return res;",
  "        if (arr.size() <= k) {\n            return arr;\n        }\n        ArrayList<Long>\
    \ maxs = new ArrayList<>(k);\n        Arrays.sort(arr.stream().limit(k));\n  \
    \      for (long el : arr) {\n            maxs.add(el);\n        }\n        return\
    \ maxs;", "        // Write your code here\n        Collections.sort(arr);\n \
    \       \n        ArrayList<Long> result = new ArrayList<>(k);\n        \n   \
    \     for(int i = 0; i < k; i++)\n        {\n            result.add(arr.get(i));\n\
    \        }\n        \n        return result;", "        int n = arr.size();\n\
    \        \n        // If k is 0, return the array list with arr elements\n   \
    \     if (k == 0) {\n            return new ArrayList<>(arr);\n        }\n   \
    \     \n        // If k is greater than or equal to length of arr, then return\
    \ arr\n        if (k >= n) {\n            return new ArrayList<>(arr);\n     \
    \   }\n        \n        // If k is less than 0, return the array list with arr\
    \ elements \n        if (k < 0) {\n            k = -k; \n            return maximum(new\
    \ ArrayList<Long>(arr).subList(0, k), k);\n        }\n        \n        // Divide\
    \ arr into two parts arr1 = [0, k] and arr2 = [k, n-1]\n        ArrayList<Long>\
    \ arr1 = new ArrayList<Long>(arr.subList(0, k));\n        ArrayList<Long> arr2\
    \ = new ArrayList<Long>(arr.subList(k, n-1));\n        \n        // Find the maximum\
    \ of arr1 and arr2 recursively\n        ArrayList<Long> result = maximum(arr1,\
    \ k);\n        for (Long val : arr2) {\n            val = Math.max(val, result.get(0));\n\
    \            result.add(val);\n        }\n        return result;", "        ArrayList<Long>\
    \ max_arr = new ArrayList<>();\n        int n = arr.size();\n        long max_num\
    \ = 0;\n        for (int i = 0; i < k; i++) {\n            if (max_num < arr.get(i))\
    \ {\n                max_num = arr.get(i);\n            }\n        }\n       \
    \ max_arr.add(max_num);\n        for (int i = 0; i < n; i++) {\n            if\
    \ (arr.get(i) > max_num) {\n                for (int j = i; j < n; j++) {\n  \
    \                  if (arr.get(j) > max_num) {\n                        max_num\
    \ = arr.get(j);\n                    }\n                }\n                max_arr.add(max_num);\n\
    \                for (int j = i - 1; j >= 0; j--) {\n                    if (arr.get(j)\
    \ > max_num) {\n                        max_num = arr.get(j);\n              \
    \      }\n                }\n            }\n        }\n        return max_arr;",
  "        if (k > arr.size())\n            return arr;\n        Arrays.sort(arr);\n\
    \        ArrayList<Long> res1 = new ArrayList<>();\n        long max = 0;\n  \
    \      for (int i = 0; i < k; i++) {\n            max = Math.max(max, arr.get(i));\n\
    \        }\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ == max)\n                res1.add(max);\n            else\n                res1.add(arr.get(i));\n\
    \        }\n        return res1;", "        ArrayList<Long> res = new ArrayList<>();\n\
    \        \n        sort(arr, k, res);\n        \n        return res;", "     \
    \   ArrayList<Long> results = new ArrayList<>(k);\n        long curMax = Long.MIN_VALUE;\n\
    \n        for (long i : arr) {\n            if (i < curMax) {\n              \
    \  continue;\n            }\n\n            results.add(i);\n            long curMax\
    \ = i;\n        }\n\n        return results;", "        if (arr.size() > k) {\n\
    \            return arr;\n        } else {\n            ArrayList<Long> m = new\
    \ ArrayList<>();\n            for (int i = 0; i < k; i++) {\n                m.add(Collections.max(arr));\n\
    \            }\n            return m;\n        }", "        if (arr.isEmpty()\
    \ || k == 0) return arr;\n        ArrayList<Long> ret = new ArrayList<>();\n \
    \       int n = arr.size();\n        if (n >= k) {\n            max = Math.max(max,\
    \ arr.get(n - 1));\n            ret.clear();\n        }\n        for (int i =\
    \ 0; i < n; i++) {\n            max = Math.max(max, arr.get(i));\n           \
    \ if (max < k) {\n                ret.clear();\n                break;\n     \
    \       }\n            ret.add(max);\n        }\n        return ret;", "     \
    \   // write your code here\n        if (k > arr.size()) {\n            return\
    \ arr;\n        }\n        ArrayList<Long> arr2 = new ArrayList<>();\n       \
    \ boolean sorted = true;\n        long max = 0;\n        long currentMax = 0;\n\
    \        for (int i = 0; i < arr.size() - k + 1; i++) {\n            if (arr.get(i)\
    \ > max) {\n                max = arr.get(i);\n                currentMax = max;\n\
    \            }\n            arr2.add(currentMax);\n        }\n        return arr2;",
  "        int min = 0;\n        int max = arr.size() - 1;\n        while (min <=\
    \ max) {\n            // Find min/max index where k is smaller than the array\n\
    \            int m = (min + max) / 2;\n            if (arr.get(m) < k) {\n   \
    \             min = m + 1;\n            } else {\n                max = m - 1;\n\
    \            }\n        }\n        ArrayList<Long> maxArray = new ArrayList<Long>();\n\
    \        for (int i = min; i <= max; i++) {\n            long val = arr.get(i);\n\
    \            while (val < k) {\n                arr.set(i, arr.get(i + 1));\n\
    \                i++;\n            }\n            while (val >= k) {\n       \
    \         arr.set(i, arr.get(i - 1));\n                i--;\n            }\n \
    \           maxArray.add(arr.get(i));\n        }\n        return maxArray;", " \
    \       if(k<=0)\n            return arr;\n        ArrayList<Long> result = new\
    \ ArrayList<Long>(k);\n        for(Long num : arr)\n            if(num > result.stream().max(Comparator.naturalOrder()).orElse(0L))\n\
    \                result.add(num);\n        return result;", "        PriorityQueue<Long>\
    \ max = new PriorityQueue<Long>(k);\n        ArrayList<Long> arr1 = new ArrayList<>();\n\
    \        ArrayList<Long> arr2 = new ArrayList<>();\n        for (int i = 0; i\
    \ < arr.size(); i++) {\n            long ls = arr.get(i);\n            if (ls\
    \ > max.peek()) {\n                max.add(ls);\n                arr1.add(ls);\n\
    \            } else {\n                arr2.add(ls);\n            }\n        }\n\
    \        if (arr1.size() < arr2.size()) {\n            arr1.addAll(arr2);\n  \
    \      }\n        return arr1;", "        // Your code here\n        ArrayList<Long>\
    \ max = Arrays.stream().sorted().filter(a -> arr.stream().noneMatch(b -> b < a)).limit(k).collect(Collectors.toList());\n\
    \        return max;", "        ArrayList<Long> maximums = new ArrayList<>();\n\
    \        ArrayList<Long> sortedArrayList = new ArrayList<>();\n        // get\
    \ the first k elements\n        Collections.sort(arr, Comparator.comparingLong(arr::get));\n\
    \        for (long i : arr) {\n            // get the maximum element\n      \
    \      if (maximums.size() < k) {\n                maximums.add(i);\n        \
    \    }\n            // get the max element from the sorted array\n           \
    \ long max = Collections.max(sortedArrayList);\n            if (max == i) {\n\
    \                maximums.add(max);\n            }\n            // add the new\
    \ element to the sorted array\n            sortedArrayList.add(i, max);\n    \
    \    }\n        return maximums;", "        long n = arr.size();\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n\n        // Base Case\n        if (n == 0)\n\
    \            result.add(0l);\n        else if (n == 1)\n            result.add(arr.get(0));\n\
    \        else {\n            long max = 0;\n            for (int i = 0; i < k;\
    \ i++) {\n                long temp = max;\n                max = Math.max(max,\
    \ arr.get(i));\n                result.add(temp);\n            }\n        }\n\
    \        return result;", "        if (k > arr.size())\n            return new\
    \ ArrayList<Long>();\n        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n\
    \        pq.add(0l);\n        for (long i: arr)\n            if (i < 0l || i >\
    \ 100l)\n                throw new RuntimeException(\"All elements should be in\
    \ the range [-1000, 1000]\");\n        while (k > 0) {\n            pq.add(arr.get(pq.size()-1));\n\
    \            k--;\n        }\n        while (pq.size() > 0) {\n            pq.poll();\n\
    \        }\n        return new ArrayList<Long>(Arrays.asList(pq));", "       \
    \ if(arr.isEmpty() || k == 0)\n            return new ArrayList<>();\n\n     \
    \   final int low = arr.size();\n        final int high = arr.size();\n      \
    \  Arrays.sort(arr);\n        ArrayList<Long> result = new ArrayList<>(k);\n \
    \       for(int i = 0; i < k; i++){\n            result.add(arr.get(i));\n   \
    \     }\n        Collections.reverse(arr);\n        for(int i = low; i < arr.size();\
    \ i++){\n            if(!arr.get(i).equals(result.get(result.size()-1))){\n  \
    \              ArrayList<Long> newResult = new ArrayList<>(result.size());\n \
    \               Collections.sort(newResult);\n                Collections.reverse(newResult);\n\
    \                result.addAll(newResult);\n                break;\n         \
    \   }\n        }\n        return result;", "        ArrayList<Long> results =\
    \ new ArrayList<Long>();\n\n        // first sort arr\n        Collections.sort(arr);\n\
    \n        // remove k\n        if (k == 0) return results;\n\n        ArrayList<Long>\
    \ maximums = arr.subList(0, k);\n\n        // merge to result\n        results.addAll(maximums);\n\
    \        return maximums(results, k);", "        ArrayList<Long> maximum = new\
    \ ArrayList<>();\n        Arrays.sort(arr);\n        int length = arr.size();\n\
    \        boolean flag = false;\n        int count = 0;\n        for (int i = 0;\
    \ i < length; i++) {\n            if (count == k) {\n                flag = true;\n\
    \                break;\n            }\n            if (flag) {\n            \
    \    break;\n            }\n            if (arr.get(i) == arr.get(length - 1))\
    \ {\n                count++;\n            } else {\n                maximum.add(arr.get(i));\n\
    \            }\n        }\n        return maximum;", "        if (arr == null\
    \ || arr.size() <= k) {\n            return arr;\n        }\n        final ArrayList\
    \ resultArr = new ArrayList(arr.size());\n        if (arr.size() <= k) {\n   \
    \         resultArr.addAll(arr);\n            return resultArr;\n        }\n \
    \       Collections.sort(arr);\n        long maxValue = arr.get(arr.size() - 1);\n\
    \        long maxIndex = arr.size() - 1;\n        for (long i = 0; i < arr.size();\
    \ i++) {\n            if (maxValue < arr.get(i)) {\n                maxValue =\
    \ arr.get(i);\n                maxIndex = i;\n            }\n        }\n     \
    \   for (int i = 0; i < k; i++) {\n            resultArr.add(arr.get(maxIndex));\n\
    \            maxIndex--;\n        }\n        return resultArr;", "        if (k\
    \ > arr.size()) {\n            return new ArrayList<>();\n        }\n        ArrayList<Long>\
    \ newArr = new ArrayList<>();\n        Arrays.sort(arr);\n        long currentMax\
    \ = arr.get(0);\n        long currIndex = arr.indexOf(currentMax);\n        for\
    \ (int i = 1; i < k; i++) {\n            if (currentMax < arr.get(i)) {\n    \
    \            newArr.add(currentMax);\n            }\n            currentMax =\
    \ arr.get(currIndex);\n            currIndex = arr.indexOf(currentMax);\n    \
    \    }\n        newArr.add(currentMax);\n        return newArr;", "        ArrayList<Long>\
    \ maxArray = new ArrayList<Long>(k);\n        for (int i = 0; i < k; i++) {\n\
    \            long max = Collections.max(arr);\n            maxArray.add(max);\n\
    \            arr.remove(max);\n        }\n        return maxArray;"]
stop_tokens:
- "\n    }\n"
