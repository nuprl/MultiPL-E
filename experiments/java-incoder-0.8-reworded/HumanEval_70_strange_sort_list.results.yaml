language: java
name: HumanEval_70_strange_sort_list
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> temp = new ArrayList<Long>();\n\
    \        ArrayList<Long> result = new ArrayList<Long>();\n        for(int i =\
    \ 0; i <lst.size(); i++)\n            temp.add(lst.get(i));\n        for(int i\
    \ = 0; i <temp.size(); i++) {\n            int j = i;\n            while(j > 0\
    \ && temp.get(i-1).compareTo(temp.get(i)) == 1) {\n                result.add(temp.get(j--));\n\
    \            }\n            result.add(temp.get(i));\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp55mjl6if.java:34)\n"
  stdout: ''
  timestamp: 1659976440
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> newlst = new\
    \ ArrayList<>();\n\n        long minValue = lst.get(0);\n        long maxValue\
    \ = lst.get(lst.size()-1);\n\n        for(long i : lst) {\n            if(minValue\
    \ > i) {\n                newlst.add(i); minValue = i;\n            }\n\n    \
    \        if(maxValue < i) {\n                newlst.add(i); maxValue = i;\n  \
    \          }\n        }\n\n        for(long i : lst) {\n            newlst.add(i);\
    \ //Adding all values again, to ensure they are in correct order\n        }\n\n\
    \        if(minValue == maxValue) {\n            return lst;\n        }\n\n  \
    \      newlst.add(minValue);\n        newlst.add(maxValue);\n\n        return\
    \ newlst;\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdqa4ektc.java:49)\n"
  stdout: ''
  timestamp: 1659976440
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        return lst.stream().sorted().collect(Collectors.toCollection(ArrayList::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpya66cfe1.java:23)\n"
  stdout: ''
  timestamp: 1659976440
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        if (lst.isEmpty()) {\n     \
    \       return lst;\n        }\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long min = lst.get(0);\n        long max = lst.get(0);\n        for (long\
    \ i : lst) {\n            min = Math.min(min, i);\n            max = Math.max(max,\
    \ i);\n        }\n        long current = min;\n        while (true) {\n      \
    \      while (current < max && current < min) {\n                result.add(current);\n\
    \                current++;\n            }\n            while (current > min &&\
    \ current > max) {\n                result.add(current);\n                current--;\n\
    \            }\n            if (current > max) {\n                break;\n   \
    \         }\n            current = current++;\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659976445
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        List<Long> copy = new ArrayList<>(lst);\n\
    \        Collections.sort(copy, Long::compareTo);\n        return copy;\n    }\n\
    \    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdtvots8u.java:22: error: incompatible types: List<Long> cannot\
    \ be converted to ArrayList<Long>\n        return copy;\n               ^\n1 error\n"
  stdout: ''
  timestamp: 1659976440
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().mapToLong(Long::longValue).min().getAsLong();\n\
    \        long max = lst.stream().mapToLong(Long::longValue).max().getAsLong();\n\
    \        int length = lst.size();\n        if (lst.size() > 0) {\n           \
    \ int i = 1;\n            while (i < length) {\n                long curr = lst.stream().map(i\
    \ -> lst.get(i)).min().getAsLong();\n                if (curr == min) {\n    \
    \                result.add(curr);\n                } else if (curr == max) {\n\
    \                    result.add(max);\n                } else if (curr < min)\
    \ {\n                    result.add(min);\n                } else {\n        \
    \            result.add(curr);\n                }\n                i++;\n    \
    \        }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpts2nr172.java:27: error: variable i is already defined in method\
    \ strangeSortList(ArrayList<Long>)\n                long curr = lst.stream().map(i\
    \ -> lst.get(i)).min().getAsLong();\n                                        \
    \     ^\n/tmp/tmpts2nr172.java:27: error: incompatible types: Long cannot be converted\
    \ to int\n                long curr = lst.stream().map(i -> lst.get(i)).min().getAsLong();\n\
    \                                                          ^\n/tmp/tmpts2nr172.java:27:\
    \ error: method min in interface Stream<T> cannot be applied to given types;\n\
    \                long curr = lst.stream().map(i -> lst.get(i)).min().getAsLong();\n\
    \                                                             ^\n  required: Comparator<?\
    \ super Object>\n  found:    no arguments\n  reason: actual and formal argument\
    \ lists differ in length\n  where T is a type-variable:\n    T extends Object\
    \ declared in interface Stream\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1659976440
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        Comparator<Long> byMax = Comparator.comparing(Long::max);\n\
    \        Comparator<Long> byMin = Comparator.comparing(Long::min);\n        Comparator<Long>\
    \ byAvg = Comparator.comparing(Long::avg);\n        Comparator<Long> byDiff =\
    \ Comparator.comparing(a -> Math.abs(a - b.avg()));\n        Comparator<Long>\
    \ bySum = Comparator.comparing(Long::sum);\n        ArrayList<Long> res = new\
    \ ArrayList<>();\n        long max = 0;\n        long min = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (Long v : lst) {\n            if (v > max)\
    \ {\n                max = v;\n            }\n            if (v < min) {\n   \
    \             min = v;\n            }\n            if (v > 0) {\n            \
    \    sum += v;\n            }\n        }\n        Comparator<Long> byDiffAvg =\
    \ byDiff.thenComparing(byAvg);\n        Comparator<Long> byDiffSum = byDiff.thenComparing(bySum);\n\
    \        while (max > 0 && min > 0 && sum > 0) {\n            Long v1 = lst.stream().filter(l\
    \ -> l <= max).findAny().orElse(max);\n            Long v2 = lst.stream().filter(l\
    \ -> l >= min).findAny().orElse(min);\n            Long v3 = lst.stream().filter(l\
    \ -> l > 0).findAny().orElse(0);\n            Long v4 = lst.stream().filter(l\
    \ -> l < 0).findAny().orElse(0);\n            if (v1 > v2) {\n               \
    \ max = v2;\n                res.add(v2);\n                sum -= v2;\n      \
    \          if (sum > 0) {\n                    lst.stream().filter(l -> l > 0).findAny().ifPresent(x\
    \ -> lst.stream().filter(l -> l <= x).findAny().ifPresent(y -> lst.stream().filter(l\
    \ -> l <= y).findAny().ifPresent(z -> {\n                        lst.stream().filter(l\
    \ -> l <= z).findAny().ifPresent(t -> {\n                            lst.stream().filter(l\
    \ -> l <= t).findAny().ifPresent(s -> {\n                                lst.stream().filter(l\
    \ -> l <= s).findAny().ifPresent(p -> {\n                                    lst.stream().filter(l\
    \ -> l <= p).findAny().ifPresent(r -> {\n                                    \
    \    lst.stream().filter(l -> l <= r).findAny().ifPresent(c -> {\n\n    }\n  \
    \  public static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmyjkix3g.java:59: error: ')' expected\n    }\n     ^\n/tmp/tmpmyjkix3g.java:60:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659976439
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        // get length of array list,\
    \ or length of list inside array.\n        int length = lst.size();\n        long\
    \ minimum = lst.get(0);\n        long maximum = minimum;\n        // loop through\
    \ entire array list, with index of from 0 to length.\n        for (int i = 0;\
    \ i < length; i++) {\n            // get the current number inside array.\n  \
    \          long current = lst.get(i);\n            // if the current number is\
    \ greater, then make maximum number as greater.\n            if (current > maximum)\
    \ {\n                maximum = current;\n            }\n            // if the\
    \ current number is smaller, then make minimum number as smaller.\n          \
    \  if (current < minimum) {\n                minimum = current;\n            }\n\
    \        }\n\n        // create new array list to hold new array list with strange\
    \ order.\n        ArrayList<Long> newList = new ArrayList<>();\n        // store\
    \ minimum number in new list.\n        newList.add(minimum);\n        // store\
    \ maximum number in new list.\n        newList.add(maximum);\n\n        // loop\
    \ through entire array list, with index of from 1 to length+1.\n        for (int\
    \ i = 1; i < length + 1; i++) {\n            // get current number inside array.\n\
    \            long current = lst.get(i);\n            // if the current number\
    \ is greater than maximum, then add number to new list.\n            if (current\
    \ > maximum) {\n                newList.add(current);\n            }\n       \
    \     // if the current number is smaller than minimum, then add number to new\
    \ list.\n            if (current < minimum) {\n                newList.add(current);\n\
    \            }\n        }\n\n        // return new array list.\n        return\
    \ newList;\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 4 out of bounds for length 4\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.strangeSortList(tmpdy9brc18.java:48)\n\tat Problem.main(tmpdy9brc18.java:63)\n"
  stdout: ''
  timestamp: 1659976440
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        if (lst.size() <= 1) {\n   \
    \         return lst;\n        }\n\n        // Sort the list in descending order.\n\
    \        Collections.sort(lst, Collections.reverseOrder());\n        // Sort the\
    \ list in ascending order.\n        Collections.sort(lst);\n        // Finally,\
    \ copy the list into the new array.\n        ArrayList<Long> strangeSortList =\
    \ new ArrayList<Long>(lst);\n        return strangeSortList;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz9vzz04y.java:33)\n"
  stdout: ''
  timestamp: 1659976440
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        if (lst.isEmpty())\n       \
    \     return new ArrayList<Long>();\n\n        ArrayList<Long> copy = new ArrayList<Long>(lst);\n\
    \n        for (int i = 0; i < copy.size(); i++) {\n            int j = i + 1;\n\
    \            Long left = lst.get(i);\n            Long right = lst.get(j);\n\n\
    \            if (left == right) {\n                copy.remove(j);\n         \
    \       i++;\n                continue;\n            }\n\n            Long maxValue\
    \ = findMax(copy);\n            Long minValue = findMin(copy);\n\n           \
    \ if (minValue > maxValue) {\n                Long temp = minValue;\n        \
    \        minValue = maxValue;\n                maxValue = temp;\n            }\n\
    \n            if (minValue == maxValue) {\n                copy.remove(j);\n \
    \               copy.remove(i);\n                continue;\n            }\n\n\
    \            int minIndex = Collections.binarySearch(copy, minValue);\n      \
    \      int maxIndex = Collections.binarySearch(copy, maxValue);\n\n          \
    \  Long temp;\n\n            if (minIndex > maxIndex) {\n                temp\
    \ = minValue;\n                minValue = maxValue;\n                maxValue\
    \ = temp;\n            }\n\n            if (minIndex == maxIndex) {\n        \
    \        temp = minValue;\n                minValue = maxValue;\n            \
    \    maxValue = temp;\n            }\n\n            if (minIndex < 0) {\n    \
    \            minIndex = -minIndex;\n                right = -maxValue;\n     \
    \       }\n\n            if (maxIndex < 0) {\n                maxIndex = -maxIndex;\n\
    \                left = -minValue;\n            }\n\n            copy.set(i, maxValue);\n\
    \            copy.set(j, minValue);\n        }\n\n        return copy;\n    }\n\
    \    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4d3tvfyy.java:36: error: cannot find symbol\n            Long maxValue\
    \ = findMax(copy);\n                            ^\n  symbol:   method findMax(ArrayList<Long>)\n\
    \  location: class Problem\n/tmp/tmp4d3tvfyy.java:37: error: cannot find symbol\n\
    \            Long minValue = findMin(copy);\n                            ^\n \
    \ symbol:   method findMin(ArrayList<Long>)\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1659976440
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> sortedList =\
    \ new ArrayList<>();\n        Collections.sort(sortedList, new Comparator<Long>()\
    \ {\n            public int compare(Long a, Long b) {\n                long temp\
    \ = a;\n                a = b;\n                b = temp;\n                return\
    \ a.compareTo(b);\n            }\n        });\n        Collections.reverse(sortedList);\n\
    \        return sortedList;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8ukiyolr.java:33)\n"
  stdout: ''
  timestamp: 1659976440
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        boolean wasFirst = true;\n        for (int i = 0; i\
    \ < lst.size(); i++) {\n            if (!wasFirst) {\n                result.add(lst.get(i));\n\
    \            } else {\n                result.add(lst.get(i - 1));\n         \
    \       wasFirst = false;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ -1 out of bounds for length 4\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.strangeSortList(tmpfp8cqiyq.java:26)\n\tat Problem.main(tmpfp8cqiyq.java:33)\n"
  stdout: ''
  timestamp: 1659976440
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        long maxLong = lst.stream()\n\
    \                .max(Comparator.comparing(Long::longValue))\n               \
    \ .get();\n        long minLong = lst.stream()\n                .min(Comparator.comparing(Long::longValue))\n\
    \                .get();\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long i = minLong;\n        for (long j : lst) {\n            if (i ==\
    \ maxLong) {\n                result.add(minLong);\n                result.add(j);\n\
    \            } else {\n                result.add(j);\n                result.add(i);\n\
    \                i = maxLong;\n            }\n            maxLong++;\n       \
    \ }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpijsjzywo.java:42)\n"
  stdout: ''
  timestamp: 1659976440
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        if(lst.isEmpty()) {\n      \
    \      return new ArrayList<Long>(lst);\n        }\n        ArrayList<Long> result\
    \ = new ArrayList<Long>(lst);\n        long minValue = lst.get(0);\n        long\
    \ maxValue = lst.get(lst.size() - 1);\n        for(int i = 1; i < lst.size();\
    \ i++) {\n            if(lst.get(i) < minValue) {\n                minValue =\
    \ lst.get(i);\n            }\n            if(lst.get(i) > maxValue) {\n      \
    \          maxValue = lst.get(i);\n            }\n        }\n        ArrayList<Long>\
    \ subList = new ArrayList<Long>();\n        for(int i = 0; i <= lst.size() - 1;\
    \ i++) {\n            subList.add(minValue);\n            subList.add(maxValue);\n\
    \            subList.add(lst.get(i));\n        }\n        result = strangeSortList(subList);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659976445
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        if (lst.isEmpty()) {\n     \
    \       return new ArrayList<>();\n        }\n        long minValue = lst.get(0);\n\
    \        long maxValue = lst.get(0);\n        for (long cur : lst) {\n       \
    \     if (cur < minValue) {\n                minValue = cur;\n            }\n\
    \            if (cur > maxValue) {\n                maxValue = cur;\n        \
    \    }\n        }\n        ArrayList<Long> lst2 = new ArrayList<>(lst.size());\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            long index = i;\n\
    \            while (index > 0 && lst.get(index - 1) == maxValue) {\n         \
    \       lst2.add(lst.remove(index - 1));\n                index--;\n         \
    \   }\n            lst2.add(lst.get(i));\n        }\n        return lst2;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3fv8qfaj.java:36: error: incompatible types: possible lossy conversion\
    \ from long to int\n            while (index > 0 && lst.get(index - 1) == maxValue)\
    \ {\n                                              ^\n/tmp/tmp3fv8qfaj.java:37:\
    \ error: incompatible types: boolean cannot be converted to Long\n           \
    \     lst2.add(lst.remove(index - 1));\n                                   ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n2 errors\n"
  stdout: ''
  timestamp: 1659976440
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        List<Long> lst2 = lst.stream().sorted().collect(Collectors.toList());\n\
    \        ArrayList<Long> lst3 = new ArrayList<>(lst2.size());\n        lst3.addAll(lst2);\n\
    \        List<Long> lst4 = lst.stream().sorted().limit(lst2.size()-1).collect(Collectors.toList());\n\
    \        lst3.addAll(lst4);\n        List<Long> lst5 = lst.stream().sorted().limit(lst4.size()-1).collect(Collectors.toList());\n\
    \        lst3.addAll(lst5);\n        return lst3;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpggvy2d9b.java:30)\n"
  stdout: ''
  timestamp: 1659976440
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> sortedList =\
    \ new ArrayList<>(lst);\n\n        sortedList.add(0, Collections.min(sortedList));\n\
    \        sortedList.addAll(Collections.max(sortedList.subList(1, sortedList.size())));\n\
    \        sortedList.add(0, Collections.min(sortedList));\n        return sortedList;\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9gu3b0u_.java:23: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        sortedList.addAll(Collections.max(sortedList.subList(1,\
    \ sortedList.size())));\n                  ^\n    lower bounds: Collection<? extends\
    \ Long>,Long,Object,Comparable<? super T>\n    lower bounds: Long\n  where T is\
    \ a type-variable:\n    T extends Object,Comparable<? super T> declared in method\
    \ <T>max(Collection<? extends T>)\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659976440
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        List<Long> result = new ArrayList<Long>(lst.size());\n\
    \        result.addAll(lst);\n        Collections.sort(result);\n        result.addAll(lst);\n\
    \        Collections.sort(result);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdb1y3_xa.java:25: error: incompatible types: List<Long> cannot\
    \ be converted to ArrayList<Long>\n        return result;\n               ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976440
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        // First sort by minimum value\n\
    \        Collections.sort(lst, new Comparator<Long>() {\n            @Override\n\
    \            public int compare(Long o1, Long o2) {\n                return o1.compareTo(o2);\n\
    \            }\n        });\n        // Now sort by maximum\n        Collections.sort(lst,\
    \ new Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ o1, Long o2) {\n                return o2.compareTo(o1);\n            }\n  \
    \      });\n        // Now sort by minimum\n        Collections.sort(lst, new\
    \ Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ o1, Long o2) {\n                return o1.compareTo(o2);\n            }\n  \
    \      });\n        return lst;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmcxjtagg.java:44)\n"
  stdout: ''
  timestamp: 1659976440
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>(lst);\n        result.sort(Comparator.comparingLong(Long::longValue).reversed());\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq6f4fgi9.java:25)\n"
  stdout: ''
  timestamp: 1659976440
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        PriorityQueue<Long> pq = new\
    \ PriorityQueue<>();\n        pq.addAll(lst);\n        PriorityQueue<Long> pqq\
    \ = new PriorityQueue<>();\n        for (Long l : lst) {\n            pqq.add(l);\n\
    \        }\n        pq.addAll(pqq);\n        ArrayList<Long> lst1 = new ArrayList<>();\n\
    \        while (!pq.isEmpty()) {\n            lst1.add(pq.poll());\n        }\n\
    \        return lst1;\n    }\n    public static void main(String[] args) {\n \
    \   assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptbb0bop3.java:34)\n"
  stdout: ''
  timestamp: 1659976440
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        if(lst.size() <= 1) {\n    \
    \        return lst;\n        }\n        Long min = lst.get(0);\n        Long\
    \ max = lst.get(lst.size() - 1);\n        ArrayList<Long> sorted = new ArrayList<>();\n\
    \        // Iterate over each element and swap it with the minimum element\n \
    \       for(Long elem : lst) {\n            while(elem.compareTo(min) > 0) {\n\
    \                sorted.add(min);\n                min++;\n            }\n   \
    \         while(elem.compareTo(max) < 0) {\n                sorted.add(max);\n\
    \                max--;\n            }\n            sorted.add(elem);\n      \
    \  }\n        return sorted;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp__lgcgzt.java:41)\n"
  stdout: ''
  timestamp: 1659976440
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        // Solution #1\n        ArrayList<Long>\
    \ list = lst;\n        Collections.sort(list, new Comparator<Long>() {\n     \
    \       public int compare(Long o1, Long o2) {\n                int diff = ((Integer)o1.intValue()\
    \ - (Integer)o2.intValue());\n                if(diff != 0) return diff;\n   \
    \             return ((Integer)o1.intValue()).compareTo((Integer)o2.intValue());\n\
    \            }\n        });\n        Collections.sort(list, new Comparator<Long>()\
    \ {\n            public int compare(Long o1, Long o2) {\n                int diff\
    \ = ((Integer)o1.intValue() - (Integer)o2.intValue());\n                if(diff\
    \ != 0) return diff;\n                return ((Integer)o1.intValue()).compareTo((Integer)o2.intValue());\n\
    \            }\n        });\n\n        return list;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7dz7mexv.java:40)\n"
  stdout: ''
  timestamp: 1659976440
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        if (lst.size() > 0) {\n    \
    \        int minIndex = lst.indexOf(Collections.min(lst));\n            int maxIndex\
    \ = lst.indexOf(Collections.max(lst));\n            ArrayList<Long> newArr = new\
    \ ArrayList<Long>(lst.size());\n            List<Long> tempLst = new ArrayList<Long>(lst.size());\n\
    \            for (int i = 0; i < minIndex; i++) {\n                tempLst.add(lst.get(i));\n\
    \            }\n            for (int i = maxIndex; i >= minIndex; i--) {\n   \
    \             tempLst.add(lst.get(i));\n            }\n            for (int j\
    \ = 0; j < tempLst.size(); j++) {\n                newArr.add(tempLst.get(j));\n\
    \            }\n            return newArr;\n        } else {\n            return\
    \ new ArrayList<Long>();\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppx9k82c3.java:40)\n"
  stdout: ''
  timestamp: 1659976441
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> sortedList =\
    \ new ArrayList<Long>();\n\n        Integer min = lst.stream()\n             \
    \   .min(Long::compareTo).get();\n\n        int minIndex = lst.indexOf(min);\n\
    \        sortedList.add(min, lst.subList(minIndex + 1, lst.size()));\n\n     \
    \   Integer max = lst.stream()\n                .max(Long::compareTo).get();\n\
    \        int maxIndex = lst.indexOf(max);\n        sortedList.add(max, lst.subList(maxIndex\
    \ + 1, lst.size()));\n\n        return sortedList;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp37599z6d.java:23: error: incompatible types: Long cannot be converted\
    \ to Integer\n                .min(Long::compareTo).get();\n                 \
    \                        ^\n/tmp/tmp37599z6d.java:26: error: incompatible types:\
    \ List<Long> cannot be converted to Long\n        sortedList.add(min, lst.subList(minIndex\
    \ + 1, lst.size()));\n                                       ^\n/tmp/tmp37599z6d.java:29:\
    \ error: incompatible types: Long cannot be converted to Integer\n           \
    \     .max(Long::compareTo).get();\n                                         ^\n\
    /tmp/tmp37599z6d.java:31: error: incompatible types: List<Long> cannot be converted\
    \ to Long\n        sortedList.add(max, lst.subList(maxIndex + 1, lst.size()));\n\
    \                                       ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n4 errors\n"
  stdout: ''
  timestamp: 1659976441
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        if (lst.size() <= 1) return\
    \ lst;\n        ArrayList<Long> res = new ArrayList<Long>();\n        Long min\
    \ = lst.get(0), max = min;\n        for (long i : lst) {\n            if (i <\
    \ min) min = i;\n            if (i > max) max = i;\n        }\n        res.add(min);\n\
    \        res.add(max);\n        for (long i : lst) {\n            if (i > max)\
    \ res.add(i);\n            if (i < min) res.add(i, (long)-max);\n        }\n \
    \       return res;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp32uz1qsq.java:31: error: incompatible types: possible lossy conversion\
    \ from long to int\n            if (i < min) res.add(i, (long)-max);\n       \
    \                          ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659976441
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> sortedList =\
    \ new ArrayList<Long>();\n        int minValue = lst.get(0);\n        int maxValue\
    \ = lst.get(0);\n        for (int i = 0; i < lst.size(); i++) {\n            if\
    \ (lst.get(i) > maxValue) {\n                maxValue = lst.get(i);\n        \
    \    }\n            if (lst.get(i) < minValue) {\n                minValue = lst.get(i);\n\
    \            }\n        }\n        sortedList.add(minValue);\n        sortedList.add(maxValue);\n\
    \        Collections.reverse(sortedList);\n        return sortedList;\n    }\n\
    \    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1x_grvh3.java:21: error: incompatible types: Long cannot be converted\
    \ to int\n        int minValue = lst.get(0);\n                              ^\n\
    /tmp/tmp1x_grvh3.java:22: error: incompatible types: Long cannot be converted\
    \ to int\n        int maxValue = lst.get(0);\n                              ^\n\
    /tmp/tmp1x_grvh3.java:25: error: incompatible types: Long cannot be converted\
    \ to int\n                maxValue = lst.get(i);\n                           \
    \       ^\n/tmp/tmp1x_grvh3.java:28: error: incompatible types: Long cannot be\
    \ converted to int\n                minValue = lst.get(i);\n                 \
    \                 ^\n/tmp/tmp1x_grvh3.java:31: error: incompatible types: int\
    \ cannot be converted to Long\n        sortedList.add(minValue);\n           \
    \            ^\n/tmp/tmp1x_grvh3.java:32: error: incompatible types: int cannot\
    \ be converted to Long\n        sortedList.add(maxValue);\n                  \
    \     ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n6 errors\n"
  stdout: ''
  timestamp: 1659976441
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        List<Long> list = lst.stream().sorted(Comparator.comparingLong(Long::longValue)).collect(Collectors.toList());\n\
    \        ArrayList<Long> array = new ArrayList<>(list);\n        Collections.sort(array);\n\
    \        return array;\n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnxix8zgb.java:26)\n"
  stdout: ''
  timestamp: 1659976442
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> lstSorted =\
    \ new ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n   \
    \     long max = lst.stream().max().getAsLong();\n        for (int i = 0; i <\
    \ lst.size(); ++i) {\n            long value = lst.get(i);\n            if (value\
    \ < min) {\n                lstSorted.add(value);\n            } else if (value\
    \ > max) {\n                lstSorted.add(max);\n            } else {\n      \
    \          lstSorted.add(value);\n            }\n        }\n        return lstSorted;\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppuundtij.java:21: error: method min in interface Stream<T> cannot\
    \ be applied to given types;\n        long min = lst.stream().min().getAsLong();\n\
    \                               ^\n  required: Comparator<? super Long>\n  found:\
    \    no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    /tmp/tmppuundtij.java:22: error: method max in interface Stream<T> cannot be applied\
    \ to given types;\n        long max = lst.stream().max().getAsLong();\n      \
    \                         ^\n  required: Comparator<? super Long>\n  found:  \
    \  no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659976441
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        if (lst.isEmpty()) throw new\
    \ RuntimeException();\n        ArrayList<Long> strangeOrder = new ArrayList<Long>();\n\
    \        Long minimum = lst.get(0);\n        Long maximum = lst.get(0);\n    \
    \    for (int i = 0; i < lst.size(); i++) {\n            Long currentValue = lst.get(i);\n\
    \            if (minimum > currentValue) minimum = currentValue;\n           \
    \ if (maximum < currentValue) maximum = currentValue;\n        }\n        for\
    \ (int i = 0; i < lst.size(); i++) {\n            Long currentValue = lst.get(i);\n\
    \            if (minimum > currentValue) minimum = currentValue;\n           \
    \ if (maximum < currentValue) maximum = currentValue;\n            strangeOrder.add(currentValue);\n\
    \        }\n        for (int i = 0; i < lst.size(); i++) {\n            Long currentValue\
    \ = lst.get(i);\n            if (minimum > currentValue) minimum = currentValue;\n\
    \            if (maximum < currentValue) maximum = currentValue;\n           \
    \ strangeOrder.add(currentValue);\n        }\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            Long currentValue = lst.get(i);\n            if (minimum\
    \ > currentValue) minimum = currentValue;\n            if (maximum < currentValue)\
    \ maximum = currentValue;\n            strangeOrder.add(currentValue);\n     \
    \   }\n        for (int i = 0; i < lst.size(); i++) {\n            Long currentValue\
    \ = lst.get(i);\n            if (minimum > currentValue) minimum = currentValue;\n\
    \            if (maximum < currentValue) maximum = currentValue;\n           \
    \ strangeOrder.add(currentValue);\n        }\n        return strangeOrder;\n \
    \   }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfmu39pmp.java:56)\n"
  stdout: ''
  timestamp: 1659976442
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> lstOut = new\
    \ ArrayList<>();\n        Long minLst = lst.get(0);\n        Long maxLst = lst.get(lst.size()-1);\n\
    \        for(Long l : lst) {\n            if(l.compareTo(minLst) < 0) {\n    \
    \            minLst = l;\n            } else if(l.compareTo(maxLst) > 0) {\n \
    \               maxLst = l;\n            }\n        }\n        for(Long l : lst)\
    \ {\n            if(l.compareTo(minLst) < 0) {\n                lstOut.add(minLst);\n\
    \                minLst = l;\n            } else if(l.compareTo(maxLst) > 0) {\n\
    \                lstOut.add(maxLst);\n                maxLst = l;\n          \
    \  } else {\n                lstOut.add(l);\n            }\n        }\n      \
    \  return lstOut;\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_gpeq9_7.java:44)\n"
  stdout: ''
  timestamp: 1659976442
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> lst2 = new ArrayList<>();\n\
    \        long cur = lst.get(0); // minimum value\n        for (int i = 1; i <\
    \ lst.size(); i++) { // loop through the rest of the elements\n            long\
    \ tmp = lst.get(i); // current element\n            if (tmp < cur) {\n       \
    \         lst2.add(cur);\n            }\n            lst2.add(tmp);\n        \
    \    cur = tmp;\n        }\n        return lst2;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_at0l0to.java:33)\n"
  stdout: ''
  timestamp: 1659976442
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> lst2 = new ArrayList<>();\n\
    \        if (lst.size() > 0) {\n            Long curr = lst.get(0);\n        \
    \    Long maxval = curr;\n            for (int i = 0; i < lst.size(); i++) {\n\
    \                if (lst.get(i) > maxval) {\n                    maxval = lst.get(i);\n\
    \                }\n            }\n            Long minval = maxval;\n       \
    \     for (int i = lst.size() - 1; i >= 0; i--) {\n                if (lst.get(i)\
    \ < minval) {\n                    minval = lst.get(i);\n                }\n \
    \           }\n            ArrayList<Long> temp = new ArrayList<>();\n       \
    \     for (int i = 0; i < lst.size(); i++) {\n                if (lst.get(i) >\
    \ maxval) {\n                    temp.add(maxval);\n                    maxval\
    \ = lst.get(i);\n                } else if (lst.get(i) < minval) {\n         \
    \           temp.add(minval);\n                    minval = lst.get(i);\n    \
    \            }\n            }\n            lst2.addAll(temp);\n        }\n   \
    \     return lst2;\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnxd8aft8.java:50)\n"
  stdout: ''
  timestamp: 1659976442
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        // Step 1: Initialize an array\
    \ list to hold the sorted list.\n        ArrayList<Long> sortedList = new ArrayList<Long>();\n\
    \        // Step 2: Start with min of list, then max of remaining numbers.\n \
    \       Long min = null;\n        for(Long num : lst) {\n            min = Math.min(min,\
    \ num);\n        }\n        for(Long num : lst) {\n            min = Math.min(min,\
    \ num);\n            sortedList.add(min);\n        }\n        // Step 3: Reverse\
    \ the array list as per requirement.\n        Collections.reverse(sortedList);\n\
    \        // Step 4: Return sorted list.\n        return sortedList;\n    }\n \
    \   public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Long.longValue()\" because \"<local2>\" is null\n\tat Problem.strangeSortList(tmpgy0oochn.java:25)\n\
    \tat Problem.main(tmpgy0oochn.java:37)\n"
  stdout: ''
  timestamp: 1659976442
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        // Create a map to hold the\
    \ index and value of the list.\n        HashMap<Long, Long> map = new HashMap<Long,\
    \ Long>();\n        for (Long l : lst) {\n            map.put(l, l);\n       \
    \ }\n\n        ArrayList<Long> result = new ArrayList<Long>();\n\n        // Create\
    \ a list of all the keys in map.\n        List<Long> keyList = new ArrayList<Long>(map.keySet());\n\
    \        // Sort the keys in reverse order.\n        Collections.sort(keyList);\n\
    \        // Find the minimum value in the map using the key list.\n        //\
    \ If the value is greater than the current minimum then replace it.\n        //\
    \ If the value is smaller than the current minimum then ignore it.\n        Long\
    \ minValue = keyList.get(0);\n        for (Long l : keyList) {\n            Long\
    \ curValue = map.get(l);\n            if (curValue < minValue) {\n           \
    \     minValue = curValue;\n            }\n        }\n\n        // Find the maximum\
    \ value in the map using the key list.\n        // If the value is smaller than\
    \ the current maximum then replace it.\n        // If the value is greater than\
    \ the current maximum then ignore it.\n        Long maxValue = keyList.get(keyList.size()\
    \ - 1);\n        for (Long l : keyList) {\n            Long curValue = map.get(l);\n\
    \            if (curValue > maxValue) {\n                maxValue = curValue;\n\
    \            }\n        }\n\n        // For the first element in the list, assign\
    \ it to the current minimum.\n        result.add(minValue);\n\n        // For\
    \ the remaining elements in the list, assign the corresponding value to the current\
    \ maximum.\n        for (int i = 1; i < keyList.size(); i++) {\n            Long\
    \ curValue = map.get(keyList.get(i));\n            Long newValue = minValue +\
    \ maxValue - curValue;\n            minValue = newValue;\n            result.add(newValue);\n\
    \        }\n\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0ktyyyp4.java:68)\n"
  stdout: ''
  timestamp: 1659976442
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        // If this list is empty, return\
    \ it\n        if (lst.isEmpty()) {\n            return lst;\n        }\n\n   \
    \     // Pick out the minimum number\n        long minValue = lst.get(0);\n\n\
    \        // Pick out the maximum\n        long maxValue = minValue;\n        for\
    \ (long n : lst) {\n            if (n > maxValue) {\n                maxValue\
    \ = n;\n            }\n        }\n\n        // Now that we have both the minimum\
    \ value and the maximum, let's sort them\n        ArrayList<Long> sortedList =\
    \ new ArrayList<Long>(lst);\n        Collections.sort(sortedList);\n\n       \
    \ // Now let's swap the minimum with the first element\n        sortedList.set(0,\
    \ minValue);\n\n        // Now the list is sorted, let's just append the maximum\n\
    \        sortedList.add(maxValue);\n        return sortedList;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt4sbxad9.java:48)\n"
  stdout: ''
  timestamp: 1659976442
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        Arrays.sort(lst);\n        ArrayList<Long>\
    \ result = new ArrayList<>(lst.size());\n        for(Long i : lst)\n         \
    \   result.add(i);\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp3q657n8.java:20: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(lst);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659976442
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        long first = lst.stream().min(Long::compare).get();\n\
    \        long last = lst.stream().max(Long::compare).get();\n        return lst.stream().collect(ArrayList::new,\
    \ ArrayList::add,\n                (first, next) -> new Long(first).compareTo(new\
    \ Long(last)) * -1\n                        + new Long(first).compareTo(new Long(next))\
    \ * 1\n                        + new Long(last).compareTo(new Long(next)) * 1\n\
    \                        + new Long(last).compareTo(new Long(first))).collect(ArrayList::new,\
    \ ArrayList::add,\n                ArrayList::addAll);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7iqp5kaf.java:22: error: no suitable method found for collect(ArrayList::new,ArrayList::add,(first,nex[...]rst)))\n\
    \        return lst.stream().collect(ArrayList::new, ArrayList::add,\n       \
    \                    ^\n    method Stream.<R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super Long>,BiConsumer<R#1,R#1>) is not applicable\n      (cannot infer type-variable(s)\
    \ R#1\n        (argument mismatch; bad return type in lambda expression\n    \
    \      missing return value))\n    method Stream.<R#2,A>collect(Collector<? super\
    \ Long,A,R#2>) is not applicable\n      (cannot infer type-variable(s) R#2,A\n\
    \        (actual and formal argument lists differ in length))\n  where R#1,T,R#2,A\
    \ are type-variables:\n    R#1 extends Object declared in method <R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super T>,BiConsumer<R#1,R#1>)\n    T extends Object declared in interface Stream\n\
    \    R#2 extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \    A extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    /tmp/tmp7iqp5kaf.java:23: error: variable first is already defined in method strangeSortList(ArrayList<Long>)\n\
    \                (first, next) -> new Long(first).compareTo(new Long(last)) *\
    \ -1\n                 ^\n/tmp/tmp7iqp5kaf.java:23: warning: [removal] Long(long)\
    \ in Long has been deprecated and marked for removal\n                (first,\
    \ next) -> new Long(first).compareTo(new Long(last)) * -1\n                  \
    \                                         ^\n/tmp/tmp7iqp5kaf.java:25: warning:\
    \ [removal] Long(long) in Long has been deprecated and marked for removal\n  \
    \                      + new Long(last).compareTo(new Long(next)) * 1\n      \
    \                    ^\n/tmp/tmp7iqp5kaf.java:26: warning: [removal] Long(long)\
    \ in Long has been deprecated and marked for removal\n                       \
    \ + new Long(last).compareTo(new Long(first))).collect(ArrayList::new, ArrayList::add,\n\
    \                          ^\n2 errors\n3 warnings\n"
  stdout: ''
  timestamp: 1659976442
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.get(0);\n        for (int i = 1; i <\
    \ lst.size(); i++) {\n            long temp = lst.get(i);\n            if (temp\
    \ < min) {\n                min = temp;\n            }\n            result.add(temp);\n\
    \        }\n        long max = result.get(0);\n        for (int i = 0; i < result.size();\
    \ i++) {\n            long temp = result.get(i);\n            if (temp > max)\
    \ {\n                max = temp;\n            }\n            result.add(i, max);\n\
    \        }\n        result.add(max, min);\n        return result;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfh6s5hzc.java:37: error: incompatible types: possible lossy conversion\
    \ from long to int\n        result.add(max, min);\n                   ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n1 error\n"
  stdout: ''
  timestamp: 1659976442
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        List<Long> copyList = lst;\n\
    \        copyList.sort(Comparator.comparingLong(x -> x));\n        return copyList;\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpphy5kjhc.java:22: error: incompatible types: List<Long> cannot\
    \ be converted to ArrayList<Long>\n        return copyList;\n               ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976442
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        if (lst.size() <= 1) {\n   \
    \         return lst;\n        }\n        ArrayList<Long> tempList = new ArrayList<>(lst);\n\
    \        // Sort the list with minimum value\n        Collections.sort(tempList,\
    \ Comparator.reverseOrder());\n        // Sort the list with maximum value\n \
    \       Collections.sort(tempList, Comparator.naturalOrder());\n        return\
    \ tempList;\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjemu1pj8.java:31)\n"
  stdout: ''
  timestamp: 1659976442
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        int n = lst.size();\n      \
    \  ArrayList<Long> result = new ArrayList<Long>();\n        List<Long> list =\
    \ new ArrayList<>();\n        list.add(lst.get(0));\n        list.add(lst.get(n-1));\n\
    \        for (int i = 1; i < n; i++) {\n            list.add(lst.get(i));\n  \
    \          list.add(lst.get(n - 1 - i));\n        }\n        for (int i = 0; i\
    \ < list.size(); i++) {\n            result.add(list.get(i));\n        }\n   \
    \     return result;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyilvcal9.java:35)\n"
  stdout: ''
  timestamp: 1659976442
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> newList = new\
    \ ArrayList<>();\n        if (lst.isEmpty()) {\n            return newList;\n\
    \        }\n        long min = lst.get(0);\n        for (long val : lst) {\n \
    \           if (val < min) {\n                min = val;\n            }\n    \
    \    }\n        newList.add(min);\n        max = lst.get(0);\n        for (long\
    \ val : lst) {\n            if (val > max) {\n                max = val;\n   \
    \         }\n        }\n        newList.add(max);\n        for (long val : lst)\
    \ {\n            if (val < min) {\n                min = val;\n            }\n\
    \            if (val > max) {\n                max = val;\n            }\n   \
    \     }\n        newList.add(min);\n        for (long val : lst) {\n         \
    \   if (val < min) {\n                min = val;\n            }\n            if\
    \ (val > max) {\n                max = val;\n            }\n        }\n      \
    \  newList.add(max);\n        return newList;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnf7lizjk.java:31: error: cannot find symbol\n        max = lst.get(0);\n\
    \        ^\n  symbol:   variable max\n  location: class Problem\n/tmp/tmpnf7lizjk.java:33:\
    \ error: cannot find symbol\n            if (val > max) {\n                  \
    \    ^\n  symbol:   variable max\n  location: class Problem\n/tmp/tmpnf7lizjk.java:34:\
    \ error: cannot find symbol\n                max = val;\n                ^\n \
    \ symbol:   variable max\n  location: class Problem\n/tmp/tmpnf7lizjk.java:37:\
    \ error: cannot find symbol\n        newList.add(max);\n                    ^\n\
    \  symbol:   variable max\n  location: class Problem\n/tmp/tmpnf7lizjk.java:42:\
    \ error: cannot find symbol\n            if (val > max) {\n                  \
    \    ^\n  symbol:   variable max\n  location: class Problem\n/tmp/tmpnf7lizjk.java:43:\
    \ error: cannot find symbol\n                max = val;\n                ^\n \
    \ symbol:   variable max\n  location: class Problem\n/tmp/tmpnf7lizjk.java:51:\
    \ error: cannot find symbol\n            if (val > max) {\n                  \
    \    ^\n  symbol:   variable max\n  location: class Problem\n/tmp/tmpnf7lizjk.java:52:\
    \ error: cannot find symbol\n                max = val;\n                ^\n \
    \ symbol:   variable max\n  location: class Problem\n/tmp/tmpnf7lizjk.java:55:\
    \ error: cannot find symbol\n        newList.add(max);\n                    ^\n\
    \  symbol:   variable max\n  location: class Problem\n9 errors\n"
  stdout: ''
  timestamp: 1659976442
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        if (lst.size() == 0) return\
    \ (ArrayList<Long>)lst;\n        ArrayList<Long> resultList = new ArrayList<>();\n\
    \        long minValue = lst.get(0);\n        long maxValue = lst.get(lst.size()-1);\n\
    \        for(int i = 0; i < lst.size(); i++) {\n            long currentValue\
    \ = lst.get(i);\n            if(currentValue > maxValue) {\n                maxValue\
    \ = currentValue;\n                resultList.add(maxValue);\n            }\n\
    \            else if(currentValue < minValue) {\n                minValue = currentValue;\n\
    \                resultList.add(minValue);\n            }\n            else if(currentValue\
    \ == maxValue) {\n                maxValue = currentValue;\n            }\n  \
    \          else if(currentValue == minValue) {\n                minValue = currentValue;\n\
    \            }\n        }\n        Collections.sort(resultList);\n        return\
    \ resultList;\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp85gdlxn9.java:45)\n"
  stdout: ''
  timestamp: 1659976442
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList <Long> sortedLst =\
    \ new ArrayList<>();\n        sortedLst.addAll(lst);\n        ArrayList <Long>\
    \ sortedList = new ArrayList<>();\n        sortedList.add(sortedLst.get(0));\n\
    \        for(int i = 1; i < sortedLst.size(); i++) {\n            Long min = sortedLst.get(i);\n\
    \            Long max = sortedLst.get(i - 1);\n            while (max < min) {\n\
    \                sortedList.add(max);\n                min++;\n            }\n\
    \            sortedList.add(min);\n        }\n        return sortedList;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659976448
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        return lst.stream().sorted().collect(Collectors.toList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv9o773py.java:20: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        return lst.stream().sorted().collect(Collectors.toList());\n\
    \                                            ^\n    equality constraints: List<T#2>\n\
    \    lower bounds: ArrayList<Long>,Object\n  where R,A,T#1,T#2 are type-variables:\n\
    \    R extends Object declared in method <R,A>collect(Collector<? super T#1,A,R>)\n\
    \    A extends Object declared in method <R,A>collect(Collector<? super T#1,A,R>)\n\
    \    T#1 extends Object declared in interface Stream\n    T#2 extends Object declared\
    \ in method <T#2>toList()\n1 error\n"
  stdout: ''
  timestamp: 1659976443
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        Collections.sort(lst);\n   \
    \     Long minValue = lst.get(0);\n        Long maxValue = lst.get(lst.size()\
    \ - 1);\n        Long sortedMin = lst.get(0);\n        Long sortedMax = lst.get(lst.size()\
    \ - 1);\n        \n        System.out.println(String.format(\"Sorted min and max:\
    \ %s and %s\", sortedMin, sortedMax));\n\n        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        long nextMin = minValue;\n        long nextMax = maxValue;\n        \n\
    \        long tmp;\n        while (lst.size() > 1) {\n            tmp = Math.max(minValue,\
    \ maxValue);\n            nextMin = Math.min(minValue, tmp);\n            nextMax\
    \ = Math.max(maxValue, tmp);\n            \n            res.add(nextMin);\n  \
    \          res.add(nextMax);\n            \n            minValue = nextMin;\n\
    \            maxValue = nextMax;\n            lst.subList(1, lst.size()).clear();\n\
    \            lst.add(tmp);\n        }\n        \n        res.add(minValue);\n\
    \        res.add(maxValue);\n        \n        System.out.println(String.format(\"\
    Result list: %s\", res));\n\n        return res;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: 'Sorted min and max: 1 and 4

    '
  timestamp: 1659976448
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        if (lst.size() <= 1)\n     \
    \       return lst;\n        Long min = lst.get(0);\n        Long max = lst.get(0);\n\
    \        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) >\
    \ max) {\n                max = lst.get(i);\n            }\n            if (lst.get(i)\
    \ < min) {\n                min = lst.get(i);\n            }\n        }\n    \
    \    ArrayList<Long> result = new ArrayList<Long>();\n        Collections.sort(lst);\n\
    \        for (Long i : lst) {\n            if (i > max) {\n                result.add(i);\n\
    \            }\n            if (i < min) {\n                result.add(max - min);\n\
    \            }\n            max = i;\n            min = lst.get(result.size()\
    \ - 1);\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ -1 out of bounds for length 4\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.strangeSortList(tmpop0oy74w.java:42)\n\tat Problem.main(tmpop0oy74w.java:47)\n"
  stdout: ''
  timestamp: 1659976443
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Collections.sort(lst, (left, right) -> {\n         \
    \   Long leftValue = left;\n            Long rightValue = right;\n           \
    \ Long minValue;\n            Long maxValue;\n\n            try {\n          \
    \      minValue = findMin(leftValue, rightValue);\n                maxValue =\
    \ findMax(leftValue, rightValue);\n            } catch (NoSuchMethodException\
    \ e) {\n                throw new NoSuchMethodException(\"No such method exception\
    \ occured while sorting \" + leftValue + \" and \" + rightValue, e);\n       \
    \     }\n\n            while (true) {\n                if (minValue == maxValue)\
    \ {\n                    result.add(minValue);\n                    break;\n \
    \               }\n                if (minValue > maxValue) {\n              \
    \      result.add(maxValue);\n                    break;\n                }\n\
    \                result.add(minValue);\n                result.add(maxValue);\n\
    \                minValue = findMin(minValue, maxValue);\n                maxValue\
    \ = findMax(minValue, maxValue);\n            }\n\n            return result;\n\
    \        });\n\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8d7m2b3v.java:28: error: cannot find symbol\n                minValue\
    \ = findMin(leftValue, rightValue);\n                           ^\n  symbol: \
    \  method findMin(Long,Long)\n  location: class Problem\n/tmp/tmp8d7m2b3v.java:29:\
    \ error: cannot find symbol\n                maxValue = findMax(leftValue, rightValue);\n\
    \                           ^\n  symbol:   method findMax(Long,Long)\n  location:\
    \ class Problem\n/tmp/tmp8d7m2b3v.java:31: error: no suitable constructor found\
    \ for NoSuchMethodException(String,NoSuchMethodException)\n                throw\
    \ new NoSuchMethodException(\"No such method exception occured while sorting \"\
    \ + leftValue + \" and \" + rightValue, e);\n                      ^\n    constructor\
    \ NoSuchMethodException.NoSuchMethodException() is not applicable\n      (actual\
    \ and formal argument lists differ in length)\n    constructor NoSuchMethodException.NoSuchMethodException(String)\
    \ is not applicable\n      (actual and formal argument lists differ in length)\n\
    /tmp/tmp8d7m2b3v.java:45: error: cannot find symbol\n                minValue\
    \ = findMin(minValue, maxValue);\n                           ^\n  symbol:   method\
    \ findMin(Long,Long)\n  location: class Problem\n/tmp/tmp8d7m2b3v.java:46: error:\
    \ cannot find symbol\n                maxValue = findMax(minValue, maxValue);\n\
    \                           ^\n  symbol:   method findMax(Long,Long)\n  location:\
    \ class Problem\n/tmp/tmp8d7m2b3v.java:21: error: incompatible types: cannot infer\
    \ type-variable(s) T\n        Collections.sort(lst, (left, right) -> {\n     \
    \                   ^\n    (argument mismatch; bad return type in lambda expression\n\
    \      ArrayList<Long> cannot be converted to int)\n  where T is a type-variable:\n\
    \    T extends Object declared in method <T>sort(List<T>,Comparator<? super T>)\n\
    6 errors\n"
  stdout: ''
  timestamp: 1659976443
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> sorted = new\
    \ ArrayList<>();\n        if (lst.size() > 0) {\n            sorted.add(lst.get(0));\n\
    \            sorted.add(lst.get(lst.size() - 1));\n            Long minVal = lst.get(0);\n\
    \            for (int i = 1; i < lst.size(); i++) {\n                Long val\
    \ = lst.get(i);\n                if (val < minVal) {\n                    minVal\
    \ = val;\n                    sorted.add(val);\n                }\n          \
    \      else {\n                    sorted.add(minVal);\n                    sorted.add(val);\n\
    \                }\n            }\n        }\n        return sorted;\n    }\n\
    \    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpss_szl6q.java:40)\n"
  stdout: ''
  timestamp: 1659976443
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        int n = lst.size();\n      \
    \  int min = 0;\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n\
    \            if (lst.size() <= 1) {\n                return lst;\n           \
    \ }\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n\
    \            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n\
    \            }\n        }\n        int diff = max - min;\n        if (diff ==\
    \ 0) {\n            for (int i = 0; i < n; i++) {\n                lst.set(i,\
    \ min + i);\n            }\n        }\n        else {\n            ArrayList<Long>\
    \ a = new ArrayList<>();\n            for (int i = 0; i < n; i++) {\n        \
    \        a.add(min + i);\n            }\n            sortWithRecursion(a, max,\
    \ min);\n        }\n        return lst;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjwgzdqah.java:28: error: incompatible types: Long cannot be converted\
    \ to int\n                min = lst.get(i);\n                             ^\n\
    /tmp/tmpjwgzdqah.java:31: error: incompatible types: Long cannot be converted\
    \ to int\n                max = lst.get(i);\n                             ^\n\
    /tmp/tmpjwgzdqah.java:37: error: incompatible types: int cannot be converted to\
    \ Long\n                lst.set(i, min + i);\n                               ^\n\
    /tmp/tmpjwgzdqah.java:43: error: incompatible types: int cannot be converted to\
    \ Long\n                a.add(min + i);\n                          ^\n/tmp/tmpjwgzdqah.java:45:\
    \ error: cannot find symbol\n            sortWithRecursion(a, max, min);\n   \
    \         ^\n  symbol:   method sortWithRecursion(ArrayList<Long>,int,int)\n \
    \ location: class Problem\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n5 errors\n"
  stdout: ''
  timestamp: 1659976443
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        long minElem = lst.get(0), maxElem\
    \ = lst.get(0), minIndex = 0, maxIndex = 0;\n        for (long i : lst) {\n  \
    \          if (i < minElem) {\n                minElem = i;\n                minIndex\
    \ = i;\n            }\n            if (i > maxElem) {\n                maxElem\
    \ = i;\n                maxIndex = i;\n            }\n        }\n        ArrayList<Long>\
    \ newlst = new ArrayList<>();\n        for (long i : lst) {\n            if (i\
    \ == minElem) {\n                for (int j = maxIndex; j > minIndex; j--) {\n\
    \                    newlst.add(j);\n                }\n                newlst.add(minIndex);\n\
    \            } else if (i == maxElem) {\n                for (int j = minIndex;\
    \ j < maxIndex; j++) {\n                    newlst.add(j);\n                }\n\
    \                newlst.add(maxIndex);\n            } else {\n               \
    \ newlst.add(i);\n            }\n        }\n        return newlst;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd5ulbgjc.java:34: error: incompatible types: possible lossy conversion\
    \ from long to int\n                for (int j = maxIndex; j > minIndex; j--)\
    \ {\n                             ^\n/tmp/tmpd5ulbgjc.java:35: error: incompatible\
    \ types: int cannot be converted to Long\n                    newlst.add(j);\n\
    \                               ^\n/tmp/tmpd5ulbgjc.java:39: error: incompatible\
    \ types: possible lossy conversion from long to int\n                for (int\
    \ j = minIndex; j < maxIndex; j++) {\n                             ^\n/tmp/tmpd5ulbgjc.java:40:\
    \ error: incompatible types: int cannot be converted to Long\n               \
    \     newlst.add(j);\n                               ^\nNote: Some messages have\
    \ been simplified; recompile with -Xdiags:verbose to get full output\n4 errors\n"
  stdout: ''
  timestamp: 1659976443
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        return lst.stream()\n\
    \                .sorted((x, y) -> {\n                    int c = Long.compare(min++,\
    \ ++max);\n                    return c != 0 ? c : Long.compare(x, y);\n     \
    \           })\n                .collect(Collectors.toCollection(ArrayList::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpat7e9_k6.java:24: error: local variables referenced from a lambda\
    \ expression must be final or effectively final\n                    int c = Long.compare(min++,\
    \ ++max);\n                                         ^\n/tmp/tmpat7e9_k6.java:24:\
    \ error: local variables referenced from a lambda expression must be final or\
    \ effectively final\n                    int c = Long.compare(min++, ++max);\n\
    \                                                  ^\n2 errors\n"
  stdout: ''
  timestamp: 1659976443
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        // Sort the numbers in descending\
    \ order, starting with minimum number in the list\n        Collections.sort(lst,\
    \ Comparator.comparingLong(Long::longValue).reversed());\n        // Return the\
    \ list after sorting and also reverse the list\n        return lst.reverse();\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiazor86h.java:23: error: cannot find symbol\n        return lst.reverse();\n\
    \                  ^\n  symbol:   method reverse()\n  location: variable lst of\
    \ type ArrayList<Long>\n1 error\n"
  stdout: ''
  timestamp: 1659976443
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        if (lst.size() < 2) {\n    \
    \        return lst;\n        }\n        ArrayList<Long> lst2 = new ArrayList<>(lst);\n\
    \        Collections.sort(lst2, new Comparator<Long>() {\n            private\
    \ int counter = 0;\n            public int compare(Long o1, Long o2) {\n     \
    \           counter++;\n                int result = o2.compareTo(o1);\n     \
    \           if (result != 0) {\n                    counter--;\n             \
    \       result = o1.compareTo(o2);\n                }\n                return\
    \ result;\n            }\n        });\n        ArrayList<Long> lst3 = new ArrayList<>(lst2);\n\
    \        Collections.sort(lst3, new Comparator<Long>() {\n            private\
    \ int counter = 0;\n            public int compare(Long o1, Long o2) {\n     \
    \           counter++;\n                int result = o1.compareTo(o2);\n     \
    \           if (result != 0) {\n                    counter--;\n             \
    \       result = o2.compareTo(o1);\n                }\n                return\
    \ result;\n            }\n        });\n        return lst3;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp75812cys.java:52)\n"
  stdout: ''
  timestamp: 1659976443
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        return lst.stream().sorted().collect(Collectors.toList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv9o773py.java:20: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        return lst.stream().sorted().collect(Collectors.toList());\n\
    \                                            ^\n    equality constraints: List<T#2>\n\
    \    lower bounds: ArrayList<Long>,Object\n  where R,A,T#1,T#2 are type-variables:\n\
    \    R extends Object declared in method <R,A>collect(Collector<? super T#1,A,R>)\n\
    \    A extends Object declared in method <R,A>collect(Collector<? super T#1,A,R>)\n\
    \    T#1 extends Object declared in interface Stream\n    T#2 extends Object declared\
    \ in method <T#2>toList()\n1 error\n"
  stdout: ''
  timestamp: 1659976443
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        if (lst.isEmpty()) {\n     \
    \       return new ArrayList<Long>();\n        }\n        ArrayList<Long> returnList\
    \ = new ArrayList<Long>(lst.size());\n        Long min = lst.get(0);\n       \
    \ Long max = lst.get(0);\n        for (Long l : lst) {\n            if (l < min)\
    \ {\n                min = l;\n            }\n            if (l > max) {\n   \
    \             max = l;\n            }\n        }\n        Long restMax = max;\n\
    \        Long restMin = min;\n        for (int i = 1; i < lst.size(); i++) {\n\
    \            Long curr = lst.get(i);\n            if (curr < restMin) {\n    \
    \            restMin = curr;\n            }\n            if (curr > restMax) {\n\
    \                restMax = curr;\n            }\n        }\n        long restSum\
    \ = restMax + restMin;\n        long newRestMin = restMin * 2;\n        long newRestMax\
    \ = restMax * 2;\n        long newMin = min * 2;\n        long newMax = max *\
    \ 2;\n        long newSum = restSum * 2;\n        long newRestSum = newSum + newMin;\n\
    \        long newMaxNewMin = newMax + newRestMin;\n        long newMaxNewMax =\
    \ newMax + newRestMax;\n        long newSumNewMin = newSum + newMaxNewMin;\n \
    \       long newSumNewMax = newSum + newMaxNewMax;\n        ArrayList<Long> tempList\
    \ = new ArrayList<Long>(lst.size());\n        tempList.add(restSum);\n       \
    \ tempList.add(newRestSum);\n        tempList.add(newSum);\n        tempList.add(newSumNewMin);\n\
    \        tempList.add(newSumNewMax);\n        tempList.add(newMin);\n        tempList.add(newMax);\n\
    \        tempList.add(newMaxNewMin);\n        tempList.add(newMaxNewMax);\n  \
    \      returnList.addAll(tempList);\n        returnList.add(0, restMin);\n   \
    \     returnList.add(0, restMax);\n        return returnList;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprbhf4kma.java:72)\n"
  stdout: ''
  timestamp: 1659976444
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> copy = new ArrayList<>();\n\
    \        for (long i: lst)\n            copy.add(i);\n        Collections.sort(copy);\n\
    \        return copy;\n    }\n    public static void main(String[] args) {\n \
    \   assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4hqj0dsx.java:27)\n"
  stdout: ''
  timestamp: 1659976443
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n   \
    \         return lst;\n        }\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        // Keep track of the minimum number\n        long min = getMin(lst, 0);\n\
    \        // Keep track of the maximum number\n        long max = getMax(lst, 0);\n\
    \        // Find the number of values to keep\n        int numValues = getNumValues(lst,\
    \ 0, 0);\n        // Loop through each value and keep track of the min/max values\
    \ \n        // for all the values within that range.\n        for (int i = 0;\
    \ i < lst.size(); i++) {\n            if (lst.get(i) >= min && lst.get(i) < max)\
    \ {\n                min = getMin(res, numValues);\n                max = getMax(res,\
    \ numValues);\n                numValues = getNumValues(lst, min, max);\n    \
    \            res.add(lst.get(i));\n            }\n        }\n        return res;\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo_g8aw17.java:25: error: cannot find symbol\n        long min =\
    \ getMin(lst, 0);\n                   ^\n  symbol:   method getMin(ArrayList<Long>,int)\n\
    \  location: class Problem\n/tmp/tmpo_g8aw17.java:27: error: cannot find symbol\n\
    \        long max = getMax(lst, 0);\n                   ^\n  symbol:   method\
    \ getMax(ArrayList<Long>,int)\n  location: class Problem\n/tmp/tmpo_g8aw17.java:29:\
    \ error: cannot find symbol\n        int numValues = getNumValues(lst, 0, 0);\n\
    \                        ^\n  symbol:   method getNumValues(ArrayList<Long>,int,int)\n\
    \  location: class Problem\n/tmp/tmpo_g8aw17.java:34: error: cannot find symbol\n\
    \                min = getMin(res, numValues);\n                      ^\n  symbol:\
    \   method getMin(ArrayList<Long>,int)\n  location: class Problem\n/tmp/tmpo_g8aw17.java:35:\
    \ error: cannot find symbol\n                max = getMax(res, numValues);\n \
    \                     ^\n  symbol:   method getMax(ArrayList<Long>,int)\n  location:\
    \ class Problem\n/tmp/tmpo_g8aw17.java:36: error: cannot find symbol\n       \
    \         numValues = getNumValues(lst, min, max);\n                         \
    \   ^\n  symbol:   method getNumValues(ArrayList<Long>,long,long)\n  location:\
    \ class Problem\n6 errors\n"
  stdout: ''
  timestamp: 1659976443
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n   \
    \         return lst;\n        }\n        ArrayList<Long> result = new ArrayList<Long>(lst);\n\
    \        // Sort from min to max and reverse it\n        result.sort(Long::compareTo);\n\
    \        result.reverse();\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp40z7c140.java:26: error: cannot find symbol\n        result.reverse();\n\
    \              ^\n  symbol:   method reverse()\n  location: variable result of\
    \ type ArrayList<Long>\n1 error\n"
  stdout: ''
  timestamp: 1659976443
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        return lst.stream()\n      \
    \      .sorted((o1, o2) -> o1 < o2 ? -1 : o1 > o2 ? 1 : 0)\n            .collect(Collectors.toList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1u8d_to2.java:22: error: incompatible types: inference variable\
    \ R has incompatible bounds\n            .collect(Collectors.toList());\n    \
    \                ^\n    equality constraints: List<T#2>\n    lower bounds: ArrayList<Long>,Object\n\
    \  where R,A,T#1,T#2 are type-variables:\n    R extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    A extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    T#1 extends Object declared in\
    \ interface Stream\n    T#2 extends Object declared in method <T#2>toList()\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976443
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> copy = new ArrayList<>();\n\
    \        if (lst.isEmpty()) return copy;\n        copy.add(lst.remove(0));\n \
    \       for (int i = lst.size() - 1; i >= 0; i--) {\n            copy.add(lst.remove(0));\n\
    \        }\n        copy.addAll(lst);\n        return copy;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpazganiiz.java:30)\n"
  stdout: ''
  timestamp: 1659976443
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        // Your code here\n        return\
    \ lst;\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpks6zc_i0.java:24)\n"
  stdout: ''
  timestamp: 1659976443
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> resLst = new\
    \ ArrayList<>();\n        // find min value\n        long min = lst.get(0);\n\
    \        for (Long l : lst) {\n            if (l < min) {\n                min\
    \ = l;\n            }\n        }\n        // find max value\n        long max\
    \ = lst.get(0);\n        for (Long l : lst) {\n            if (l > max) {\n  \
    \              max = l;\n            }\n        }\n        // sort remaining values\n\
    \        long currentSum = 0;\n        for (Long l : lst) {\n            currentSum\
    \ += l;\n        }\n        long currentSum2 = currentSum;\n        // find next\
    \ minimum\n        while (currentSum2 < currentSum) {\n            for (int i\
    \ = 0; i < lst.size(); i++) {\n                currentSum += lst.get(i);\n   \
    \             currentSum2 = currentSum;\n            }\n            // add minimum\
    \ to results\n            resLst.add(min);\n            // find next minimum\n\
    \            while (currentSum2 < currentSum) {\n                for (int i =\
    \ 0; i < lst.size(); i++) {\n                    currentSum += lst.get(i);\n \
    \                   currentSum2 = currentSum;\n                }\n           \
    \     // add minimum to results\n                resLst.add(min);\n          \
    \  }\n            // find next maximum\n            while (currentSum > currentSum2)\
    \ {\n                for (int i = 0; i < lst.size(); i++) {\n                \
    \    currentSum += lst.get(i);\n                    currentSum2 = currentSum;\n\
    \                }\n                // add maximum to results\n              \
    \  resLst.add(max);\n            }\n            // find next minimum\n       \
    \     while (currentSum > currentSum2) {\n                for (int i = 0; i <\
    \ lst.size(); i++) {\n                    currentSum += lst.get(i);\n        \
    \            currentSum2 = currentSum;\n                }\n                //\
    \ add maximum to results\n                resLst.add(max);\n            }\n  \
    \      }\n        return resLst;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1xcpcy13.java:80)\n"
  stdout: ''
  timestamp: 1659976443
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        if (lst.size() == 1)\n     \
    \       return lst;\n        Arrays.sort(lst);\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        int i = lst.size() - 1;\n        while (i\
    \ >= 1) {\n            while (lst.contains(i) && lst.contains(i - 1) && lst.contains(i\
    \ - 2)) {\n                result.add(lst.get(i));\n                lst.add(0,\
    \ lst.get(i));\n                lst.remove(lst.size() - 1);\n                lst.add(0,\
    \ lst.get(i));\n                lst.add(0, lst.get(i));\n                i--;\n\
    \            }\n            i--;\n        }\n        return result;\n    }\n \
    \   public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpokac1mp2.java:22: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(lst);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659976443
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        Comparator<Long> cmp = (a, b)\
    \ -> a < b ? 1 : a > b ? -1 : 0;\n\n        ArrayList<Long> copy = new ArrayList<>();\n\
    \n        copy.addAll(lst);\n        Collections.sort(copy, cmp);\n\n        ArrayList<Long>\
    \ reordered = new ArrayList<>();\n        for (int i = 0; i < copy.size(); i++)\
    \ {\n            long temp = copy.get(i);\n            while (copy.size() >= 2\
    \ && temp.equals(copy.get(copy.size() - 1))) {\n                temp += copy.get(copy.size()\
    \ - 1);\n                copy.remove(copy.size() - 1);\n            }\n      \
    \      copy.add(i, temp);\n            reordered.add(temp);\n        }\n\n   \
    \     return reordered;\n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk9l6w3k9.java:30: error: long cannot be dereferenced\n        \
    \    while (copy.size() >= 2 && temp.equals(copy.get(copy.size() - 1))) {\n  \
    \                                         ^\n1 error\n"
  stdout: ''
  timestamp: 1659976444
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        Collections.sort(lst);\n   \
    \     int i = 0;\n        Collections.reverse(lst);\n        while (i < lst.size())\
    \ {\n            if (lst.get(i).equals(lst.get((i + 1) + lst.size() - 1))) {\n\
    \                lst.remove(i + 1);\n                lst.remove(i);\n        \
    \        lst.set(i, lst.get(i));\n                Collections.sort(lst);\n   \
    \             Collections.reverse(lst);\n                lst.set(i, lst.get(i));\n\
    \                Collections.sort(lst);\n                Collections.reverse(lst);\n\
    \                lst.set(i, lst.get(i));\n                Collections.sort(lst);\n\
    \                Collections.reverse(lst);\n                Collections.sort(lst);\n\
    \                Collections.reverse(lst);\n                Collections.sort(lst);\n\
    \                Collections.reverse(lst);\n                Collections.sort(lst);\n\
    \                Collections.reverse(lst);\n                Collections.sort(lst);\n\
    \                Collections.reverse(lst);\n                Collections.sort(lst);\n\
    \                Collections.reverse(lst);\n                Collections.sort(lst);\n\
    \                Collections.reverse(lst);\n                Collections.sort(lst);\n\
    \                Collections.reverse(lst);\n                Collections.sort(lst);\n\
    \                Collections.reverse(lst);\n                Collections.sort(lst);\n\
    \                Collections.reverse(lst);\n                Collections.sort(lst);\n\
    \                Collections.reverse(lst);\n                Collections.sort(lst);\n\
    \                Collections.reverse(lst);\n                Collections.sort(lst);\n\
    \                Collections.reverse(lst);\n                Collections.sort(lst);\n\
    \                Collections.reverse(lst);\n                Collections.sort(lst);\n\
    \                Collections.reverse(lst);\n                Collections.sort(lst);\n\
    \                Collections.reverse(lst);\n                Collections.sort(lst);\n\
    \                Collections.reverse(lst);\n                Collections.sort(lst);\n\
    \                Collections.reverse(lst);\n                Collections.sort(lst);\n\
    \                Collections.reverse(lst);\n                Collections.sort(lst);\n\
    \                Collections.reverse(lst);\n                Collections.sort(lst);\n\
    \                Collections.reverse(lst);\n                Collections.sort(lst);\n\
    \                Collections.reverse(lst);\n                Collections.sort(lst);\n\
    \                Collections.reverse(lst);\n                Collections.sort(lst);\n\
    \                Collections.reverse(lst);\n                Collections.sort(lst);\n\
    \                Collections.reverse(lst);\n                Collections.sort(lst);\n\
    \                Collections.reverse(lst);\n                Collections.sort(lst);\n\
    \                Collections.reverse(lst);\n                Collections.sort(lst);\n\
    \                Collections.reverse(lst);\n                Collections.sort(lst);\n\
    \                Collections.reverse(lst);\n                Collections.sort(lst);\n\
    \                Collections.reverse(lst);\n                Collections.sort(lst);\n\
    \                Collections.reverse(lst);\n                Collections.sort(lst\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp34tbfouz.java:96: error: ')' expected\n                Collections.sort(lst\n\
    \                                    ^\n/tmp/tmp34tbfouz.java:98: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n    ^\n2\
    \ errors\n"
  stdout: ''
  timestamp: 1659976444
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        // Sort in the ascending order\n        Collections.sort(lst);\n\
    \        // If size of list is 0, return null\n        if (lst.size() == 0)\n\
    \            return null;\n        // For every element in the list\n        for\
    \ (int i = 0; i < lst.size(); i++) {\n            long temp = lst.get(i);\n  \
    \          // Get the maximum of the remaining elements in the list\n        \
    \    long max = findMax(lst);\n            // Get the minimum of the remaining\
    \ elements in the list\n            long min = findMin(lst);\n            // If\
    \ minimum element\n            if (min == temp) {\n                result.add(temp);\n\
    \                // If maximum element\n            } else if (max == temp) {\n\
    \                result.add(max);\n                // If minimum element and maximum\
    \ element\n            } else if (min == max) {\n                result.add(max);\n\
    \                result.add(min);\n                // If all elements are the\
    \ same\n            } else if (i == lst.size() - 1)\n                result.add(temp);\n\
    \            // If not minimum and not maximum, add all elements\n           \
    \ // except minimum element and maximum element to the result\n            else\n\
    \                result.add(temp);\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpik7rab9j.java:30: error: cannot find symbol\n            long max\
    \ = findMax(lst);\n                       ^\n  symbol:   method findMax(ArrayList<Long>)\n\
    \  location: class Problem\n/tmp/tmpik7rab9j.java:32: error: cannot find symbol\n\
    \            long min = findMin(lst);\n                       ^\n  symbol:   method\
    \ findMin(ArrayList<Long>)\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1659976444
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        if (lst.size() > 1) {\n    \
    \        // swap the first two elements\n            Long firstElem = lst.get(0);\n\
    \            Long secondElem = lst.get(1);\n            lst.clear();\n       \
    \     lst.add(firstElem);\n            lst.add(secondElem);\n\n            Long\
    \ thirdElem = lst.get(2);\n            lst.clear();\n            lst.add(thirdElem);\n\
    \            lst.add(firstElem);\n\n            Long fourthElem = lst.get(3);\n\
    \            lst.clear();\n            lst.add(fourthElem);\n            lst.add(secondElem);\n\
    \n            Long fifthElem = lst.get(4);\n            lst.clear();\n       \
    \     lst.add(fifthElem);\n            lst.add(thirdElem);\n\n            Long\
    \ sixthElem = lst.get(5);\n            lst.clear();\n            lst.add(sixthElem);\n\
    \            lst.add(fourthElem);\n        }\n        return lst;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 2 out of bounds for length 2\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.strangeSortList(tmp95g8hbgp.java:28)\n\tat Problem.main(tmp95g8hbgp.java:51)\n"
  stdout: ''
  timestamp: 1659976445
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        Comparator<Long> comp = (o1,\
    \ o2) -> {\n            if (o1 == null) {\n                return o2 == null ?\
    \ 0 : -1;\n            } else if (o2 == null) {\n                return 1;\n \
    \           } else {\n                return (int) (o1 - o2);\n            }\n\
    \        };\n\n        if (lst.size() <= 1) {\n            return lst;\n     \
    \   }\n\n        ArrayList<Long> sortedList = new ArrayList<>();\n        sortedList.add(lst.get(0).longValue());\n\
    \        Collections.sort(lst, comp);\n        for (Integer i : IntStream.range(1,\
    \ lst.size()).toArray()) {\n            sortedList.add(lst.get(i).longValue());\n\
    \        }\n\n        return sortedList;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpap514y5f.java:44)\n"
  stdout: ''
  timestamp: 1659976445
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        if (lst.size() == 0)\n     \
    \       return lst;\n        PriorityQueue<Long> pq = new PriorityQueue<>();\n\
    \        pq.add(lst.get(0));\n        for (long i = 1, max = lst.get(0); i <=\
    \ lst.size(); i++) {\n            max = Math.max(max, lst.get(i));\n         \
    \   if (max != lst.get(i)) {\n                pq.add(max);\n                max\
    \ = lst.get(i);\n            }\n        }\n        while (!pq.isEmpty()) {\n \
    \           long elem = pq.poll();\n            pq.add(elem);\n            pq.add(lst.get(lst.size()\
    \ - 1));\n        }\n        return lst;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfhrpoi4n.java:25: error: incompatible types: possible lossy conversion\
    \ from long to int\n            max = Math.max(max, lst.get(i));\n           \
    \                             ^\n/tmp/tmpfhrpoi4n.java:26: error: incompatible\
    \ types: possible lossy conversion from long to int\n            if (max != lst.get(i))\
    \ {\n                               ^\n/tmp/tmpfhrpoi4n.java:28: error: incompatible\
    \ types: possible lossy conversion from long to int\n                max = lst.get(i);\n\
    \                              ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1659976445
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        System.out.println(\"lst: \"\
    \ + lst);\n        ArrayList<Long> result = new ArrayList<Long>();\n        long\
    \ min = Collections.min(lst);\n        long max = Collections.max(lst);\n    \
    \    long mid = min + (max - min) / 2;\n        System.out.println(min + \"-\"\
    \ + max + \" - mid: \" + mid);\n        // now we have the midpoint between min\
    \ and max, so create new list from min to mid, from mid+1 to max, from max to\
    \ min\n        // and add them to the result list\n        for (long i = min;\
    \ i <= max; i++) {\n            for (long j = i; j <= max; j++) {\n          \
    \      if (j >= mid) {\n                    result.add(j);\n                }\n\
    \                else if (j <= mid) {\n                    result.add(j);\n  \
    \              }\n            }\n        }\n        for (long i = max; i >= min;\
    \ i--) {\n            for (long j = i; j >= min; j--) {\n                if (j\
    \ <= mid) {\n                    result.add(j);\n                }\n         \
    \       else if (j >= mid) {\n                    result.add(j);\n           \
    \     }\n            }\n        }\n        System.out.println(result);\n     \
    \   return result;\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpycpi4e66.java:52)\n"
  stdout: 'lst: [1, 2, 3, 4]

    1-4 - mid: 2

    [1, 2, 3, 4, 2, 3, 4, 3, 4, 4, 4, 3, 2, 1, 3, 2, 1, 2, 1, 1]

    '
  timestamp: 1659976445
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        if (lst.size() <= 1)\n     \
    \       return lst;\n\n        ArrayList<Long> result = new ArrayList<>(lst.size());\n\
    \        Long min = lst.get(0);\n        Long max = lst.get(0);\n        for (long\
    \ val : lst) {\n            if (val > max)\n                max = val;\n     \
    \       else if (val < min)\n                min = val;\n        }\n        for\
    \ (long val : lst) {\n            if (val > max) {\n                result.add(max);\n\
    \                max = val;\n            } else if (val < min) {\n           \
    \     result.add(min);\n                min = val;\n            } else {\n   \
    \             result.add(val);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps1krbdi5.java:46)\n"
  stdout: ''
  timestamp: 1659976445
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> l = new ArrayList<Long>(lst);\n\
    \        l.sort(Comparator.reverseOrder());\n        return l;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4_zw6mnq.java:25)\n"
  stdout: ''
  timestamp: 1659976445
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        // Your code goes here\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        Collections.sort(lst,\
    \ (o1, o2) -> Long.compare(o1, o2));\n        for(Long i : lst) {\n          \
    \  result.add(i);\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptaktca5y.java:29)\n"
  stdout: ''
  timestamp: 1659976445
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> list = new ArrayList<Long>();\n\
    \        Long min = lst.stream().min(Long::compareTo).get();\n        Long max\
    \ = lst.stream().max(Long::compareTo).get();\n\n        // first part - put min\
    \ to first position\n        // min is the first element of lst so put it to the\
    \ first position\n        // if min is greater than 0 then we need to shift all\
    \ the elemnts less than min to first position.\n        if(min > 0) {\n      \
    \      for(int i = 0; i < lst.size(); i++) {\n                if(lst.get(i) <\
    \ min) {\n                    list.add(lst.size() - 1 - i, min);\n           \
    \         break;\n                }\n            }\n        }\n\n        // now\
    \ put max at the end of list\n        // if max is greater than 0 then we need\
    \ to shift all the elemnts greater than max to the end of list.\n        if(max\
    \ > 0) {\n            for(int i = lst.size() - 1; i >= 0; i--) {\n           \
    \     if(lst.get(i) > max) {\n                    list.add(0, max);\n        \
    \            break;\n                }\n            }\n        }\n\n        return\
    \ list;\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8hm4ph_c.java:50)\n"
  stdout: ''
  timestamp: 1659976445
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> ret = new ArrayList<>();\n\
    \n        Collections.sort(lst);\n        ret.addAll(lst);\n\n        Collections.reverse(ret);\n\
    \        return ret;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkmia1ygh.java:29)\n"
  stdout: ''
  timestamp: 1659976445
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        if(lst.isEmpty()){\n       \
    \     return new ArrayList<Long>();\n        }\n        long minLstIndex = lst.get(lst.size()-1);\n\
    \        long maxLstIndex = lst.get(0);\n\n        ArrayList<Long> ret = new ArrayList<Long>();\n\
    \        ret.addAll(lst);\n\n        long minValue = lst.get(0);\n        for\
    \ (int i = 0; i < lst.size(); i++) {\n            if (minValue > lst.get(i)) {\n\
    \                minValue = lst.get(i);\n                minLstIndex = i;\n  \
    \          }\n        }\n\n        int minLstPos = 0;\n        for (int i = 0;\
    \ i < lst.size(); i++) {\n            if (lst.get(i) == minValue) {\n        \
    \        minLstPos = i;\n                break;\n            }\n        }\n\n\
    \        long maxValue = lst.get(lst.size()-1);\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (maxValue < lst.get(i)) {\n                maxValue =\
    \ lst.get(i);\n                maxLstIndex = i;\n            }\n        }\n\n\
    \        int maxLstPos = 0;\n        for (int i = 0; i < lst.size(); i++) {\n\
    \            if (lst.get(i) == maxValue) {\n                maxLstPos = i;\n \
    \               break;\n            }\n        }\n\n        if (minLstPos > maxLstPos)\
    \ {\n            return strangeSortList(lst);\n        }\n\n        long tmpLstVal\
    \ = lst.get(minLstPos);\n        long tmpLstPos = minLstPos;\n\n        int tmpLstIndex\
    \ = minLstPos;\n        for (int i = 0; i < lst.size(); i++) {\n            if\
    \ (tmpLstPos == minLstPos) {\n                tmpLstIndex = i;\n             \
    \   break;\n            }\n            if (tmpLstPos == maxLstPos) {\n       \
    \         tmpLstPos = i;\n            }\n            if (tmpLstIndex == minLstPos)\
    \ {\n                tmpLstIndex = i;\n            }\n            if (tmpLstIndex\
    \ == maxLstPos) {\n                tmpLstPos = i;\n            }\n        }\n\n\
    \        tmpLstVal = lst.get(tmpLstPos);\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i < tmpLstPos) {\n                ret.add(lst.get(i));\n\
    \            } else if (i > tmpLstPos) {\n                ret.add(tmpLstVal);\n\
    \            }\n        }\n        return ret;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjvxl0k7_.java:85: error: incompatible types: possible lossy conversion\
    \ from long to int\n        tmpLstVal = lst.get(tmpLstPos);\n                \
    \            ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659976445
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        int min = 0;\n        int max\
    \ = lst.get(0).intValue();\n        for (int i = 1; i < lst.size(); i++) {\n \
    \           int curr = lst.get(i).intValue();\n            if (curr < min) {\n\
    \                min = curr;\n            } else if (curr > max) {\n         \
    \       max = curr;\n            }\n        }\n        int middle = (min + max)\
    \ / 2;\n        ArrayList<Long> left = new ArrayList<Long>();\n        ArrayList<Long>\
    \ right = new ArrayList<Long>();\n        for (int i = 0; i < lst.size(); i++)\
    \ {\n            if (i < middle) {\n                left.add(lst.get(i));\n  \
    \          } else if (i > middle) {\n                right.add(lst.get(i));\n\
    \            }\n        }\n        left.addAll(right);\n        right.addAll(left);\n\
    \        left = strangeSortList(left);\n        right = strangeSortList(right);\n\
    \        ArrayList<Long> resultList = new ArrayList<Long>();\n        resultList.addAll(left);\n\
    \        resultList.addAll(right);\n        return resultList;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.strangeSortList(tmppiimvhwo.java:21)\n\tat Problem.strangeSortList(tmppiimvhwo.java:42)\n\
    \tat Problem.strangeSortList(tmppiimvhwo.java:42)\n\tat Problem.strangeSortList(tmppiimvhwo.java:42)\n\
    \tat Problem.strangeSortList(tmppiimvhwo.java:42)\n\tat Problem.main(tmppiimvhwo.java:50)\n"
  stdout: ''
  timestamp: 1659976445
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        if (lst.size() < 1) {\n    \
    \        return lst;\n        }\n        Arrays.sort(lst.subList(1, lst.size()));\n\
    \        Collections.swap(lst, 1, lst.size());\n        Collections.swap(lst,\
    \ 0, lst.size() - 1);\n        Collections.rotate(lst, 1, lst.size() - 1);\n \
    \       Collections.swap(lst, 0, lst.size() - 1);\n        return lst;\n    }\n\
    \    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplh3hhc5u.java:23: error: no suitable method found for sort(List<Long>)\n\
    \        Arrays.sort(lst.subList(1, lst.size()));\n              ^\n    method\
    \ Arrays.sort(int[]) is not applicable\n      (argument mismatch; List<Long> cannot\
    \ be converted to int[])\n    method Arrays.sort(long[]) is not applicable\n \
    \     (argument mismatch; List<Long> cannot be converted to long[])\n    method\
    \ Arrays.sort(short[]) is not applicable\n      (argument mismatch; List<Long>\
    \ cannot be converted to short[])\n    method Arrays.sort(char[]) is not applicable\n\
    \      (argument mismatch; List<Long> cannot be converted to char[])\n    method\
    \ Arrays.sort(byte[]) is not applicable\n      (argument mismatch; List<Long>\
    \ cannot be converted to byte[])\n    method Arrays.sort(float[]) is not applicable\n\
    \      (argument mismatch; List<Long> cannot be converted to float[])\n    method\
    \ Arrays.sort(double[]) is not applicable\n      (argument mismatch; List<Long>\
    \ cannot be converted to double[])\n    method Arrays.sort(Object[]) is not applicable\n\
    \      (argument mismatch; List<Long> cannot be converted to Object[])\n    method\
    \ Arrays.<T#1>sort(T#1[],Comparator<? super T#1>) is not applicable\n      (cannot\
    \ infer type-variable(s) T#1\n        (actual and formal argument lists differ\
    \ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<? super T#2>)\
    \ is not applicable\n      (cannot infer type-variable(s) T#2\n        (actual\
    \ and formal argument lists differ in length))\n  where T#1,T#2 are type-variables:\n\
    \    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<? super\
    \ T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmplh3hhc5u.java:26: error: method rotate in class Collections\
    \ cannot be applied to given types;\n        Collections.rotate(lst, 1, lst.size()\
    \ - 1);\n                   ^\n  required: List<?>,int\n  found:    ArrayList<Long>,int,int\n\
    \  reason: actual and formal argument lists differ in length\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full ou"
  stdout: ''
  timestamp: 1659976445
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> lst1 = new ArrayList<>();\n\
    \        ArrayList<Long> lst2 = new ArrayList<>();\n        ArrayList<Long> lst3\
    \ = new ArrayList<>();\n        long x = 0;\n        long y = 0;\n        long\
    \ z = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            x = lst.get(i);\n\
    \            lst1.add(x);\n            if (i < lst.size() - 1) {\n           \
    \     y = lst.get(i + 1);\n                lst2.add(y);\n                if (i\
    \ > 0) {\n                    z = lst.get(i - 1);\n                    lst3.add(z);\n\
    \                }\n            }\n        }\n        long min1 = Long.MAX_VALUE;\n\
    \        long max1 = Long.MIN_VALUE;\n        long min2 = Long.MAX_VALUE;\n  \
    \      long max2 = Long.MIN_VALUE;\n        long min3 = Long.MAX_VALUE;\n    \
    \    long max3 = Long.MIN_VALUE;\n        for (int i = 0; i < lst2.size(); i++)\
    \ {\n            if (lst2.get(i) < min1) {\n                min1 = lst2.get(i);\n\
    \            }\n            if (lst2.get(i) > max1) {\n                max1 =\
    \ lst2.get(i);\n            }\n        }\n        for (int i = 0; i < lst3.size();\
    \ i++) {\n            if (lst3.get(i) < min2) {\n                min2 = lst3.get(i);\n\
    \            }\n            if (lst3.get(i) > max2) {\n                max2 =\
    \ lst3.get(i);\n            }\n        }\n        for (int i = 0; i < lst1.size();\
    \ i++) {\n            if (lst1.get(i) < min3) {\n                min3 = lst1.get(i);\n\
    \            }\n            if (lst1.get(i) > max3) {\n                max3 =\
    \ lst1.get(i);\n            }\n        }\n        ArrayList<Long> newlst = new\
    \ ArrayList<>();\n        for (int i = 0; i < lst1.size(); i++) {\n          \
    \  if (lst1.get(i) < min1) {\n                newlst.add(lst1.get(i));\n     \
    \       } else if (lst1.get(i) > max1) {\n                newlst.add(lst1.get(i));\n\
    \            } else {\n                newlst.add(lst2.get(i));\n            }\n\
    \        }\n        for (int i = 0; i < lst2.size(); i++) {\n            if (lst2.get(i)\
    \ < min2) {\n                newlst.add(lst2.get(i));\n            } else if (lst2.get(i)\
    \ > max2) {\n                newlst.add(lst2.get(i));\n            } else {\n\
    \                newlst.add(lst3.get(i));\n            }\n        }\n        for\
    \ (int i = 0; i < lst3.size(); i++) {\n            if (lst3.get(i) < min3) {\n\
    \                newlst.add(lst3.get(i));\n            } else if (lst3.get(i)\
    \ > max3) {\n                newlst.add(lst3.get(i));\n            } else {\n\
    \                newlst.add(lst1.get(i));\n            }\n        }\n    }\n \
    \   public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgl4xxio4.java:96: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976445
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        final int len = lst.size();\n\
    \n        ArrayList<Long> resultList = new ArrayList<>(len);\n\n        if (len\
    \ == 1) {\n            resultList.add(lst.get(0));\n            return resultList;\n\
    \        }\n\n        Long minVal = lst.get(0);\n        Long maxVal = lst.get(len\
    \ - 1);\n\n        long minValInt = minVal;\n        long maxValInt = maxVal;\n\
    \n        boolean swapped = false;\n\n        for (int i = 1; i < len; i++) {\n\
    \            Long elem = lst.get(i);\n\n            if (elem < minValInt) {\n\
    \                minValInt = elem;\n            } else if (elem > maxValInt) {\n\
    \                maxValInt = elem;\n            } else {\n                if (minValInt\
    \ < maxValInt) {\n                    resultList.add(minValInt);\n           \
    \         minValInt = minValInt;\n                } else {\n                 \
    \   resultList.add(maxValInt);\n                    maxValInt = maxValInt;\n \
    \                   swapped = true;\n                }\n            }\n      \
    \  }\n\n        if (swapped)\n            resultList.add(minValInt);\n       \
    \ resultList.add(maxValInt);\n\n        return resultList;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx4ncfbwy.java:63)\n"
  stdout: ''
  timestamp: 1659976445
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        // write your code here\n  \
    \      \n        return lst;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7wrk6x0k.java:25)\n"
  stdout: ''
  timestamp: 1659976445
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        Arrays.sort(lst);\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (Long i : lst) {\n            result.add(i);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk_pu77vi.java:20: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(lst);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659976445
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        if (lst.isEmpty()) {\n     \
    \       return lst;\n        }\n        Long minimum = lst.get(0);\n        Long\
    \ maximum = lst.get(0);\n        for (Long val : lst) {\n            if (val <\
    \ minimum) {\n                minimum = val;\n            }\n            if (val\
    \ > maximum) {\n                maximum = val;\n            }\n        }\n   \
    \     ArrayList<Long> sortedList = new ArrayList<Long>(lst);\n        Collections.sort(sortedList);\n\
    \        Long temp = minimum;\n        minimum = maximum;\n        maximum = temp;\n\
    \        if (minimum > maximum) {\n            ArrayList<Long> strangeList = new\
    \ ArrayList<Long>(lst);\n            Collections.sort(strangeList);\n        \
    \    temp = minimum;\n            minimum = maximum;\n            maximum = temp;\n\
    \        }\n        return strangeList;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsk8ueahe.java:45: error: cannot find symbol\n        return strangeList;\n\
    \               ^\n  symbol:   variable strangeList\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976446
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        List<Long> lst2 = new ArrayList<>(lst);\n\
    \        Collections.sort(lst2);\n        return lst2;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8opr8smo.java:22: error: incompatible types: List<Long> cannot\
    \ be converted to ArrayList<Long>\n        return lst2;\n               ^\n1 error\n"
  stdout: ''
  timestamp: 1659976445
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> newList = new\
    \ ArrayList<>();\n        if (lst.isEmpty()) {\n            return newList;\n\
    \        }\n        // Get the minimum element from the list\n        Long minValue\
    \ = lst.get(0);\n        // Get the maximum element from the list\n        Long\
    \ maxValue = lst.get(lst.size() - 1);\n        // Iterate through all the elements\n\
    \        for (Long value : lst) {\n            // Compare with the minimum value\n\
    \            if (value < minValue) {\n                // If the value is less\
    \ than minimum value, set it as the minimum value\n                minValue =\
    \ value;\n            }\n            // Compare with the maximum value\n     \
    \       if (value > maxValue) {\n                // If the value is greater than\
    \ maximum value, set it as the maximum value\n                maxValue = value;\n\
    \            }\n            // Add the element to the new list if the new list\
    \ is not empty and the value is between minimum and maximum\n            if (newList.isEmpty()\
    \ || value >= minValue && value <= maxValue) {\n                newList.add(value);\n\
    \            }\n        }\n        return newList;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp76retw9n.java:48)\n"
  stdout: ''
  timestamp: 1659976446
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> lstCopy = new\
    \ ArrayList<Long>();\n        for (int i = 0; i < lst.size(); i++) {\n       \
    \     lstCopy.add(lst.get(i));\n        }\n        Collections.sort(lstCopy);\n\
    \        return lstCopy;\n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgve2nc0p.java:28)\n"
  stdout: ''
  timestamp: 1659976446
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        // Use a set to keep track of\
    \ already processed items\n        Set<Long> processed = new HashSet<>();\n  \
    \      // Keep track of the last item processed and check its value\n        Long\
    \ lastVal = lst.stream().reduce(0L, Long::max);\n        processed.add(lastVal);\n\
    \        // Sort the list using custom comparator\n        lst.sort(new MyComparator(processed));\n\
    \        // Return the list with the minimum value at position 0\n        return\
    \ Arrays.asList(lst);\n    }\n    public static void main(String[] args) {\n \
    \   assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx9g6mkuk.java:26: error: cannot find symbol\n        lst.sort(new\
    \ MyComparator(processed));\n                     ^\n  symbol:   class MyComparator\n\
    \  location: class Problem\n/tmp/tmpx9g6mkuk.java:28: error: incompatible types:\
    \ no instance(s) of type variable(s) T exist so that List<T> conforms to ArrayList<Long>\n\
    \        return Arrays.asList(lst);\n                            ^\n  where T\
    \ is a type-variable:\n    T extends Object declared in method <T>asList(T...)\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659976446
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        // Your code here\n        //\
    \ System.out.println(lst);\n        ArrayList<Long> lst_sorted = new ArrayList<Long>();\n\
    \        if (lst.size() > 0) {\n            int min = lst.get(0);\n          \
    \  int max = lst.get(0);\n            for (int i = 1; i < lst.size(); i++) {\n\
    \                if (lst.get(i) < min) {\n                    min = lst.get(i);\n\
    \                } else if (lst.get(i) > max) {\n                    max = lst.get(i);\n\
    \                }\n            }\n            int temp = min;\n            while\
    \ (max != temp) {\n                lst_sorted.add(temp);\n                temp\
    \ = max;\n                for (int i = temp + 1; i < max; i++) {\n           \
    \         if (lst.get(i) > max) {\n                        max = i;\n        \
    \            }\n                }\n            }\n            temp = min;\n  \
    \          while (max != temp) {\n                lst_sorted.add(temp);\n    \
    \            temp = min;\n                for (int i = temp + 1; i < min; i++)\
    \ {\n                    if (lst.get(i) < min) {\n                        min\
    \ = i;\n                    }\n                }\n            }\n        }\n \
    \       return lst_sorted;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplg9ck_wt.java:24: error: incompatible types: Long cannot be converted\
    \ to int\n            int min = lst.get(0);\n                             ^\n\
    /tmp/tmplg9ck_wt.java:25: error: incompatible types: Long cannot be converted\
    \ to int\n            int max = lst.get(0);\n                             ^\n\
    /tmp/tmplg9ck_wt.java:28: error: incompatible types: Long cannot be converted\
    \ to int\n                    min = lst.get(i);\n                            \
    \     ^\n/tmp/tmplg9ck_wt.java:30: error: incompatible types: Long cannot be converted\
    \ to int\n                    max = lst.get(i);\n                            \
    \     ^\n/tmp/tmplg9ck_wt.java:35: error: incompatible types: int cannot be converted\
    \ to Long\n                lst_sorted.add(temp);\n                           \
    \    ^\n/tmp/tmplg9ck_wt.java:45: error: incompatible types: int cannot be converted\
    \ to Long\n                lst_sorted.add(temp);\n                           \
    \    ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n6 errors\n"
  stdout: ''
  timestamp: 1659976446
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n   \
    \         return new ArrayList<Long>();\n        }\n        long min = lst.stream().mapToLong(Long::longValue).min().getAsLong();\n\
    \        long max = lst.stream().mapToLong(Long::longValue).max().getAsLong();\n\
    \        ArrayList<Long> sorted = new ArrayList<>();\n        Iterator<Long> itr\
    \ = lst.iterator();\n        long value;\n        while (itr.hasNext()) {\n  \
    \          value = itr.next();\n            if (value > max) {\n             \
    \   sorted.add(min);\n                sorted.add(max);\n                sorted.add(value);\n\
    \                sorted.add(min);\n                sorted.add(max);\n        \
    \        sorted.add(value);\n                sorted.add(min);\n              \
    \  sorted.add(max);\n                sorted.add(value);\n                sorted.add(min);\n\
    \                sorted.add(max);\n                sorted.add(value);\n      \
    \          sorted.add(min);\n                sorted.add(max);\n              \
    \  sorted.add(value);\n                sorted.add(min);\n                sorted.add(max);\n\
    \                sorted.add(value);\n                sorted.add(min);\n      \
    \          sorted.add(max);\n                sorted.add(value);\n            \
    \    sorted.add(min);\n                sorted.add(max);\n                sorted.add(value);\n\
    \                sorted.add(min);\n                sorted.add(max);\n        \
    \        sorted.add(value);\n                sorted.add(min);\n              \
    \  sorted.add(max);\n                sorted.add(value);\n                sorted.add(min);\n\
    \                sorted.add(max);\n                sorted.add(value);\n      \
    \          sorted.add(min);\n                sorted.add(max);\n              \
    \  sorted.add(value);\n                sorted.add(min);\n                sorted.add(max);\n\
    \                sorted.add(value);\n                sorted.add(min);\n      \
    \          sorted.add(max);\n                sorted.add(value);\n            \
    \    sorted.add(min);\n                sorted.add(max);\n                sorted.add(value);\n\
    \                sorted.add(min);\n                sorted.add(max);\n        \
    \        sorted.add(value);\n                sorted.add(min);\n              \
    \  sorted.add(max);\n                sorted.add(value);\n                sorted.add(min);\n\
    \                sorted.add(max);\n                sorted.add(value);\n      \
    \          sorted.add(min);\n                sorted.add(max);\n              \
    \  sorted.add(value);\n                sorted.add(min);\n                sorted.add(max);\n\
    \                sorted.add(value);\n                sorted.add(min);\n      \
    \          sorted.\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn4ybo0dx.java:92: error: <identifier> expected\n              \
    \  sorted.\n                       ^\n/tmp/tmpn4ybo0dx.java:92: error: not a statement\n\
    \                sorted.\n                      ^\n/tmp/tmpn4ybo0dx.java:94: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659976446
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        \n        int n = lst.size();\n        \n        Long\
    \ min = lst.get(0);\n        for (int i = 1; i < n; i++) {\n            if (lst.get(i)\
    \ < min) {\n                result.add(lst.get(i));\n            } else {\n  \
    \              Long max = lst.get(i);\n                for (int j = i - 1; j >=\
    \ 0; j--) {\n                    if (lst.get(j) > max) {\n                   \
    \     max = lst.get(j);\n                    }\n                }\n          \
    \      result.add(max);\n            }\n        }\n        \n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkul6lz0v.java:42)\n"
  stdout: ''
  timestamp: 1659976447
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        long min = lst.stream().mapToLong(i\
    \ -> i).min().getAsLong();\n        long max = lst.stream().mapToLong(i -> i).max().getAsLong();\n\
    \        ArrayList<Long> list = new ArrayList<>();\n        while (min < max)\
    \ {\n            list.add(min);\n            min = list.get(list.size() - 1);\n\
    \        }\n        while (min > max) {\n            list.add(max);\n        \
    \    max = list.get(list.size() - 1);\n        }\n        while (list.size() >\
    \ 1) {\n            list.remove(list.size() - 1);\n            list.add(list.get(list.size()\
    \ - 1));\n        }\n        return list;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659976452
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        if (lst.size() <= 1) {\n   \
    \         return lst;\n        }\n        ArrayList<Long> left = new ArrayList<>();\n\
    \        ArrayList<Long> right = new ArrayList<>();\n        left.add(lst.get(0));\n\
    \        for (int i = 1; i < lst.size(); i++) {\n            left.add(lst.get(i));\n\
    \        }\n        right.add(lst.get(lst.size() - 1));\n        for (int i =\
    \ lst.size() - 2; i >= 0; i--) {\n            right.add(lst.get(i));\n       \
    \ }\n        Collections.sort(left);\n        Collections.sort(right);\n     \
    \   return left.addAll(right);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmponoi664l.java:35: error: incompatible types: boolean cannot be\
    \ converted to ArrayList<Long>\n        return left.addAll(right);\n         \
    \                 ^\n1 error\n"
  stdout: ''
  timestamp: 1659976447
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        // First find the min and max\
    \ value\n        long min = lst.get(0);\n        long max = lst.get(0);\n    \
    \    for (long i : lst) {\n            if (i < min) min = i;\n            if (i\
    \ > max) max = i;\n        }\n        // Now, start with the minimum then max\
    \ value then min and so on...\n        ArrayList<Long> newList = new ArrayList<Long>();\n\
    \        for (long i = min; i < max; i += 2) {\n            newList.add(lst.get(i));\n\
    \            newList.add(lst.get(max - i));\n            newList.add(lst.get(i));\n\
    \            newList.add(lst.get(max - i));\n        }\n        return newList;\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprj_lejbw.java:30: error: incompatible types: possible lossy conversion\
    \ from long to int\n            newList.add(lst.get(i));\n                   \
    \             ^\n/tmp/tmprj_lejbw.java:31: error: incompatible types: possible\
    \ lossy conversion from long to int\n            newList.add(lst.get(max - i));\n\
    \                                    ^\n/tmp/tmprj_lejbw.java:32: error: incompatible\
    \ types: possible lossy conversion from long to int\n            newList.add(lst.get(i));\n\
    \                                ^\n/tmp/tmprj_lejbw.java:33: error: incompatible\
    \ types: possible lossy conversion from long to int\n            newList.add(lst.get(max\
    \ - i));\n                                    ^\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n4 errors\n"
  stdout: ''
  timestamp: 1659976447
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        if (lst.isEmpty()) {\n     \
    \       return lst;\n        }\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long minimum = lst.get(0);\n        for (int i = 0; i < lst.size(); i++)\
    \ {\n            long current = lst.get(i);\n            if (current < minimum)\
    \ {\n                result.add(minimum);\n                minimum = current;\n\
    \            } else if (current > minimum) {\n                result.add(current);\n\
    \                minimum = current;\n            }\n        }\n        if (minimum\
    \ != lst.get(lst.size() - 1)) {\n            result.add(minimum);\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp00jlmbyf.java:41)\n"
  stdout: ''
  timestamp: 1659976447
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>(lst);\n\n        result.sort(Comparator.comparing(e -> e.getClass().getName()));\n\
    \        for (Long val : lst) {\n            result.remove(result.indexOf(val));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcqyewiut.java:29)\n"
  stdout: ''
  timestamp: 1659976447
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        int N = lst.size();\n      \
    \  Long[] A = new Long[N];\n        for (int i = 0; i < N; i++) {\n          \
    \  A[i] = lst.get(i);\n        }\n        Arrays.sort(A);\n        ArrayList<Long>\
    \ result = new ArrayList<>(N);\n        for (int i = 0; i < N; i++) {\n      \
    \      result.add(A[i]);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl937zzku.java:33)\n"
  stdout: ''
  timestamp: 1659976447
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        if (lst.size() == 1) {\n            result.add(lst.get(0));\n\
    \            return result;\n        }\n        // get the minimum value first\
    \ and put it in a temporary list\n        ArrayList<Long> minList = findMin(lst,\
    \ true);\n        Long minValue = minList.get(0);\n        // then iterate through\
    \ the remaining values\n        for (int i = 1; i < lst.size(); i++) {\n     \
    \       ArrayList<Long> temp = findMin(lst, false);\n            Long tempValue\
    \ = temp.get(i);\n            // put into result only if current value is smaller\n\
    \            if (tempValue < minValue || minValue == null) {\n               \
    \ result.add(minValue);\n                minValue = tempValue;\n            }\
    \ else {\n                result.add(tempValue);\n            }\n        }\n \
    \       result.add(minValue);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq3n58h5l.java:26: error: cannot find symbol\n        ArrayList<Long>\
    \ minList = findMin(lst, true);\n                                  ^\n  symbol:\
    \   method findMin(ArrayList<Long>,boolean)\n  location: class Problem\n/tmp/tmpq3n58h5l.java:30:\
    \ error: cannot find symbol\n            ArrayList<Long> temp = findMin(lst, false);\n\
    \                                   ^\n  symbol:   method findMin(ArrayList<Long>,boolean)\n\
    \  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1659976447
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        // create an array list\n  \
    \      ArrayList<Long> lst2 = new ArrayList<Long>();\n        // sort array list\n\
    \        lst.sort(Comparator.reverseOrder());\n        // iterate over list one\
    \ by one\n        Iterator<Long> itr = lst.iterator();\n        // check if next\
    \ value is less then previous value\n        while (itr.hasNext()) {\n       \
    \     Long value = itr.next();\n            Long prevValue = itr.previous();\n\
    \            // if next value is lesser then previous value\n            if (prevValue\
    \ > value) {\n                // remove previous value\n                lst2.remove(prevValue);\n\
    \                // add next value\n                lst2.add(value);\n       \
    \     }\n        }\n        return lst2;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk7fe0tdi.java:29: error: cannot find symbol\n            Long prevValue\
    \ = itr.previous();\n                                ^\n  symbol:   method previous()\n\
    \  location: variable itr of type Iterator<Long>\n1 error\n"
  stdout: ''
  timestamp: 1659976447
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> tmp = new ArrayList<Long>();\n\
    \        // We start from minimum number, and go through all numbers.\n      \
    \  long min = lst.stream().mapToLong(Long::longValue).min().getAsLong();\n   \
    \     // Then we add numbers between minimum and maximum.\n        for (long i\
    \ = min; i <= lst.stream().mapToLong(Long::longValue).max().getAsLong(); i++)\
    \ {\n            tmp.add(i);\n        }\n        // Then we go through all numbers\
    \ between minimum and maximum.\n        for (long i = lst.stream().mapToLong(Long::longValue).max().getAsLong();\
    \ i > min; i--) {\n            tmp.add(i);\n        }\n        // Then we go through\
    \ all numbers between minimum and maximum.\n        for (long i = lst.stream().mapToLong(Long::longValue).min().getAsLong();\
    \ i < lst.stream().mapToLong(Long::longValue).max().getAsLong(); i++) {\n    \
    \        tmp.add(i);\n        }\n        return tmp;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjt_91mch.java:38)\n"
  stdout: ''
  timestamp: 1659976447
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        // Create an empty arraylist\
    \ of integers\n        ArrayList<Long> list = new ArrayList<>();\n        // Loop\
    \ to copy from original list to new arraylist\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            list.add(lst.get(i));\n        }\n\n        // Create an\
    \ empty list to store the temporary values\n        ArrayList<Long> temp = new\
    \ ArrayList<>();\n        // Create an empty list to store the values\n      \
    \  ArrayList<Long> final = new ArrayList<>();\n\n        // Loop to count from\
    \ the first element of the new list\n        for (int i = 0; i < list.size();\
    \ i++) {\n            // Loop to count from the second element of the new list\n\
    \            for (int j = 0; j < list.size(); j++) {\n                // If not\
    \ equals, copy elements to the temporary list\n                if (list.get(i)\
    \ != list.get(j)) {\n                    temp.add(list.get(j));\n            \
    \    }\n            }\n            // Copy the temporary list to the final list\n\
    \            final.addAll(temp);\n            // Clear temporary list\n      \
    \      temp.clear();\n        }\n        // Return the new list\n        return\
    \ final;\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5df84o1_.java:30: error: not a statement\n        ArrayList<Long>\
    \ final = new ArrayList<>();\n                 ^\n/tmp/tmp5df84o1_.java:30: error:\
    \ ';' expected\n        ArrayList<Long> final = new ArrayList<>();\n         \
    \              ^\n/tmp/tmp5df84o1_.java:30: error: illegal start of type\n   \
    \     ArrayList<Long> final = new ArrayList<>();\n                           \
    \   ^\n/tmp/tmp5df84o1_.java:42: error: illegal start of type\n            final.addAll(temp);\n\
    \                 ^\n/tmp/tmp5df84o1_.java:47: error: illegal start of expression\n\
    \        return final;\n               ^\n/tmp/tmp5df84o1_.java:47: error: illegal\
    \ start of type\n        return final;\n                    ^\n6 errors\n"
  stdout: ''
  timestamp: 1659976446
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        // write your code here\n  \
    \      ArrayList<Long> result = new ArrayList<Long>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        for(int\
    \ i = 0; i < lst.size(); i++) {\n            long val = lst.get(i);\n        \
    \    int low = (int) Math.floor(val / max * lst.size());\n            int high\
    \ = lst.size() - low - 1;\n            Collections.swap(lst, low, high);\n   \
    \     }\n        result.add(0, min);\n        result.add(max, max);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0q1_vlz8.java:31: error: incompatible types: possible lossy conversion\
    \ from long to int\n        result.add(max, max);\n                   ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n1 error\n"
  stdout: ''
  timestamp: 1659976447
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        List<Long> sortedList = new\
    \ ArrayList<>();\n        boolean flag = true;\n        while (lst.size() != 0)\
    \ {\n            long temp = lst.remove(0);\n            if (flag) {\n       \
    \         sortedList.add(temp);\n            } else {\n                sortedList.add(temp);\n\
    \            }\n            flag = !flag;\n        }\n        return sortedList;\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvv4ylohm.java:31: error: incompatible types: List<Long> cannot\
    \ be converted to ArrayList<Long>\n        return sortedList;\n              \
    \ ^\n1 error\n"
  stdout: ''
  timestamp: 1659976447
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        Collections.sort(lst);\n   \
    \     return lst;\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk1oq6poi.java:24)\n"
  stdout: ''
  timestamp: 1659976447
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        final Collections.sort(lst);\n\
    \        final ArrayList<Long> result = new ArrayList<>();\n        final Iterator<Long>\
    \ iterator = lst.iterator();\n        Long curr = iterator.next();\n        Long\
    \ prev = curr;\n        Long next = iterator.next();\n        while (iterator.hasNext())\
    \ {\n            Long next = iterator.next();\n            if (next != curr) {\n\
    \                result.add(new Long(prev));\n                result.add(new Long(curr));\n\
    \                result.add(new Long(next));\n            }\n            prev\
    \ = curr;\n            curr = next;\n        }\n        if (curr !=null) {\n \
    \           result.add(new Long(prev));\n            result.add(new Long(curr));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk1c81l8e.java:20: error: <identifier> expected\n        final Collections.sort(lst);\n\
    \                              ^\n/tmp/tmpk1c81l8e.java:20: error: not a statement\n\
    \        final Collections.sort(lst);\n                               ^\n/tmp/tmpk1c81l8e.java:20:\
    \ error: ';' expected\n        final Collections.sort(lst);\n                \
    \                  ^\n3 errors\n"
  stdout: ''
  timestamp: 1659976446
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        // Write your code here\n  \
    \      if(lst.size() == 0) return lst;\n        ArrayList<Long> sortedList = new\
    \ ArrayList<>();\n        long minValue = lst.get(0);\n        long maxValue =\
    \ lst.get(lst.size()-1);\n        ArrayList<Long> rest = new ArrayList<>(lst.size());\n\
    \        long counter = 0;\n        long maxCounter = 0;\n        for(long i :\
    \ lst) {\n            if(i == minValue) {\n                sortedList.add(maxValue);\n\
    \                maxCounter++;\n            } else {\n                sortedList.add(minValue);\n\
    \                maxCounter++;\n            }\n            counter++;\n      \
    \      if(maxCounter == counter) {\n                maxCounter = 0;\n        \
    \        sortedList.add(maxValue);\n                counter++;\n            }\n\
    \        }\n        return sortedList;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpld9e4cuw.java:46)\n"
  stdout: ''
  timestamp: 1659976448
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        for(long l = lst.min(); l <= lst.max(); l++) {\n            res.add(l);\n\
    \        }\n        Collections.reverse(res);\n        return res;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp323btg7r.java:21: error: cannot find symbol\n        for(long l\
    \ = lst.min(); l <= lst.max(); l++) {\n                        ^\n  symbol:  \
    \ method min()\n  location: variable lst of type ArrayList<Long>\n/tmp/tmp323btg7r.java:21:\
    \ error: cannot find symbol\n        for(long l = lst.min(); l <= lst.max(); l++)\
    \ {\n                                        ^\n  symbol:   method max()\n  location:\
    \ variable lst of type ArrayList<Long>\n2 errors\n"
  stdout: ''
  timestamp: 1659976447
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        // Sort the list by ascending\
    \ order, then reverse it.\n        // This is O(n), where n is size of the list.\n\
    \        Collections.sort(lst);\n        Collections.reverse(lst);\n        return\
    \ lst;\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptabn98ut.java:27)\n"
  stdout: ''
  timestamp: 1659976448
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> ordered = new\
    \ ArrayList<Long>();\n        int n = lst.size();\n        for(int i=0; i<n; i++)\
    \ {\n            ordered.add(lst.get(i));\n        }\n        Collections.sort(ordered);\n\
    \        for(int i=n-1; i>=0; i--) {\n            ordered.add(ordered.get(i));\n\
    \        }\n        return ordered;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0a33jnq9.java:32)\n"
  stdout: ''
  timestamp: 1659976448
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        // Initialize first element\
    \ and second element.\n        ArrayList<Long> firstElement = lst;\n        ArrayList<Long>\
    \ secondElement = lst;\n        int numOfElements = lst.size();\n        // Sort\
    \ the first element\n        Arrays.sort(firstElement);\n        // Get the minimum\
    \ element of the second element.\n        Long minElement = secondElement.get(0);\n\
    \        secondElement.remove(0);\n        // Reverse the second element\n   \
    \     Collections.reverse(secondElement);\n        // Get the maximum element\
    \ of the second element.\n        Long maxElement = secondElement.get(0);\n  \
    \      secondElement.remove(0);\n        // Sort the second element\n        Arrays.sort(secondElement);\n\
    \        // Get the  minimum element of the first element.\n        Long minElement1\
    \ = firstElement.get(0);\n        firstElement.remove(0);\n        // Reverse\
    \ the first element\n        Collections.reverse(firstElement);\n        // Get\
    \ the  maximum element of the first element.\n        Long maxElement1 = firstElement.get(0);\n\
    \        firstElement.remove(0);\n        // Sort the first element again\n  \
    \      Arrays.sort(firstElement);\n        // Return the result in a new array\
    \ list.\n        ArrayList<Long> result = new ArrayList<>();\n        result.add(minElement);\n\
    \        result.add(maxElement);\n        result.add(minElement1);\n        result.add(maxElement1);\n\
    \        result.addAll(firstElement);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcqoxt621.java:25: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(firstElement);\n              ^\n    method Arrays.sort(int[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpcqoxt621.java:35: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(secondElement);\n              ^\n    method Arrays.sort(int[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cann"
  stdout: ''
  timestamp: 1659976448
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        // Use stream to sort integers as Long\n        lst\
    \ = lst.stream().map(i -> new Long(i)).collect(Collectors.toList());\n       \
    \ Collections.sort(lst);\n        // If first and last integer are equal, sort\
    \ by second int\n        if (lst.get(0).equals(lst.get(lst.size() - 1))) {\n \
    \           lst.sort(Comparator.comparing(a -> a.get(1)));\n        }\n      \
    \  // Sort from first to last element\n        for (Long i : lst) {\n        \
    \    result.add(i);\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp41ijaog5.java:22: warning: [removal] Long(long) in Long has been\
    \ deprecated and marked for removal\n        lst = lst.stream().map(i -> new Long(i)).collect(Collectors.toList());\n\
    \                                    ^\n/tmp/tmp41ijaog5.java:22: error: incompatible\
    \ types: inference variable R has incompatible bounds\n        lst = lst.stream().map(i\
    \ -> new Long(i)).collect(Collectors.toList());\n                            \
    \                            ^\n    equality constraints: List<T#2>\n    lower\
    \ bounds: ArrayList<Long>,Object\n  where R,A,T#1,T#2 are type-variables:\n  \
    \  R extends Object declared in method <R,A>collect(Collector<? super T#1,A,R>)\n\
    \    A extends Object declared in method <R,A>collect(Collector<? super T#1,A,R>)\n\
    \    T#1 extends Object declared in interface Stream\n    T#2 extends Object declared\
    \ in method <T#2>toList()\n/tmp/tmp41ijaog5.java:26: error: cannot find symbol\n\
    \            lst.sort(Comparator.comparing(a -> a.get(1)));\n                \
    \                                ^\n  symbol:   method get(int)\n  location: variable\
    \ a of type Long\n2 errors\n1 warning\n"
  stdout: ''
  timestamp: 1659976448
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> sortedList =\
    \ new ArrayList<>();\n        if (lst.size() == 0) return lst;\n        sortedList.add((Long)0);\n\
    \        sortedList.add((Long)lst.size());\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            int j = 0;\n            while (j < sortedList.size() &&\
    \ lst.get(i) < sortedList.get(j)) {\n                j++;\n            }\n   \
    \         sortedList.add(i, lst.get(i), j);\n        }\n        return sortedList;\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2m21cfnu.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n        sortedList.add((Long)0);\n                             ^\n\
    /tmp/tmp2m21cfnu.java:23: error: incompatible types: int cannot be converted to\
    \ Long\n        sortedList.add((Long)lst.size());\n                          \
    \           ^\n/tmp/tmp2m21cfnu.java:29: error: incompatible types: int cannot\
    \ be converted to Long\n            sortedList.add(i, lst.get(i), j);\n      \
    \                     ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1659976448
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        long min = lst.get(0);\n   \
    \     long max = lst.get(lst.size() - 1);\n        long mid = max;\n        long\
    \ nextMid;\n        for (int i = 1; i < lst.size(); i++) {\n            nextMid\
    \ = lst.get(i);\n            if (nextMid < min) {\n                min = nextMid;\n\
    \            } else if (nextMid > max) {\n                max = nextMid;\n   \
    \         } else {\n                mid = nextMid;\n            }\n        }\n\
    \        ArrayList<Long> result = new ArrayList<Long>(lst);\n        result.add(mid);\n\
    \        result.add(max);\n        result.add(min);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3sv9_xhr.java:41)\n"
  stdout: ''
  timestamp: 1659976448
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        if (lst.size() == 0) return\
    \ lst;\n        ArrayList<Long> newList = new ArrayList<>();\n        if (lst.size()\
    \ == 1) {\n            newList.add(lst.get(0));\n            return newList;\n\
    \        }\n        Long currentMin = lst.get(0);\n        Long currentMax = lst.get(0);\n\
    \        newList.add(currentMin);\n        newList.add(currentMax);\n        for\
    \ (Long current : lst) {\n            if (current < currentMin) {\n          \
    \      currentMin = current;\n            }\n            if (current > currentMax)\
    \ {\n                currentMax = current;\n            }\n        }\n       \
    \ newList.add(currentMin);\n        newList.add(currentMax);\n        return strangeSortList(newList);\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat java.base/java.util.ArrayList.grow(ArrayList.java:244)\n\
    \tat java.base/java.util.ArrayList.add(ArrayList.java:454)\n\tat java.base/java.util.ArrayList.add(ArrayList.java:467)\n\
    \tat Problem.strangeSortList(tmpstc5dnjh.java:28)\n\tat Problem.strangeSortList(tmpstc5dnjh.java:40)\n\
    \tat Problem.strangeSortList(tmpstc5dnjh.java:40)\n\tat Problem.strangeSortList(tmpstc5dnjh.java:40)\n\
    \tat Problem.strangeSortList(tmpstc5dnjh.java:40)\n\tat Problem.strangeSortList(tmpstc5dnjh.java:40)\n\
    \tat Problem.strangeSortList(tmpstc5dnjh.java:40)\n\tat Problem.strangeSortList(tmpstc5dnjh.java:40)\n\
    \tat Problem.strangeSortList(tmpstc5dnjh.java:40)\n\tat Problem.strangeSortList(tmpstc5dnjh.java:40)\n\
    \tat Problem.strangeSortList(tmpstc5dnjh.java:40)\n\tat Problem.strangeSortList(tmpstc5dnjh.java:40)\n\
    \tat Problem.strangeSortList(tmpstc5dnjh.java:40)\n\tat Problem.strangeSortList(tmpstc5dnjh.java:40)\n\
    \tat Problem.strangeSortList(tmpstc5dnjh.java:40)\n\tat Problem.strangeSortList(tmpstc5dnjh.java:40)\n\
    \tat Problem.strangeSortList(tmpstc5dnjh.java:40)\n\tat Problem.strangeSortList(tmpstc5dnjh.java:40)\n\
    \tat Problem.strangeSortList(tmpstc5dnjh.java:40)\n\tat Problem.strangeSortList(tmpstc5dnjh.java:40)\n\
    \tat Problem.strangeSortList(tmpstc5dnjh.java:40)\n\tat Problem.strangeSortList(tmpstc5dnjh.java:40)\n\
    \tat Problem.strangeSortList(tmpstc5dnjh.java:40)\n\tat Problem.strangeSortList(tmpstc5dnjh.java:40)\n\
    \tat Problem.strangeSortList(tmpstc5dnjh.java:40)\n\tat Problem.strangeSortList(tmpstc5dnjh.java:40)\n\
    \tat Problem.strangeSortList(tmpstc5dnjh.java:40)\n\tat Problem.strangeSortList(tmpstc5dnjh.java:40)\n\
    \tat Problem.strangeSortList(tmpstc5dnjh.java:40)\n\tat Problem.strangeSortList(tmpstc5dnjh.java:40)\n\
    \tat Problem.strangeSortList(tmpstc5dnjh.java:40)\n\tat Problem.strangeSortList(tmpstc5dnjh.java:40)\n\
    \tat Problem.strangeSortList(tmpstc5dnjh.java:40)\n\tat Problem.strangeSortList(tmpstc5dnjh.java:40)\n\
    \tat Problem.strangeSortList(tmpstc5dnjh.java:40)\n\tat Problem.strangeSortList(tmpstc5dnjh.java:40)\n\
    \tat Problem.strangeSortList(tmpstc5dnjh.java:40)\n\tat "
  stdout: ''
  timestamp: 1659976452
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        // sort the list first\n   \
    \     // by sorting first by minumum\n        // then by maximum\n        // then\
    \ by minimum\n        Comparator<Long> comp = Comparator.comparingLong(Long::compare);\n\
    \        ArrayList<Long> lst1 = lst.stream().sorted(comp).collect(Collectors.toList());\n\
    \        ArrayList<Long> lst2 = lst.stream().sorted(comp.reverse()).collect(Collectors.toList());\n\
    \        ArrayList<Long> lst3 = lst.stream().sorted(comp).sorted(comp.reverse()).collect(Collectors.toList());\n\
    \        Arrays.stream(lst).forEach(System.out::println);\n        // test cases\n\
    \        // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n        // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n        System.out.println(\"After Sorting\
    \ : \" + ((lst1.isEmpty() || lst1.equals(lst2.isEmpty() || lst2.equals(lst3.isEmpty()\
    \ || lst3.equals(lst.isEmpty() ? null : lst))))\n                ? \"Is Empty\"\
    \n                : \"Not Empty\"));\n        return lst.stream().sorted(comp).collect(Collectors.toList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppvu539uu.java:24: error: incompatible types: invalid method reference\n\
    \        Comparator<Long> comp = Comparator.comparingLong(Long::compare);\n  \
    \                                                       ^\n    method compare\
    \ in class Long cannot be applied to given types\n      required: long,long\n\
    \      found:    T\n      reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>comparingLong(ToLongFunction<?\
    \ super T>)\n/tmp/tmppvu539uu.java:25: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        ArrayList<Long> lst1 = lst.stream().sorted(comp).collect(Collectors.toList());\n\
    \                                                                ^\n    equality\
    \ constraints: List<T#2>\n    lower bounds: ArrayList<Long>,Object\n  where R,A,T#1,T#2\
    \ are type-variables:\n    R extends Object declared in method <R,A>collect(Collector<?\
    \ super T#1,A,R>)\n    A extends Object declared in method <R,A>collect(Collector<?\
    \ super T#1,A,R>)\n    T#1 extends Object declared in interface Stream\n    T#2\
    \ extends Object declared in method <T#2>toList()\n/tmp/tmppvu539uu.java:26: error:\
    \ cannot find symbol\n        ArrayList<Long> lst2 = lst.stream().sorted(comp.reverse()).collect(Collectors.toList());\n\
    \                                                       ^\n  symbol:   method\
    \ reverse()\n  location: variable comp of type Comparator<Long>\n/tmp/tmppvu539uu.java:27:\
    \ error: cannot find symbol\n        ArrayList<Long> lst3 = lst.stream().sorted(comp).sorted(comp.reverse()).collect(Collectors.toList());\n\
    \                                                                    ^\n  symbol:\
    \   method reverse()\n  location: variable comp of type Comparator<Long>\n/tmp/tmppvu539uu.java:28:\
    \ error: no suitable method found for stream(ArrayList<Long>)\n        Arrays.stream(lst).forEach(System.out::println);\n\
    \              ^\n    method Arrays.<T#1>stream(T#1[]) is not applicable\n   \
    \   (cannot infer type-variable(s) T#1\n        (argument mismatch; ArrayList<Long>\
    \ cannot be conve"
  stdout: ''
  timestamp: 1659976448
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> res = new ArrayList<>(lst.size());\n\
    \        for (Long cur : lst) {\n            res.add(cur);\n            boolean\
    \ isLast = res.size() == lst.size() - 1;\n            for (Long next : lst) {\n\
    \                if (next == cur || isLast) {\n                    res.add(next);\n\
    \                    if (!isLast) break;\n                }\n            }\n \
    \       }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4ysfham2.java:34)\n"
  stdout: ''
  timestamp: 1659976449
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        if (lst.size() < 3) {\n    \
    \        return lst;\n        }\n        // first element is minimum element of\
    \ remaining numbers\n        long min = lst.get(0);\n        // second element\
    \ is maximum element of remaining numbers\n        long max = Long.MIN_VALUE;\n\
    \        // the third element is the minimum element of remaining numbers\n  \
    \      long min = Long.MAX_VALUE;\n        for (long i : lst) {\n            min\
    \ = Math.min(i, min);\n            max = Math.max(i, max);\n        }\n      \
    \  ArrayList<Long> res = new ArrayList<>(lst.size());\n        res.add(max);\n\
    \        res.add(min);\n        res.add(min);\n        return res;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcb_3pnm8.java:28: error: variable min is already defined in method\
    \ strangeSortList(ArrayList<Long>)\n        long min = Long.MAX_VALUE;\n     \
    \        ^\n1 error\n"
  stdout: ''
  timestamp: 1659976448
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        return lst.stream().sorted((a,\
    \ b) -> Long.compare(b, a))\n        .collect(Collectors.toCollection(ArrayList::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq9y67qub.java:24)\n"
  stdout: ''
  timestamp: 1659976449
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        Collections.sort(lst);\n   \
    \     ArrayList<Long> ret = new ArrayList<>(lst.size());\n        for(Long i :\
    \ lst)\n            ret.add(i);\n        return ret;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe5ozx46s.java:27)\n"
  stdout: ''
  timestamp: 1659976449
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> list = new ArrayList<Long>();\n\
    \        long min = lst.get(0);\n        long max = lst.get(0);\n        for (long\
    \ x : lst)\n            if (x > max)\n                max = x;\n            if\
    \ (x < min)\n                min = x;\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        result.add(min);\n        result.add(max);\n        long rest = max;\n\
    \        for (long x : lst)\n            if (x < min)\n                result.add(rest);\n\
    \            else if (x > max)\n                result.add(rest);\n          \
    \  else\n                result.add(x);\n            rest = x;\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp633uzbfv.java:26: error: cannot find symbol\n            if (x\
    \ < min)\n                ^\n  symbol:   variable x\n  location: class Problem\n\
    /tmp/tmp633uzbfv.java:27: error: cannot find symbol\n                min = x;\n\
    \                      ^\n  symbol:   variable x\n  location: class Problem\n\
    /tmp/tmp633uzbfv.java:39: error: cannot find symbol\n            rest = x;\n \
    \                  ^\n  symbol:   variable x\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1659976449
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> ret = new ArrayList<>();\n\
    \        if (lst.size() > 0) {\n            Long min = lst.get(0);\n         \
    \   Long max = lst.get(0);\n            for (int i = 1; i < lst.size(); i++) {\n\
    \                min = lst.get(i);\n                if (lst.get(i) > max) max\
    \ = lst.get(i);\n            }\n            for (int i = 1; i < lst.size(); i++)\
    \ {\n                max = lst.get(i);\n                if (lst.get(i) < min)\
    \ min = lst.get(i);\n            }\n            for (int i = 0; i < lst.size();\
    \ i++) {\n                if (lst.get(i) != min && lst.get(i) != max) {\n    \
    \                ret.add(lst.get(i));\n                }\n            }\n    \
    \    }\n        return ret;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplx52qpue.java:41)\n"
  stdout: ''
  timestamp: 1659976449
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        if (lst.size() <= 1) {\n   \
    \         return lst;\n        }\n        ArrayList<Long> ret = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp = new ArrayList<Long>(lst);\n        ret.add(lst.get(0));\n\
    \        long maxTemp = temp.stream().max(Comparator.reverseOrder()).get();\n\
    \        temp.remove(0);\n        temp.add(maxTemp);\n        for (long i = 1;\
    \ i < temp.size(); i++) {\n            long min = temp.get(i);\n            min\
    \ = (min+temp.get(i-1))/2;\n            temp.add((min+temp.get(i))/2);\n     \
    \       ret.add(min);\n        }\n        return ret;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8455bucg.java:30: error: incompatible types: possible lossy conversion\
    \ from long to int\n            long min = temp.get(i);\n                    \
    \            ^\n/tmp/tmp8455bucg.java:31: error: incompatible types: possible\
    \ lossy conversion from long to int\n            min = (min+temp.get(i-1))/2;\n\
    \                                 ^\n/tmp/tmp8455bucg.java:32: error: incompatible\
    \ types: possible lossy conversion from long to int\n            temp.add((min+temp.get(i))/2);\n\
    \                                   ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1659976449
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        // Write your code here\n  \
    \      ArrayList<Long> strangeList = new ArrayList<Long>();\n        boolean bool\
    \ = false;\n        int len = 0;\n        int cnt = 0;\n        double min = 0;\n\
    \        double max = 0;\n        double val;\n\n        if(lst.size() > 0){\n\
    \            len = lst.size();\n        }\n        else\n            return strangeList;\n\
    \n        for(int i = 0; i< len; i++){\n            val = lst.get(i);\n      \
    \      if(cnt == 0 && val > min){\n                min = val;\n              \
    \  bool = true;\n                cnt = 1;\n            }\n            else if\
    \ (cnt == 1 && val < max){\n                max = val;\n                bool =\
    \ false;\n                cnt = 2;\n            }\n            else if(cnt ==\
    \ 2 && val == max){\n                max = val++;\n                bool = false;\n\
    \                cnt = 2;\n            }\n            else if(bool == true)\n\
    \                strangeList.add(val);\n            else\n                strangeList.add((long)\
    \ (-val));\n        }\n\n        return strangeList;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv7jxbe3r.java:53: error: incompatible types: double cannot be converted\
    \ to Long\n                strangeList.add(val);\n                           \
    \     ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659976449
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        // We will need to swap only when the numbers are in\
    \ the first or last position.\n        // And we will not swap them for the first\
    \ time if we will do that.\n        boolean swap = true;\n\n        // Now we\
    \ will iterate through the list and check if the number will be bigger\n     \
    \   // than the highest number in the result list or less than the lowest.\n \
    \       for (Long number : lst) {\n            if (result.isEmpty() || number\
    \ > result.get(result.size()-1)) {\n                result.add(number);\n    \
    \        } else if (number < result.get(result.size()-1)) {\n                result.add(number);\n\
    \            }\n        }\n\n        // If we have numbers to swap, then we will\
    \ iterate through result list.\n        // And swap them if needed.\n        while\
    \ (swap) {\n            swap = false;\n            for (Long number : result)\
    \ {\n                if (number < result.get(result.size()-1)) {\n           \
    \         Long tempVar = result;\n                    result = new ArrayList<>();\n\
    \                    result.add(tempVar.remove(0));\n                    result.add(number);\n\
    \                    result.add(tempVar.remove(0));\n                    swap\
    \ = true;\n                }\n            }\n        }\n\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6orax1ey.java:41: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to Long\n                    Long tempVar = result;\n         \
    \                          ^\n/tmp/tmp6orax1ey.java:43: error: cannot find symbol\n\
    \                    result.add(tempVar.remove(0));\n                        \
    \              ^\n  symbol:   method remove(int)\n  location: variable tempVar\
    \ of type Long\n/tmp/tmp6orax1ey.java:45: error: cannot find symbol\n        \
    \            result.add(tempVar.remove(0));\n                                \
    \      ^\n  symbol:   method remove(int)\n  location: variable tempVar of type\
    \ Long\n3 errors\n"
  stdout: ''
  timestamp: 1659976449
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        int idx\
    \ = lst.indexOf(max);\n        if (idx > 0) {\n            Collections.swap(lst,\
    \ idx, idx + 1);\n        }\n        while (idx > 0) {\n            Collections.swap(lst,\
    \ idx, idx - 1);\n            idx = lst.indexOf(max);\n            if (idx > 0)\
    \ {\n                Collections.swap(lst, idx, idx + 1);\n            }\n   \
    \     }\n        return lst;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 4 out of bounds for length 4\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.set(ArrayList.java:441)\n\
    \tat java.base/java.util.Collections.swap(Collections.java:501)\n\tat Problem.strangeSortList(tmpomvz7a6w.java:24)\n\
    \tat Problem.main(tmpomvz7a6w.java:36)\n"
  stdout: ''
  timestamp: 1659976449
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        Collections.sort(lst);\n   \
    \     int i = 0;\n        for(; i < lst.size(); i++) {\n            int j = i;\n\
    \            for(; j < lst.size() && lst.get(j) < lst.get(i); j++);\n        \
    \    Collections.swap(lst, i, j);\n        }\n        return lst;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdb5wo0b7.java:30)\n"
  stdout: ''
  timestamp: 1659976449
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        final long startTime = System.currentTimeMillis();\n\
    \        ArrayList<Long> res = new ArrayList<>();\n        long min = Long.MAX_VALUE;\n\
    \        long max = Long.MIN_VALUE;\n        for (long i : lst) {\n          \
    \  min = Math.min(min, i);\n            max = Math.max(max, i);\n        }\n \
    \       long nextMax = max;\n        for (long i : lst) {\n            if (nextMax\
    \ < i) {\n                nextMax = i;\n            }\n        }\n        long\
    \ nextMin = min;\n        for (long i : lst) {\n            if (nextMin > i) {\n\
    \                nextMin = i;\n            }\n        }\n        boolean isAscending\
    \ = true;\n        for (long i : lst) {\n            if (isAscending) {\n    \
    \            if (nextMin > i) {\n                    res.add(i);\n           \
    \     }\n            } else {\n                if (nextMax < i) {\n          \
    \          res.add(i);\n                }\n            }\n        }\n        long\
    \ endTime = System.currentTimeMillis();\n        System.out.println(\"strangeSortList:\
    \ \" + (endTime - startTime) + \" ms\");\n        return res;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyd3dlf9y.java:57)\n"
  stdout: 'strangeSortList: 0 ms

    '
  timestamp: 1659976450
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        if(lst.size() == 0) {\n    \
    \        return new ArrayList<Long>(lst);\n        }\n\n        long minVal =\
    \ lst.get(0);\n        long maxVal = lst.get(0);\n        for(long i : lst) {\n\
    \            minVal = Math.min(i, minVal);\n            maxVal = Math.max(i, maxVal);\n\
    \        }\n\n        ArrayList<Long> newList = new ArrayList<Long>();\n     \
    \   newList.add(minVal);\n        for(long i : lst) {\n            newList.add(Math.min(i\
    \ + maxVal, minVal));\n        }\n        newList.add(maxVal);\n        return\
    \ newList;\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpybrzdfz5.java:40)\n"
  stdout: ''
  timestamp: 1659976450
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        // create new list to hold sorted\
    \ result\n        ArrayList<Long> sorted = new ArrayList<>();\n        // sort\
    \ input list using min of first, max of second, min of third\n        // add each\
    \ element to sorted\n        for (Long i : lst) {\n            sorted.add(minMax(lst));\n\
    \        }\n        return sorted;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf1o7rx9e.java:25: error: cannot find symbol\n            sorted.add(minMax(lst));\n\
    \                       ^\n  symbol:   method minMax(ArrayList<Long>)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976449
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        List<Long> lstCopy = new ArrayList<>(lst);\n\
    \        Collections.sort(lstCopy, (a,b) -> b - a);\n        return lstCopy;\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphzuhnscf.java:21: error: incompatible types: cannot infer type-variable(s)\
    \ T\n        Collections.sort(lstCopy, (a,b) -> b - a);\n                    \
    \    ^\n    (argument mismatch; bad return type in lambda expression\n      possible\
    \ lossy conversion from long to int)\n  where T is a type-variable:\n    T extends\
    \ Object declared in method <T>sort(List<T>,Comparator<? super T>)\n/tmp/tmphzuhnscf.java:22:\
    \ error: incompatible types: List<Long> cannot be converted to ArrayList<Long>\n\
    \        return lstCopy;\n               ^\n2 errors\n"
  stdout: ''
  timestamp: 1659976449
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        Comparator<Long> c = new LongComparator();\n\
    \        lst.sort(c);\n        ArrayList<Long> result = new ArrayList<>();\n \
    \       for (int i = 0, count = lst.size(); i < count; i++) {\n            Long\
    \ val = lst.get(i);\n            result.add(val);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0eii0btg.java:20: error: cannot find symbol\n        Comparator<Long>\
    \ c = new LongComparator();\n                                 ^\n  symbol:   class\
    \ LongComparator\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976450
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> res = new ArrayList<Long>(lst);\n\
    \        Collections.sort(res, new Comparator<Long>() {\n            @Override\n\
    \            public int compare(Long a, Long b) {\n                int cmp = 0;\n\
    \                switch (cmp = (a.intValue() > b.intValue())? 1 : (b.intValue()\
    \ > a.intValue())? -1 : 0) {\n                    case -1: cmp = (a.intValue()\
    \ > b.intValue())? 1 : -1; break;\n                    case 1: cmp = (a.intValue()\
    \ > b.intValue())? -1 : 1; break;\n                    default: cmp = 0; break;\n\
    \                }\n                return cmp;\n            }\n        });\n\
    \        return res;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcmzfv9ho.java:36)\n"
  stdout: ''
  timestamp: 1659976450
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        // If array list is empty, return\
    \ new empty array.\n        if (lst.isEmpty()) return new ArrayList<Long>();\n\
    \        // Else sort array list.\n        Collections.sort(lst);\n        //\
    \ Return new array list.\n        return lst;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdlv5grsv.java:28)\n"
  stdout: ''
  timestamp: 1659976450
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        // Initialize a variable to\
    \ store the minimum value to start with.\n        // This stores the minimum value,\
    \ which can then be used for comparing\n        // subsequent values.\n      \
    \  long minValue = lst.get(0);\n        // Store the remaining values in a variable\
    \ for reference.\n        ArrayList<Long> remaining = new ArrayList<>();\n   \
    \     // Iterate through the list to store the remaining values.\n        for\
    \ (long val : lst) {\n            // If the current value is less than the minimum\
    \ value,\n            // replace it with the minimum value.\n            if (val\
    \ < minValue) {\n                minValue = val;\n            }\n            //\
    \ Add this value to the remaining values.\n            remaining.add(val);\n \
    \       }\n        // Create a new list to store the resultant values.\n     \
    \   ArrayList<Long> ret = new ArrayList<>();\n        // Iterate through the remaining\
    \ values and add them to the new\n        // list while comparing them to the\
    \ minimum value.\n        for (long val : remaining) {\n            if (val ==\
    \ minValue) {\n                ret.add(minValue);\n            } else {\n    \
    \            ret.add(val);\n            }\n        }\n        // Return the resultant\
    \ list.\n        return ret;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpirulfw3n.java:51)\n"
  stdout: ''
  timestamp: 1659976450
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        if(lst.size() == 1) {\n    \
    \        return lst;\n        }\n\n        ArrayList<Long> newList = new ArrayList<>();\n\
    \        long max = lst.get(0);\n        long min = lst.get(0);\n\n        for(int\
    \ i = 1; i < lst.size(); i++) {\n            if(lst.get(i) > max) {\n        \
    \        max = lst.get(i);\n            }\n            if(lst.get(i) < min) {\n\
    \                min = lst.get(i);\n            }\n        }\n        for(int\
    \ i = 1; i < lst.size(); i++) {\n            if(lst.get(i) < min) {\n        \
    \        newList.add(min);\n                min = lst.get(i);\n            }\n\
    \            if(lst.get(i) > max) {\n                newList.add(max);\n     \
    \           max = lst.get(i);\n            }\n        }\n\n        if(max == min)\
    \ {\n            newList.add(max);\n        }\n\n        for(int i = lst.size()-2;\
    \ i >= 0; i--) {\n            newList.add(lst.get(i));\n        }\n\n        return\
    \ newList;\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_co3u3kq.java:58)\n"
  stdout: ''
  timestamp: 1659976450
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> sortedList =\
    \ new ArrayList<Long>();\n\n        ArrayList<Long> list = new ArrayList<Long>(lst);\n\
    \        long minValue = list.get(0);\n        long maxValue = list.get(list.size()\
    \ - 1);\n        int firstPlaceIndex = 0;\n        int secondPlaceIndex = list.size()\
    \ - 1;\n\n        ArrayList<Long> tempList = new ArrayList<Long>();\n\n      \
    \  List<Long> copy = new ArrayList<Long>(list);\n        Collections.sort(copy);\n\
    \        long min = copy.get(0);\n        long max = copy.get(list.size() - 1);\n\
    \        copy.remove(0);\n        copy.remove(list.size() - 1);\n        sortedList.add(min);\n\
    \        sortedList.add(max);\n        sortedList.addAll(copy);\n        while\
    \ (firstPlaceIndex < list.size() && secondPlaceIndex > 0) {\n            long\
    \ thisValue = list.get(firstPlaceIndex++);\n            long thisMax = list.get(secondPlaceIndex--);\n\
    \            if (thisValue > thisMax) {\n                tempList.add(thisValue);\n\
    \                tempList.add(thisMax);\n            }\n        }\n\n        sortedList.addAll(tempList);\n\
    \        return sortedList;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 3 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.remove(ArrayList.java:504)\n\
    \tat Problem.strangeSortList(tmpq4nd1kh7.java:35)\n\tat Problem.main(tmpq4nd1kh7.java:52)\n"
  stdout: ''
  timestamp: 1659976450
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        if (lst.isEmpty()) return new\
    \ ArrayList<Long>();\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (lst.get(0) <= lst.get(1))\n            result.add(lst.remove(0));\n\
    \        if (lst.get(0) <= lst.get(2))\n            result.add(lst.remove(0));\n\
    \        if (lst.get(0) <= lst.get(3))\n            result.add(lst.remove(0));\n\
    \        if (lst.get(0) <= lst.get(4))\n            result.add(lst.remove(0));\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 3 out of bounds for length 2\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.strangeSortList(tmpb42odz43.java:26)\n\tat Problem.main(tmpb42odz43.java:33)\n"
  stdout: ''
  timestamp: 1659976450
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        // create new ArrayList and\
    \ add to it the indexes of sorted order\n        ArrayList<Integer> indexes =\
    \ new ArrayList<>();\n        int minIndex = -1;\n        int maxIndex = lst.size()\
    \ - 1;\n        while (maxIndex >= minIndex) {\n            int currentIndex =\
    \ minIndex + maxIndex / 2;\n            Integer currentValue = lst.get(currentIndex);\n\
    \            Integer nextValue = lst.get(currentIndex + 1);\n            // swap\
    \ elements if they are in the correct order\n            while (currentValue ==\
    \ nextValue) {\n                indexes.add(currentIndex);\n                currentIndex\
    \ += 1;\n                if (currentIndex == lst.size()) {\n                 \
    \   break;\n                }\n                currentValue = lst.get(currentIndex);\n\
    \                nextValue = lst.get(currentIndex + 1);\n            }\n     \
    \       minIndex = currentIndex - 1;\n            maxIndex = currentIndex + 1;\n\
    \        }\n        // fill ArrayList with remaining elements if any\n       \
    \ while (maxIndex >= minIndex) {\n            indexes.add(maxIndex);\n       \
    \     maxIndex -= 1;\n        }\n        return lst.subList(minIndex, minIndex\
    \ + indexes.size());\n    }\n    public static void main(String[] args) {\n  \
    \  assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjb3de4c1.java:26: error: incompatible types: Long cannot be converted\
    \ to Integer\n            Integer currentValue = lst.get(currentIndex);\n    \
    \                                      ^\n/tmp/tmpjb3de4c1.java:27: error: incompatible\
    \ types: Long cannot be converted to Integer\n            Integer nextValue =\
    \ lst.get(currentIndex + 1);\n                                       ^\n/tmp/tmpjb3de4c1.java:35:\
    \ error: incompatible types: Long cannot be converted to Integer\n           \
    \     currentValue = lst.get(currentIndex);\n                                \
    \      ^\n/tmp/tmpjb3de4c1.java:36: error: incompatible types: Long cannot be\
    \ converted to Integer\n                nextValue = lst.get(currentIndex + 1);\n\
    \                                   ^\n/tmp/tmpjb3de4c1.java:46: error: incompatible\
    \ types: List<Long> cannot be converted to ArrayList<Long>\n        return lst.subList(minIndex,\
    \ minIndex + indexes.size());\n                          ^\n5 errors\n"
  stdout: ''
  timestamp: 1659976450
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        // Sort integers ascending.\n        Collections.sort(lst,\
    \ Comparator.comparingLong(Long::longValue));\n        // Iterate over numbers\
    \ and add them to a result list.\n        for (Long i : lst) {\n            result.add(i);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp03uja1k6.java:30)\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        Collections.sort(lst);\n   \
    \     Collections.reverse(lst);\n        return lst;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpes5u2qsf.java:25)\n"
  stdout: ''
  timestamp: 1659976450
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        if(lst.isEmpty()) {\n      \
    \      return new ArrayList<Long>(Arrays.asList());\n        }\n        long minValue\
    \ = lst.stream().min(Long::compare).get();\n        long maxValue = lst.stream().max(Long::compare).get();\n\
    \        long newMin = minValue - 1;\n        long newMax = maxValue + 1;\n  \
    \      if(newMin < 0) {\n            newMin = 0;\n        }\n        if(newMax\
    \ > 9) {\n            newMax = 9;\n        }\n        for(long i = newMin; i <=\
    \ newMax; i++) {\n            lst.set(i, lst.get(i - 1));\n        }\n       \
    \ for(long i = newMax; i >= newMin; i--) {\n            lst.set(i, lst.get(i +\
    \ 1));\n        }\n        Collections.sort(lst);\n        return lst;\n    }\n\
    \    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdwcn6x8t.java:34: error: incompatible types: possible lossy conversion\
    \ from long to int\n            lst.set(i, lst.get(i - 1));\n                \
    \                 ^\n/tmp/tmpdwcn6x8t.java:37: error: incompatible types: possible\
    \ lossy conversion from long to int\n            lst.set(i, lst.get(i + 1));\n\
    \                                 ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659976450
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        return lst.stream().sorted((a,\
    \ b) -> {\n            System.out.println(\"a = \" + a + \" b = \" + b);\n   \
    \         final long c1 = a;\n            final long c2 = b;\n            final\
    \ long c3 = Math.min(Math.max(c1, c2), c3);\n            return c3 - c1;\n   \
    \     }).collect(Collectors.toCollection(ArrayList::new));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprwofujzt.java:25: error: incompatible types: bad return type in\
    \ lambda expression\n            return c3 - c1;\n                      ^\n  \
    \  possible lossy conversion from long to int\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659976450
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        if (lst.isEmpty())\n       \
    \     return new ArrayList<Long>();\n        ArrayList<Long> strangeSortedList\
    \ = new ArrayList<Long>();\n        strangeSortedList.add(lst.remove(0));\n  \
    \      for (int i = 0; i < lst.size(); i++) {\n            Long current = lst.remove(0);\n\
    \            for (int j = 0; j < strangeSortedList.size(); j++) {\n          \
    \      if (strangeSortedList.get(j).longValue() < current.longValue())\n     \
    \               strangeSortedList.add(j, (strangeSortedList.get(j).longValue()\
    \ + current.longValue()));\n                else if (strangeSortedList.get(j).longValue()\
    \ == current.longValue()) {\n                    strangeSortedList.set(j + 1,\
    \ strangeSortedList.get(j));\n                    strangeSortedList.add(j, (strangeSortedList.get(j).longValue()\
    \ + current.longValue()));\n                }\n                else\n        \
    \            strangeSortedList.add(j, (strangeSortedList.get(j).longValue() -\
    \ current.longValue()));\n            }\n            strangeSortedList.add(current);\n\
    \        }\n        return strangeSortedList;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659976456
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> res = new ArrayList<>(lst.size());\n\
    \        long min = lst.get(0);\n        long max = lst.get(0);\n        for (long\
    \ i : lst) {\n            min = Math.min(min, i);\n            max = Math.max(max,\
    \ i);\n        }\n        long mid = min + (max - min) / 2;\n        for (int\
    \ i = 0; i < lst.size(); i++) {\n            long cur = lst.get(i);\n        \
    \    if (cur >= mid)\n                res.add(cur);\n            else if (cur\
    \ > mid) {\n                res.add(mid + ((cur - min) / 2));\n              \
    \  res.add(mid);\n                res.add(cur);\n                mid = cur;\n\
    \            }\n            else {\n                res.add(mid);\n          \
    \      res.add(mid);\n                res.add(cur);\n                mid = cur;\n\
    \            }\n        }\n        return res;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpve44ndcq.java:48)\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        // Sort the list in the following\
    \ order:\n        // 1. minimum value of all integers\n        // 2. maximum value\
    \ of all integers\n        // 3. minimum value of all integers\n        // 4.\
    \ maximum value of all integers\n        // 5. minimum value of all integers\n\
    \        // 6. maximum value of all integers\n        // 7. minimum value of all\
    \ integers\n        // 8. maximum value of all integers\n        // 9. minimum\
    \ value of all integers\n        // 10. maximum value of all integers\n      \
    \  // 11. minimum value of all integers\n        // 12. maximum value of all integers\n\
    \        // 13. minimum value of all integers\n        // 14. maximum value of\
    \ all integers\n        // 15. minimum value of all integers\n        // 16. maximum\
    \ value of all integers\n        // 17. minimum value of all integers\n      \
    \  // 18. maximum value of all integers\n        // 19. minimum value of all integers\n\
    \        // 20. maximum value of all integers\n        // 21. minimum value of\
    \ all integers\n        // 22. maximum value of all integers\n        // 23. minimum\
    \ value of all integers\n        // 24. maximum value of all integers\n      \
    \  // 25. minimum value of all integers\n        // 26. maximum value of all integers\n\
    \        // 27. minimum value of all integers\n        // 28. maximum value of\
    \ all integers\n        // 29. minimum value of all integers\n        // 30. maximum\
    \ value of all integers\n        // 31. minimum value of all integers\n      \
    \  // 32. maximum value of all integers\n        // 33. minimum value of all integers\n\
    \        // 34. maximum value of all integers\n        // 35. minimum value of\
    \ all integers\n        // 36. maximum value of all integers\n        // 37. minimum\
    \ value of all integers\n        // 38. maximum value of all integers\n      \
    \  // 39. minimum value of all integers\n        // 40. maximum value of all integers\n\
    \        // 41. minimum value of all integers\n        // 42. maximum value of\
    \ all integers\n        // 43. minimum value of all integers\n        // 44. maximum\
    \ value of all integers\n        // 45. minimum value of all integers\n      \
    \  // 46. maximum value of all integers\n        // 47. minimum value of all integers\n\
    \        // 48. maximum value of all integers\n        // 49. minimum value of\
    \ all integers\n        // 50. maximum value of all integers\n        // 51. minimum\
    \ value of all integers\n        // 52. maximum value of all integers\n      \
    \  // 53. minimum value of all integers\n        // 54. maximum value of all integers\n\
    \        // 55. minimum value of all integers\n        // 56. maximum value of\
    \ all integers\n        // 57. minimum \n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgaes5cf0.java:78: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        long min = lst.stream().mapToLong(i\
    \ -> i).min().getAsLong();\n        long max = lst.stream().mapToLong(i -> i).max().getAsLong();\n\
    \        long[] arr = new long[arr.size()];\n        arr.fill(min, max, 0, arr.size());\n\
    \        return Arrays.asList(arr);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz62fbws7.java:22: error: cannot find symbol\n        long[] arr\
    \ = new long[arr.size()];\n                                 ^\n  symbol:   method\
    \ size()\n  location: variable arr of type long[]\n/tmp/tmpz62fbws7.java:23: error:\
    \ cannot find symbol\n        arr.fill(min, max, 0, arr.size());\n           \
    \                      ^\n  symbol:   method size()\n  location: variable arr\
    \ of type long[]\n/tmp/tmpz62fbws7.java:24: error: incompatible types: no instance(s)\
    \ of type variable(s) T exist so that List<T> conforms to ArrayList<Long>\n  \
    \      return Arrays.asList(arr);\n                            ^\n  where T is\
    \ a type-variable:\n    T extends Object declared in method <T>asList(T...)\n\
    3 errors\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        Long[] arr = lst.toArray();\n\
    \        Arrays.sort(arr, 0, arr.length - 1);\n        ArrayList<Long> res = new\
    \ ArrayList<>();\n        for (int i = 0; i < arr.length - 1; i++) {\n       \
    \     res.add(arr[i]);\n        }\n        res.add(arr[arr.length - 1]);\n   \
    \     return res;\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppjoyq1mf.java:20: error: incompatible types: Object[] cannot be\
    \ converted to Long[]\n        Long[] arr = lst.toArray();\n                 \
    \               ^\n1 error\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        if (lst.isEmpty()) return new\
    \ ArrayList<Long>();\n        ArrayList<Long> result = new ArrayList<Long>(lst.size());\n\
    \        long min = lst.get(0);\n        long max = lst.get(lst.size() - 1);\n\
    \        long cur = lst.get(0);\n        long next = 0;\n        boolean swap\
    \ = true;\n        for (long i = 1, j = lst.size() - 1; i <= j; i++, j--) {\n\
    \            next = lst.get(i);\n            if (min > next) {\n             \
    \   swap = true;\n                min = next;\n            }\n            else\
    \ if (max < next) {\n                swap = true;\n                max = next;\n\
    \            }\n            else if (min < next) {\n                swap = false;\n\
    \                min = next;\n                result.add(cur);\n             \
    \   cur = next;\n            }\n            else {\n                swap = false;\n\
    \                max = next;\n                result.add(cur);\n             \
    \   cur = next;\n            }\n        }\n        result.add(cur);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpodz8gzzx.java:28: error: incompatible types: possible lossy conversion\
    \ from long to int\n            next = lst.get(i);\n                         \
    \  ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        if (lst.isEmpty()) {\n     \
    \       return lst;\n        }\n        ArrayList<Long> copy = new ArrayList<Long>(lst);\n\
    \        // Find the minimum value\n        long min = copy.get(0);\n        copy.forEach(num\
    \ -> {\n            if (num < min) {\n                min = num;\n           \
    \ }\n        });\n        // Find the maximum of the remaining values\n      \
    \  long max = copy.get(0);\n        copy.forEach(num -> {\n            if (num\
    \ > max) {\n                max = num;\n            }\n        });\n        //\
    \ Return the array list with the maximum value first\n        // and then the\
    \ minimum value\n        copy.sort(Comparator.comparingLong(Long::longValue).reversed());\n\
    \        copy.forEach(num -> {\n            if (num < min) {\n               \
    \ copy.add(min, num);\n            } else {\n                copy.add(num, min);\n\
    \            }\n        });\n        return copy;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgx7hxytb.java:43: error: incompatible types: possible lossy conversion\
    \ from long to int\n                copy.add(min, num);\n                    \
    \     ^\n/tmp/tmpgx7hxytb.java:45: error: incompatible types: Long cannot be converted\
    \ to int\n                copy.add(num, min);\n                         ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n2 errors\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        // Sort from smallest to largest\n\
    \        Arrays.sort(lst);\n        // Return the arraylist in the strange order\n\
    \        return lst;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0u276nwp.java:21: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(lst);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        return lst.stream()\n      \
    \          .sorted((o1, o2) -> {\n                    Long val1 = (o1 == null)\
    \ ? null : o1;\n                    Long val2 = (o2 == null) ? null : o2;\n  \
    \                  return compare(val1, val2);\n                })\n         \
    \       .collect(Collectors.toCollection(() -> {\n                    return new\
    \ ArrayList<Long>();\n                }));\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3x0b0p9c.java:24: error: cannot find symbol\n                 \
    \   return compare(val1, val2);\n                           ^\n  symbol:   method\
    \ compare(Long,Long)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        int startPos = 0;\n        int\
    \ maxSize = 0;\n        int minSize = 0;\n        int max = Collections.max(lst);\n\
    \        int min = Collections.min(lst);\n        // Loop through list\n     \
    \   for (int i = 0; i < lst.size(); i++) {\n            // get current value\n\
    \            long currentValue = lst.get(i);\n            // get new values\n\
    \            int currMaxSize = (int) Math.ceil((double) maxSize * 1.1);\n    \
    \        int currMinSize = (int) Math.floor((double) minSize * 0.99);\n      \
    \      // get new max size\n            maxSize = (int) Math.ceil((double) maxSize\
    \ * 0.999);\n            // get new min size\n            minSize = (int) Math.floor((double)\
    \ minSize * 0.001);\n            if (i == 0) {\n                // Set new start\
    \ pos\n                startPos = i;\n            }\n            if (currentValue\
    \ == max) {\n                // If new value is max\n                maxSize++;\n\
    \            } else if (currentValue == min) {\n                // If new value\
    \ is min\n                minSize++;\n            } else if (currentValue > max)\
    \ {\n                // If new value is max\n                maxSize++;\n    \
    \            for (int j = startPos; j < i; j++) {\n                    lst.set(j,\
    \ min);\n                }\n            } else if (currentValue < min) {\n   \
    \             // If new value is min\n                minSize++;\n           \
    \     for (int j = startPos; j < i; j++) {\n                    lst.set(j, max);\n\
    \                }\n            }\n        }\n        ArrayList<Long> result =\
    \ new ArrayList<Long>();\n        for (int i = 0; i < lst.size(); i++) {\n   \
    \         result.add(lst.get(i));\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphtvbsi1q.java:23: error: incompatible types: inferred type does\
    \ not conform to upper bound(s)\n        int max = Collections.max(lst);\n   \
    \                              ^\n    inferred: Long\n    upper bound(s): Integer,Comparable<?\
    \ super Long>,Long,Object\n/tmp/tmphtvbsi1q.java:24: error: incompatible types:\
    \ inferred type does not conform to upper bound(s)\n        int min = Collections.min(lst);\n\
    \                                 ^\n    inferred: Long\n    upper bound(s): Integer,Comparable<?\
    \ super Long>,Long,Object\n/tmp/tmphtvbsi1q.java:50: error: incompatible types:\
    \ int cannot be converted to Long\n                    lst.set(j, min);\n    \
    \                           ^\n/tmp/tmphtvbsi1q.java:56: error: incompatible types:\
    \ int cannot be converted to Long\n                    lst.set(j, max);\n    \
    \                           ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n4 errors\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> resultList =\
    \ new ArrayList<>();\n        Long minValue = lst.get(0);\n        Long maxValue\
    \ = lst.get(lst.size()-1);\n        int i;\n        for (i = 0; i < lst.size();\
    \ i++) {\n            long curValue = lst.get(i);\n            long tmpMinValue;\n\
    \            long tmpMaxValue;\n            if (i == lst.size() - 1) {\n     \
    \           tmpMaxValue = minValue;\n                tmpMinValue = maxValue;\n\
    \            } else {\n                tmpMaxValue = lst.get(i + 1);\n       \
    \         tmpMinValue = lst.get(i-1);\n            }\n\n            if (curValue\
    \ < minValue) minValue = curValue;\n            if (curValue > maxValue) maxValue\
    \ = curValue;\n            if (curValue != minValue && curValue != maxValue) {\n\
    \                resultList.add(minValue);\n                resultList.add(maxValue);\n\
    \                resultList.add(curValue);\n                minValue = tmpMinValue;\n\
    \                maxValue = tmpMaxValue;\n            }\n        }\n        resultList.add(minValue);\n\
    \        resultList.add(maxValue);\n        return resultList;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ -1 out of bounds for length 4\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.strangeSortList(tmpoi31e73w.java:33)\n\tat Problem.main(tmpoi31e73w.java:51)\n"
  stdout: ''
  timestamp: 1659976452
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        List<Long> copy = new ArrayList<>(lst);\n\
    \        Collections.sort(copy);\n        return new ArrayList<>(copy);\n    }\n\
    \    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzh38kvbu.java:25)\n"
  stdout: ''
  timestamp: 1659976452
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        // sort the list by first element\n\
    \        Collections.sort(lst);\n        // sort the list by second element\n\
    \        Collections.sort(lst, Collections.reverseOrder());\n        // sort the\
    \ list by third element\n        Collections.sort(lst, (a, b) -> {\n         \
    \   long c = b - a;\n            return c < 0 ? Long.compare(a, c) : Long.compare(b,\
    \ c);\n        });\n        // sort the list by forth element\n        Collections.sort(lst,\
    \ (a, b) -> {\n            long c = a - b;\n            return c < 0 ? Long.compare(b,\
    \ c) : Long.compare(a, c);\n        });\n        return lst;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3t4z2jjr.java:37)\n"
  stdout: ''
  timestamp: 1659976452
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        // 1. Convert it into string\
    \ and sort it ascendingly\n        List<Long> sortedList = lst.stream().map(String::valueOf).sorted().collect(Collectors.toList());\n\
    \        \n        // 2. Convert it into string and sort it descendingly\n   \
    \     List<Long> sortedListDesc = lst.stream().map(String::valueOf).sorted(Collections.reverseOrder()).collect(Collectors.toList());\n\
    \        \n        // 3. Convert it into string and sort it by length\n      \
    \  List<Long> sortedListByLength = lst.stream().map(String::valueOf).sorted(Long::compareTo).collect(Collectors.toList());\n\
    \n        // 4. Convert it into string and sort it by length\n        List<Long>\
    \ sortedListByLengthDesc = lst.stream().map(String::valueOf).sorted(Collections.reverseOrder(Long::compareTo)).collect(Collectors.toList());\n\
    \        \n        // 5. Convert it into string and sort it by length\n      \
    \  List<Long> sortedListByLengthDesc2 = lst.stream().map(String::valueOf).sorted(Long::compareTo).sorted().collect(Collectors.toList());\n\
    \        \n        return sortedList;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_9wgnci8.java:21: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        List<Long> sortedList = lst.stream().map(String::valueOf).sorted().collect(Collectors.toList());\n\
    \                                                                            \
    \      ^\n    equality constraints: Long\n    lower bounds: String\n  where T\
    \ is a type-variable:\n    T extends Object declared in method <T>toList()\n/tmp/tmp_9wgnci8.java:24:\
    \ error: incompatible types: inference variable T has incompatible bounds\n  \
    \      List<Long> sortedListDesc = lst.stream().map(String::valueOf).sorted(Collections.reverseOrder()).collect(Collectors.toList());\n\
    \                                                                            \
    \                                    ^\n    equality constraints: Long\n    lower\
    \ bounds: String\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>toList()\n/tmp/tmp_9wgnci8.java:27: error: incompatible types:\
    \ invalid method reference\n        List<Long> sortedListByLength = lst.stream().map(String::valueOf).sorted(Long::compareTo).collect(Collectors.toList());\n\
    \                                                                            \
    \     ^\n    method compareTo in class Long cannot be applied to given types\n\
    \      required: Long\n      found:    String,String\n      reason: actual and\
    \ formal argument lists differ in length\n/tmp/tmp_9wgnci8.java:30: error: incompatible\
    \ types: inference variable T has incompatible bounds\n        List<Long> sortedListByLengthDesc\
    \ = lst.stream().map(String::valueOf).sorted(Collections.reverseOrder(Long::compareTo)).collect(Collectors.toList());\n\
    \                                                                            \
    \ ^\n    lower bounds: Long,Object\n    lower bounds: String\n  where T is a type-variable:\n\
    \    T extends Object declared in method <T>reverseOrder(Comparator<T>)\n/tmp/tmp_9wgnci8.java:33:\
    \ error: incompatible types: invalid method reference\n        List<Long> sortedListByLengthDesc2\
    \ = lst.stream().map(String::valueOf).sorted(Long::compa"
  stdout: ''
  timestamp: 1659976452
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        return lst.stream().sorted().collect(ArrayList::new,\
    \ ArrayList::add, ArrayList::addAll);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0zdxsa7h.java:23)\n"
  stdout: ''
  timestamp: 1659976452
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        Collections.sort(lst);\n   \
    \     return lst;\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk1oq6poi.java:24)\n"
  stdout: ''
  timestamp: 1659976447
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        long minVal = lst.stream().min().getAsLong();\n\
    \        long maxVal = lst.stream().max().getAsLong();\n        ArrayList<Long>\
    \ sortedList = new ArrayList<Long>();\n        sortedList.add(minVal);\n     \
    \   sortedList.add(maxVal);\n        sortedList.add(lst.stream().min().getAsLong());\n\
    \        sortedList.add(lst.stream().max().getAsLong());\n        sortedList.add(lst.stream().min(Comparator.naturalOrder()).getAsLong());\n\
    \        sortedList.add(lst.stream().max(Comparator.naturalOrder()).getAsLong());\n\
    \        sortedList.add(lst.stream().min(Comparator.comparingLong(l -> l)).orElse(Long.MAX_VALUE));\n\
    \        sortedList.add(lst.stream().max(Comparator.comparingLong(l -> l)).orElse(Long.MIN_VALUE));\n\
    \        return sortedList;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu62_agm7.java:20: error: method min in interface Stream<T> cannot\
    \ be applied to given types;\n        long minVal = lst.stream().min().getAsLong();\n\
    \                                  ^\n  required: Comparator<? super Long>\n \
    \ found:    no arguments\n  reason: actual and formal argument lists differ in\
    \ length\n  where T is a type-variable:\n    T extends Object declared in interface\
    \ Stream\n/tmp/tmpu62_agm7.java:21: error: method max in interface Stream<T> cannot\
    \ be applied to given types;\n        long maxVal = lst.stream().max().getAsLong();\n\
    \                                  ^\n  required: Comparator<? super Long>\n \
    \ found:    no arguments\n  reason: actual and formal argument lists differ in\
    \ length\n  where T is a type-variable:\n    T extends Object declared in interface\
    \ Stream\n/tmp/tmpu62_agm7.java:25: error: method min in interface Stream<T> cannot\
    \ be applied to given types;\n        sortedList.add(lst.stream().min().getAsLong());\n\
    \                                   ^\n  required: Comparator<? super Long>\n\
    \  found:    no arguments\n  reason: actual and formal argument lists differ in\
    \ length\n  where T is a type-variable:\n    T extends Object declared in interface\
    \ Stream\n/tmp/tmpu62_agm7.java:26: error: method max in interface Stream<T> cannot\
    \ be applied to given types;\n        sortedList.add(lst.stream().max().getAsLong());\n\
    \                                   ^\n  required: Comparator<? super Long>\n\
    \  found:    no arguments\n  reason: actual and formal argument lists differ in\
    \ length\n  where T is a type-variable:\n    T extends Object declared in interface\
    \ Stream\n/tmp/tmpu62_agm7.java:27: error: cannot find symbol\n        sortedList.add(lst.stream().min(Comparator.naturalOrder()).getAsLong());\n\
    \                                                                  ^\n  symbol:\
    \   method getAsLong()\n  location: class Optional<Long>\n/tmp/tmpu62_agm7.java:28:\
    \ error: cannot find symbol\n        sortedList.add(lst.stream().max(Comparator.naturalOrder()).getAsLong());\n\
    \                                                                  ^\n  sy"
  stdout: ''
  timestamp: 1659976452
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> newList = new\
    \ ArrayList<>();\n        // find the minimum element\n        int minIndex =\
    \ lst.indexOf(Collections.min(lst));\n        // get the minimum element\n   \
    \     Long minValue = lst.get(minIndex);\n        // get the remaining elements\n\
    \        int maxIndex = lst.indexOf(Collections.max(lst));\n        // get the\
    \ maximum element\n        Long maxValue = lst.get(maxIndex);\n        // find\
    \ the next minimum element\n        int nextMinIndex = lst.indexOf(minValue);\n\
    \        // get the next minimum element\n        Long nextMinValue = lst.get(nextMinIndex);\n\
    \        // get the remaining elements\n        int nextMaxIndex = lst.indexOf(maxValue);\n\
    \        // get the next maximum element\n        Long nextMaxValue = lst.get(nextMaxIndex);\n\
    \        // find the next minimum element\n        int nextNextMinIndex = lst.indexOf(nextMinValue);\n\
    \        // get the next minimum element\n        Long nextNextMinValue = lst.get(nextNextMinIndex);\n\
    \        // get the remaining elements\n        int nextNextMaxIndex = lst.indexOf(nextMaxValue);\n\
    \        // get the next maximum element\n        Long nextNextMaxValue = lst.get(nextNextMaxIndex);\n\
    \        // find the next minimum element\n        int nextNextNextMinIndex =\
    \ lst.indexOf(nextNextMinValue);\n        // get the next minimum element\n  \
    \      Long nextNextNextMinValue = lst.get(nextNextNextMinIndex);\n        //\
    \ get the remaining elements\n        int nextNextNextMaxIndex = lst.indexOf(nextNextMaxValue);\n\
    \        // get the next maximum element\n        Long nextNextNextMaxValue =\
    \ lst.get(nextNextNextMaxIndex);\n        // find the next minimum element\n \
    \       int nextNextNextNextMinIndex = lst.indexOf(nextNextNextMinValue);\n  \
    \      // get the next minimum element\n        Long nextNextNextNextMinValue\
    \ = lst.get(nextNextNextNextMinIndex);\n        // get the remaining elements\n\
    \        int nextNextNextNextMaxIndex = lst.indexOf(nextNextNextMaxValue);\n \
    \       // get the next maximum element\n        Long nextNextNextNextMaxValue\
    \ = lst.get(nextNextNextNextMaxIndex);\n        // add the minimum element in\
    \ the new list\n        newList.add(minValue);\n        // add the minimum element\
    \ in the new list\n        newList.add(minValue);\n        // add the minimum\
    \ element in the new list\n        newList.add(minValue);\n        // add the\
    \ minimum element in the new list\n        newList.add(minValue);\n        //\
    \ add the minimum element in the new list\n        newList.add(minValue);\n  \
    \      // add the minimum element in the new list\n        newList.add(minValue);\n\
    \        // add the minimum element in the new list\n        newList.add(minValue);\n\
    \        // add the minimum element in the new list\n        newList.add(minValue);\n\
    \        // add the minimum element in the new list\n        newList.\n    }\n\
    \    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph2iedu0o.java:78: error: <identifier> expected\n        newList.\n\
    \                ^\n/tmp/tmph2iedu0o.java:78: error: not a statement\n       \
    \ newList.\n               ^\n2 errors\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> reverseOrder\
    \ = new ArrayList<>();\n        Long min = lst.stream().map(x -> x).min(Long::compareTo).get();\n\
    \        Long max = lst.stream().map(x -> x).max(Long::compareTo).get();\n   \
    \     Collections.reverse(lst);\n        lst.stream().forEach(x -> {\n       \
    \     reverseOrder.add(x);\n        });\n        reverseOrder.add(min);\n    \
    \    reverseOrder.add(max);\n        return reverseOrder;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplsshpxbx.java:32)\n"
  stdout: ''
  timestamp: 1659976453
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> l = new ArrayList<>(lst.size());\n\
    \        l.addAll(lst);\n        Collections.sort(l);\n\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>(l.size());\n        for (int i = 0; i < l.size();\
    \ i++) {\n            ret.add(i, l.get(i));\n        }\n        return ret;\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6znh1722.java:31)\n"
  stdout: ''
  timestamp: 1659976453
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        long min = lst.stream().mapToLong(Long::longValue).min().getAsLong();\n\
    \        long max = lst.stream().mapToLong(Long::longValue).max().getAsLong();\n\
    \n        ArrayList <Long> res = new ArrayList <>();\n        int iMin = -1, iMax\
    \ = -1;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i)\
    \ >= min && lst.get(i) <= max) {\n                if (iMin == -1) {\n        \
    \            iMin = i;\n                }\n                res.add(lst.get(i));\n\
    \            }\n            if (lst.get(i) < min) {\n                if (iMin\
    \ == -1) {\n                    iMin = i;\n                }\n               \
    \ res.add(min);\n            }\n            if (lst.get(i) > max) {\n        \
    \        if (iMax == -1) {\n                    iMax = i;\n                }\n\
    \                res.add(max);\n            }\n        }\n        if (iMin ==\
    \ -1) {\n            iMin = 0;\n        }\n        if (iMax == -1) {\n       \
    \     iMax = res.size() - 1;\n        }\n        for (int i = iMin; i <= iMax;\
    \ i++) {\n            int j = i + 1;\n            while (j < res.size()) {\n \
    \               res.set(j, res.get(j));\n                j++;\n            }\n\
    \        }\n        return res.stream().map(e -> e.longValue()).collect(Collectors.toCollection(ArrayList\
    \ <Long> :: new));\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpajb3umhw.java:61)\n"
  stdout: ''
  timestamp: 1659976453
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        // Sort the list first by minimum\
    \ value\n        Collections.sort(lst, Collections.reverseOrder());\n        //\
    \ Now sort the list by maximum value\n        Collections.sort(lst);\n       \
    \ // Now sort the list by minimum value\n        Collections.sort(lst, Collections.reverseOrder());\n\
    \        return lst;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbkqpuy8k.java:29)\n"
  stdout: ''
  timestamp: 1659976453
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        ArrayList<Long> temp = lst;\n        Long min = Collections.min(temp);\n\
    \        Long max = Collections.max(temp);\n        for (Long x : temp) {\n  \
    \          if (min > x) {\n                res.add(x);\n            }\n      \
    \      if (max < x) {\n                res.add(max);\n                res.add(x);\n\
    \            }\n            if (min < x && max > x) {\n                res.add(x);\n\
    \            }\n        }\n        return res;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyu4vvvxh.java:39)\n"
  stdout: ''
  timestamp: 1659976453
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        res.add(lst.get(0));\n        for (int i = 1; i < lst.size(); i++) {\n\
    \            res.add(lst.get(i));\n        }\n        Collections.sort(res);\n\
    \        ArrayList<Long> ret = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < lst.size(); i++) {\n            ret.add(res.get(i));\n        }\n      \
    \  return ret;\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnvlngo39.java:33)\n"
  stdout: ''
  timestamp: 1659976453
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        List<Long> sorted = new ArrayList<>(lst);\n\
    \        Collections.sort(sorted);\n        return sorted;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdzw07lje.java:22: error: incompatible types: List<Long> cannot\
    \ be converted to ArrayList<Long>\n        return sorted;\n               ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976452
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        // Initialize a new list.\n\
    \        ArrayList<Long> result = new ArrayList<Long>();\n\n        // Iterate\
    \ through the list and add each element to our new list.\n        for (long elem\
    \ : lst) {\n            result.add(elem);\n        }\n\n        // Add each element\
    \ to the new list until you get to a\n        // point where you have the minimum\
    \ element.\n        for (long elem : lst) {\n            long min = elem;\n  \
    \          int index = result.indexOf(min);\n\n            // Iterate through\
    \ the list, adding each element to our new list\n            // until the new\
    \ list has a element smaller than the minimum.\n            for (int i = index\
    \ + 1; i < result.size(); i++) {\n                if (result.get(i) < min) {\n\
    \                    min = result.get(i);\n                }\n            }\n\
    \            // Add the minimum element to the new list.\n            result.add(min);\n\
    \        }\n\n        // Return the new list.\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdb2m78bx.java:49)\n"
  stdout: ''
  timestamp: 1659976453
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        // Sort array list with minimum\
    \ element as first element, then maximum element, then minimum element etc.\n\
    \        ArrayList<Long> result = new ArrayList<>();\n        Long max = Collections.max(lst);\n\
    \        Long min = Collections.min(lst);\n        long temp;\n        Long minTemp\
    \ = min;\n        for (Long v : lst) {\n            temp = max - v;\n        \
    \    if (temp != 0) {\n                result.add(v + temp);\n            }\n\
    \            temp = v - minTemp;\n            if (temp != 0) {\n             \
    \   result.add(minTemp + temp);\n            }\n            minTemp = v;\n   \
    \     }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwl5sa9ca.java:40)\n"
  stdout: ''
  timestamp: 1659976453
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        Arrays.sort(lst);\n        return\
    \ lst;\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgoo_ejzj.java:20: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(lst);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659976453
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> sorted = new\
    \ ArrayList<>();\n        long min = lst.stream().mapToLong(o -> o).min().getAsLong();\n\
    \        long max = lst.stream().mapToLong(o -> o).max().getAsLong();\n\n    \
    \    for (long i = min; i <= max; i++) {\n            sorted.add(i);\n       \
    \ }\n\n        Collections.reverse(sorted);\n        return sorted;\n    }\n \
    \   public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpni88txli.java:32)\n"
  stdout: ''
  timestamp: 1659976453
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        if (lst == null || lst.isEmpty())\
    \ {\n            return lst;\n        }\n        ArrayList<Long> strange = new\
    \ ArrayList<>(lst);\n        sort(strange, 0, strange.size() - 1);\n        return\
    \ strange;\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd4bzozi4.java:24: error: cannot find symbol\n        sort(strange,\
    \ 0, strange.size() - 1);\n        ^\n  symbol:   method sort(ArrayList<Long>,int,int)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976453
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> ret = new ArrayList<>();\n\
    \        if (lst.isEmpty()) {\n            return ret;\n        }\n        long\
    \ min = lst.get(0l), max = lst.get(0l);\n        for (long i : lst) {\n      \
    \      min = Math.min(min, i);\n            max = Math.max(max, i);\n        }\n\
    \        long i = min;\n        long j;\n        for (j = min; j <= max; j +=\
    \ 2) {\n            i = i + 1;\n            ret.add(i);\n            ret.add(j);\n\
    \            i = j;\n        }\n        for (long j = max; j > min; j -= 2) {\n\
    \            i = i - 1;\n            ret.add(i);\n            ret.add(j);\n  \
    \          i = j;\n        }\n        return ret;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptrffnh5f.java:24: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long min = lst.get(0l), max = lst.get(0l);\n     \
    \                      ^\n/tmp/tmptrffnh5f.java:24: error: incompatible types:\
    \ possible lossy conversion from long to int\n        long min = lst.get(0l),\
    \ max = lst.get(0l);\n                                              ^\n/tmp/tmptrffnh5f.java:37:\
    \ error: variable j is already defined in method strangeSortList(ArrayList<Long>)\n\
    \        for (long j = max; j > min; j -= 2) {\n                  ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    3 errors\n"
  stdout: ''
  timestamp: 1659976453
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        if (lst.isEmpty()) {\n     \
    \       return lst;\n        }\n        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        long m = lst.get(0);\n        long n = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            m = lst.get(i);\n            n =\
    \ lst.get(i - 1);\n            if (m < n) {\n                res.add(m);\n   \
    \         } else {\n                res.add(n);\n            }\n        }\n  \
    \      return res;\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbqmbra27.java:38)\n"
  stdout: ''
  timestamp: 1659976453
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> res = new ArrayList<>(lst);\n\
    \        Collections.sort(res, Comparator.comparingLong(l -> l.longValue()));\n\
    \        Arrays.sort(res, Comparator.comparingLong(l -> l.longValue()));\n   \
    \     Arrays.sort(res, Comparator.comparingLong(l -> l.longValue()));\n      \
    \  Collections.sort(res, Comparator.comparingLong(l -> l.longValue()));\n    \
    \    return res;\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjrepi7jj.java:22: error: no suitable method found for sort(ArrayList<Long>,Comparator<Object>)\n\
    \        Arrays.sort(res, Comparator.comparingLong(l -> l.longValue()));\n   \
    \           ^\n    method Arrays.<T#1>sort(T#1[],Comparator<? super T#1>) is not\
    \ applicable\n      (cannot infer type-variable(s) T#1\n        (argument mismatch;\
    \ ArrayList<Long> cannot be converted to T#1[]))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpjrepi7jj.java:22: error: cannot find symbol\n        Arrays.sort(res,\
    \ Comparator.comparingLong(l -> l.longValue()));\n                           \
    \                             ^\n  symbol:   method longValue()\n  location: variable\
    \ l of type Object\n/tmp/tmpjrepi7jj.java:23: error: no suitable method found\
    \ for sort(ArrayList<Long>,Comparator<Object>)\n        Arrays.sort(res, Comparator.comparingLong(l\
    \ -> l.longValue()));\n              ^\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (argument mismatch; ArrayList<Long> cannot be converted to T#1[]))\n  \
    \  method Arrays.<T#2>sort(T#2[],int,int,Comparator<? super T#2>) is not applicable\n\
    \      (cannot infer type-variable(s) T#2\n        (actual and formal argument\
    \ lists differ in length))\n  where T#1,T#2 are type-variables:\n    T#1 extends\
    \ Object declared in method <T#1>sort(T#1[],Comparator<? super T#1>)\n    T#2\
    \ extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<? super\
    \ T#2>)\n/tmp/tmpjrepi7jj.java:23: error: cannot find symbol\n        Arrays.sort(res,\
    \ Comparator.comparingLong(l -> l.longValue()));\n                           \
    \                             ^\n  symbol:   method longValue()\n  location: variable\
    \ l"
  stdout: ''
  timestamp: 1659976454
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        List<Long> res = new ArrayList<Long>();\n\
    \        for (Long x: lst) {\n            int i = 0;\n            Long max = x;\n\
    \            Long min = max;\n            while (true) {\n                i++;\n\
    \                Long current = min;\n                min = min.compareTo(max);\n\
    \                max = current.compareTo(min);\n                if (i == 2) {\n\
    \                    break;\n                }\n                res.add(current);\n\
    \            }\n        }\n        return res;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmdayqttw.java:28: error: incompatible types: int cannot be converted\
    \ to Long\n                min = min.compareTo(max);\n                       \
    \            ^\n/tmp/tmpmdayqttw.java:29: error: incompatible types: int cannot\
    \ be converted to Long\n                max = current.compareTo(min);\n      \
    \                                 ^\n/tmp/tmpmdayqttw.java:36: error: incompatible\
    \ types: List<Long> cannot be converted to ArrayList<Long>\n        return res;\n\
    \               ^\n3 errors\n"
  stdout: ''
  timestamp: 1659976453
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        // Sort starting with the lowest\
    \ value.\n        Collections.sort(lst, (Long o1, Long o2) -> {\n            return\
    \ o1.compareTo(o2);\n        });\n        // Sort starting with the highest value.\n\
    \        Collections.sort(lst, Collections.reverseOrder());\n        // Sort starting\
    \ with the lowest and largest value.\n        Collections.sort(lst, (Long o1,\
    \ Long o2) -> {\n            if (o1 < o2) return -1;\n            if (o1 > o2)\
    \ return 1;\n            return 0;\n        });\n        // Sort starting with\
    \ the biggest and smallest value.\n        Collections.sort(lst, Collections.reverseOrder(Comparator.naturalOrder()));\n\
    \        // Sort starting with the biggest and smallest value, and\n        //\
    \ then return as before.\n        Collections.sort(lst, Collections.reverseOrder(Comparator.<Long>naturalOrder()));\n\
    \        return lst;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxuvvaqls.java:33: error: no suitable method found for reverseOrder(Comparator<T#1>)\n\
    \        Collections.sort(lst, Collections.reverseOrder(Comparator.naturalOrder()));\n\
    \                                         ^\n    method Collections.<T#2>reverseOrder()\
    \ is not applicable\n      (cannot infer type-variable(s) T#2\n        (actual\
    \ and formal argument lists differ in length))\n    method Collections.<T#3>reverseOrder(Comparator<T#3>)\
    \ is not applicable\n      (inferred type does not conform to equality constraint(s)\n\
    \        inferred: T#4\n        equality constraints(s): T#5)\n  where T#1,T#2,T#3,T#4,T#5\
    \ are type-variables:\n    T#1 extends Comparable<? super T#1>\n    T#2 extends\
    \ Object declared in method <T#2>reverseOrder()\n    T#3 extends Object declared\
    \ in method <T#3>reverseOrder(Comparator<T#3>)\n    T#4 extends Comparable<? super\
    \ T#4>\n    T#5 extends Comparable<? super T#4>\n1 error\n"
  stdout: ''
  timestamp: 1659976454
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>(lst);\n        Collections.sort(result, (a, b) -> Long.compare(b,\
    \ a));\n        Collections.reverse(result, (a, b) -> Long.compare(b, a));\n \
    \       return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl6s_6zp6.java:22: error: method reverse in class Collections cannot\
    \ be applied to given types;\n        Collections.reverse(result, (a, b) -> Long.compare(b,\
    \ a));\n                   ^\n  required: List<?>\n  found:    ArrayList<Long>,(a,b)->Lon[...]b,\
    \ a)\n  reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1659976454
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        ArrayList<Long>\
    \ sorted = new ArrayList<>();\n        sorted.add(min);\n        sorted.add(max);\n\
    \        lst.stream().filter(x -> x > min && x < max).forEach(x -> sorted.add(x));\n\
    \        sorted.add(max);\n        sorted.add(min);\n        return sorted;\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4pot9l0t.java:31)\n"
  stdout: ''
  timestamp: 1659976454
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        return lst.stream()\n      \
    \          .sorted(Comparator.comparing(o -> Long.MAX_VALUE.compareTo(o)))\n \
    \               .collect(Collectors.toCollection(ArrayList::new));\n    }\n  \
    \  public static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkbf5cj2p.java:21: error: long cannot be dereferenced\n        \
    \        .sorted(Comparator.comparing(o -> Long.MAX_VALUE.compareTo(o)))\n   \
    \                                                             ^\n1 error\n"
  stdout: ''
  timestamp: 1659976454
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        // sort first by min (first\
    \ element), then by max (last element)\n        Collections.sort(lst, Comparator.comparingLong(x\
    \ -> lst.get(0)).thenComparingLong(x -> lst.get(lst.size() - 1)));\n        return\
    \ lst;\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3d05uysc.java:25)\n"
  stdout: ''
  timestamp: 1659976454
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> newList = new\
    \ ArrayList<>();\n        long minValue = lst.stream().min().getAsLong();\n  \
    \      long maxValue = lst.stream().max().getAsLong();\n        newList.add(minValue);\n\
    \        for (long i : lst) {\n            if (i >= minValue && i <= maxValue)\
    \ {\n                newList.add(i);\n            }\n        }\n        return\
    \ newList;\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuuj8zdy3.java:21: error: method min in interface Stream<T> cannot\
    \ be applied to given types;\n        long minValue = lst.stream().min().getAsLong();\n\
    \                                    ^\n  required: Comparator<? super Long>\n\
    \  found:    no arguments\n  reason: actual and formal argument lists differ in\
    \ length\n  where T is a type-variable:\n    T extends Object declared in interface\
    \ Stream\n/tmp/tmpuuj8zdy3.java:22: error: method max in interface Stream<T> cannot\
    \ be applied to given types;\n        long maxValue = lst.stream().max().getAsLong();\n\
    \                                    ^\n  required: Comparator<? super Long>\n\
    \  found:    no arguments\n  reason: actual and formal argument lists differ in\
    \ length\n  where T is a type-variable:\n    T extends Object declared in interface\
    \ Stream\n2 errors\n"
  stdout: ''
  timestamp: 1659976454
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        if (lst.isEmpty())\n       \
    \     return lst;\n        ArrayList<Long> sortedLst = new ArrayList<Long>(lst);\n\
    \        int size = sortedLst.size();\n        Collections.sort(sortedLst, new\
    \ Comparator<Long>() {\n            public int compare(Long o1, Long o2) {\n \
    \               switch (size) {\n                    case 0: return 0;\n     \
    \               case 1: return -1;\n                    default: return Integer.compare(o1,\
    \ o2);\n                }\n            }\n        });\n        return sortedLst;\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxfzmgmr2.java:29: error: incompatible types: Long cannot be converted\
    \ to int\n                    default: return Integer.compare(o1, o2);\n     \
    \                                               ^\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659976454
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        ArrayList<Long> temp = new ArrayList<>();\n        Arrays.sort(lst);\n\
    \        temp = lst.clone();\n        long temp2 = lst.get(0);\n        result.add(temp2);\n\
    \        long temp3 = lst.get(lst.size() - 1);\n        result.add(temp3);\n \
    \       long temp4 = temp.get(0);\n        result.add(temp4);\n        long temp5\
    \ = temp.get(temp.size() - 1);\n        result.add(temp5);\n        long temp6\
    \ = temp2.longValue();\n        temp.remove(temp2);\n        result.add(temp6);\n\
    \        long temp7 = temp3.longValue();\n        temp.remove(temp3);\n      \
    \  result.add(temp7);\n        long temp8 = temp4.longValue();\n        temp.remove(temp4);\n\
    \        result.add(temp8);\n        long temp9 = temp5.longValue();\n       \
    \ temp.remove(temp5);\n        result.add(temp9);\n        long temp10 = temp6.longValue();\n\
    \        temp.remove(temp6);\n        result.add(temp10);\n        long temp11\
    \ = temp7.longValue();\n        temp.remove(temp7);\n        result.add(temp11);\n\
    \        long temp12 = temp8.longValue();\n        temp.remove(temp8);\n     \
    \   result.add(temp12);\n        long temp13 = temp9.longValue();\n        temp.remove(temp9);\n\
    \        result.add(temp13);\n        long temp14 = temp10.longValue();\n    \
    \    temp.remove(temp10);\n        result.add(temp14);\n        long temp15 =\
    \ temp11.longValue();\n        temp.remove(temp11);\n        result.add(temp15);\n\
    \        long temp16 = temp12.longValue();\n        temp.remove(temp12);\n   \
    \     result.add(temp16);\n        long temp17 = temp13.longValue();\n       \
    \ temp.remove(temp13);\n        result.add(temp17);\n        long temp18 = temp14.longValue();\n\
    \        temp.remove(temp14);\n        result.add(temp18);\n        long temp19\
    \ = temp15.longValue();\n        temp.remove(temp15);\n        result.add(temp19);\n\
    \        long temp20 = temp16.longValue();\n        temp.remove(temp16);\n   \
    \     result.add(temp20);\n        long temp21 = temp17.longValue();\n       \
    \ temp.remove(temp17);\n        result.add(temp21);\n        long temp22 = temp18.longValue();\n\
    \        temp.remove(temp18);\n        result.add(temp22);\n        long temp23\
    \ = temp19.longValue();\n        temp.remove(temp19);\n        result.add(temp23);\n\
    \        long temp24 = temp20.longValue();\n        temp.remove(temp20);\n   \
    \     result.add(temp24);\n        long temp25 = temp21.longValue();\n       \
    \ temp.remove(temp21);\n        result.add(temp25);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa5ney4v0.java:22: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(lst);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpa5ney4v0.java:23: error: incompatible types: Object cannot\
    \ be converted to ArrayList<Long>\n        temp = lst.clone();\n             \
    \           ^\n/tmp/tmpa5ney4v0.java:32: error: long cannot be dereferenced\n\
    \        long temp6 = temp2.longValue();\n                          ^\n/tmp/tmpa5ney4v0.java:35:\
    \ error: long cannot be dereferenced\n        long temp"
  stdout: ''
  timestamp: 1659976454
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n   \
    \         return lst;\n        }\n        ArrayList<Long> list = new ArrayList<Long>(lst);\n\
    \        Long minValue = list.get(0);\n        list.remove(0);\n        Long maxValue\
    \ = list.get(0);\n        list.remove(0);\n        Long middleValue = list.get(0);\n\
    \        list.remove(0);\n        int i = 0;\n        int j = 1;\n        while\
    \ (i < list.size()) {\n            Long currentValue = list.get(i);\n        \
    \    Long temp = minValue;\n            while (j<list.size()) {\n            \
    \    Long nextValue = list.get(j);\n                if (currentValue == nextValue)\
    \ {\n                    temp = nextValue;\n                    list.remove(i++);\n\
    \                    break;\n                }\n                if (temp > nextValue)\
    \ {\n                    temp = nextValue;\n                }\n              \
    \  j++;\n            }\n            if (temp != minValue) {\n                list.add(i,\
    \ minValue);\n                i++;\n            }\n            temp = maxValue;\n\
    \            while (j<list.size()) {\n                Long nextValue = list.get(j);\n\
    \                if (currentValue == nextValue) {\n                    temp =\
    \ nextValue;\n                    list.remove(i++);\n                    break;\n\
    \                }\n                if (temp < nextValue) {\n                \
    \    temp = nextValue;\n                }\n                j++;\n            }\n\
    \            if (temp != maxValue) {\n                list.add(i, maxValue);\n\
    \                i++;\n            }\n            temp = middleValue;\n      \
    \      while (j<list.size()) {\n                Long nextValue = list.get(j);\n\
    \                if (currentValue == nextValue) {\n                    temp =\
    \ nextValue;\n                    list.remove(i++);\n                    break;\n\
    \                }\n                if (temp == nextValue) {\n               \
    \     temp = nextValue;\n                }\n                j++;\n           \
    \ }\n            if (temp != middleValue) {\n                list.add(i, middleValue);\n\
    \                i++;\n            }\n        }\n        return list;\n    }\n\
    \    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659976459
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        PriorityQueue<Long> pq = new\
    \ PriorityQueue<>((n1, n2) -> {\n            if (n1 < n2) {\n                return\
    \ -1;\n            } else if (n1 > n2) {\n                return 1;\n        \
    \    } else {\n                return 0;\n            }\n        });\n       \
    \ pq.addAll(lst);\n        pq.addAll(lst.stream().limit(lst.size() / 2).boxed().collect(Collectors.toList()));\n\
    \        pq.addAll(lst.stream().limit(lst.size() / 2).boxed().collect(Collectors.toList()));\n\
    \        ArrayList<Long> result = new ArrayList<>();\n        while (pq.size()\
    \ > 0) {\n            result.add(pq.poll());\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2nplbuld.java:30: error: cannot find symbol\n        pq.addAll(lst.stream().limit(lst.size()\
    \ / 2).boxed().collect(Collectors.toList()));\n                              \
    \                      ^\n  symbol:   method boxed()\n  location: interface Stream<Long>\n\
    /tmp/tmp2nplbuld.java:31: error: cannot find symbol\n        pq.addAll(lst.stream().limit(lst.size()\
    \ / 2).boxed().collect(Collectors.toList()));\n                              \
    \                      ^\n  symbol:   method boxed()\n  location: interface Stream<Long>\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659976454
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        return lst.stream().sorted((o1,\
    \ o2) -> Long.compare(o1, o2)).collect(Collectors.toList());\n    }\n    public\
    \ static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm73kzsnr.java:20: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        return lst.stream().sorted((o1, o2) -> Long.compare(o1,\
    \ o2)).collect(Collectors.toList());\n                                       \
    \                                     ^\n    equality constraints: List<T#2>\n\
    \    lower bounds: ArrayList<Long>,Object\n  where R,A,T#1,T#2 are type-variables:\n\
    \    R extends Object declared in method <R,A>collect(Collector<? super T#1,A,R>)\n\
    \    A extends Object declared in method <R,A>collect(Collector<? super T#1,A,R>)\n\
    \    T#1 extends Object declared in interface Stream\n    T#2 extends Object declared\
    \ in method <T#2>toList()\n1 error\n"
  stdout: ''
  timestamp: 1659976454
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> res = new ArrayList<>(lst.size());\n\
    \        for (long l : lst)\n            res.add(l);\n        for (int i = 0;\
    \ i < res.size(); i++) {\n            int low = i, high = i;\n            while\
    \ (low < res.size() && res[low] <= res[high])\n                low++;\n      \
    \      while (high > 0 && res[high] >= res[low])\n                high--;\n  \
    \          if (low < high) {\n                res.set(low++, res[high]);\n   \
    \             res.set(high--, res[low]);\n            }\n        }\n        return\
    \ res;\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdjpg9n62.java:25: error: array required, but ArrayList<Long> found\n\
    \            while (low < res.size() && res[low] <= res[high])\n             \
    \                             ^\n/tmp/tmpdjpg9n62.java:25: error: array required,\
    \ but ArrayList<Long> found\n            while (low < res.size() && res[low] <=\
    \ res[high])\n                                                      ^\n/tmp/tmpdjpg9n62.java:27:\
    \ error: array required, but ArrayList<Long> found\n            while (high >\
    \ 0 && res[high] >= res[low])\n                                  ^\n/tmp/tmpdjpg9n62.java:27:\
    \ error: array required, but ArrayList<Long> found\n            while (high >\
    \ 0 && res[high] >= res[low])\n                                              \
    \ ^\n/tmp/tmpdjpg9n62.java:30: error: array required, but ArrayList<Long> found\n\
    \                res.set(low++, res[high]);\n                                \
    \  ^\n/tmp/tmpdjpg9n62.java:31: error: array required, but ArrayList<Long> found\n\
    \                res.set(high--, res[low]);\n                                \
    \   ^\n6 errors\n"
  stdout: ''
  timestamp: 1659976454
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> strangeSort\
    \ = new ArrayList<Long>();\n        for (Long long1 : lst) {\n            for\
    \ (Long long2 : lst) {\n                if (long1 == long2) continue;\n      \
    \          long min = Math.min(long1, long2);\n                long max = Math.max(long1,\
    \ long2);\n                if (min != max) {\n                    strangeSort.add(min);\n\
    \                    strangeSort.add(max);\n                }\n            }\n\
    \        }\n        return strangeSort;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppsouraqw.java:35)\n"
  stdout: ''
  timestamp: 1659976454
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        Collections.sort(lst);\n   \
    \     return lst;\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk1oq6poi.java:24)\n"
  stdout: ''
  timestamp: 1659976447
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        return lst.stream().sorted((o1,\
    \ o2) -> {\n            int cmp = Long.compare(o1, o2);\n            if (cmp ==\
    \ 0)\n                return 0;\n            if (cmp == -1)\n                return\
    \ 1;\n            return -1;\n        }).collect(Collectors.toCollection(() ->\
    \ new ArrayList<>()));\n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3gm61w3_.java:30)\n"
  stdout: ''
  timestamp: 1659976454
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        return strangeSortList(lst,\
    \ new ArrayList<Long>(lst));\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpec3xji8_.java:20: error: method strangeSortList in class Problem\
    \ cannot be applied to given types;\n        return strangeSortList(lst, new ArrayList<Long>(lst));\n\
    \               ^\n  required: ArrayList<Long>\n  found:    ArrayList<Long>,ArrayList<Long>\n\
    \  reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1659976454
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n   \
    \         return lst;\n        }\n\n        ArrayList<Long> lst2 = new ArrayList<Long>(lst);\n\
    \        Collections.reverse(lst.subList(0, lst.size()));\n        Collections.reverse(lst2.subList(0,\
    \ lst2.size()));\n        Collections.reverse(lst2.subList(0, lst2.size()));\n\
    \n        return lst2;\n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1007oau_.java:32)\n"
  stdout: ''
  timestamp: 1659976454
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        return lst.stream()\n      \
    \          .sorted()\n                .collect(Collectors.toCollection(ArrayList::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy1k_pgib.java:25)\n"
  stdout: ''
  timestamp: 1659976455
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        return lst.stream()\n      \
    \          .sorted((a, b) -> {\n                    int c = a - b;\n         \
    \           if (c < 0)\n                        return -1;\n                 \
    \   if (c > 0)\n                        return 1;\n                    return\
    \ 0;\n                })\n                .collect(Collectors.toCollection(ArrayList<Long>::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0szjn418.java:22: error: incompatible types: possible lossy conversion\
    \ from long to int\n                    int c = a - b;\n                     \
    \         ^\n1 error\n"
  stdout: ''
  timestamp: 1659976454
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        Collections.sort(lst);\n   \
    \     return lst;\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk1oq6poi.java:24)\n"
  stdout: ''
  timestamp: 1659976447
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        return lst.stream().sorted().collect(Collectors.toCollection(ArrayList::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpya66cfe1.java:23)\n"
  stdout: ''
  timestamp: 1659976440
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> res = new ArrayList<>(lst.size());\n\
    \        // first we sort by minimum value\n        res.add(lst.get(0), \"min\"\
    );\n        for (Long v : lst.subList(1, lst.size())) {\n            if (v < res.get(0))\
    \ res.add(v, \"min\");\n            else if (v > res.get(0)) res.add(v, \"max\"\
    );\n        }\n        // now we sort by maximum value\n        res.add(lst.get(0),\
    \ \"max\");\n        for (Long v : lst.subList(1, lst.size())) {\n           \
    \ if (v < res.get(0)) res.add(v, \"max\");\n            else if (v > res.get(0))\
    \ res.add(v, \"min\");\n        }\n        return res;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxe4tvmrz.java:22: error: incompatible types: Long cannot be converted\
    \ to int\n        res.add(lst.get(0), \"min\");\n                       ^\n/tmp/tmpxe4tvmrz.java:24:\
    \ error: incompatible types: Long cannot be converted to int\n            if (v\
    \ < res.get(0)) res.add(v, \"min\");\n                                       \
    \ ^\n/tmp/tmpxe4tvmrz.java:25: error: incompatible types: Long cannot be converted\
    \ to int\n            else if (v > res.get(0)) res.add(v, \"max\");\n        \
    \                                     ^\n/tmp/tmpxe4tvmrz.java:28: error: incompatible\
    \ types: Long cannot be converted to int\n        res.add(lst.get(0), \"max\"\
    );\n                       ^\n/tmp/tmpxe4tvmrz.java:30: error: incompatible types:\
    \ Long cannot be converted to int\n            if (v < res.get(0)) res.add(v,\
    \ \"max\");\n                                        ^\n/tmp/tmpxe4tvmrz.java:31:\
    \ error: incompatible types: Long cannot be converted to int\n            else\
    \ if (v > res.get(0)) res.add(v, \"min\");\n                                 \
    \            ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n6 errors\n"
  stdout: ''
  timestamp: 1659976454
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given array list of integers, return array list in strange\
    \ order.\n    // Strange sorting, is when you start with the minimum value,\n\
    \    // then maximum of the remaining integers, then minimum and so on.\n    //\
    \ Examples:\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        ArrayList<Long> arrList = new ArrayList<>();\n     \
    \   arrList.addAll(lst);\n        Collections.sort(arrList);\n        for(Long\
    \ i : arrList){\n            result.add(i);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpltks_5m2.java:30)\n"
  stdout: ''
  timestamp: 1659976455
