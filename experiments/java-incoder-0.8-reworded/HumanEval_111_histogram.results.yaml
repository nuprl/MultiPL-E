language: java
name: HumanEval_111_histogram
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        if(test.isEmpty()){\n\
    \            return new HashMap<String,Long>();\n        }\n\n        HashMap<String,Long>\
    \ histogram = new HashMap<String,Long>();\n\n        StringTokenizer tokenizer\
    \ = new StringTokenizer(test, \" \");\n        while(tokenizer.hasMoreTokens()){\n\
    \            String token = tokenizer.nextToken();\n            Long count = histogram.get(token);\n\
    \            if(count == null){\n                histogram.put(token, 1l);\n \
    \           } else {\n                histogram.put(token, count + 1l);\n    \
    \        }\n        }\n        return histogram;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpddomvefb.java:44)\n"
  stdout: ''
  timestamp: 1660011678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<String,Long>();\n        test.split(\" \")\n          \
    \  .stream()\n            .map(String::trim)\n            .forEach(word -> {\n\
    \            long value = result.getOrDefault(word, 0L);\n            result.put(word,\
    \ value + 1);\n        });\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8b5oxvsr.java:26: error: cannot find symbol\n            .stream()\n\
    \            ^\n  symbol:   method stream()\n  location: class String[]\n1 error\n"
  stdout: ''
  timestamp: 1660011678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        if (test.length() == 0) {\n            return\
    \ result;\n        }\n        String[] words = test.split(\" \");\n        for\
    \ (String word : words) {\n            String key = word.toLowerCase();\n    \
    \        if (result.containsKey(key)) {\n                long value = result.get(key);\n\
    \                result.replace(key, value + 1, value + 1);\n            } else\
    \ {\n                result.put(key, 1);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf7_fwjxc.java:35: error: incompatible types: int cannot be converted\
    \ to Long\n                result.put(key, 1);\n                             \
    \   ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ test.chars()\n            .mapToObj(c -> String.valueOf(String.format(\"%c\"\
    , c))).flatMap(s -> Arrays.stream(s.split(\" \")).map(c -> String.format(\"%c\
    \ %lu\", c, s.split(\" \").length - 1)).collect(Collectors.groupingBy(s -> s,\
    \ Collectors.counting()))).entrySet().stream()\n            .max(Comparator.comparing(e\
    \ -> e.getValue())).map(Map.Entry::getKey).collect(Collectors.toMap(k -> k, k\
    \ -> 1l));\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqzt0iodd.java:25: error: incompatible types: inference variable\
    \ R#1 has incompatible bounds\n            .mapToObj(c -> String.valueOf(String.format(\"\
    %c\", c))).flatMap(s -> Arrays.stream(s.split(\" \")).map(c -> String.format(\"\
    %c %lu\", c, s.split(\" \").length - 1)).collect(Collectors.groupingBy(s -> s,\
    \ Collectors.counting()))).entrySet().stream()\n                             \
    \                                             ^\n    equality constraints: Map<K,D>\n\
    \    lower bounds: Stream<? extends R#2>,Object\n  where R#1,A#1,T#1,K,T#2,A#2,D,R#2\
    \ are type-variables:\n    R#1 extends Object declared in method <R#1,A#1>collect(Collector<?\
    \ super T#1,A#1,R#1>)\n    A#1 extends Object declared in method <R#1,A#1>collect(Collector<?\
    \ super T#1,A#1,R#1>)\n    T#1 extends Object declared in interface Stream\n \
    \   K extends Object declared in method <T#2,K,A#2,D>groupingBy(Function<? super\
    \ T#2,? extends K>,Collector<? super T#2,A#2,D>)\n    T#2 extends Object declared\
    \ in method <T#2,K,A#2,D>groupingBy(Function<? super T#2,? extends K>,Collector<?\
    \ super T#2,A#2,D>)\n    A#2 extends Object declared in method <T#2,K,A#2,D>groupingBy(Function<?\
    \ super T#2,? extends K>,Collector<? super T#2,A#2,D>)\n    D extends Object declared\
    \ in method <T#2,K,A#2,D>groupingBy(Function<? super T#2,? extends K>,Collector<?\
    \ super T#2,A#2,D>)\n    R#2 extends Object declared in method <R#2>flatMap(Function<?\
    \ super T#1,? extends Stream<? extends R#2>>)\n/tmp/tmpqzt0iodd.java:26: error:\
    \ cannot find symbol\n            .max(Comparator.comparing(e -> e.getValue())).map(Map.Entry::getKey).collect(Collectors.toMap(k\
    \ -> k, k -> 1l));\n                                            ^\n  symbol: \
    \  method getValue()\n  location: variable e of type Object\n2 errors\n"
  stdout: ''
  timestamp: 1660011678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ countMap = new HashMap<String,Long>();\n        String[] words = test.split(\"\
    \ \");\n        HashMap<String,Long> mostCountLetter = new HashMap<String,Long>();\n\
    \n        for (String word : words) {\n            Long count = countMap.get(word);\n\
    \            if (count == null) {\n                count = 1;\n            }\n\
    \            countMap.put(word, ++count);\n        }\n\n        for (String word\
    \ : countMap.keySet()) {\n            Long count = countMap.get(word);\n     \
    \       if (count == null) {\n                count = 1;\n            }\n    \
    \        if (count > mostCountLetter.getOrDefault(word, 0)) {\n              \
    \  mostCountLetter.put(word, count);\n            }\n        }\n\n        return\
    \ mostCountLetter;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw8qtw8w0.java:31: error: incompatible types: int cannot be converted\
    \ to Long\n                count = 1;\n                        ^\n/tmp/tmpw8qtw8w0.java:39:\
    \ error: incompatible types: int cannot be converted to Long\n               \
    \ count = 1;\n                        ^\n/tmp/tmpw8qtw8w0.java:41: error: incompatible\
    \ types: int cannot be converted to Long\n            if (count > mostCountLetter.getOrDefault(word,\
    \ 0)) {\n                                                           ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    3 errors\n"
  stdout: ''
  timestamp: 1660011678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ histo = new HashMap<>();\n        HashMap<String,Long> histo2 = new HashMap<>();\n\
    \        for (String s : test.split(\" \")) {\n            long count = histo.computeIfAbsent(s,\
    \ i -> 0L);\n            histo.put(s, count + 1);\n            histo2.put(s, count);\n\
    \        }\n        return histo.entrySet().stream().filter(e -> e.getValue()\
    \ == histo2.get(e.getKey()))\n                .collect(Collectors.toMap(e -> e.getKey(),\
    \ e -> e.getValue()));\n    }\n    public static void main(String[] args) {\n\
    \    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7h2wibqa.java:32: error: incompatible types: inference variable\
    \ R has incompatible bounds\n                .collect(Collectors.toMap(e -> e.getKey(),\
    \ e -> e.getValue()));\n                        ^\n    equality constraints: Map<K,U>\n\
    \    lower bounds: HashMap<String,Long>,Object\n  where R,A,T#1,K,T#2,U are type-variables:\n\
    \    R extends Object declared in method <R,A>collect(Collector<? super T#1,A,R>)\n\
    \    A extends Object declared in method <R,A>collect(Collector<? super T#1,A,R>)\n\
    \    T#1 extends Object declared in interface Stream\n    K extends Object declared\
    \ in method <T#2,K,U>toMap(Function<? super T#2,? extends K>,Function<? super\
    \ T#2,? extends U>)\n    T#2 extends Object declared in method <T#2,K,U>toMap(Function<?\
    \ super T#2,? extends K>,Function<? super T#2,? extends U>)\n    U extends Object\
    \ declared in method <T#2,K,U>toMap(Function<? super T#2,? extends K>,Function<?\
    \ super T#2,? extends U>)\n1 error\n"
  stdout: ''
  timestamp: 1660011678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            if (map.containsKey(word)) {\n   \
    \             Long count = map.get(word);\n                map.put(word, new Long(count.longValue()\
    \ + 1));\n            } else {\n                map.put(word, new Long(1));\n\
    \            }\n        }\n        return map;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8c3gayx3.java:38)\n"
  stdout: ''
  timestamp: 1660011678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        if (test.isEmpty()){\n\
    \            return new HashMap<String,Long>();\n        }\n        HashMap<String,Long>\
    \ map = new HashMap<String,Long>();\n        list.split(\" \").forEach(e -> {\n\
    \            Long count = map.get(e);\n            if (count == null) {\n    \
    \            map.put(e, 1l);\n            } else {\n                map.put(e,\
    \ count + 1);\n            }\n        });\n        return map;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp32pkp9ts.java:28: error: cannot find symbol\n        list.split(\"\
    \ \").forEach(e -> {\n        ^\n  symbol:   variable list\n  location: class\
    \ Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        // Split\
    \ test into an array of strings\n        String[] arrayOfStrings = test.split(\"\
    \ \");\n\n        // Create a HashMap\n        HashMap<String, Long> counts =\
    \ new HashMap<>();\n\n        // Iterate through all elements of the array of\
    \ strings\n        for (String string : arrayOfStrings) {\n\n            // Check\
    \ whether this current string already has a counter in our counts map\n      \
    \      if (counts.containsKey(string)) {\n                // If it does, add the\
    \ new occurrence to the existing counter\n                counts.put(string, (counts.get(string)\
    \ + 1));\n            } else {\n                // If it doesn't, create a new\
    \ counter\n                counts.put(string, (1L));\n            }\n        }\n\
    \n        // Return the map with maximal occurrence\n        return counts;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplox2ic3s.java:48)\n"
  stdout: ''
  timestamp: 1660011678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<String,Long>();\n        // use streams to count occurrences\
    \ of letters\n        test = test.replaceAll(\"\\\\s\",\"\").toLowerCase();\n\
    \        test.chars().forEach(l -> {\n            if (result.containsKey(l)) {\n\
    \                result.put(l, result.get(l) + 1);\n            } else {\n   \
    \             result.put(l, 1l);\n            }\n        });\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2hzz4f73.java:29: error: incompatible types: int cannot be converted\
    \ to String\n                result.put(l, result.get(l) + 1);\n             \
    \              ^\n/tmp/tmp2hzz4f73.java:31: error: incompatible types: int cannot\
    \ be converted to String\n                result.put(l, 1l);\n               \
    \            ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<String,Long>();\n\n        // Convert input string to an array\
    \ of lowercase letters\n        String[] letters = test.split(\" \");\n\n    \
    \    // For each letter, increment the count for it in the map\n        for (String\
    \ letter : letters) {\n            if (map.containsKey(letter)) {\n          \
    \      map.put(letter, map.get(letter) + 1);\n            } else {\n         \
    \       map.put(letter, 1l);\n            }\n        }\n\n        return map;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp8ka2hot.java:42)\n"
  stdout: ''
  timestamp: 1660011679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] strArr = test.split(\" \");\n  \
    \      long max = 1;\n        for (String s : strArr) {\n            if (result.containsKey(s))\
    \ {\n                result.put(s, result.get(s) + 1);\n            } else {\n\
    \                result.put(s, 1);\n            }\n            if (max < result.get(s))\
    \ {\n                max = result.get(s);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ooc2zlg.java:31: error: incompatible types: int cannot be converted\
    \ to Long\n                result.put(s, 1);\n                              ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1660011678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        // Your\
    \ code here\n        HashMap<String, Long> histogram = new HashMap<String, Long>();\n\
    \        String[] letters = test.split(\" \");\n        long max = 0;\n      \
    \  String key;\n        for (String letter : letters) {\n            long count\
    \ = histogram.get(letter);\n            if (count == null) {\n               \
    \ histogram.put(letter, 1l);\n            } else {\n                histogram.put(letter,\
    \ count + 1);\n                if (count > max) {\n                    max = count;\n\
    \                    key = letter;\n                }\n            }\n       \
    \ }\n        return histogram.entrySet().stream().filter(e -> e.getValue().equals(max)).collect(Collectors.toMap(Map.Entry::getKey,\
    \ Map.Entry::getValue));\n    }\n    public static void main(String[] args) {\n\
    \    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpna33dntp.java:31: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  long\n  second type: <null>\n/tmp/tmpna33dntp.java:41: error: incompatible\
    \ types: inference variable R has incompatible bounds\n        return histogram.entrySet().stream().filter(e\
    \ -> e.getValue().equals(max)).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n\
    \                                                                            \
    \              ^\n    equality constraints: Map<K,U>\n    lower bounds: HashMap<String,Long>,Object\n\
    \  where R,A,T#1,K,T#2,U are type-variables:\n    R extends Object declared in\
    \ method <R,A>collect(Collector<? super T#1,A,R>)\n    A extends Object declared\
    \ in method <R,A>collect(Collector<? super T#1,A,R>)\n    T#1 extends Object declared\
    \ in interface Stream\n    K extends Object declared in method <T#2,K,U>toMap(Function<?\
    \ super T#2,? extends K>,Function<? super T#2,? extends U>)\n    T#2 extends Object\
    \ declared in method <T#2,K,U>toMap(Function<? super T#2,? extends K>,Function<?\
    \ super T#2,? extends U>)\n    U extends Object declared in method <T#2,K,U>toMap(Function<?\
    \ super T#2,? extends K>,Function<? super T#2,? extends U>)\n2 errors\n"
  stdout: ''
  timestamp: 1660011678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ count = new HashMap<>();\n        for(String s: test.split(\" \"))\n       \
    \     count.put(s, count.get(s) + 1);\n        return count;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Long.longValue()\" because the return value of \"java.util.HashMap.get(Object)\"\
    \ is null\n\tat Problem.histogram(tmp02vw3gv1.java:26)\n\tat Problem.main(tmp02vw3gv1.java:30)\n"
  stdout: ''
  timestamp: 1660011678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ hm = new HashMap<String,Long>();\n        String[] words = test.split(\" \"\
    );\n        for(String word : words) {\n            String letter = word.toLowerCase().replaceAll(\"\
    \\\\W\", \"\");\n            Long count = hm.get(letter);\n            hm.put(letter,\
    \ count == null ? 1L : count + 1);\n        }\n        return hm;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjflu6yv4.java:35)\n"
  stdout: ''
  timestamp: 1660011678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ test.chars().distinct().boxed()\n            .collect(HashMap::new, (m, c) ->\
    \ m.merge(c, 1, Math::max), HashMap::putAll);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvv7jqi8g.java:25: error: incompatible types: Integer cannot be\
    \ converted to String\n            .collect(HashMap::new, (m, c) -> m.merge(c,\
    \ 1, Math::max), HashMap::putAll);\n                                         \
    \            ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ test.length() == 0 ? new HashMap<String,Long>()\n                : test.chars().mapToObj(e\
    \ -> (char)e).sorted()\n                .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmi26np52.java:26: error: cannot find symbol\n                .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                               ^\n\
    \  symbol:   variable Function\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ histogram = new HashMap<String,Long>();\n        String letters = test.split(\"\
    \ \");\n        for (String letter : letters) {\n            if (histogram.containsKey(letter))\
    \ {\n                histogram.put(letter, histogram.get(letter) + 1);\n     \
    \       } else {\n                histogram.put(letter, 1l);\n            }\n\
    \        }\n        return histogram;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpypwylq9k.java:25: error: incompatible types: String[] cannot be\
    \ converted to String\n        String letters = test.split(\" \");\n         \
    \                          ^\n/tmp/tmpypwylq9k.java:26: error: for-each not applicable\
    \ to expression type\n        for (String letter : letters) {\n              \
    \               ^\n  required: array or java.lang.Iterable\n  found:    String\n\
    2 errors\n"
  stdout: ''
  timestamp: 1660011678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<String,Long>(Collections.emptyMap());\n        String[]\
    \ words = test.split(\" \");\n        for (String word : words) {\n          \
    \  String lowerCaseWord = word.toLowerCase();\n            Long count = result.get(lowerCaseWord);\n\
    \            if (count == null) {\n                result.put(lowerCaseWord, 1L);\n\
    \            } else {\n                result.put(lowerCaseWord, count + 1L);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvafaj6lw.java:39)\n"
  stdout: ''
  timestamp: 1660011678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ histo = new HashMap<>();\n        String[] arr = test.split(\" \");\n      \
    \  for (String s : arr) {\n            long count = histo.getOrDefault(s, 0L);\n\
    \            histo.put(s, count + 1L);\n        }\n        return histo;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(histogram((\"a b\
    \ b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp99l9xz9l.java:34)\n"
  stdout: ''
  timestamp: 1660011678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ histogram(test, false);\n    }\n    public static void main(String[] args) {\n\
    \    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9f35jewa.java:24: error: method histogram in class Problem cannot\
    \ be applied to given types;\n        return histogram(test, false);\n       \
    \        ^\n  required: String\n  found:    String,boolean\n  reason: actual and\
    \ formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        if (test.isEmpty())\n            return result;\n\
    \        test.trim().replaceAll(\"\\\\s+\", \" \").replaceAll(\"\\\\s+\", \" \"\
    ).replaceAll(\"^\\\\s\", \"\").replaceAll(\"$\", \"\").split(\"\\\\s+\").forEach(x\
    \ -> {\n            Long count = result.get(x);\n            if (count != null)\n\
    \                result.put(x, result.size() > count ? count : result.size());\n\
    \            else\n                result.put(x, 1);\n        });\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw05c1rq0.java:27: error: cannot find symbol\n        test.trim().replaceAll(\"\
    \\\\s+\", \" \").replaceAll(\"\\\\s+\", \" \").replaceAll(\"^\\\\s\", \"\").replaceAll(\"\
    $\", \"\").split(\"\\\\s+\").forEach(x -> {\n                                \
    \                                                                            \
    \                ^\n  symbol:   method forEach((x)->{ Lon[...]1); })\n  location:\
    \ class String[]\n1 error\n"
  stdout: ''
  timestamp: 1660011678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        Arrays.stream(test.split(\" \")).forEach(letter\
    \ -> {\n            long count = Collections.frequency(Arrays.asList(letter),\
    \ letter);\n            if (count > 0) {\n                result.put(letter, new\
    \ Long(count));\n            }\n        });\n        return result;\n    }\n \
    \   public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8w1ncho0.java:34)\n"
  stdout: ''
  timestamp: 1660011679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] list = test.split(\" \");\n       \
    \ for (String l : list) {\n            map.put(l, map.getOrDefault(l, 0L) + 1);\n\
    \        }\n        return map;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9acq7rj0.java:33)\n"
  stdout: ''
  timestamp: 1660011680
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        for (String str : test.split(\" \"))\n  \
    \          str = str.toLowerCase();\n            for (String letter : str)\n \
    \               if (!result.containsKey(letter)) result.put(letter, 1L);\n   \
    \             else\n                    result.put(letter, result.get(letter)\
    \ + 1);\n            return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4jfjesr5.java:27: error: cannot find symbol\n            for (String\
    \ letter : str)\n                                 ^\n  symbol:   variable str\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011680
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ Arrays.stream(test.split(\" \"))\n                .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()))\n                .entrySet().stream()\n            \
    \    .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (l,r) ->\
    \ l, LinkedHashMap::new));\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2y1l1at4.java:25: error: cannot find symbol\n                .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()))\n                                               ^\n\
    \  symbol:   variable Function\n  location: class Problem\n/tmp/tmp2y1l1at4.java:27:\
    \ error: incompatible types: cannot infer type-variable(s) T,K#1,U,M,K#2,V#1\n\
    \                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue,\
    \ (l,r) -> l, LinkedHashMap::new));\n                                        \
    \ ^\n    (argument mismatch; invalid method reference\n      method getKey in\
    \ interface Entry<K#3,V#2> cannot be applied to given types\n        required:\
    \ no arguments\n        found:    Object\n        reason: actual and formal argument\
    \ lists differ in length)\n  where T,K#1,U,M,K#2,V#1,K#3,V#2 are type-variables:\n\
    \    T extends Object declared in method <T,K#1,U,M>toMap(Function<? super T,?\
    \ extends K#1>,Function<? super T,? extends U>,BinaryOperator<U>,Supplier<M>)\n\
    \    K#1 extends Object declared in method <T,K#1,U,M>toMap(Function<? super T,?\
    \ extends K#1>,Function<? super T,? extends U>,BinaryOperator<U>,Supplier<M>)\n\
    \    U extends Object declared in method <T,K#1,U,M>toMap(Function<? super T,?\
    \ extends K#1>,Function<? super T,? extends U>,BinaryOperator<U>,Supplier<M>)\n\
    \    M extends Map<K#1,U> declared in method <T,K#1,U,M>toMap(Function<? super\
    \ T,? extends K#1>,Function<? super T,? extends U>,BinaryOperator<U>,Supplier<M>)\n\
    \    K#2 extends Object declared in class LinkedHashMap\n    V#1 extends Object\
    \ declared in class LinkedHashMap\n    K#3 extends Object declared in interface\
    \ Entry\n    V#2 extends Object declared in interface Entry\n2 errors\n"
  stdout: ''
  timestamp: 1660011680
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        if (test.isEmpty())\
    \ {\n            return new HashMap<String,Long>();\n        }\n        HashMap<String,Long>\
    \ ret = new HashMap<String,Long>();\n        String[] array = test.split(\" \"\
    );\n        Arrays.stream(array).forEach(i -> {\n            int count = 1;\n\
    \            for (int j = 0; j < i.length(); ++j) {\n                if (ret.containsKey(i.substring(j,\
    \ j + 1))) {\n                    count = ret.get(i.substring(j, j + 1)).intValue()\
    \ + 1;\n                }\n                ret.put(i.substring(j, j + 1), count);\n\
    \            }\n        });\n        return ret;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxhe3w1c7.java:35: error: incompatible types: int cannot be converted\
    \ to Long\n                ret.put(i.substring(j, j + 1), count);\n          \
    \                                     ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011680
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        test.split(\" \").stream().forEach(t -> {\n\
    \            try {\n                result.merge(t,1l,(old,new) -> old+new);\n\
    \            } catch (IllegalArgumentException ex) {\n                result.put(t,\
    \ 1l);\n            }\n        });\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi4c3x2ld.java:27: error: ')' expected\n                result.merge(t,1l,(old,new)\
    \ -> old+new);\n                                       ^\n/tmp/tmpi4c3x2ld.java:27:\
    \ error: <identifier> expected\n                result.merge(t,1l,(old,new) ->\
    \ old+new);\n                                          ^\n/tmp/tmpi4c3x2ld.java:27:\
    \ error: ';' expected\n                result.merge(t,1l,(old,new) -> old+new);\n\
    \                                           ^\n/tmp/tmpi4c3x2ld.java:27: error:\
    \ <identifier> expected\n                result.merge(t,1l,(old,new) -> old+new);\n\
    \                                                      ^\n/tmp/tmpi4c3x2ld.java:27:\
    \ error: not a statement\n                result.merge(t,1l,(old,new) -> old+new);\n\
    \                                                  ^\n5 errors\n"
  stdout: ''
  timestamp: 1660011679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ hashMap = new HashMap<String,Long>();\n        Set<String> set = Arrays.stream(test.split(\"\
    \ \")).collect(Collectors.toSet());\n        Long count = set.stream().distinct().count();\n\
    \        set.stream().forEach(s -> hashMap.put(s, hashMap.getOrDefault(s, 0L)\
    \ + count));\n        return hashMap;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8oa62agj.java:32)\n"
  stdout: ''
  timestamp: 1660011680
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        if (test==null\
    \ || test.isEmpty()) {\n            return new HashMap<String,Long>();\n     \
    \   }\n        HashMap<String,Long> result = new HashMap<String,Long>();\n   \
    \     String[] splitted = test.split(\" \");\n        for(String s : splitted)\
    \ {\n            result.put(s, new Long(splitted.length));\n        }\n      \
    \  return result;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbd06w6ll.java:35)\n"
  stdout: ''
  timestamp: 1660011680
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        for (char ch : test.toCharArray()) {\n     \
    \       map.put(String.valueOf(ch),map.getOrDefault(String.valueOf(ch),0L)+1);\n\
    \        }\n        return map;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsaeioqvc.java:31)\n"
  stdout: ''
  timestamp: 1660011680
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        String\
    \ s = test.trim().toLowerCase();\n        HashMap<String,Long> result = new HashMap<String,Long>();\n\
    \        for(char c:s.toCharArray()) {\n            long occurrence = Collections.frequency(s.toCharArray(),c);\n\
    \            if(result.containsKey(c)) {\n                result.put(c,result.get(c)+occurrence);\n\
    \            } else {\n                result.put(c,occurrence);\n           \
    \ }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4objrrhw.java:27: error: incompatible types: char[] cannot be converted\
    \ to Collection<?>\n            long occurrence = Collections.frequency(s.toCharArray(),c);\n\
    \                                                                 ^\n/tmp/tmp4objrrhw.java:29:\
    \ error: incompatible types: char cannot be converted to String\n            \
    \    result.put(c,result.get(c)+occurrence);\n                           ^\n/tmp/tmp4objrrhw.java:31:\
    \ error: incompatible types: char cannot be converted to String\n            \
    \    result.put(c,occurrence);\n                           ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1660011680
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<String,Long>(26);\n        Arrays.stream(test.split(\"\
    \ \")).forEach(x -> {\n            int index = x.charAt(0) - 'a';\n          \
    \  long count = result.containsKey(x) ? result.get(x) + 1 : 1l;\n            result.put(String.valueOf(index),\
    \ count);\n        });\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9m3d8ea0.java:33)\n"
  stdout: ''
  timestamp: 1660011680
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<String,Long>(Map.of());\n        for (char c : test.toCharArray())\
    \ {\n            String key = String.valueOf(c);\n            Long current = result.get(key);\n\
    \            result.put(key, current == null ? 1l : current + 1);\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfizygwjo.java:33)\n"
  stdout: ''
  timestamp: 1660011680
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<String,Long>();\n        for (String word : test.split(\"\
    \ \")) {\n            long count = map.getOrDefault(word,0L);\n            map.put(word,++count);\n\
    \        }\n        return map;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu_g56hbz.java:33)\n"
  stdout: ''
  timestamp: 1660011680
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (int i = 0; i < words.length; i++) {\n            if (words[i].length()\
    \ > 1) map.put(words[i], Long.valueOf(words[i].length()));\n        }\n      \
    \  return map;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw5exjz09.java:32)\n"
  stdout: ''
  timestamp: 1660011680
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<String,Long>();\n        if(test.isEmpty()) {\n       \
    \     return result;\n        }\n        String[] tokens = test.split(\" \");\n\
    \        for(String token : tokens) {\n            Long count = result.get(token);\n\
    \            if(count == null) {\n                result.put(token, 1L);\n   \
    \         } else {\n                result.put(token, count.longValue() + 1L);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu0tnzpqj.java:41)\n"
  stdout: ''
  timestamp: 1660011680
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        if (test == null || test.isEmpty()) {\n \
    \           return result;\n        }\n\n        // Splitting string into separate\
    \ letters\n        ArrayList <String> letters = Arrays.asList(test.split(\" \"\
    ));\n\n        Collections.frequency(letters,letters.get(0));\n        HashSet<String>\
    \ repeated = new HashSet<>(letters);\n\n        for(String item : letters) {\n\
    \            Collections.frequency(repeated, item);\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvjxm1g8c.java:30: error: incompatible types: no instance(s) of\
    \ type variable(s) T exist so that List<T> conforms to ArrayList<String>\n   \
    \     ArrayList <String> letters = Arrays.asList(test.split(\" \"));\n       \
    \                                           ^\n  where T is a type-variable:\n\
    \    T extends Object declared in method <T>asList(T...)\n1 error\n"
  stdout: ''
  timestamp: 1660011680
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        Map<String,Long>\
    \ result = new HashMap<>();\n        String[] arr = test.split(\" \");\n     \
    \   for (int i = 0; i < arr.length; i++) {\n            String s = arr[i];\n \
    \           Long count = result.get(s);\n            result.put(s, count + (count\
    \ != null ? 1 : 0));\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeydi1c9k.java:31: error: incompatible types: Map<String,Long> cannot\
    \ be converted to HashMap<String,Long>\n        return result;\n             \
    \  ^\n1 error\n"
  stdout: ''
  timestamp: 1660011680
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<String,Long>();\n        for(String s : test.split(\" \"))\
    \ {\n            map.put(s, new Long(map.get(s)==null ? 0 : map.get(s)+1));\n\
    \        }\n        return map;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc1g9g9xq.java:31)\n"
  stdout: ''
  timestamp: 1660011680
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] tests = test.split(\" \");\n   \
    \     for (String t : tests) {\n            Long count = result.containsKey(t)\
    \ ? result.get(t) : 0L;\n            result.put(t,count+1);\n        }\n     \
    \   return result;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa20osczb.java:34)\n"
  stdout: ''
  timestamp: 1660011680
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ counts = new HashMap<String,Long>();\n        Arrays.stream(test.trim().split(\"\
    \ \")).map(l -> {\n            String key = l;\n            if (counts.get(key)\
    \ == null) {\n                counts.put(key, 1l);\n            } else {\n   \
    \             counts.put(key, counts.get(key) + 1);\n            }\n         \
    \   return key;\n        }).forEach(key -> counts.put(key, counts.get(key)));\n\
    \        HashMap<String,Long> sorted = new HashMap<String,Long>(counts);\n   \
    \     sorted.entrySet().stream().sorted(Map.Entry.comparingByValue()).forEach(e\
    \ -> {\n            if (e.getValue() > 1) {\n                sorted.put(e.getKey(),\
    \ e.getValue());\n            }\n        });\n        return sorted;\n    }\n\
    \    public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb8j94ks2.java:44)\n"
  stdout: ''
  timestamp: 1660011680
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        Map<String,Long>\
    \ map = new HashMap<>();\n        Arrays.stream(test.split(\" \")).forEach(t ->\
    \ map.merge(t, 1l, Long::sum));\n        return map;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxisfpmjb.java:26: error: incompatible types: Map<String,Long> cannot\
    \ be converted to HashMap<String,Long>\n        return map;\n               ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011680
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ counts = new HashMap<String,Long>();\n        if (test.length() == 0) {\n  \
    \          return new HashMap<String,Long>();\n        }\n        String[] words\
    \ = new String[test.length()];\n        Arrays.stream(test.split(\" \")).forEach(s\
    \ -> {\n            words[s.charAt(0) - 'a'] = words[s.charAt(0) - 'a'] + 1;\n\
    \        });\n        return Arrays.stream(words).boxed().collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ss7trok.java:32: error: cannot find symbol\n        return Arrays.stream(words).boxed().collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                   ^\n  symbol:  \
    \ method boxed()\n  location: interface Stream<String>\n/tmp/tmp1ss7trok.java:32:\
    \ error: cannot find symbol\n        return Arrays.stream(words).boxed().collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                                 \
    \                         ^\n  symbol:   variable Function\n  location: class\
    \ Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011680
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ HashMap.ofAll(\n            Arrays.stream(test.split(\" \"))\n             \
    \   .map(e -> new SimpleEntry<String,Long>(e.toLowerCase(), 1L))\n           \
    \     .collect(\n                    Collectors.groupingBy(\n                \
    \        Entry::getKey, Collectors.counting())))\n            .get();\n    }\n\
    \    public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp28fd6hji.java:26: error: cannot find symbol\n                .map(e\
    \ -> new SimpleEntry<String,Long>(e.toLowerCase(), 1L))\n                    \
    \          ^\n  symbol:   class SimpleEntry\n  location: class Problem\n/tmp/tmp28fd6hji.java:29:\
    \ error: cannot find symbol\n                        Entry::getKey, Collectors.counting())))\n\
    \                        ^\n  symbol:   variable Entry\n  location: class Problem\n\
    2 errors\n"
  stdout: ''
  timestamp: 1660011680
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        Map<String,\
    \ Long> map = new HashMap<String,Long>();\n        for (String word : test.split(\"\
    \ \"))\n            map.merge(word, 1, (oldValue, newValue) -> oldValue + newValue);\n\
    \        return map.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getKey).collect(Collectors.toMap(\n\
    \                k -> k,\n                k -> 1L));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6qjh26rr.java:26: error: incompatible types: int cannot be converted\
    \ to Long\n            map.merge(word, 1, (oldValue, newValue) -> oldValue + newValue);\n\
    \                            ^\n/tmp/tmp6qjh26rr.java:26: error: bad operand types\
    \ for binary operator '+'\n            map.merge(word, 1, (oldValue, newValue)\
    \ -> oldValue + newValue);\n                                                 \
    \               ^\n  first type:  V\n  second type: V\n  where V is a type-variable:\n\
    \    V extends Object declared in interface Map\n/tmp/tmp6qjh26rr.java:27: error:\
    \ cannot find symbol\n        return map.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getKey).collect(Collectors.toMap(\n\
    \                                                                            \
    \                   ^\n  symbol:   method collect(Collector<Object,CAP#1,Map<Object,Object>>)\n\
    \  location: class Optional<String>\n  where CAP#1 is a fresh type-variable:\n\
    \    CAP#1 extends Object from capture of ?\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1660011680
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        Set<String> uniqueLetters = new HashSet<>();\n\
    \        String[] tokens = test.split(\" \");\n        for (String letter : tokens)\
    \ {\n            if (!uniqueLetters.contains(letter)) {\n                uniqueLetters.add(letter);\n\
    \                result.put(letter, 1L);\n            }\n            else {\n\
    \                Long count = result.get(letter);\n                result.put(letter,\
    \ ++count);\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwsnfw4uy.java:41)\n"
  stdout: ''
  timestamp: 1660011681
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        List<String>\
    \ list = Arrays.asList(test.split(\" \"));\n        HashMap<String,Long> map =\
    \ new HashMap<>();\n\n        for (String word : list) {\n            Long count\
    \ = map.get(word);\n            Long oldCount = count == null ? 0L : count;\n\
    \            map.put(word, oldCount + 1L);\n        }\n\n        return map;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9o8x5rdl.java:37)\n"
  stdout: ''
  timestamp: 1660011682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        String\
    \ words = test;\n        HashMap<String,Long> map = new HashMap<String,Long>();\n\
    \        if (words == null || words.isEmpty()) {\n            map.putAll(Collections.emptyMap());\n\
    \        } else {\n            StringTokenizer st = new StringTokenizer(words);\n\
    \            while (st.hasMoreTokens()) {\n                String token = st.nextToken();\n\
    \                if (map.containsKey(token)) {\n                    map.put(token,\
    \ map.get(token) + 1);\n                } else {\n                    map.put(token,\
    \ 1l);\n                }\n            }\n        }\n        return map;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(histogram((\"a b\
    \ b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp67azbn_5.java:43)\n"
  stdout: ''
  timestamp: 1660011682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        // Your\
    \ code goes here\n        HashMap<String,Long> map = new HashMap<String,Long>();\n\
    \        String[] splited = test.split(\" \");\n        for(String str: splited){\n\
    \            map.put(str,map.getOrDefault(str,0)+1);\n        }\n        \n  \
    \      \n        \n        return map;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxstb3txm.java:28: error: incompatible types: int cannot be converted\
    \ to Long\n            map.put(str,map.getOrDefault(str,0)+1);\n             \
    \                                ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011681
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ histogram = new HashMap<String,Long>();\n        String[] words = test.split(\"\
    \ \");\n        \n        for( int i=0; i<words.length; i++ ) {\n            String\
    \ word = words[i];\n            histogram.put(word, histogram.getOrDefault(word,\
    \ 0l) + 1);\n        }\n        return histogram;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpooa74__9.java:35)\n"
  stdout: ''
  timestamp: 1660011682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        // TODO\
    \ Implement\n        HashMap<String,Long> map = new HashMap<String,Long>();\n\
    \        String[] arr = test.split(\" \");\n        \n        for(int i = 0; i\
    \ < arr.length; i++){\n            if(map.containsKey(arr[i])){\n            \
    \    map.put(arr[i], map.get(arr[i]) + 1);\n            } else {\n           \
    \     map.put(arr[i], 1l);\n            }\n        }\n        \n        return\
    \ map;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgu0705qp.java:40)\n"
  stdout: ''
  timestamp: 1660011682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] tokens = test.split(\" \");\n     \
    \   for(String token : tokens) {\n            if(map.containsKey(token)) {\n \
    \               map.put(token, map.get(token) + 1);\n            }else {\n   \
    \             map.put(token, 1L);\n            }\n        }\n        return map;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv_pt8pcu.java:37)\n"
  stdout: ''
  timestamp: 1660011682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        if (test.isEmpty()) return result;\n    \
    \    Stream<String> stream = test.trim().split(\"\\\\s+\");\n        stream.forEach(str\
    \ -> {\n            Long count = result.get(str);\n            if (count == null)\
    \ result.put(str,count = 1l);\n            else count.incrementAndGet();\n   \
    \     });\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp76tmnr7a.java:26: error: incompatible types: String[] cannot be\
    \ converted to Stream<String>\n        Stream<String> stream = test.trim().split(\"\
    \\\\s+\");\n                                                 ^\n/tmp/tmp76tmnr7a.java:30:\
    \ error: cannot find symbol\n            else count.incrementAndGet();\n     \
    \                 ^\n  symbol:   method incrementAndGet()\n  location: variable\
    \ count of type Long\n2 errors\n"
  stdout: ''
  timestamp: 1660011682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<String,Long>();\n        String[] array = test.split(\"\
    \ \");\n        Arrays.sort(array);\n        for (String s : array) {\n      \
    \      Long val = result.get(s);\n            if (val == null) {\n           \
    \     result.put(s, 1l);\n            } else {\n                result.put(s,\
    \ val + 1);\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfus6ypqg.java:39)\n"
  stdout: ''
  timestamp: 1660011682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<String,Long>();\n        for (String s : test.split(\"\
    \ \")) {\n            if (!s.isEmpty() && s.matches(\"\\\\p{IsLower}\")) {\n \
    \               long c = result.getOrDefault(s, 0L);\n                result.replace(s,\
    \ String.valueOf(c+1), 1);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphpso73_p.java:28: error: incompatible types: String cannot be converted\
    \ to Long\n                result.replace(s, String.valueOf(c+1), 1);\n      \
    \                                          ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        Map<String,Long>\
    \ counts = new HashMap<>();\n        Set<String> letters = test.split(\" \");\n\
    \        for (String letter : letters) {\n            counts.merge(letter, 1,\
    \ (count1, count2) -> count1+count2);\n        }\n        \n        return counts;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5qmo9f8l.java:25: error: incompatible types: String[] cannot be\
    \ converted to Set<String>\n        Set<String> letters = test.split(\" \");\n\
    \                                        ^\n/tmp/tmp5qmo9f8l.java:27: error: incompatible\
    \ types: int cannot be converted to Long\n            counts.merge(letter, 1,\
    \ (count1, count2) -> count1+count2);\n                                 ^\n/tmp/tmp5qmo9f8l.java:27:\
    \ error: bad operand types for binary operator '+'\n            counts.merge(letter,\
    \ 1, (count1, count2) -> count1+count2);\n                                   \
    \                           ^\n  first type:  V\n  second type: V\n  where V is\
    \ a type-variable:\n    V extends Object declared in interface Map\n/tmp/tmp5qmo9f8l.java:30:\
    \ error: incompatible types: Map<String,Long> cannot be converted to HashMap<String,Long>\n\
    \        return counts;\n               ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n4 errors\n"
  stdout: ''
  timestamp: 1660011682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<String,Long>();\n        String[] words = test.trim().split(\"\
    \ \");\n        Arrays.stream(words).map(String::toLowerCase).forEachOrdered(word\
    \ -> {\n            Long count = result.get(word);\n            if (count != null)\
    \ {\n                result.put(word, new Long(count.longValue() + 1));\n    \
    \        } else {\n                result.put(word, 1l);\n            }\n    \
    \    });\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3cp55768.java:38)\n"
  stdout: ''
  timestamp: 1660011682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ Arrays.stream(test.split(\" \"))\n            .map(x -> new StringDoublePair(x))\n\
    \            .collect(Collectors.groupingBy(x -> x.getFirst(), Collectors.counting()));\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi0h92bei.java:25: error: cannot find symbol\n            .map(x\
    \ -> new StringDoublePair(x))\n                          ^\n  symbol:   class\
    \ StringDoublePair\n  location: class Problem\n/tmp/tmpi0h92bei.java:26: error:\
    \ incompatible types: inference variable R has incompatible bounds\n         \
    \   .collect(Collectors.groupingBy(x -> x.getFirst(), Collectors.counting()));\n\
    \                    ^\n    equality constraints: Map<K,D>\n    lower bounds:\
    \ HashMap<String,Long>,Object\n  where R,A#1,T#1,K,T#2,A#2,D are type-variables:\n\
    \    R extends Object declared in method <R,A#1>collect(Collector<? super T#1,A#1,R>)\n\
    \    A#1 extends Object declared in method <R,A#1>collect(Collector<? super T#1,A#1,R>)\n\
    \    T#1 extends Object declared in interface Stream\n    K extends Object declared\
    \ in method <T#2,K,A#2,D>groupingBy(Function<? super T#2,? extends K>,Collector<?\
    \ super T#2,A#2,D>)\n    T#2 extends Object declared in method <T#2,K,A#2,D>groupingBy(Function<?\
    \ super T#2,? extends K>,Collector<? super T#2,A#2,D>)\n    A#2 extends Object\
    \ declared in method <T#2,K,A#2,D>groupingBy(Function<? super T#2,? extends K>,Collector<?\
    \ super T#2,A#2,D>)\n    D extends Object declared in method <T#2,K,A#2,D>groupingBy(Function<?\
    \ super T#2,? extends K>,Collector<? super T#2,A#2,D>)\n2 errors\n"
  stdout: ''
  timestamp: 1660011682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        // Your\
    \ code here\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpxlw59gld.java:28)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ Pattern.compile(\"[a-z]+\").matcher(test).results()\n            .map(r -> new\
    \ StringBuilder(r.group().replace(\"^\", \"\"))).collect(groupingBy(Function.identity(),\
    \ counting()));\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxxwhvvjm.java:24: error: cannot find symbol\n        return Pattern.compile(\"\
    [a-z]+\").matcher(test).results()\n               ^\n  symbol:   variable Pattern\n\
    \  location: class Problem\n/tmp/tmpxxwhvvjm.java:25: error: cannot find symbol\n\
    \            .map(r -> new StringBuilder(r.group().replace(\"^\", \"\"))).collect(groupingBy(Function.identity(),\
    \ counting()));\n                                                            \
    \                            ^\n  symbol:   variable Function\n  location: class\
    \ Problem\n/tmp/tmpxxwhvvjm.java:25: error: cannot find symbol\n            .map(r\
    \ -> new StringBuilder(r.group().replace(\"^\", \"\"))).collect(groupingBy(Function.identity(),\
    \ counting()));\n                                                            \
    \                                                 ^\n  symbol:   method counting()\n\
    \  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        for (String letter : test.trim().toLowerCase().split(\"\
    \ \"))\n            map.merge(letter, 1, Integer::sum);\n        return map;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3rc28urf.java:26: error: incompatible types: int cannot be converted\
    \ to Long\n            map.merge(letter, 1, Integer::sum);\n                 \
    \             ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ hashMap = new HashMap<>();\n\n        test.chars().map(ch -> {\n           \
    \ hashMap.put((char)ch,hashMap.getOrDefault((char)ch, 0l) + 1);\n            return\
    \ ch;\n        }).forEach(ch -> hashMap.put((char)ch,1l));\n\n        return hashMap;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe1qm0yss.java:27: error: incompatible types: char cannot be converted\
    \ to String\n            hashMap.put((char)ch,hashMap.getOrDefault((char)ch, 0l)\
    \ + 1);\n                        ^\n/tmp/tmpe1qm0yss.java:29: error: incompatible\
    \ types: char cannot be converted to String\n        }).forEach(ch -> hashMap.put((char)ch,1l));\n\
    \                                     ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        // This\
    \ could have been solved using a regular expression, but this is\n        // more\
    \ readable and easier to understand.\n        // We first split the string by\
    \ spaces into a list of strings containing\n        // each separate word. Then\
    \ we find all the unique letters in that list,\n        // and count how many\
    \ of each there are.\n        HashMap<String,Long> results = new HashMap<>();\n\
    \        List<String> words = Arrays.asList(test.split(\" \"));\n        for (String\
    \ word : words) {\n            Set<String> letters = HashSet<>(word.length());\n\
    \            for (int i = 0; i < word.length(); i++) {\n                letters.add(word.charAt(i));\n\
    \            }\n            String mostCommonLetter = Collections.max(letters,\
    \ Comparator.comparingLong(String::length));\n            Long count = letters.stream().filter(letter\
    \ -> letter.toString().equals(mostCommonLetter)).count();\n            results.put(mostCommonLetter,\
    \ count); // Map will store both entries with the same key\n        }\n      \
    \  return results;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe6lc_pic.java:32: error: illegal start of expression\n        \
    \    Set<String> letters = HashSet<>(word.length());\n                       \
    \                   ^\n1 error\n"
  stdout: ''
  timestamp: 1660011681
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<String,Long>();\n        Arrays.stream(test.trim().split(\"\
    \ \"))\n          .map(String::trim)\n          .map(s -> s.length() == 0 ? \"\
    \" : s)\n          .map(s -> s.charAt(0).toUpperCase() + s.substring(1))\n   \
    \       .filter(s -> s.length() > 0)\n          .distinct()\n          .forEach(s\
    \ -> result.put(s, result.containsKey(s) ? result.get(s) + 1 : 1l));\n       \
    \ return result;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpes_avi9b.java:28: error: char cannot be dereferenced\n        \
    \  .map(s -> s.charAt(0).toUpperCase() + s.substring(1))\n                   \
    \            ^\n/tmp/tmpes_avi9b.java:29: error: cannot find symbol\n        \
    \  .filter(s -> s.length() > 0)\n                        ^\n  symbol:   method\
    \ length()\n  location: variable s of type Object\n/tmp/tmpes_avi9b.java:31: error:\
    \ incompatible types: Object cannot be converted to String\n          .forEach(s\
    \ -> result.put(s, result.containsKey(s) ? result.get(s) + 1 : 1l));\n       \
    \                            ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1660011682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ res = new HashMap<>();\n        \n        for(String s : test.split(\" \")){\n\
    \            String lower = s.toLowerCase();\n            if(res.containsKey(lower)){\n\
    \                res.put(lower, res.get(lower) + 1);\n            } else {\n \
    \               res.put(lower, 1L);\n            }\n        }\n\n        return\
    \ res;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm33o8l7k.java:39)\n"
  stdout: ''
  timestamp: 1660011682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ test.chars().mapToObj(c -> {\n            String key = Character.toString((char)\
    \ c);\n            long count = 1l;\n            if (test.toLowerCase().contains(key))\
    \ {\n                count = test.toLowerCase().replaceFirst(key + \",\", \"\"\
    ).split(\",\").length();\n            }\n            return new HashMap<String,Long>(Map.of(key,\
    \ count));\n        }).collect(Collectors.groupingBy(HashMap::key, Collectors.counting()));\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpazqs6f2z.java:28: error: cannot find symbol\n                count\
    \ = test.toLowerCase().replaceFirst(key + \",\", \"\").split(\",\").length();\n\
    \                                                                            \
    \     ^\n  symbol:   method length()\n  location: class String[]\n/tmp/tmpazqs6f2z.java:31:\
    \ error: invalid method reference\n        }).collect(Collectors.groupingBy(HashMap::key,\
    \ Collectors.counting()));\n                                         ^\n  cannot\
    \ find symbol\n    symbol:   method key()\n    location: class HashMap\n2 errors\n"
  stdout: ''
  timestamp: 1660011682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        // create\
    \ hash map to hold letter with highest occurrence.\n        HashMap<String,Long>\
    \ lettersWithMaxOccurence = new HashMap<>();\n        // parse string into array\
    \ containing each letter and its count\n        String[] letterCounts = test.split(\"\
    \ \");\n        \n        // iterate over array and add each letter to hash map\
    \ if its count is higher than the current one\n        for (String letterCount:\
    \ letterCounts) {\n            lettersWithMaxOccurence.merge(letterCount, 1, Long::sum);\n\
    \        }\n        \n        return lettersWithMaxOccurence;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx1rpx227.java:31: error: incompatible types: int cannot be converted\
    \ to Long\n            lettersWithMaxOccurence.merge(letterCount, 1, Long::sum);\n\
    \                                                       ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ letterMap = new HashMap<String,Long>();\n        if (test.isEmpty()) {\n   \
    \         return letterMap;\n        }\n        String[] array = test.split(\"\
    \ \");\n        for (int i = 0; i < array.length; ++i) {\n            String letter\
    \ = array[i];\n            Long count = null;\n            letterMap.merge(letter,\
    \ (count = letterMap.getOrDefault(letter, 0l) + 1),\n                    (count1,\
    \ count2) -> {\n                        return count1 + count2;\n            \
    \        });\n        }\n        return letterMap;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzuahl2tx.java:40)\n"
  stdout: ''
  timestamp: 1660011682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<String,Long>();\n        // Split the string into a list\
    \ of single characters. Remove duplicates\n        List<Character> chars = Arrays.asList(test.toCharArray()).stream().distinct().collect(Collectors.toList());\n\
    \        // Create a map of characters to their count\n        for (char c : chars)\
    \ {\n            result.put(c, result.getOrDefault(c, 0L) + 1);\n        }\n \
    \       return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpldtj94we.java:26: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        List<Character> chars = Arrays.asList(test.toCharArray()).stream().distinct().collect(Collectors.toList());\n\
    \                                                                            \
    \                 ^\n    equality constraints: Character\n    lower bounds: char[]\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>toList()\n\
    /tmp/tmpldtj94we.java:29: error: incompatible types: char cannot be converted\
    \ to String\n            result.put(c, result.getOrDefault(c, 0L) + 1);\n    \
    \                   ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ Arrays.stream(test.split(\" \"))\n                .collect(Collectors.groupingBy(s\
    \ -> s))\n                .entrySet().stream()\n                .collect(Collectors.toMap(Map.Entry::getKey,\
    \ e -> e.getValue().count(), HashMap::new));\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9pu60lhz.java:27: error: incompatible types: inference variable\
    \ R has incompatible bounds\n                .collect(Collectors.toMap(Map.Entry::getKey,\
    \ e -> e.getValue().count(), HashMap::new));\n                        ^\n    equality\
    \ constraints: Map<K,U>\n    lower bounds: HashMap<String,Long>,Object\n  where\
    \ R,A,T#1,K,T#2,U are type-variables:\n    R extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    A extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    T#1 extends Object declared in\
    \ interface Stream\n    K extends Object declared in method <T#2,K,U>toMap(Function<?\
    \ super T#2,? extends K>,Function<? super T#2,? extends U>,BinaryOperator<U>)\n\
    \    T#2 extends Object declared in method <T#2,K,U>toMap(Function<? super T#2,?\
    \ extends K>,Function<? super T#2,? extends U>,BinaryOperator<U>)\n    U extends\
    \ Object declared in method <T#2,K,U>toMap(Function<? super T#2,? extends K>,Function<?\
    \ super T#2,? extends U>,BinaryOperator<U>)\n1 error\n"
  stdout: ''
  timestamp: 1660011682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        for(String letter : test.split(\" \")){\n\
    \            result.put(letter, result.getOrDefault(letter, 0l) + 1);\n      \
    \  }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf056bddq.java:32)\n"
  stdout: ''
  timestamp: 1660011683
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ histogram = new HashMap<>();\n\n        String[] array = test.split(\" \");\n\
    \        \n        Arrays.stream(array).forEach(e -> {\n            String key\
    \ = e;\n            Long value = histogram.get(key);\n            if(value ==\
    \ null){\n                histogram.put(key, 1L);\n            }\n           \
    \ else{\n                histogram.put(key, histogram.get(key).longValue() + 1L);\n\
    \            }\n        });\n        \n        return histogram;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppzb695o7.java:43)\n"
  stdout: ''
  timestamp: 1660011683
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        if (test.length()\
    \ == 0) return new HashMap<String,Long>();\n        HashMap<String,Long> map =\
    \ new HashMap<String,Long>();\n        test.chars().mapToObj(i -> Character.toString((char)\
    \ i)).collect(Collectors.groupingBy(i -> i, Collectors.counting()));\n       \
    \ if (map.isEmpty()) return new HashMap<String,Long>();\n        map.entrySet().stream().filter(e\
    \ -> e.getValue().equals(map.get(e.getKey())).intValue()).forEach(e -> map.put(e.getKey(),\
    \ e.getValue()));\n        return map;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9zknn5cy.java:28: error: boolean cannot be dereferenced\n     \
    \   map.entrySet().stream().filter(e -> e.getValue().equals(map.get(e.getKey())).intValue()).forEach(e\
    \ -> map.put(e.getKey(), e.getValue()));\n                                   \
    \                                                 ^\n1 error\n"
  stdout: ''
  timestamp: 1660011683
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ hm = new HashMap<>();\n        test.split(\" \").stream()\n            .map(s\
    \ -> s.toLowerCase())\n            .forEachOrdered(s -> {\n                if\
    \ (hm.containsKey(s)) {\n                    hm.put(s, hm.get(s)+1);\n       \
    \         } else {\n                    hm.put(s, 1l);\n                }\n  \
    \          });\n        return hm;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz8xmoc7a.java:25: error: cannot find symbol\n        test.split(\"\
    \ \").stream()\n                       ^\n  symbol:   method stream()\n  location:\
    \ class String[]\n1 error\n"
  stdout: ''
  timestamp: 1660011683
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        if (test==null\
    \ || test.isEmpty())\n            return new HashMap<String,Long>();\n       \
    \ HashMap<String,Long> map = new HashMap<String,Long>();\n        String[] s =\
    \ test.split(\" \");\n        for (int i = 0; i < s.length; i++)\n           \
    \ map.merge(s[i], 1l, Long::sum);\n        return map;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8xrjyio_.java:34)\n"
  stdout: ''
  timestamp: 1660011683
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for(int i=0; i < words.length; i++) {\n            String word = words[i];\n\
    \            Long count = map.getOrDefault(word, 0L);\n            map.put(word,\
    \ count + 1L);\n        }\n        return map;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu1gptipg.java:35)\n"
  stdout: ''
  timestamp: 1660011683
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] splitted = test.split(\" \");\n   \
    \     for(String s : splitted) {\n            map.computeIfAbsent(s, x -> 0L).incrementAndGet();\n\
    \        }\n        return map;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6psei_ul.java:27: error: cannot find symbol\n            map.computeIfAbsent(s,\
    \ x -> 0L).incrementAndGet();\n                                           ^\n\
    \  symbol:   method incrementAndGet()\n  location: class Long\n1 error\n"
  stdout: ''
  timestamp: 1660011683
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        for(String key : test.split(\" \"))\n   \
    \         result.put(key, 1l);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy8qfjqzv.java:30)\n"
  stdout: ''
  timestamp: 1660011683
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        // TODO:\
    \ write your implementation here\n        return null;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpmfikrntd.java:28)\n"
  stdout: ''
  timestamp: 1660011683
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ letterCounter = new HashMap<String,Long>();\n        if(test==null || test.isEmpty()){\n\
    \            return letterCounter;\n        }\n        String[] letters = test.split(\"\
    \ \");\n        for( int i=0;i<letters.length;i++ ) {\n            if( !letterCounter.containsKey(letters[i])\
    \ ) {\n                letterCounter.put(letters[i],1l);\n            } else {\n\
    \                letterCounter.put(letters[i],letterCounter.get(letters[i])+1);\n\
    \            }\n        }\n        return letterCounter;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6ubmkc_l.java:40)\n"
  stdout: ''
  timestamp: 1660011683
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<String,Long>();\n        String[] words = test.split(\" \"\
    );\n        for (String word : words) {\n            Long currentVal = map.get(word);\n\
    \            if (currentVal == null) {\n                currentVal = 1l;\n   \
    \             map.put(word, currentVal);\n            } else {\n             \
    \   map.put(word, currentVal + 1);\n            }\n        }\n        return map;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb98myr3z.java:39)\n"
  stdout: ''
  timestamp: 1660011683
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ Arrays.stream(test.trim().split(\" \"))\n                    .collect(HashMap::new,\n\
    \                             (m,x) -> m.merge(x,1l,Long::sum),\n            \
    \                 HashMap::putAll);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp97y88inw.java:31)\n"
  stdout: ''
  timestamp: 1660011684
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        // Iterate over every character\n        for(char\
    \ c: test.toCharArray()) {\n            long count = map.get(c) != null ? map.get(c)\
    \ : 0l;\n            // If character doesn't exist, increment count by 1\n   \
    \         map.put(c, count + 1l);\n        }\n        // Return to HashMap\n \
    \       return map;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\"\
    , 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqcm0cjus.java:29: error: incompatible types: char cannot be converted\
    \ to String\n            map.put(c, count + 1l);\n                    ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n1 error\n"
  stdout: ''
  timestamp: 1660011683
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<String,Long>();\n        String[] words = test.split(\"\
    \ \");\n        for (String word : words) {\n            word = word.trim();\n\
    \            if (word.length() > 0) {\n                result.merge(word, 1l,\
    \ Long::sum);\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7_sek776.java:36)\n"
  stdout: ''
  timestamp: 1660011683
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        // Split input string on spaces.\n      \
    \  String[] input = test.split(\" \");\n        Arrays.sort(input);\n        //\
    \ Loop over every letter and count it\n        for (String letter : input) {\n\
    \            if (!result.containsKey(letter)) {\n                result.put(letter,\
    \ 1l);\n            } else {\n                result.put(letter, result.get(letter)\
    \ + 1);\n            }\n        }\n        // Return the result\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdu7i7q80.java:41)\n"
  stdout: ''
  timestamp: 1660011683
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<String,Long>();\n        if(test.isEmpty()) {\n       \
    \     return result;\n        }\n        String[] letters = test.split(\" \");\n\
    \        Arrays.stream(letters).forEach(letter ->{\n            Long count = result.getOrDefault(letter,\
    \ 0L);\n            result.put(letter, count + 1);\n        });\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuykvrxkm.java:37)\n"
  stdout: ''
  timestamp: 1660011684
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ test.chars().boxed()\n                .flatMapToObj(c -> new String[]{String.valueOf(c),\
    \ String.format(\"%03d\", c)})\n                .collect(groupingBy(\n       \
    \                 t -> t, \n                        counting()))\n           \
    \     .entrySet().stream()\n                .sorted((o1, o2) -> o2.getValue().compareTo(o1.getValue()))\n\
    \                .collect(toMap(Map.Entry::getKey, Map.Entry::getValue));\n  \
    \  }\n    public static void main(String[] args) {\n    assert(histogram((\"a\
    \ b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf1hex_su.java:25: error: cannot find symbol\n                .flatMapToObj(c\
    \ -> new String[]{String.valueOf(c), String.format(\"%03d\", c)})\n          \
    \      ^\n  symbol:   method flatMapToObj((c)->new S[...], c)})\n  location: interface\
    \ Stream<Integer>\n/tmp/tmpf1hex_su.java:28: error: cannot find symbol\n     \
    \                   counting()))\n                        ^\n  symbol:   method\
    \ counting()\n  location: class Problem\n/tmp/tmpf1hex_su.java:31: error: cannot\
    \ find symbol\n                .collect(toMap(Map.Entry::getKey, Map.Entry::getValue));\n\
    \                         ^\n  symbol:   method toMap(Map.Entry::getKey,Map.Entry::getValue)\n\
    \  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011683
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ histogram = new HashMap<>();\n        String[] words = test.split(\" \");\n\
    \        for (String word : words) {\n            long occurrences = histogram.getOrDefault(word,\
    \ 0L);\n            histogram.put(word, occurrences+1);\n        }\n        return\
    \ histogram;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6nnq9l8s.java:34)\n"
  stdout: ''
  timestamp: 1660011684
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        if(test.isEmpty())\n\
    \            return new HashMap<String,Long>();\n        HashMap<String,Long>\
    \ result = new HashMap<String,Long>();\n        String[] chars = test.split(\"\
    \ \");\n        long maxCount = 1;\n        for (String char: chars) {\n     \
    \       long count = 1;\n            String currentChar = char;\n            String\
    \ lastChar = chars[chars.length-1];\n            while(currentChar.equals(lastChar))\
    \ {\n                count++;\n                currentChar = chars[chars.length-count-1];\n\
    \            }\n            result.put(currentChar, count); \n            maxCount\
    \ = Math.max(maxCount, count);\n        }\n        return result;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpshcaxdsm.java:29: error: not a statement\n        for (String char:\
    \ chars) {\n             ^\n/tmp/tmpshcaxdsm.java:29: error: ';' expected\n  \
    \      for (String char: chars) {\n                   ^\n/tmp/tmpshcaxdsm.java:29:\
    \ error: '.class' expected\n        for (String char: chars) {\n             \
    \           ^\n/tmp/tmpshcaxdsm.java:29: error: not a statement\n        for (String\
    \ char: chars) {\n                          ^\n/tmp/tmpshcaxdsm.java:29: error:\
    \ ';' expected\n        for (String char: chars) {\n                         \
    \      ^\n/tmp/tmpshcaxdsm.java:31: error: '.class' expected\n            String\
    \ currentChar = char;\n                                     ^\n6 errors\n"
  stdout: ''
  timestamp: 1660011683
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] splitted = test.split(\" \");\n\
    \        for (String s : splitted) {\n            String key = s.toLowerCase();\n\
    \            result.put(key, result.getOrDefault(key, 0L));\n            result.get(key)\
    \ ++;\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzffk6_8z.java:29: error: unexpected type\n            result.get(key)\
    \ ++;\n                      ^\n  required: variable\n  found:    value\n1 error\n"
  stdout: ''
  timestamp: 1660011683
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        if (test.isEmpty())\
    \ {\n            return new HashMap<String,Long>();\n        }\n\n        HashMap<String,Long>\
    \ counts = new HashMap<String,Long>();\n        StringTokenizer tokenizer = new\
    \ StringTokenizer(test, \" \");\n\n        while (tokenizer.hasMoreTokens()) {\n\
    \            String token = tokenizer.nextToken();\n            Long count = counts.getOrDefault(token,\
    \ 0l);\n            counts.put(token, ++count);\n        }\n\n        String[]\
    \ letters = counts.keySet().toArray(new String[counts.keySet().size()]);\n   \
    \     Arrays.sort(letters);\n        Arrays.sort(counts.values());\n\n       \
    \ StringBuilder sb = new StringBuilder();\n        boolean first = true;\n   \
    \     for (String letter : letters) {\n            Long count = counts.getOrDefault(letter,\
    \ 0l);\n            if (first) {\n                first = false;\n           \
    \ } else {\n                sb.append(' ');\n            }\n            sb.append(letter);\n\
    \            sb.append(':');\n            sb.append(count);\n        }\n\n   \
    \     System.out.println(sb.toString());\n        return counts;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0mtbr3vy.java:39: error: no suitable method found for sort(Collection<Long>)\n\
    \        Arrays.sort(counts.values());\n              ^\n    method Arrays.sort(int[])\
    \ is not applicable\n      (argument mismatch; Collection<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; Collection<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; Collection<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; Collection<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; Collection<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; Collection<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; Collection<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; Collection<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011684
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ res = new HashMap<>();\n        String[] split = test.split(\" \");\n      \
    \  for (String t : split) {\n            String[] arr = t.split(\" \");\n    \
    \        for (String s : arr) {\n                if (res.containsKey(s)) {\n \
    \                   res.put(s, res.get(s)+1);\n                } else {\n    \
    \                res.put(s, 1l);\n                }\n            }\n        }\n\
    \        return res;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqutdhv5g.java:40)\n"
  stdout: ''
  timestamp: 1660011684
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        if (test.isEmpty())\
    \ {\n            return new HashMap<String,Long>();\n        }\n        HashMap<String,Long>\
    \ hm = new HashMap<String,Long>();\n        String[] arr = test.split(\" \");\n\
    \        List<String> list = Arrays.stream(arr).distinct().sorted().collect(Collectors.toList());\n\
    \        for (String s : str.split(\" \")) {\n            if (list.contains(s))\
    \ {\n                Long val = hm.get(s);\n                hm.put(s, val + 1);\n\
    \            }\n        }\n        return hm;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu5ss8kxf.java:30: error: cannot find symbol\n        for (String\
    \ s : str.split(\" \")) {\n                        ^\n  symbol:   variable str\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011684
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        if (test.isEmpty())\
    \ {\n            return new HashMap<String,Long>();\n        }\n        // Convert\
    \ string to char array for performance\n        char[] charArray = test.toCharArray();\n\
    \        // Map of letter to count\n        HashMap<String,Long> map = new HashMap<String,Long>();\n\
    \        // Iterate over chars in string, ignoring leading whitespace\n      \
    \  char[] remainingCharArray = Arrays.copyOfRange(test.toCharArray(), 1, test.length());\n\
    \        while (remainingCharArray.length > 0) {\n            // For each char,\
    \ check if present in map, update count otherwise\n            String charString\
    \ = String.valueOf(remainingCharArray);\n            Long count = map.get(charString);\n\
    \            if (count != null) {\n                map.put(charString, count +\
    \ 1);\n            } else {\n                map.put(charString, 1L);\n      \
    \      }\n            // Remove char and increment remaining count\n         \
    \   remainingCharArray = Arrays.copyOfRange(remainingCharArray, 1, remainingCharArray.length);\n\
    \        }\n        return map;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5w2usevy.java:48)\n"
  stdout: ''
  timestamp: 1660011684
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ hashmap = new HashMap<String,Long>();\n        HashSet<String> hashset = new\
    \ HashSet<String>();\n\n        for (int i = 0; i < test.length(); i++) {\n  \
    \          String letter = test.substring(i, i + 1);\n            if (hashmap.containsKey(letter))\
    \ {\n                hashmap.put(letter, hashmap.get(letter) + 1);\n         \
    \   } else {\n                hashmap.put(letter, 1l);\n            }\n      \
    \      hashset.addAll(Arrays.asList(letter.split(\" \")));\n        }\n\n    \
    \    HashMap<String,Long> result = new HashMap<String,Long>();\n        HashMap<String,Long>\
    \ currentMax = hashmap;\n        Set<String> keySet = hashmap.keySet();\n\n  \
    \      for (String key : keySet) {\n            Long count = hashmap.get(key);\n\
    \            Long countMax = currentMax.get(key);\n            if (count > countMax)\
    \ {\n                result.put(key, count);\n                currentMax.put(key,\
    \ count);\n            }\n        }\n\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpavqmk0h4.java:53)\n"
  stdout: ''
  timestamp: 1660011685
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        for(int i = 0; i< test.length(); i++) {\n\
    \            String word = test.substring(i, i + 1);\n            Long count =\
    \ result.get(word);\n            if (count == null) {\n                result.put(word,\
    \ 1);\n            } else {\n                result.put(word, count.longValue()\
    \ + 1);\n            }\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnb42705p.java:29: error: incompatible types: int cannot be converted\
    \ to Long\n                result.put(word, 1);\n                            \
    \     ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011685
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        // Your\
    \ code here\n        HashMap<String,Long> map = new HashMap<String,Long>();\n\
    \        ArrayList<String> splitWords = new ArrayList<String>();\n        String[]\
    \ letters = test.split(\" \");\n        for(String s:letters)\n            splitWords.add(s);\n\
    \        Collections.sort(splitWords);\n        for(String s:splitWords){\n  \
    \          String word = s;\n            long count = 0;\n            for(int\
    \ i = 0; i < splitWords.size(); i++){\n                if(word.equals(splitWords.get(i)))\n\
    \                    count++;\n            }\n            map.put(word,count);\n\
    \        }\n        return map;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2279_2hl.java:44)\n"
  stdout: ''
  timestamp: 1660011685
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        if (test.equals(\"\
    \")) {\n            return new HashMap<String,Long>();\n        }\n\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] chars = test.split(\" \");\n   \
    \     for (String char: str) {\n            if (result.containsKey(char)) {\n\
    \                result.put(char, result.get(char) + 1);\n            } else {\n\
    \                result.put(char, 1l);\n            }\n        }\n\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp55kqa3xz.java:30: error: not a statement\n        for (String char:\
    \ str) {\n             ^\n/tmp/tmp55kqa3xz.java:30: error: ';' expected\n    \
    \    for (String char: str) {\n                   ^\n/tmp/tmp55kqa3xz.java:30:\
    \ error: '.class' expected\n        for (String char: str) {\n               \
    \         ^\n/tmp/tmp55kqa3xz.java:30: error: not a statement\n        for (String\
    \ char: str) {\n                          ^\n/tmp/tmp55kqa3xz.java:30: error:\
    \ ';' expected\n        for (String char: str) {\n                           \
    \  ^\n/tmp/tmp55kqa3xz.java:31: error: '.class' expected\n            if (result.containsKey(char))\
    \ {\n                                       ^\n/tmp/tmp55kqa3xz.java:32: error:\
    \ '.class' expected\n                result.put(char, result.get(char) + 1);\n\
    \                               ^\n/tmp/tmp55kqa3xz.java:32: error: '.class' expected\n\
    \                result.put(char, result.get(char) + 1);\n                   \
    \                             ^\n/tmp/tmp55kqa3xz.java:34: error: '.class' expected\n\
    \                result.put(char, 1l);\n                               ^\n9 errors\n"
  stdout: ''
  timestamp: 1660011684
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            result.merge(word, 1l, (curr, prev)\
    \ -> {\n                return curr.longValue() + (prev.longValue() == 0L ? 1L\
    \ : prev.longValue());\n            });\n        }\n        return result;\n \
    \   }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqonirpi9.java:35)\n"
  stdout: ''
  timestamp: 1660011685
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n\n        // split string into array of strings and\
    \ convert to array list of string\n        ArrayList<String> words = Arrays.asList(test.split(\"\
    \ \"));\n\n        // iterate over all words in the list to count occurences\n\
    \        for (String word : words) {\n            Long count = result.getOrDefault(word,\
    \ 0L);\n\n            // update count of word if newer occurrence is found\n \
    \           if (count > 0L) {\n                result.put(word, count + 1L);\n\
    \            }\n            // update count of word if same occurrence is found\n\
    \            else {\n                result.put(word, 1L);\n            }\n  \
    \      }\n\n        // return result if any\n        return result.isEmpty() ?\
    \ new HashMap<String,Long>() : result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7ghelh7l.java:27: error: incompatible types: no instance(s) of\
    \ type variable(s) T exist so that List<T> conforms to ArrayList<String>\n   \
    \     ArrayList<String> words = Arrays.asList(test.split(\" \"));\n          \
    \                                     ^\n  where T is a type-variable:\n    T\
    \ extends Object declared in method <T>asList(T...)\n1 error\n"
  stdout: ''
  timestamp: 1660011685
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        ArrayList\
    \ result = new ArrayList();\n        String[] tokens = test.split(\" \");\n  \
    \      HashMap<String,Long> h = new HashMap<>();\n        for (int i = 0; i <\
    \ tokens.length; i++) {\n            String s = tokens[i].toLowerCase();\n   \
    \         if (!h.containsKey(s)) {\n                h.put(s, 0l);\n          \
    \  }\n            h.put(s, h.get(s) + 1);\n        }\n        for (Map.Entry<String,\
    \ Long> entry : h.entrySet()) {\n            result.add(new SimpleEntry<>(entry.getKey(),\
    \ entry.getValue()));\n        }\n        return new HashMap<String,Long>(result);\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpux4ma59g.java:35: error: cannot find symbol\n            result.add(new\
    \ SimpleEntry<>(entry.getKey(), entry.getValue()));\n                        \
    \   ^\n  symbol:   class SimpleEntry\n  location: class Problem\n/tmp/tmpux4ma59g.java:37:\
    \ error: no suitable constructor found for HashMap(ArrayList)\n        return\
    \ new HashMap<String,Long>(result);\n               ^\n    constructor HashMap.HashMap(int)\
    \ is not applicable\n      (argument mismatch; ArrayList cannot be converted to\
    \ int)\n    constructor HashMap.HashMap(Map<? extends String,? extends Long>)\
    \ is not applicable\n      (argument mismatch; ArrayList cannot be converted to\
    \ Map<? extends String,? extends Long>)\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011685
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        if (test.isEmpty())\
    \ {\n            return new HashMap<String,Long>();\n        }\n\n        HashMap<String,Long>\
    \ results = new HashMap<String,Long>();\n\n        String[] strings = test.split(\"\
    \ \");\n        for (String string : strings) {\n            if (results.containsKey(string))\
    \ {\n                results.put(string,results.get(string) + 1);\n          \
    \  } else {\n                results.put(string, 1l);\n            }\n       \
    \ }\n\n        return results;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmapmckwy.java:43)\n"
  stdout: ''
  timestamp: 1660011685
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ letterCountMap = new HashMap<>();\n\n        String[] words = test.split(\"\
    \ \");\n        for (String word : words) {\n            word = word.trim();\n\
    \            if (!letterCountMap.containsKey(word)) {\n                letterCountMap.put(word,\
    \ 1L);\n            } else {\n                Long count = letterCountMap.get(word);\n\
    \                letterCountMap.put(word, count + 1L);\n            }\n      \
    \  }\n        return letterCountMap;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp53f6wrsa.java:40)\n"
  stdout: ''
  timestamp: 1660011685
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        if (test.isEmpty())\
    \ return new HashMap<String,Long>();\n        HashMap<String,Long> frequencies\
    \ = new HashMap<String,Long>();\n        for (char c : test.toCharArray()) {\n\
    \            frequencies.merge(c,1l,Long::sum);\n        }\n        return frequencies;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4id2_dr1.java:27: error: incompatible types: char cannot be converted\
    \ to String\n            frequencies.merge(c,1l,Long::sum);\n                \
    \              ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011685
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ Arrays.stream(test.split(\" \")).map(letter -> new SimpleEntry<>(letter,\n \
    \               test.split(\" \").count(letter))).collect(Collectors.groupingBy(SimpleEntry::getKey,\n\
    \                Collectors.counting()));\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn1sjty3i.java:24: error: cannot find symbol\n        return Arrays.stream(test.split(\"\
    \ \")).map(letter -> new SimpleEntry<>(letter,\n                             \
    \                                   ^\n  symbol:   class SimpleEntry\n  location:\
    \ class Problem\n/tmp/tmpn1sjty3i.java:25: error: cannot find symbol\n       \
    \         test.split(\" \").count(letter))).collect(Collectors.groupingBy(SimpleEntry::getKey,\n\
    \                               ^\n  symbol:   method count(String)\n  location:\
    \ class String[]\n/tmp/tmpn1sjty3i.java:25: error: cannot find symbol\n      \
    \          test.split(\" \").count(letter))).collect(Collectors.groupingBy(SimpleEntry::getKey,\n\
    \                                                                            \
    \  ^\n  symbol:   variable SimpleEntry\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011685
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<String,Long>();\n        String[] strings = test.split(\"\
    \ \");\n        for (String str : strings) {\n            str = str.trim();\n\
    \            if (str.length() == 0) continue;\n            if (result.containsKey(str))\
    \ {\n                result.put(str, result.get(str) + 1);\n            } else\
    \ {\n                result.put(str, 1l);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcbbpgbwk.java:39)\n"
  stdout: ''
  timestamp: 1660011685
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<String,Long>();\n        String[] words = test.split(\" \"\
    );\n        for (String word : words) {\n            if (map.containsKey(word))\
    \ {\n                Long count = map.get(word);\n                map.put(word,\
    \ count + 1l);\n            } else {\n                map.put(word, 1l);\n   \
    \         }\n        }\n        return map;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdulnyhhh.java:38)\n"
  stdout: ''
  timestamp: 1660011685
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        String[]\
    \ array = test.split(\" \");\n        HashMap<String,Long> result = new HashMap<>();\n\
    \        for (int i = 0; i < array.length; ++i) {\n            String letter =\
    \ array[i];\n            Long count = result.getOrDefault(letter, 0L);\n     \
    \       result.put(letter, count + 1);\n        }\n        return result;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(histogram((\"a\
    \ b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3uwgxzwo.java:35)\n"
  stdout: ''
  timestamp: 1660011685
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<String,Long>();\n        if (test.isEmpty()) return map;\n\
    \        String[] splitted = test.split(\" \");\n        for (String s : splitted)\
    \ {\n            Long count = map.getOrDefault(s,0L);\n            map.put(s,count+1L);\n\
    \        }\n        return map;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6wv2_uxs.java:35)\n"
  stdout: ''
  timestamp: 1660011685
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        char[] characters = test.toCharArray();\n\
    \        Arrays.sort(characters);\n        int currentIndex = 0;\n        for(int\
    \ i=0;i<characters.length;i++) {\n            char currentCharacter = characters[i];\n\
    \            if(result.containsKey(currentCharacter)) {\n                result.put(currentCharacter,\
    \ result.get(currentCharacter) + 1);\n            } else {\n                result.put(currentCharacter,\
    \ 1l);\n            }\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9ghbe1al.java:31: error: incompatible types: char cannot be converted\
    \ to String\n                result.put(currentCharacter, result.get(currentCharacter)\
    \ + 1);\n                           ^\n/tmp/tmp9ghbe1al.java:33: error: incompatible\
    \ types: char cannot be converted to String\n                result.put(currentCharacter,\
    \ 1l);\n                           ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011685
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<String,Long>();\n        String[] words = test.split(\" \"\
    );\n        for (String word : words) {\n            String key = word.toLowerCase();\n\
    \            if (map.containsKey(key)) {\n                map.put(key, map.get(key)\
    \ + 1);\n            }\n            else {\n                map.put(key, 1l);\n\
    \            }\n        }\n        return map;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxn1o7u7y.java:39)\n"
  stdout: ''
  timestamp: 1660011685
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        if (test.isEmpty())\
    \ {\n            return new HashMap<>();\n        }\n        // Split the string\
    \ into an array\n        String[] strings = test.split(\" \");\n        HashMap<String,Long>\
    \ hs = new HashMap<>();\n        // Go through each string and count it\n    \
    \    for (String s : strings) {\n            if (!s.equals(\"\")) {\n        \
    \        String letter = s.substring(0, 1);\n                if (!hs.containsKey(letter))\
    \ {\n                    hs.put(letter, 1l);\n                } else {\n     \
    \               Long count = hs.get(letter);\n                    hs.put(letter,\
    \ count + 1l);\n                }\n            }\n        }\n        return hs;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8eb2fb5j.java:46)\n"
  stdout: ''
  timestamp: 1660011685
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        String[]\
    \ letters = test.split(\" \");\n        return Arrays.stream(letters).map(letter\
    \ -> letter + \": \" + Collections.frequency(Arrays.asList(letters), letter)).collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_ohcgozb.java:25: error: cannot find symbol\n        return Arrays.stream(letters).map(letter\
    \ -> letter + \": \" + Collections.frequency(Arrays.asList(letters), letter)).collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                                 \
    \                                                                            \
    \                            ^\n  symbol:   variable Function\n  location: class\
    \ Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011685
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        if(test.isEmpty())\
    \ {\n            return new HashMap<String,Long>();\n        }\n        String[]\
    \ split = test.split(\" \");\n        HashMap<String,Long> hm = new HashMap<>();\n\
    \        Arrays.stream(split).forEach(s->{\n            hm.put(s,hm.getOrDefault(s,0L)+1L);\n\
    \        });\n        return hm;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5547l7tw.java:36)\n"
  stdout: ''
  timestamp: 1660011686
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ results = new HashMap<String,Long>();\n        String[] words = test.split(\"\
    \ \");\n        for (int i = 0; i < words.length; i++) {\n            String word\
    \ = words[i];\n            if (results.containsKey(word)) {\n                Long\
    \ count = results.get(word);\n                results.put(word, count + 1);\n\
    \            } else {\n                results.put(word, 1L);\n            }\n\
    \        }\n        return results;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprwsw7y4f.java:39)\n"
  stdout: ''
  timestamp: 1660011686
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        // split\
    \ and map all characters to their count\n        // get each character with the\
    \ count and sort it alphabetically\n        // add them to a new map with all\
    \ the characters as keys and their counts as values\n        // return that new\
    \ map at the end of the function\n        HashMap<String,Long> result = new HashMap<String,Long>();\n\
    \        for (String str : test.split(\" \")) {\n            long count = Collections.frequency(Arrays.asList(test.split(\"\
    \ \")), str);\n            String key = str.substring(0, 1).toUpperCase() + str.substring(1);\n\
    \            result.put(key, count);\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpozw00wd3.java:37)\n"
  stdout: ''
  timestamp: 1660011686
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        // Declare\
    \ an empty HashMap\n        HashMap<String,Long> hm = new HashMap<>();\n\n   \
    \     // Split the string into an array and iterate over the array adding values\
    \ to the HashMap\n        String[] parts = test.split(\" \");\n        for (String\
    \ part : parts) {\n            int count = hm.containsKey(part) ? hm.get(part)\
    \ : 0;\n            hm.put(part, count + 1);\n        }\n\n        // Sort the\
    \ HashMap by its value\n        List<Map.Entry<String,Long>> list = new ArrayList<>(hm.entrySet());\n\
    \        Collections.sort(list, Map.Entry.comparingByValue());\n\n        // Return\
    \ the HashMap\n        return list.isEmpty() ? new HashMap<String,Long>() : list.get(list.size()\
    \ - 1);\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmauu9dow.java:30: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int count = hm.containsKey(part) ? hm.get(part)\
    \ : 0;\n                                             ^\n/tmp/tmpmauu9dow.java:31:\
    \ error: incompatible types: int cannot be converted to Long\n            hm.put(part,\
    \ count + 1);\n                               ^\n/tmp/tmpmauu9dow.java:39: error:\
    \ incompatible types: bad type in conditional expression\n        return list.isEmpty()\
    \ ? new HashMap<String,Long>() : list.get(list.size() - 1);\n                \
    \                                                     ^\n    Entry<String,Long>\
    \ cannot be converted to HashMap<String,Long>\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1660011685
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] testSplit = test.split(\"\\\\s+\"\
    );\n        for (String letter : testSplit) {\n            result.merge(letter,\
    \ 1, Math::addExact);\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzmyfcgiy.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.merge(letter, 1, Math::addExact);\n            \
    \                     ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011686
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        test.toLowerCase().chars().filter(c -> c !=\
    \ '\\0').forEach(c -> {\n            Long current = map.getOrDefault(c, 0L);\n\
    \            map.put(c, current + 1);\n        });\n        return map;\n    }\n\
    \    public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp278vbjyl.java:27: error: incompatible types: int cannot be converted\
    \ to String\n            map.put(c, current + 1);\n                    ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n1 error\n"
  stdout: ''
  timestamp: 1660011686
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        String[]\
    \ testArray = test.split(\" \");\n        HashMap<String,Long> histogram = new\
    \ HashMap<>();\n        Arrays.stream(testArray).forEach(s -> {\n            histogram.put(s,\
    \ histogram.get(s) + 1);\n        });\n        return histogram;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Long.longValue()\" because the return value of \"java.util.HashMap.get(Object)\"\
    \ is null\n\tat Problem.lambda$histogram$0(tmpbgpzrz1s.java:27)\n\tat java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:992)\n\
    \tat java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)\n\
    \tat Problem.histogram(tmpbgpzrz1s.java:26)\n\tat Problem.main(tmpbgpzrz1s.java:32)\n"
  stdout: ''
  timestamp: 1660011687
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        String[]\
    \ array = test.split(\" \");\n        HashMap<String,Long> map = new HashMap<String,Long>(array.length);\n\
    \        for (String letter : array) {\n            map.put(letter, map.containsKey(letter)\
    \ ? map.get(letter) + 1 : 1);\n        }\n        return map;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz_h0dd8d.java:33)\n"
  stdout: ''
  timestamp: 1660011687
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<String,Long>();\n\n        String[] values = test.split(\"\
    \ \");\n\n        Arrays.asList(values).stream()\n                .filter(v ->\
    \ map.containsKey(v))\n                .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()))\n                .forEach((k, v) -> map.put(k, new Long(map.get(k).intValue()\
    \ + 1)));\n\n        return map;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp28naczze.java:30: error: cannot find symbol\n                .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()))\n                                               ^\n\
    \  symbol:   variable Function\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011686
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ test\n                .toLowerCase()\n                .chars()\n           \
    \     .mapToObj(x -> (char) x)\n                .collect(HashMap::new, (m, c)\
    \ -> m.merge(String.valueOf(c), 1l, Math::addExact), HashMap::putAll);\n    }\n\
    \    public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3n266idm.java:31)\n"
  stdout: ''
  timestamp: 1660011687
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ res = new HashMap<>();\n        Arrays.stream(test.split(\" \"))\n         \
    \   .map(a -> a.toLowerCase())\n            .forEach(a -> {\n            Long\
    \ old = res.get(a);\n            Long newVal = 1L;\n            if (old == null)\
    \ {\n                newVal = 1L;\n            }\n            res.put(a, Long.valueOf(newVal));\n\
    \        });\n        return res;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4pplganf.java:38)\n"
  stdout: ''
  timestamp: 1660011687
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ test\n            .chars()\n            .mapToObj(test::toLowerCase)\n     \
    \       .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo9231tuz.java:26: error: incompatible types: cannot infer type-variable(s)\
    \ U\n            .mapToObj(test::toLowerCase)\n                     ^\n    (argument\
    \ mismatch; invalid method reference\n      incompatible types: int cannot be\
    \ converted to Locale)\n  where U is a type-variable:\n    U extends Object declared\
    \ in method <U>mapToObj(IntFunction<? extends U>)\n/tmp/tmpo9231tuz.java:27: error:\
    \ cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011687
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ histo = new HashMap<String,Long>();\n        test.chars().mapToObj(x -> String.valueOf(x\
    \ - 'a')).forEach(x -> {\n            if(histo.containsKey(x)){\n            \
    \    histo.get(x).add(1);\n            } else {\n                histo.put(x,new\
    \ Long(1));\n            }\n        });\n        return histo;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwnpo1av9.java:27: error: cannot find symbol\n                histo.get(x).add(1);\n\
    \                            ^\n  symbol:   method add(int)\n  location: class\
    \ Long\n/tmp/tmpwnpo1av9.java:29: warning: [removal] Long(long) in Long has been\
    \ deprecated and marked for removal\n                histo.put(x,new Long(1));\n\
    \                            ^\n1 error\n1 warning\n"
  stdout: ''
  timestamp: 1660011687
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        if (test.isEmpty())\
    \ {\n            return new HashMap<String,Long>();\n        }\n        // Get\
    \ the letters one by one from left to right, store them in an ArrayList,\n   \
    \     // and keep track of the occurrence counts for each letter by using a HashMap.\n\
    \        ArrayList<String> charsList = new ArrayList<String>();\n        // Initialize\
    \ the map with 0 occurrences of every letter.\n        HashMap<String,Long> charMap\
    \ = new HashMap<String,Long>();\n        for (char c : test.toCharArray()) {\n\
    \            if (charMap.containsKey(c)) {\n                charMap.put(c, (charMap.get(c)\
    \ + 1));\n            } else {\n                charMap.put(c, (1l));\n      \
    \      }\n        }\n\n        Set<Entry<String, Long>> entrySet = charMap.entrySet();\n\
    \        List<Entry<String, Long>> entryList = new ArrayList<>(entrySet);\n  \
    \      Collections.sort(entryList, (e1, e2) -> Integer.compare(e2.getValue(),\
    \ e1.getValue()));\n\n        // Loop over the map and build the map you require.\n\
    \        for (Entry<String, Long> entry : entryList) {\n            for (int i\
    \ = 0; i < entry.getValue(); i++) {\n                charsList.add(entry.getKey());\n\
    \            }\n        }\n\n        HashMap<String,Long> histogram = new HashMap<String,Long>();\n\
    \        for (String c : charsList) {\n            histogram.put(c, (histogram.getOrDefault(c,\
    \ 0L) + 1));\n        }\n\n        return histogram;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptwcro547.java:34: error: incompatible types: char cannot be converted\
    \ to String\n                charMap.put(c, (charMap.get(c) + 1));\n         \
    \                   ^\n/tmp/tmptwcro547.java:36: error: incompatible types: char\
    \ cannot be converted to String\n                charMap.put(c, (1l));\n     \
    \                       ^\n/tmp/tmptwcro547.java:40: error: cannot find symbol\n\
    \        Set<Entry<String, Long>> entrySet = charMap.entrySet();\n           \
    \ ^\n  symbol:   class Entry\n  location: class Problem\n/tmp/tmptwcro547.java:41:\
    \ error: cannot find symbol\n        List<Entry<String, Long>> entryList = new\
    \ ArrayList<>(entrySet);\n             ^\n  symbol:   class Entry\n  location:\
    \ class Problem\n/tmp/tmptwcro547.java:45: error: cannot find symbol\n       \
    \ for (Entry<String, Long> entry : entryList) {\n             ^\n  symbol:   class\
    \ Entry\n  location: class Problem\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n5 errors\n"
  stdout: ''
  timestamp: 1660011686
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ histogram = new HashMap<>();\n        String[] tokens = test.split(\" \");\n\
    \        for (String token : tokens) {\n            histogram.put(token, histogram.getOrDefault(token,\
    \ 0l) + 1);\n        }\n        return histogram;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprx7fduvs.java:33)\n"
  stdout: ''
  timestamp: 1660011687
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            if (map.containsKey(word))\n     \
    \           map.put(word, map.get(word) + 1);\n            else\n            \
    \    map.put(word, 1l);\n        }\n        return map;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpca56xopx.java:36)\n"
  stdout: ''
  timestamp: 1660011687
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<String,Long>();\n        for(String letter : test.toLowerCase().split(\"\
    \ \")){\n            if(result.containsKey(letter)){\n                Long count\
    \ = result.get(letter);\n                result.put(letter, count + 1);\n    \
    \        }else{\n                result.put(letter, 1l);\n            }\n    \
    \    }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjurbnf_9.java:37)\n"
  stdout: ''
  timestamp: 1660011687
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        if (test.isEmpty())\
    \ {\n            return new HashMap<String,Long>();\n        }\n        HashMap<String,Long>\
    \ letterCountMap = new HashMap<String,Long>();\n        List<String> splitList\
    \ = Arrays.asList(test.split(\" \"));\n        for (String item : splitList) {\n\
    \            String letter = item.substring(0, 1);\n            if (letterCountMap.containsKey(letter))\
    \ {\n                Long count = letterCountMap.get(letter) + Long.valueOf(1);\n\
    \                letterCountMap.put(letter, count);\n            } else {\n  \
    \              letterCountMap.put(letter, Long.valueOf(1))\n            }\n  \
    \      }\n        return letterCountMap;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4nep5los.java:35: error: ';' expected\n                letterCountMap.put(letter,\
    \ Long.valueOf(1))\n                                                         \
    \  ^\n1 error\n"
  stdout: ''
  timestamp: 1660011686
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<String,Long>();\n        String[] words = test.split(\"\
    \ \");\n        for (String word : words) {\n            word = word.toLowerCase();\n\
    \            Long count = result.get(word);\n            if (count == null) count\
    \ = 0;\n            count++;\n            result.put(word, count);\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpblsz4sai.java:29: error: incompatible types: int cannot be converted\
    \ to Long\n            if (count == null) count = 0;\n                       \
    \                ^\n1 error\n"
  stdout: ''
  timestamp: 1660011686
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     Arrays.stream(words).forEach(word -> {\n            if (word == null ||\
    \ word.length() == 0) {\n                return;\n            }\n            String\
    \ key = getKey(word);\n            Long val = result.getOrDefault(key, 0L);\n\
    \            result.put(key, val + 1L);\n        });\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm0sy9irx.java:30: error: cannot find symbol\n            String\
    \ key = getKey(word);\n                         ^\n  symbol:   method getKey(String)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011687
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  HashMap<String,Long> mostRepetitions = new HashMap<>();\n        for(String\
    \ word : words) {\n            Long count = map.get(word);\n            if( count\
    \ == null ) {\n                map.put(word, 1L);\n                count = map.get(word);\n\
    \            }\n            else {\n                count = count + 1;\n     \
    \       }\n            mostRepetitions.put(word, count);\n        }\n        return\
    \ mostRepetitions;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9rzv9lgq.java:42)\n"
  stdout: ''
  timestamp: 1660011687
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ histogram = new HashMap<>();\n        // Convert each space separated word into\
    \ a string array and count the occurrences of each letter\n        String[] words\
    \ = test.split(\" \");\n        for (String word : words) {\n            String[]\
    \ letters = word.split(\"\");\n            String currentLetter = \"\";\n    \
    \        long currentCount = 0;\n            for (String letter : letters) {\n\
    \                currentLetter = letter;\n                currentCount = histogram.containsKey(currentLetter)\
    \ ? histogram.get(currentLetter) : 0;\n                histogram.put(currentLetter,\
    \ ++currentCount);\n            }\n        }\n        return histogram;\n    }\n\
    \    public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1hyao2yd.java:41)\n"
  stdout: ''
  timestamp: 1660011687
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        for (String s : test.split(\" \")){\n      \
    \      map.put(s,map.getOrDefault(s,0L)+1);\n        }\n        return map;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplhkp8wxb.java:32)\n"
  stdout: ''
  timestamp: 1660011687
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            if (result.containsKey(word)) {\n\
    \                result.put(word, result.get(word) + 1);\n            }\n    \
    \        else {\n                result.put(word, 1l);\n            }\n      \
    \  }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9facfb80.java:38)\n"
  stdout: ''
  timestamp: 1660011687
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ results = new HashMap<>();\n        // Find the occurrences for each character\n\
    \        Arrays.stream(test.split(\" \")).forEach(element -> results.merge(element,\
    \ 1l, (x, y) -> x + y));\n        // Find the maximum\n        results.entrySet().stream().max(Map.Entry.comparingByValue()).getValue();\n\
    \        return results;\n    }\n    public static void main(String[] args) {\n\
    \    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsw9xv9qk.java:28: error: cannot find symbol\n        results.entrySet().stream().max(Map.Entry.comparingByValue()).getValue();\n\
    \                                                                     ^\n  symbol:\
    \   method getValue()\n  location: class Optional<Entry<String,Long>>\n1 error\n"
  stdout: ''
  timestamp: 1660011687
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        Set<String> uniqueLetters = new HashSet<>();\n\
    \        \n        // Split string into single letters\n        for (String s:\
    \ test.split(\" \"))\n            uniqueLetters.add(s);\n        \n        //\
    \ Count letter repetition\n        long occurrence = 0;\n        for (String letter:\
    \ uniqueLetters) {\n            occurrence+=test.toLowerCase().split(letter).length;\n\
    \            result.put(letter, occurrence);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz75t0x1s.java:40)\n"
  stdout: ''
  timestamp: 1660011688
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        if (test == null || test.isEmpty()) return\
    \ result;\n        test.trim().chars().mapToObj(i -> (char) i).distinct().forEach(i\
    \ -> {\n            if (result.containsKey(i)) {\n                result.put(i,\
    \ result.get(i) + 1);\n            } else {\n                result.put(i, 1l);\n\
    \            }\n        });\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr36k0x3n.java:28: error: incompatible types: Character cannot be\
    \ converted to String\n                result.put(i, result.get(i) + 1);\n   \
    \                        ^\n/tmp/tmpr36k0x3n.java:30: error: incompatible types:\
    \ Character cannot be converted to String\n                result.put(i, 1l);\n\
    \                           ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011687
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        // Use\
    \ hashmap to count the number of times each character appears.\n        // For\
    \ each character, update its counter.\n        HashMap<String,Long> result = new\
    \ HashMap<String,Long>();\n        test.chars().boxed().forEach(c -> {\n     \
    \       if (result.containsKey(c)) {\n                result.put(c,result.get(c)\
    \ + 1);\n            } else {\n                result.put(c,1l);\n           \
    \ }\n        });\n\n        // Sort the Hashmap using its values, in descending\
    \ order.\n        Collections.sort(result.entrySet(), Map.Entry.comparingByValue().reversed());\n\
    \n        // Get the first element in the Hashmap.\n        // The key is the\
    \ most frequent character, the value is the frequency.\n        Map.Entry<String,Long>\
    \ maxEntry = result.entrySet().stream()\n                .max(Map.Entry.comparingByValue());\n\
    \n        // If there are more than one element with the same frequency, return\
    \ all of them.\n        if (maxEntry.getValue() > 1) {\n            return result;\n\
    \        }\n\n        // Return the key and the value (the most frequent character\
    \ and the frequency)\n        return new HashMapEntry(maxEntry.getKey(), maxEntry.getValue());\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo7fege80.java:29: error: incompatible types: Integer cannot be\
    \ converted to String\n                result.put(c,result.get(c) + 1);\n    \
    \                       ^\n/tmp/tmpo7fege80.java:31: error: incompatible types:\
    \ Integer cannot be converted to String\n                result.put(c,1l);\n \
    \                          ^\n/tmp/tmpo7fege80.java:36: error: no suitable method\
    \ found for sort(Set<Entry<String,Long>>,Comparator<Entry<Object,V>>)\n      \
    \  Collections.sort(result.entrySet(), Map.Entry.comparingByValue().reversed());\n\
    \                   ^\n    method Collections.<T#1>sort(List<T#1>) is not applicable\n\
    \      (cannot infer type-variable(s) T#1\n        (actual and formal argument\
    \ lists differ in length))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (argument mismatch; Set<Entry<String,Long>> cannot be converted to List<T#2>))\n\
    \  where V,T#1,T#2 are type-variables:\n    V extends Comparable<? super V>\n\
    \    T#1 extends Comparable<? super T#1> declared in method <T#1>sort(List<T#1>)\n\
    \    T#2 extends Object declared in method <T#2>sort(List<T#2>,Comparator<? super\
    \ T#2>)\n/tmp/tmpo7fege80.java:41: error: incompatible types: Optional<Entry<String,Long>>\
    \ cannot be converted to Entry<String,Long>\n                .max(Map.Entry.comparingByValue());\n\
    \                    ^\n/tmp/tmpo7fege80.java:49: error: cannot find symbol\n\
    \        return new HashMapEntry(maxEntry.getKey(), maxEntry.getValue());\n  \
    \                 ^\n  symbol:   class HashMapEntry\n  location: class Problem\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n5 errors\n"
  stdout: ''
  timestamp: 1660011688
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     List<String> sortedWords = Arrays.asList(words);\n        sortedWords.sort(String.CASE_INSENSITIVE_ORDER);\n\
    \        IntSummaryStatistics stats = sortedWords.stream().map(word -> {\n   \
    \         Long count = result.get(word);\n            if (count != null) {\n \
    \               return new IntSummaryStatistics(count);\n            }\n     \
    \       return new IntSummaryStatistics(1l);\n        }).collect(Collectors.toList()).stream().map((s)\
    \ -> s.sum()).collect(Collectors.toList());\n        for (String s : words) {\n\
    \            long count = result.get(s);\n            if (count == null) {\n \
    \               count = 1;\n            }\n            result.put(s, count + stats.get(s));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp59ncwnuk.java:31: error: no suitable constructor found for IntSummaryStatistics(Long)\n\
    \                return new IntSummaryStatistics(count);\n                   \
    \    ^\n    constructor IntSummaryStatistics.IntSummaryStatistics() is not applicable\n\
    \      (actual and formal argument lists differ in length)\n    constructor IntSummaryStatistics.IntSummaryStatistics(long,int,int,long)\
    \ is not applicable\n      (actual and formal argument lists differ in length)\n\
    /tmp/tmp59ncwnuk.java:33: error: no suitable constructor found for IntSummaryStatistics(long)\n\
    \            return new IntSummaryStatistics(1l);\n                   ^\n    constructor\
    \ IntSummaryStatistics.IntSummaryStatistics() is not applicable\n      (actual\
    \ and formal argument lists differ in length)\n    constructor IntSummaryStatistics.IntSummaryStatistics(long,int,int,long)\
    \ is not applicable\n      (actual and formal argument lists differ in length)\n\
    /tmp/tmp59ncwnuk.java:34: error: cannot find symbol\n        }).collect(Collectors.toList()).stream().map((s)\
    \ -> s.sum()).collect(Collectors.toList());\n                                \
    \                             ^\n  symbol:   method sum()\n  location: variable\
    \ s of type Object\n/tmp/tmp59ncwnuk.java:34: error: incompatible types: inference\
    \ variable R has incompatible bounds\n        }).collect(Collectors.toList()).stream().map((s)\
    \ -> s.sum()).collect(Collectors.toList());\n                                \
    \                                            ^\n    equality constraints: List<T#2>\n\
    \    lower bounds: IntSummaryStatistics,Object\n  where R,A,T#1,T#2 are type-variables:\n\
    \    R extends Object declared in method <R,A>collect(Collector<? super T#1,A,R>)\n\
    \    A extends Object declared in method <R,A>collect(Collector<? super T#1,A,R>)\n\
    \    T#1 extends Object declared in interface Stream\n    T#2 extends Object declared\
    \ in method <T#2>toList()\n/tmp/tmp59ncwnuk.java:37: error: bad operand types\
    \ for binary operator '=='\n            if (count == null) {\n               \
    \       ^\n  first type:  long\n  second type: <null>\n/tmp/tmp59nc"
  stdout: ''
  timestamp: 1660011688
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        if (test.isEmpty())\
    \ {\n            return new HashMap<String,Long>();\n        }\n        \n   \
    \     // split string into individual letters, count occurrences of each letter\n\
    \        HashMap<String,Long> map = new HashMap<>();\n        String[] letters\
    \ = test.split(\" \");\n        for (String letter : letters) {\n            Long\
    \ count = map.computeIfAbsent(letter, key -> new Long(0));\n            count.incrementAndGet();\n\
    \        }\n\n        // return letters with highest count\n        return map.entrySet().stream().sorted(Map.Entry.comparingByValue()).limit(2).collect(toMap(Map.Entry::getKey,\
    \ Map.Entry::getValue, (e1, e2) -> e1, LinkedHashMap::new));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpme83rggp.java:32: warning: [removal] Long(long) in Long has been\
    \ deprecated and marked for removal\n            Long count = map.computeIfAbsent(letter,\
    \ key -> new Long(0));\n                                                     \
    \       ^\n/tmp/tmpme83rggp.java:33: error: cannot find symbol\n            count.incrementAndGet();\n\
    \                 ^\n  symbol:   method incrementAndGet()\n  location: variable\
    \ count of type Long\n/tmp/tmpme83rggp.java:37: error: cannot find symbol\n  \
    \      return map.entrySet().stream().sorted(Map.Entry.comparingByValue()).limit(2).collect(toMap(Map.Entry::getKey,\
    \ Map.Entry::getValue, (e1, e2) -> e1, LinkedHashMap::new));\n               \
    \                                                                            \
    \  ^\n  symbol:   method toMap(Map.Entry::getKey,Map.Entry::getValue,(e1,e2)->e1,LinkedHashMap::new)\n\
    \  location: class Problem\n2 errors\n1 warning\n"
  stdout: ''
  timestamp: 1660011688
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ Arrays.stream(test.split(\" \"))\n                .map(e -> new AbstractMap.SimpleEntry<>(e,\
    \ 1l))\n                .collect(Collectors.groupingBy(e -> e.getKey(), Collectors.counting()));\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk1he3e_4.java:26: error: incompatible types: inference variable\
    \ R has incompatible bounds\n                .collect(Collectors.groupingBy(e\
    \ -> e.getKey(), Collectors.counting()));\n                        ^\n    equality\
    \ constraints: Map<K,D>\n    lower bounds: HashMap<String,Long>,Object\n  where\
    \ R,A#1,T#1,K,T#2,A#2,D are type-variables:\n    R extends Object declared in\
    \ method <R,A#1>collect(Collector<? super T#1,A#1,R>)\n    A#1 extends Object\
    \ declared in method <R,A#1>collect(Collector<? super T#1,A#1,R>)\n    T#1 extends\
    \ Object declared in interface Stream\n    K extends Object declared in method\
    \ <T#2,K,A#2,D>groupingBy(Function<? super T#2,? extends K>,Collector<? super\
    \ T#2,A#2,D>)\n    T#2 extends Object declared in method <T#2,K,A#2,D>groupingBy(Function<?\
    \ super T#2,? extends K>,Collector<? super T#2,A#2,D>)\n    A#2 extends Object\
    \ declared in method <T#2,K,A#2,D>groupingBy(Function<? super T#2,? extends K>,Collector<?\
    \ super T#2,A#2,D>)\n    D extends Object declared in method <T#2,K,A#2,D>groupingBy(Function<?\
    \ super T#2,? extends K>,Collector<? super T#2,A#2,D>)\n1 error\n"
  stdout: ''
  timestamp: 1660011688
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        Set<String>\
    \ uniqueLetters = new HashSet<>();\n        HashMap<String,Long> histogram = new\
    \ HashMap<>();\n\n        for (String letter : test.split(\" \")) {\n        \
    \    uniqueLetters.add(letter);\n        }\n        // Count each letter\n   \
    \     for (String letter : uniqueLetters) {\n            histogram.merge(letter,\
    \ 1, (count, oldValue) -> count + oldValue);\n        }\n        return histogram;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv22pmv36.java:32: error: incompatible types: int cannot be converted\
    \ to Long\n            histogram.merge(letter, 1, (count, oldValue) -> count +\
    \ oldValue);\n                                    ^\n/tmp/tmpv22pmv36.java:32:\
    \ error: bad operand types for binary operator '+'\n            histogram.merge(letter,\
    \ 1, (count, oldValue) -> count + oldValue);\n                               \
    \                                   ^\n  first type:  V\n  second type: V\n  where\
    \ V is a type-variable:\n    V extends Object declared in class HashMap\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n2 errors\n"
  stdout: ''
  timestamp: 1660011688
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ histogram.histogram(test.split(\" \").stream().map(String::toLowerCase).collect(Collectors.toList()));\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8a8qc6jk.java:24: error: cannot find symbol\n        return histogram.histogram(test.split(\"\
    \ \").stream().map(String::toLowerCase).collect(Collectors.toList()));\n     \
    \          ^\n  symbol:   variable histogram\n  location: class Problem\n/tmp/tmp8a8qc6jk.java:24:\
    \ error: cannot find symbol\n        return histogram.histogram(test.split(\"\
    \ \").stream().map(String::toLowerCase).collect(Collectors.toList()));\n     \
    \                                             ^\n  symbol:   method stream()\n\
    \  location: class String[]\n2 errors\n"
  stdout: ''
  timestamp: 1660011688
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<String,Long>();\n        \n        // Split string into a\
    \ list of words\n        String[] words = test.trim().split(\"\\\\s+\");\n   \
    \     // Iterate over words\n        for(String word : words) {\n            //\
    \ Get letter and count of letter\n            String letter = word.toLowerCase().substring(0,\
    \ 1).toLowerCase();\n            Long count = map.get(letter);\n            if\
    \ (count == null) {\n                map.put(letter, 1L);\n            } else\
    \ {\n                map.put(letter, count + 1L);\n            }\n        }\n\
    \        \n        // Return map\n        return map;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyt908xok.java:45)\n"
  stdout: ''
  timestamp: 1660011688
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ count = new HashMap<String,Long>();\n        StringTokenizer st = new StringTokenizer(test);\n\
    \        while (st.hasMoreTokens()) {\n            String letter = st.nextToken();\n\
    \            Long val = count.get(letter);\n            if (val == null)\n   \
    \             count.put(letter, 1l);\n            else\n                count.put(letter,\
    \ val + 1);\n        }\n        return count;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeq3dlari.java:38)\n"
  stdout: ''
  timestamp: 1660011688
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ Arrays.stream(test.split(\" \")).map(w -> new AbstractMap.SimpleImmutableEntry<>(w,\
    \ 1l)).collect(HashMap::new, HashMap::putAll, HashMap::putAll);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphs8x9m3o.java:24: error: incompatible types: cannot infer type-variable(s)\
    \ R,K,V\n        return Arrays.stream(test.split(\" \")).map(w -> new AbstractMap.SimpleImmutableEntry<>(w,\
    \ 1l)).collect(HashMap::new, HashMap::putAll, HashMap::putAll);\n            \
    \                                                                            \
    \                     ^\n    (argument mismatch; invalid method reference\n  \
    \    incompatible types: SimpleImmutableEntry<String,Long> cannot be converted\
    \ to Map<? extends String,? extends Long>)\n  where R,T,K,V are type-variables:\n\
    \    R extends Object declared in method <R>collect(Supplier<R>,BiConsumer<R,?\
    \ super T>,BiConsumer<R,R>)\n    T extends Object declared in interface Stream\n\
    \    K extends Object declared in class HashMap\n    V extends Object declared\
    \ in class HashMap\n1 error\n"
  stdout: ''
  timestamp: 1660011688
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<String,Long>();\n        Arrays.stream(test.split(\" \")).map(String::toLowerCase).filter(x\
    \ -> x.length() > 0).forEach(x -> map.merge(\n            x, 1l, Long::sum\n \
    \       ));\n        return map;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxu_r3ux4.java:32)\n"
  stdout: ''
  timestamp: 1660011689
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        if (test.isEmpty())\n\
    \            return new HashMap<String,Long>();\n        HashMap<String,Long>\
    \ histogram = new HashMap<String,Long>();\n        final String[] splitted = test.split(\"\
    \ \");\n        for (String item : splitted) {\n            histogram.merge(item,\
    \ 1l, Long::sum);\n        }\n        return histogram;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptded7oy1.java:35)\n"
  stdout: ''
  timestamp: 1660011688
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        if (test.isEmpty())\
    \ return new HashMap<String,Long>();\n        String[] splits = test.split(\"\
    \ \");\n        return Arrays.stream(splits).collect(HashMap::new, (map, e) ->\
    \ map.computeIfAbsent(e, x -> 0L),\n                (map1, map2) -> map1.merge(map2,\
    \ Long::sum));\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgpfe0zol.java:27: error: method merge in class HashMap<K,V> cannot\
    \ be applied to given types;\n                (map1, map2) -> map1.merge(map2,\
    \ Long::sum));\n                                    ^\n  required: String,Long,BiFunction<?\
    \ super Long,? super Long,? extends Long>\n  found:    HashMap<String,Long>,Long::sum\n\
    \  reason: actual and formal argument lists differ in length\n  where K,V are\
    \ type-variables:\n    K extends Object declared in class HashMap\n    V extends\
    \ Object declared in class HashMap\n/tmp/tmpgpfe0zol.java:27: error: incompatible\
    \ types: HashMap<String,Long> cannot be converted to String\n                (map1,\
    \ map2) -> map1.merge(map2, Long::sum));\n                                   \
    \        ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011688
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        // Split\
    \ the string into an array of characters\n        // Split each character of that\
    \ array into a string\n        String[] splits = test.split(\" \");\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        for (String s: splits) {\n            long count\
    \ = map.containsKey(s) ? map.get(s) : 0L;\n            map.put(s, count + 1L);\n\
    \        }\n        return map;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphwdm27lg.java:36)\n"
  stdout: ''
  timestamp: 1660011688
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        if(test==null\
    \ || test.isEmpty()){\n            return new HashMap<String,Long>();\n      \
    \  }\n        HashMap<String,Long> result = new HashMap<String,Long>();\n    \
    \    String[] words = test.trim().split(\" \");\n        for (String word : words)\
    \ {\n            Long count = result.getOrDefault(word, 0l);\n            result.put(word,\
    \ count+1);\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplupaf9c8.java:37)\n"
  stdout: ''
  timestamp: 1660011688
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ histograms;\n        String[] elements = test.split(\" \");\n        histograms\
    \ = new HashMap<String,Long>();\n        for (String s : elements) {\n       \
    \     String letter = s.charAt(0);\n            if (histograms.containsKey(letter))\
    \ {\n                histograms.put(letter, histograms.get(letter) + 1);\n   \
    \         } else {\n                histograms.put(letter, 1l);\n            }\n\
    \        }\n        return histograms;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpthrpymoa.java:28: error: incompatible types: char cannot be converted\
    \ to String\n            String letter = s.charAt(0);\n                      \
    \              ^\n1 error\n"
  stdout: ''
  timestamp: 1660011688
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        Map<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.trim().split(\" \");\n\
    \        for(String word : words) {\n            int count = map.get(word) !=\
    \ null ? map.get(word) : 0;\n            map.put(word, count + 1);\n        }\n\
    \        return map;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgo2nnpr3.java:27: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int count = map.get(word) != null ? map.get(word)\
    \ : 0;\n                                              ^\n/tmp/tmpgo2nnpr3.java:28:\
    \ error: incompatible types: int cannot be converted to Long\n            map.put(word,\
    \ count + 1);\n                                ^\n/tmp/tmpgo2nnpr3.java:30: error:\
    \ incompatible types: Map<String,Long> cannot be converted to HashMap<String,Long>\n\
    \        return map;\n               ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1660011688
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ HashMap<String,Long> result = new HashMap<String,Long>();\n        if(test.trim().isEmpty()){\n\
    \            return result;\n        }\n        test = test.trim();\n        test.split(\"\
    \ \");\n        for( int i = 0; i < test.length() ; i ++ ){\n            if( result.containsKey(test.substring(i,\
    \ i+1))){\n                result.put(test.substring(i, i+1), result.get(test.substring(i,\
    \ i+1)) + 1);\n            } else {\n                result.put(test.substring(i,\
    \ i+1), 1l);\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl2l22ubm.java:24: error: ';' expected\n        return HashMap<String,Long>\
    \ result = new HashMap<String,Long>();\n                             ^\n1 error\n"
  stdout: ''
  timestamp: 1660011688
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<String,Long>();\n        String[] words = test.split(\"\
    \ \");\n        Map<String, Long> map = new HashMap<String, Long>();\n       \
    \ for (String word : words) {\n            map.merge(word, 1, (oldVal, newVal)\
    \ -> oldVal+newVal);\n        }\n        result = Collections.max(map.entrySet(),\
    \ Map.Entry.comparingByValue()).getValue();\n        return result;\n    }\n \
    \   public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpalv1nry1.java:28: error: incompatible types: int cannot be converted\
    \ to Long\n            map.merge(word, 1, (oldVal, newVal) -> oldVal+newVal);\n\
    \                            ^\n/tmp/tmpalv1nry1.java:28: error: bad operand types\
    \ for binary operator '+'\n            map.merge(word, 1, (oldVal, newVal) ->\
    \ oldVal+newVal);\n                                                         ^\n\
    \  first type:  V\n  second type: V\n  where V is a type-variable:\n    V extends\
    \ Object declared in interface Map\n/tmp/tmpalv1nry1.java:30: error: incompatible\
    \ types: Long cannot be converted to HashMap<String,Long>\n        result = Collections.max(map.entrySet(),\
    \ Map.Entry.comparingByValue()).getValue();\n                                \
    \                                                       ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1660011689
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String letter = \"\";\n        int count\
    \ = 0;\n        String[] strings = test.split(\" \");\n        for (String string\
    \ : strings) {\n            letter = string;\n            count = string.length();\n\
    \            if (result.containsKey(letter)) {\n                Long countValue\
    \ = (Long) result.get(letter);\n                result.put(letter, countValue\
    \ + count);\n            } else {\n                result.put(letter, count);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxdvh2rd9.java:35: error: incompatible types: int cannot be converted\
    \ to Long\n                result.put(letter, count);\n                      \
    \             ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011689
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            word = word.trim();\n         \
    \   if (word.isEmpty()) continue;\n            Long count = result.get(word);\n\
    \            if (count == null) {\n                result.put(word, 1L);\n   \
    \         } else {\n                result.put(word, count + 1L);\n          \
    \  }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7cjylf4n.java:40)\n"
  stdout: ''
  timestamp: 1660011689
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        test.split(\" \").stream().map(s -> s.toLowerCase()).forEach(s\
    \ -> {\n            Long count = result.getOrDefault(s, 0l);\n            count.incrementAndGet();\n\
    \            result.put(s, count);\n        });\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm2y7ajtf.java:25: error: cannot find symbol\n        test.split(\"\
    \ \").stream().map(s -> s.toLowerCase()).forEach(s -> {\n                    \
    \   ^\n  symbol:   method stream()\n  location: class String[]\n/tmp/tmpm2y7ajtf.java:27:\
    \ error: cannot find symbol\n            count.incrementAndGet();\n          \
    \       ^\n  symbol:   method incrementAndGet()\n  location: variable count of\
    \ type Long\n2 errors\n"
  stdout: ''
  timestamp: 1660011689
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ letterCounts = new HashMap<>();\n        String[] strings = test.split(\" \"\
    );\n        for (String string : strings) {\n            String letter = string.substring(0,\
    \ 1);\n            if (!letterCounts.containsKey(letter)) {\n                letterCounts.put(letter,\
    \ 1l);\n            } else {\n                Long count = letterCounts.get(letter);\n\
    \                letterCounts.put(letter, count + 1);\n            }\n       \
    \ }\n        return letterCounts;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvporoqyj.java:39)\n"
  stdout: ''
  timestamp: 1660011689
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] split = test.split(\" \");\n      \
    \  Arrays.stream(split).forEach(e -> map.put(e, 1L));\n        return map;\n \
    \   }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf9ov3h0s.java:30)\n"
  stdout: ''
  timestamp: 1660011689
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ Arrays.stream(test.split(\" \"))\n                .flatMap(s -> Arrays.stream(s.split(\"\
    \\\\s\")))\n                .collect(groupingBy(s -> s, counting()));\n    }\n\
    \    public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp06shii1g.java:26: error: cannot find symbol\n                .collect(groupingBy(s\
    \ -> s, counting()));\n                                            ^\n  symbol:\
    \   method counting()\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011689
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        // Your\
    \ code goes here\n        HashMap<String,Long> hash = new HashMap<>();\n     \
    \   String[] arr = test.split(\" \");\n        for (String s: arr){\n        \
    \    hash.merge(s, 1l, Long::sum);\n        }\n        return hash;\n    }\n \
    \   public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3y7c4f0m.java:34)\n"
  stdout: ''
  timestamp: 1660011690
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ histogram.histogram(test.toLowerCase().split(\" \").toArray());\n    }\n   \
    \ public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3798knu2.java:24: error: cannot find symbol\n        return histogram.histogram(test.toLowerCase().split(\"\
    \ \").toArray());\n               ^\n  symbol:   variable histogram\n  location:\
    \ class Problem\n/tmp/tmp3798knu2.java:24: error: cannot find symbol\n       \
    \ return histogram.histogram(test.toLowerCase().split(\" \").toArray());\n   \
    \                                                             ^\n  symbol:   method\
    \ toArray()\n  location: class String[]\n2 errors\n"
  stdout: ''
  timestamp: 1660011689
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<String,Long>();\n        String[] split = test.split(\"\
    \ \");\n        for (String word : split) {\n            Long count = (Long) result.get(word);\n\
    \            if (count == null) {\n                result.put(word, 1l);\n   \
    \         } else {\n                result.put(word, count + 1l);\n          \
    \  }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1f5juqm4.java:38)\n"
  stdout: ''
  timestamp: 1660011690
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ hm = new HashMap<>();\n        for(String st : test.split(\" \")){\n       \
    \     hm.merge(st,1l,(a,b) -> a+b);\n        }\n        return hm;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5poqf51v.java:32)\n"
  stdout: ''
  timestamp: 1660011690
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        // Transform\
    \ the string into a list of chars\n        List<String> chars = Arrays.asList(test.toCharArray());\n\
    \        List<String> map = new ArrayList<String>();\n        HashMap<String,Long>\
    \ histogram = new HashMap<>();\n        for (String c : chars) {\n           \
    \ // Compute the histogram for each letter\n            if (map.getOrDefault(c,0L)\
    \ == 0) {\n                map.put(c,1L);\n            } else {\n            \
    \    Long old = map.get(c);\n                map.put(c,old + 1);\n           \
    \ }\n        }\n        // Create the histogram from the list\n        for (Map.Entry<String,\
    \ Long> entry : map.entrySet()) {\n            histogram.put(entry.getKey(), entry.getValue());\n\
    \        }\n        return histogram;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf_ne0kjn.java:25: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        List<String> chars = Arrays.asList(test.toCharArray());\n\
    \                                          ^\n    equality constraints: String\n\
    \    lower bounds: char[]\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>asList(T...)\n/tmp/tmpf_ne0kjn.java:30: error: cannot\
    \ find symbol\n            if (map.getOrDefault(c,0L) == 0) {\n              \
    \     ^\n  symbol:   method getOrDefault(String,long)\n  location: variable map\
    \ of type List<String>\n/tmp/tmpf_ne0kjn.java:31: error: cannot find symbol\n\
    \                map.put(c,1L);\n                   ^\n  symbol:   method put(String,long)\n\
    \  location: variable map of type List<String>\n/tmp/tmpf_ne0kjn.java:33: error:\
    \ incompatible types: String cannot be converted to int\n                Long\
    \ old = map.get(c);\n                                   ^\n/tmp/tmpf_ne0kjn.java:34:\
    \ error: cannot find symbol\n                map.put(c,old + 1);\n           \
    \        ^\n  symbol:   method put(String,long)\n  location: variable map of type\
    \ List<String>\n/tmp/tmpf_ne0kjn.java:38: error: cannot find symbol\n        for\
    \ (Map.Entry<String, Long> entry : map.entrySet()) {\n                       \
    \                         ^\n  symbol:   method entrySet()\n  location: variable\
    \ map of type List<String>\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n6 errors\n"
  stdout: ''
  timestamp: 1660011690
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ histogram = new HashMap<>();\n        String[] words = test.trim().split(\"\
    \ \");\n        for (String word : words) {\n            if (histogram.containsKey(word))\
    \ {\n                histogram.put(word, histogram.get(word) + 1);\n         \
    \   } else {\n                histogram.put(word, 1l);\n            }\n      \
    \  }\n        return histogram;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptqr_cl2a.java:37)\n"
  stdout: ''
  timestamp: 1660011690
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ test.split(\" \")\n                .stream()\n                .map(s -> s.toUpperCase())\n\
    \                .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph0ilq7x3.java:25: error: cannot find symbol\n                .stream()\n\
    \                ^\n  symbol:   method stream()\n  location: class String[]\n\
    /tmp/tmph0ilq7x3.java:27: error: cannot find symbol\n                .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                               ^\n\
    \  symbol:   variable Function\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011690
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        // TODO Write your solution here\n        System.out.println(test);\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            long count = 0;\n            if(map.containsKey(word)) {\n  \
    \              count = map.get(word);\n            }\n            else {\n   \
    \             count = 0;\n            }\n            map.put(word, count + 1);\n\
    \        }\n        return map;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7meylpb1.java:42)\n"
  stdout: 'a b b a

    a b c a b

    '
  timestamp: 1660011690
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ histogram = new HashMap<String,Long>();\n        String[] tokens = test.split(\"\
    \ \");\n        for(String token : tokens) {\n            String letter = token.toLowerCase(Locale.getDefault());\n\
    \            long occurrence = histogram.getOrDefault(letter, 0l);\n         \
    \   histogram.put(letter, occurrence + 1l);\n        }\n        return histogram;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_56awqwz.java:35)\n"
  stdout: ''
  timestamp: 1660011690
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        if (test.isEmpty())\n\
    \            return new HashMap<String,Long>();\n\n        HashMap<String,Long>\
    \ histogram = new HashMap<String,Long>();\n\n        String[] letters = test.split(\"\
    \ \");\n        Arrays.sort(letters);\n\n        for (int i = 0; i < letters.length;\
    \ i++) {\n            String letter = letters[i];\n\n            if (!histogram.containsKey(letter))\
    \ {\n                histogram.put(letter, 1l);\n            } else {\n      \
    \          histogram.put(letter, histogram.get(letter) + 1);\n            }\n\
    \        }\n        return histogram;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi_tzejuu.java:45)\n"
  stdout: ''
  timestamp: 1660011690
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        String[]\
    \ array = test.split(\" \");\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        for (String element : array) {\n            map.merge(element, 1L, Long::sum);\n\
    \        }\n        return map;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5cjnc7_f.java:33)\n"
  stdout: ''
  timestamp: 1660011690
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] splitted = test.split(\" \");\n\
    \        for (String word : splitted) {\n            int occurence = splitted.indexOf(word);\n\
    \            occurence++;\n            result.put(word, occurence);\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpipg3xs1t.java:27: error: cannot find symbol\n            int occurence\
    \ = splitted.indexOf(word);\n                                    ^\n  symbol:\
    \   method indexOf(String)\n  location: variable splitted of type String[]\n/tmp/tmpipg3xs1t.java:29:\
    \ error: incompatible types: int cannot be converted to Long\n            result.put(word,\
    \ occurence);\n                             ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011690
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ histogram = new HashMap<>();\n        String words = test.trim();\n        String[]\
    \ letters = words.replaceAll(\" \", \"\").split(\"\");\n        for (String letter\
    \ : letters) {\n            histogram.put(letter, histogram.get(letter) == null\
    \ ? 1l : histogram.get(letter)++);\n        }\n        return histogram;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(histogram((\"a b\
    \ b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq2aw3owp.java:28: error: unexpected type\n            histogram.put(letter,\
    \ histogram.get(letter) == null ? 1l : histogram.get(letter)++);\n           \
    \                                                                         ^\n\
    \  required: variable\n  found:    value\n1 error\n"
  stdout: ''
  timestamp: 1660011690
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ h = new HashMap<>();\n        for (String s: test.split(\" \")) {\n        \
    \    if (h.containsKey(s)) {\n                h.put(s, h.get(s) + 1);\n      \
    \      } else {\n                h.put(s, 1l);\n            }\n        }\n   \
    \     return h;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgkreziv4.java:36)\n"
  stdout: ''
  timestamp: 1660011690
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n\n        // Split the string into an array of chars\n\
    \        // and fill the hashmap with each char as key\n        for (char letter\
    \ : test.toCharArray()) {\n            result.put(letter, result.get(letter) ==\
    \ null ? 1l : result.get(letter) + 1);\n        }\n\n        // Sort the hashmap\
    \ and remove all entries with same value\n        List<String> keys = new ArrayList<>(result.keySet());\n\
    \        Collections.sort(keys);\n        keys.removeIf(key -> result.get(key)\
    \ == result.get(0));\n\n        // Create a new hashmap with the largest value\n\
    \        for (String key : keys) {\n            Long max = result.get(key);\n\
    \            for (char letter : key.toCharArray()) {\n                if (result.get(letter)\
    \ == max) {\n                    result.put(letter, max);\n                }\n\
    \            }\n        }\n\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpquyf_bbc.java:29: error: incompatible types: char cannot be converted\
    \ to String\n            result.put(letter, result.get(letter) == null ? 1l :\
    \ result.get(letter) + 1);\n                       ^\n/tmp/tmpquyf_bbc.java:42:\
    \ error: incompatible types: char cannot be converted to String\n            \
    \        result.put(letter, max);\n                               ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    2 errors\n"
  stdout: ''
  timestamp: 1660011690
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ Arrays.stream(test.split(\" \"))\n            .map(l -> new HashMap<String,Long>(Map.of(l,1l)))\n\
    \            .max(Comparator.comparing(m -> m.getValue().value()))\n         \
    \   .get().getKey();\n    }\n    public static void main(String[] args) {\n  \
    \  assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppinlzjp8.java:26: error: cannot find symbol\n            .max(Comparator.comparing(m\
    \ -> m.getValue().value()))\n                                            ^\n \
    \ symbol:   method getValue()\n  location: variable m of type HashMap<String,Long>\n\
    /tmp/tmppinlzjp8.java:27: error: cannot find symbol\n            .get().getKey();\n\
    \                  ^\n  symbol:   method getKey()\n  location: class HashMap<String,Long>\n\
    2 errors\n"
  stdout: ''
  timestamp: 1660011690
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        // Split\
    \ into lowercase letters\n        String[] letters = test.split(\" \");\n    \
    \    HashMap<String,Long> result = new HashMap<String,Long>(letters.length);\n\
    \        // Count occurrences of each letter\n        for (String letter : letters)\
    \ {\n            result.merge(letter, 1l, Long::sum);\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwot37mpz.java:35)\n"
  stdout: ''
  timestamp: 1660011690
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        List<String>\
    \ words = Arrays.asList(test.split(\" \"));\n        List<String> counts = words.stream().map(s\
    \ -> s.toLowerCase()).distinct().counting().boxed().collect(Collectors.toList());\n\
    \        return counts.isEmpty() ? new HashMap<>() : new HashMap<String,Long>(counts);\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj570bxzm.java:25: error: cannot find symbol\n        List<String>\
    \ counts = words.stream().map(s -> s.toLowerCase()).distinct().counting().boxed().collect(Collectors.toList());\n\
    \                                                                            \
    \     ^\n  symbol:   method counting()\n  location: interface Stream<String>\n\
    /tmp/tmpj570bxzm.java:26: error: no suitable constructor found for HashMap(List<String>)\n\
    \        return counts.isEmpty() ? new HashMap<>() : new HashMap<String,Long>(counts);\n\
    \                                                    ^\n    constructor HashMap.HashMap(int)\
    \ is not applicable\n      (argument mismatch; List<String> cannot be converted\
    \ to int)\n    constructor HashMap.HashMap(Map<? extends String,? extends Long>)\
    \ is not applicable\n      (argument mismatch; List<String> cannot be converted\
    \ to Map<? extends String,? extends Long>)\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011690
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        // Use split to break string into array on the\
    \ space character\n        String[] arr = test.split(\" \");\n        for (String\
    \ letter : arr) {\n            if (!map.containsKey(letter)) {\n             \
    \   map.put(letter, 1l);\n            } else {\n                map.put(letter,\
    \ map.get(letter) + 1);\n            }\n        }\n        return map;\n    }\n\
    \    public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo2etkemi.java:38)\n"
  stdout: ''
  timestamp: 1660011691
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ histogram = new HashMap<>();\n        final String[] splits = test.split(\"\
    \ \");\n        for (String word : splits) {\n            long count = histogram.computeIfAbsent(word,\
    \ key -> 0L);\n            histogram.put(word, ++count);\n        }\n        return\
    \ histogram;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp87o6pqki.java:34)\n"
  stdout: ''
  timestamp: 1660011691
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n\n        // Split string into a list of tokens\n\
    \        List<String> tokens = Arrays.stream(test.split(\"\\\\s+\"))\n       \
    \                               // Convert each token into lower case\n      \
    \                                // Note: in JDK 11, use .collect(Collectors.toMap(..))\n\
    \                                      // to avoid autoboxing and unboxing\n \
    \                                     .map(String::toLowerCase)\n            \
    \                          // Split the tokens into individual characters\n  \
    \                                    // and put into a map with the character\
    \ as the key\n                                      // and the number of occurrences\
    \ as the value\n                                      .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()))\n                                      // Sort by value,\
    \ descending\n                                      .entrySet()\n            \
    \                          .stream()\n                                      .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n\
    \                                      .collect(Collectors.toMap(Map.Entry::getKey,\
    \ Map.Entry::getValue, (oldValue, newValue) -> oldValue, LinkedHashMap::new));\n\
    \n        // Get the most common key (letter) and its corresponding count\n  \
    \      Map.Entry<String,Long> mostCommon = tokens.entrySet().stream()\n      \
    \                                                      .max(Map.Entry.comparingByValue(Comparator.reverseOrder()));\n\
    \        // Get the key (letter) and its corresponding count from the most common\
    \ key\n        String mostCommonLetter = mostCommon.getKey();\n        Long mostCommonCount\
    \ = mostCommon.getValue();\n\n        // If there are more than one letters with\
    \ the same count\n        if(mostCommonCount > 1) {\n            // Create a map\
    \ with the most common letter\n            HashMap<String,Long> mostCommonMap\
    \ = new HashMap<>();\n            mostCommonMap.put(mostCommonLetter, mostCommonCount);\n\
    \n            // For each other key (letter) and its count\n            // that\
    \ also occurs on the most common key, put it in the map\n            tokens.entrySet().stream()\n\
    \                       .filter(e -> e.getValue() == mostCommonCount)\n      \
    \                 .forEach(e -> mostCommonMap.put(e.getKey(), e.getValue()));\n\
    \n            return mostCommonMap;\n        }\n        else {\n            //\
    \ If there are no most common letters, return an empty map\n            return\
    \ new HashMap<>();\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfjjhbnrj.java:35: error: cannot find symbol\n                 \
    \                     .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()))\n\
    \                                                                     ^\n  symbol:\
    \   variable Function\n  location: class Problem\n/tmp/tmpfjjhbnrj.java:40: error:\
    \ incompatible types: cannot infer type-variable(s) T,K#1,U,M,K#2,V#1\n      \
    \                                .collect(Collectors.toMap(Map.Entry::getKey,\
    \ Map.Entry::getValue, (oldValue, newValue) -> oldValue, LinkedHashMap::new));\n\
    \                                                               ^\n    (argument\
    \ mismatch; invalid method reference\n      method getKey in interface Entry<K#3,V#2>\
    \ cannot be applied to given types\n        required: no arguments\n        found:\
    \    Object\n        reason: actual and formal argument lists differ in length)\n\
    \  where T,K#1,U,M,K#2,V#1,K#3,V#2 are type-variables:\n    T extends Object declared\
    \ in method <T,K#1,U,M>toMap(Function<? super T,? extends K#1>,Function<? super\
    \ T,? extends U>,BinaryOperator<U>,Supplier<M>)\n    K#1 extends Object declared\
    \ in method <T,K#1,U,M>toMap(Function<? super T,? extends K#1>,Function<? super\
    \ T,? extends U>,BinaryOperator<U>,Supplier<M>)\n    U extends Object declared\
    \ in method <T,K#1,U,M>toMap(Function<? super T,? extends K#1>,Function<? super\
    \ T,? extends U>,BinaryOperator<U>,Supplier<M>)\n    M extends Map<K#1,U> declared\
    \ in method <T,K#1,U,M>toMap(Function<? super T,? extends K#1>,Function<? super\
    \ T,? extends U>,BinaryOperator<U>,Supplier<M>)\n    K#2 extends Object declared\
    \ in class LinkedHashMap\n    V#1 extends Object declared in class LinkedHashMap\n\
    \    K#3 extends Object declared in interface Entry\n    V#2 extends Object declared\
    \ in interface Entry\n/tmp/tmpfjjhbnrj.java:43: error: cannot find symbol\n  \
    \      Map.Entry<String,Long> mostCommon = tokens.entrySet().stream()\n      \
    \                                            ^\n  symbol:   method entrySet()\n\
    \  location: variable tokens of type List<String>\n/tmp/tmpfjjhbnrj.java:57: error:\
    \ c"
  stdout: ''
  timestamp: 1660011691
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ Arrays.stream(test.split(\" \"))\n                .map(word -> new HashMap<String,Long>(word.length()>1?\
    \ new HashMap<String,Long>(word.length(),1l):word.length()==0? new HashMap<String,Long>():word))\n\
    \                .flatMap(map -> map.entrySet().stream())\n                .collect(groupingBy(Map.Entry::getKey,counting()))\n\
    \                .entrySet()\n                .stream()\n                .sorted(Comparator.comparingLong(Map.Entry::getValue))\n\
    \                .collect(toMap(Map.Entry::getKey, Map.Entry::getValue, (a, b)\
    \ -> a, LinkedHashMap::new));\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_fb1hkxa.java:25: error: no suitable constructor found for HashMap(word.lengt[...]\
    \ word)\n                .map(word -> new HashMap<String,Long>(word.length()>1?\
    \ new HashMap<String,Long>(word.length(),1l):word.length()==0? new HashMap<String,Long>():word))\n\
    \                             ^\n    constructor HashMap.HashMap(int) is not applicable\n\
    \      (argument mismatch; bad type in conditional expression\n          HashMap<String,Long>\
    \ cannot be converted to int)\n    constructor HashMap.HashMap(Map<? extends String,?\
    \ extends Long>) is not applicable\n      (argument mismatch; bad type in conditional\
    \ expression\n          bad type in conditional expression\n            String\
    \ cannot be converted to Map<? extends String,? extends Long>)\n/tmp/tmp_fb1hkxa.java:26:\
    \ error: cannot find symbol\n                .flatMap(map -> map.entrySet().stream())\n\
    \                                   ^\n  symbol:   method entrySet()\n  location:\
    \ variable map of type Object\n/tmp/tmp_fb1hkxa.java:27: error: cannot find symbol\n\
    \                .collect(groupingBy(Map.Entry::getKey,counting()))\n        \
    \                                              ^\n  symbol:   method counting()\n\
    \  location: class Problem\n/tmp/tmp_fb1hkxa.java:30: error: incompatible types:\
    \ cannot infer type-variable(s) T\n                .sorted(Comparator.comparingLong(Map.Entry::getValue))\n\
    \                                                ^\n    (argument mismatch; invalid\
    \ method reference\n      method getValue in interface Entry<K,V> cannot be applied\
    \ to given types\n        required: no arguments\n        found:    Object\n \
    \       reason: actual and formal argument lists differ in length)\n  where T,K,V\
    \ are type-variables:\n    T extends Object declared in method <T>comparingLong(ToLongFunction<?\
    \ super T>)\n    K extends Object declared in interface Entry\n    V extends Object\
    \ declared in interface Entry\n/tmp/tmp_fb1hkxa.java:31: error: cannot find symbol\n\
    \                .collect(toMap(Map.Entry::getKey, Map.Entry::getValue, (a, b)\
    \ -> a, LinkedHashMap::new));\n                         ^\n"
  stdout: ''
  timestamp: 1660011691
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        String[]\
    \ keys = test.split(\" \");\n        HashMap<String,Long> result = new HashMap<String,Long>();\n\
    \        Set<String> uniqueKeys = new HashSet<String>();\n        for(String key:\
    \ keys) {\n            if(uniqueKeys.contains(key))\n                result.put(key,\
    \ result.get(key) + 1);\n            else\n                result.put(key, 1L);\n\
    \            uniqueKeys.add(key);\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps2tc8phm.java:38)\n"
  stdout: ''
  timestamp: 1660011691
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ IntStream\n                .range(0, test.length())\n                .mapToObj(i\
    \ -> new String(test.substring(i,i+1)).trim())\n                .collect(groupingBy(Function.identity(),\
    \ counting()));\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr6n8ux64.java:27: error: cannot find symbol\n                .collect(groupingBy(Function.identity(),\
    \ counting()));\n                                    ^\n  symbol:   variable Function\n\
    \  location: class Problem\n/tmp/tmpr6n8ux64.java:27: error: cannot find symbol\n\
    \                .collect(groupingBy(Function.identity(), counting()));\n    \
    \                                                     ^\n  symbol:   method counting()\n\
    \  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011691
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        if (test.length() == 0) {\n            return\
    \ result;\n        }\n        String[] tokens = test.split(\" \");\n        if\
    \ (tokens.length == 1) {\n            String[] split1 = test.split(\"\");\n  \
    \          for (String s : split1) {\n                if (result.containsKey(s))\
    \ {\n                    result.put(s, result.get(s) + 1);\n                }\
    \ else {\n                    result.put(s, 1l);\n                }\n        \
    \    }\n            return result;\n        }\n        String[] split1 = test.split(\"\
    \");\n        String[] split2 = Arrays.copyOf(tokens, tokens.length);\n      \
    \  Map<String,Long> map1 = new HashMap<>();\n        Map<String,Long> map2 = new\
    \ HashMap<>();\n        Arrays.sort(split2);\n        Arrays.sort(split1);\n \
    \       HashMap<String,Long> map3 = new HashMap<>();\n        HashMap<String,Long>\
    \ map4 = new HashMap<>();\n        for (int i = 0; i < tokens.length; i++) {\n\
    \            if (split1[i] == split2[i]) {\n                if (map1.containsKey(split1[i]))\
    \ {\n                    map1.put(split1[i], map1.get(split1[i]) + 1);\n     \
    \           } else {\n                    map1.put(split1[i], 1l);\n         \
    \       }\n            } else {\n                map2.put(split2[i], map2.get(split2[i])\
    \ + 1);\n                map4.put(split2[i], map4.get(split2[i]) + 1);\n     \
    \           if (map3.containsKey(split1[i])) {\n                    map3.put(split1[i],\
    \ map3.get(split1[i]) + 1);\n                } else {\n                    map3.put(split1[i],\
    \ 1l);\n                }\n            }\n        }\n        map3.keySet().retainAll(map2.keySet());\n\
    \        map4.keySet().retainAll(map2.keySet());\n        if (map3.isEmpty())\
    \ {\n            map3.keySet().retainAll(map4.keySet());\n        }\n        for\
    \ (String s : map3.keySet()) {\n            result.put(s, map3.get(s));\n    \
    \    }\n        for (String s : map4.keySet()) {\n            result.put(s, map4.get(s));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Long.longValue()\" because the return value of \"java.util.Map.get(Object)\"\
    \ is null\n\tat Problem.histogram(tmpvievwzi6.java:56)\n\tat Problem.main(tmpvievwzi6.java:79)\n"
  stdout: ''
  timestamp: 1660011691
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<String,Long>();\n        for(String letter : test.split(\"\
    \ \")){\n            if(result.containsKey(letter))\n                result.put(letter,\
    \ result.get(letter) + 1);\n            else\n                result.put(letter,\
    \ 1L);\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoh4t0b7l.java:35)\n"
  stdout: ''
  timestamp: 1660011691
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        String\
    \ s = test.trim();\n        if (s.isEmpty()) return new HashMap<String,Long>();\n\
    \        HashMap<String,Long> map = new HashMap<String,Long>();\n        Set<String>\
    \ keys = new HashSet<String>();\n        long max = 0;\n        for (String key\
    \ : s.split(\" \")) {\n            key = key.trim();\n            if (map.containsKey(key))\
    \ map.put(key, map.get(key)+1);\n            else map.put(key, 1l);\n        \
    \    if (map.get(key) > max) max = map.get(key);\n            if (keys.contains(key))\
    \ keys.remove(key);\n            else keys.add(key);\n        }\n        for (String\
    \ key : keys) map.put(key, max);\n        return map;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3mq0qz0j.java:42)\n"
  stdout: ''
  timestamp: 1660011691
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String [] array = test.split(\" \");\n  \
    \      for (String s : array) {\n            result.merge(s, 1L, (o,n)-> {\n \
    \               if(n.longValue() > o.longValue()) o=n;\n                return\
    \ o;\n            });\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk3x4wrvw.java:35)\n"
  stdout: ''
  timestamp: 1660011691
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ results = new HashMap<String,Long>();\n        String[] split = test.split(\"\
    \ \");\n        for (String s : split) {\n            results.merge(s, 1L, Long::sum);\n\
    \        }\n        return results;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk6ztfc15.java:33)\n"
  stdout: ''
  timestamp: 1660011691
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        String[]\
    \ arr = test.split(\" \");\n        HashMap<String,Long> map = new HashMap<String,Long>();\n\
    \        for (String str: arr) {\n            map.put(str,Collections.frequency(Arrays.asList(test.split(\"\
    \ \")),str));\n        }\n        map.remove(\"a\");\n        map.remove(\"b\"\
    );\n        map.remove(\"c\");\n        return map;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwb2a_y2k.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            map.put(str,Collections.frequency(Arrays.asList(test.split(\"\
    \ \")),str));\n                                             ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011691
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String key = \"\";\n        long count = 0;\n\
    \        for (char c : test.toCharArray()) {\n            key = String.valueOf(c);\n\
    \            if (map.containsKey(key)) {\n                count++;\n         \
    \       map.put(key, map.get(key) + 1);\n            } else {\n              \
    \  map.put(key, 1l);\n            }\n        }\n        for (Map.Entry<String,\
    \ Long> entry : map.entrySet()) {\n            Map.Entry<String,Long> entrySorted\
    \ = new AbstractMap.SimpleEntry<>(entry.getKey(), entry.getValue());\n       \
    \     if (entrySorted.getValue() > map.get(entrySorted.getKey())) {\n        \
    \        map = entrySorted;\n            }\n        }\n        return map;\n \
    \   }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpifg_3qzr.java:39: error: incompatible types: Entry<String,Long>\
    \ cannot be converted to HashMap<String,Long>\n                map = entrySorted;\n\
    \                      ^\n1 error\n"
  stdout: ''
  timestamp: 1660011691
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        Map<String,\
    \ Long> map = new HashMap<String, Long>();\n        String[] arr = test.split(\"\
    \ \");\n        for(String word : arr) {\n            Long val = map.get(word);\n\
    \            if(val == null) {\n                val = Long.valueOf(0);\n     \
    \       }\n            map.put(word, val.longValue() + 1l);\n        }\n     \
    \   return map;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxjo93n0e.java:33: error: incompatible types: Map<String,Long> cannot\
    \ be converted to HashMap<String,Long>\n        return map;\n               ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011691
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ histogram = new HashMap<>();\n        String[] words = test.split(\" \");\n\
    \        for (String word : words) {\n            histogram.merge(word, 1, (oldValue,\
    \ newValue) -> oldValue + newValue);\n        }\n        return histogram;\n \
    \   }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp09r_hyey.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            histogram.merge(word, 1, (oldValue, newValue) -> oldValue\
    \ + newValue);\n                                  ^\n/tmp/tmp09r_hyey.java:27:\
    \ error: bad operand types for binary operator '+'\n            histogram.merge(word,\
    \ 1, (oldValue, newValue) -> oldValue + newValue);\n                         \
    \                                             ^\n  first type:  V\n  second type:\
    \ V\n  where V is a type-variable:\n    V extends Object declared in class HashMap\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011691
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ h = new HashMap<String,Long>();\n        String[] words = test.split(\" \");\n\
    \        for (String word : words) {\n            if (h.containsKey(word)) {\n\
    \                h.get(word) += 1;\n            } else {\n                h.put(word,\
    \ 1l);\n            }\n        }\n        return h;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp63l7givf.java:28: error: unexpected type\n                h.get(word)\
    \ += 1;\n                     ^\n  required: variable\n  found:    value\n1 error\n"
  stdout: ''
  timestamp: 1660011691
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ hashMap = new HashMap<String,Long>(Math.max(test.length(),1));\n        for(String\
    \ testCase : test.split(\" \")){\n            hashMap.merge(testCase,1l,(old,new)->old+new);\n\
    \        }\n        return hashMap;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4hiyvu4v.java:26: error: ')' expected\n            hashMap.merge(testCase,1l,(old,new)->old+new);\n\
    \                                           ^\n/tmp/tmp4hiyvu4v.java:26: error:\
    \ <identifier> expected\n            hashMap.merge(testCase,1l,(old,new)->old+new);\n\
    \                                              ^\n/tmp/tmp4hiyvu4v.java:26: error:\
    \ ';' expected\n            hashMap.merge(testCase,1l,(old,new)->old+new);\n \
    \                                              ^\n/tmp/tmp4hiyvu4v.java:26: error:\
    \ <identifier> expected\n            hashMap.merge(testCase,1l,(old,new)->old+new);\n\
    \                                                        ^\n/tmp/tmp4hiyvu4v.java:26:\
    \ error: not a statement\n            hashMap.merge(testCase,1l,(old,new)->old+new);\n\
    \                                                    ^\n5 errors\n"
  stdout: ''
  timestamp: 1660011691
