language: java
name: HumanEval_143_words_in_sentence
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> res = new ArrayList<String>();\n        IntStream.range(2,\
    \ 100).forEach((i) -> {\n            if (isPrime(i)) {\n                for (String\
    \ word : sentence.replaceAll(\"\\\\s+\", \" \").split(\" \")) {\n            \
    \        int len = word.length();\n                    if (len == i) res.add(word);\n\
    \                }\n            }\n        });\n        return res.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplx8njc_j.java:26: error: cannot find symbol\n            if (isPrime(i))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010470
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // Write your code here\n        HashSet<Integer> set = new HashSet<Integer>();\n\
    \        HashSet<String> result = new HashSet<String>();\n        String[] words\
    \ = sentence.split(\" \");\n        for(String word:words){\n            int n\
    \ = Integer.valueOf(word);\n            if(set.contains(n)){\n               \
    \ String s = \"\";\n                while(set.contains(n)){\n                \
    \    s+= \" \";\n                    set.add(n);\n                }\n        \
    \        set.add(n);\n                result.add(s);\n            }\n        \
    \    else{\n                set.add(n);\n            }\n        }\n        String\
    \ r = \"\";\n        for(int i=0;i<result.size();i++){\n            for(int j=0;j<result.get(i).length();j++){\n\
    \                r += result.get(i).charAt(j);\n            }\n            r +=\
    \ \" \";\n        }\n        return r;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpugk4ejl0.java:45: error: cannot find symbol\n            for(int\
    \ j=0;j<result.get(i).length();j++){\n                                ^\n  symbol:\
    \   method get(int)\n  location: variable result of type HashSet<String>\n/tmp/tmpugk4ejl0.java:46:\
    \ error: cannot find symbol\n                r += result.get(i).charAt(j);\n \
    \                          ^\n  symbol:   method get(int)\n  location: variable\
    \ result of type HashSet<String>\n2 errors\n"
  stdout: ''
  timestamp: 1660010470
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        int len = sentence.length();\n        String s = \"\";\n        for (int\
    \ i = 0; i < len; i++) {\n            if (i % 2 == 0) {\n                s +=\
    \ sentence.substring(i, i + 1);\n            }\n        }\n        return s;\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpio2212_7.java:34)\n"
  stdout: ''
  timestamp: 1660010470
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        int len = 0;\n        int count = 0;\n        for (int i = 0; i < sentence.length();\
    \ i++) {\n            char c = sentence.charAt(i);\n            if (Character.isLetter(c))\
    \ {\n                len++;\n                count++;\n            }\n       \
    \ }\n        // System.out.printf(\"%d = %d\\n\", len, count);\n        // len\
    \ = wordCount(sentence);\n        // System.out.printf(\"%d\\n\", len);\n    \
    \    List<String> list = Arrays.asList(sentence.split(\" \"));\n        List<String>\
    \ result = new ArrayList<>();\n        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : list) {\n            if (map.containsKey(word)) {\n\
    \                map.put(word, map.get(word) + 1);\n            } else {\n   \
    \             map.put(word, 1);\n            }\n        }\n        for (Map.Entry<String,\
    \ Integer> entry : map.entrySet()) {\n            result.add(entry.getKey());\n\
    \        }\n        String newResult = String.join(\" \", result);\n        return\
    \ newResult;\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpte40d06o.java:53)\n"
  stdout: ''
  timestamp: 1660010470
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> wordsInSentence = new ArrayList<>();\n        List<Integer>\
    \ primeNumbers = new ArrayList<>();\n        for (String word : sentence.split(\"\
    \ \")) {\n            int length = word.length();\n            primeNumbers.add(length);\n\
    \            if (length == 0) {\n                continue;\n            }\n  \
    \          for (int i = 0; i < length; i++) {\n                int j = (2 * i\
    \ + 1) / 2;\n                if (j > length) {\n                    break;\n \
    \               }\n                if (i * i == j) {\n                    continue;\n\
    \                }\n                if (i == 0 && i == j) {\n                \
    \    continue;\n                }\n                if (j * j > length) {\n   \
    \                 continue;\n                }\n                boolean flag =\
    \ false;\n                for (int k = 0; k < primeNumbers.size(); k++) {\n  \
    \                  if (primeNumbers.get(k) == j + 1) {\n                     \
    \   flag = true;\n                        break;\n                    }\n    \
    \            }\n                if (!flag) {\n                    wordsInSentence.add(word);\n\
    \                }\n            }\n        }\n        Set<String> primeNumbersSet\
    \ = new HashSet<>(primeNumbers);\n        List<String> result = new ArrayList<>(wordsInSentence.size());\n\
    \        wordsInSentence.forEach(word -> {\n            int index = primeNumbersSet.contains(Integer.valueOf(word.length()));\n\
    \            if (index != -1) {\n                result.add(word);\n         \
    \   }\n        });\n        return result.toString();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeutddpke.java:58: error: incompatible types: cannot infer type\
    \ arguments for HashSet<>\n        Set<String> primeNumbersSet = new HashSet<>(primeNumbers);\n\
    \                                                 ^\n    reason: inference variable\
    \ E has incompatible bounds\n      equality constraints: String\n      lower bounds:\
    \ Integer\n  where E is a type-variable:\n    E extends Object declared in class\
    \ HashSet\n/tmp/tmpeutddpke.java:61: error: incompatible types: boolean cannot\
    \ be converted to int\n            int index = primeNumbersSet.contains(Integer.valueOf(word.length()));\n\
    \                                                ^\n2 errors\n"
  stdout: ''
  timestamp: 1660010470
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        char[] charArray = sentence.toCharArray();\n        char[] newCharArray\
    \ = new char[charArray.length];\n        for (int i = 0; i < charArray.length;\
    \ i++) {\n            char c = charArray[i];\n            if (isPrime(Integer.valueOf(c).toString()))\
    \ {\n                for (int j = (i + 2); j <= charArray.length; j++) {\n   \
    \                 char d = charArray[j];\n                    for (int k = (j\
    \ + 1); k <= charArray.length - 1; k++) {\n                        char e = charArray[k];\n\
    \                        String s = d + e;\n                        if (isPrime(Integer.valueOf(s).toString()))\
    \ {\n                            newCharArray[i] = c;\n                      \
    \      newCharArray[j] = d;\n                            newCharArray[k] = e;\n\
    \                            newCharArray[j] = e;\n                          \
    \  break;\n                        }\n                    }\n                }\n\
    \            }\n        }\n        return new String(newCharArray);\n    }\n \
    \   public static void main(String[] args) {\n    assert(wordsInSentence((\"This\
    \ is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl8xzqib9.java:28: error: cannot find symbol\n            if (isPrime(Integer.valueOf(c).toString()))\
    \ {\n                ^\n  symbol:   method isPrime(String)\n  location: class\
    \ Problem\n/tmp/tmpl8xzqib9.java:33: error: incompatible types: int cannot be\
    \ converted to String\n                        String s = d + e;\n           \
    \                          ^\n/tmp/tmpl8xzqib9.java:34: error: cannot find symbol\n\
    \                        if (isPrime(Integer.valueOf(s).toString())) {\n     \
    \                       ^\n  symbol:   method isPrime(String)\n  location: class\
    \ Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660010470
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        int n = wordsInSentence(sentence);\n        System.out.println(\"n= \"\
    \ + n);\n        return null;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxd2t692o.java:24: error: incompatible types: String cannot be converted\
    \ to int\n        int n = wordsInSentence(sentence);\n                       \
    \        ^\n1 error\n"
  stdout: ''
  timestamp: 1660010470
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        int count = 0;\n   \
    \     Set<Integer> set = new HashSet<>();\n        for(String w : words) {\n \
    \           int length = w.length();\n            if (length == 1) continue;\n\
    \            if (set.add(length)) {\n                count++;\n            }\n\
    \        }\n        return Arrays.stream(words).filter(w -> set.contains(w.length())).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkysug1r6.java:37)\n"
  stdout: ''
  timestamp: 1660010470
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        int n = wordsInSentence(sentence).size();\n        if (n == 0) return\
    \ \"none\";\n        return wordsInSentence(sentence);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfe93op8g.java:24: error: cannot find symbol\n        int n = wordsInSentence(sentence).size();\n\
    \                                         ^\n  symbol:   method size()\n  location:\
    \ class String\n1 error\n"
  stdout: ''
  timestamp: 1660010470
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        ArrayList<Integer> primes = new ArrayList<>();\n        char[] charArray\
    \ = sentence.toCharArray();\n        for (int i = 0; i < charArray.length; i++)\
    \ {\n            if (Character.isLetterOrDigit(charArray[i])) {\n            \
    \    String currentWord = String.valueOf(charArray[i]);\n                if (!primes.contains(Integer.parseInt(currentWord)))\
    \ {\n                    primes.add(Integer.parseInt(currentWord));\n        \
    \        }\n            }\n        }\n        Set<Integer> uniquePrimes = new\
    \ HashSet<>(primes);\n        String[] wordsAsArray = sentence.split(\" \");\n\
    \        StringBuilder sb = new StringBuilder();\n        for (String word : wordsAsArray)\
    \ {\n            int index = Integer.parseInt(word);\n            if (uniquePrimes.contains(index))\
    \ {\n                sb.append(word);\n            }\n        }\n        return\
    \ sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"T\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.wordsInSentence(tmpuquqpvcd.java:29)\n\tat Problem.main(tmpuquqpvcd.java:46)\n"
  stdout: ''
  timestamp: 1660010470
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        char[] words = sentence.toCharArray();\n        String resultString =\
    \ \"\";\n        HashSet<String> wordSet = new HashSet<>(Arrays.asList(words));\n\
    \        boolean isPrime = true;\n        boolean lastWordAdded = false;\n   \
    \     boolean firstWordAdded = false;\n        for(String word : wordSet) {\n\
    \            boolean firstWord = false;\n            boolean lastWord = false;\n\
    \            int length = word.length();\n            for(int i = 0; i < length;\
    \ i++) {\n                char c = word.charAt(i);\n                String checkWord\
    \ = String.valueOf(c);\n                if (wordSet.contains(checkWord)) {\n \
    \                   if(isPrime) {\n                        isPrime = false;\n\
    \                        resultString += word;\n                        lastWordAdded\
    \ = true;\n                    }\n                }\n                if(firstWordAdded\
    \ == true && isPrime) {\n                    isPrime = false;\n              \
    \      resultString += word;\n                    firstWordAdded = false;\n  \
    \              }\n            }\n            firstWord = lastWordAdded;\n    \
    \        lastWord = firstWordAdded;\n        }\n        return resultString;\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjbac49in.java:26: error: incompatible types: cannot infer type\
    \ arguments for HashSet<>\n        HashSet<String> wordSet = new HashSet<>(Arrays.asList(words));\n\
    \                                             ^\n    reason: inference variable\
    \ E has incompatible bounds\n      equality constraints: String\n      lower bounds:\
    \ T,char[]\n  where E,T are type-variables:\n    E extends Object declared in\
    \ class HashSet\n    T extends Object declared in method <T>asList(T...)\n1 error\n"
  stdout: ''
  timestamp: 1660010470
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        LinkedList<Integer> list = new LinkedList<Integer>();\n        for(int\
    \ i = 0; i < sentence.length(); i++) {\n            String s = sentence.substring(i,\
    \ i + 1);\n            list.add(Integer.valueOf(s));\n        }\n        StringBuilder\
    \ builder = new StringBuilder();\n        for(int i = 0; i < list.size(); i++)\
    \ {\n            if(!list.get(i).equals(list.get(list.size() - 1))) {\n      \
    \          builder.append(list.get(i));\n            }\n        }\n        return\
    \ builder.toString();\n    }\n    public static void main(String[] args) {\n \
    \   assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"T\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.valueOf(Integer.java:999)\n\
    \tat Problem.wordsInSentence(tmpipz4hdcr.java:27)\n\tat Problem.main(tmpipz4hdcr.java:38)\n"
  stdout: ''
  timestamp: 1660010470
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // Write your code here\n        return sentence;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbi0g1p47.java:28)\n"
  stdout: ''
  timestamp: 1660010470
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        Map<String, String> mapping = new HashMap<>();\n        String[] arr\
    \ = sentence.split(\" \");\n        Arrays.sort(arr);\n        for (String s :\
    \ arr) {\n            if (mapping.get(s) == null) {\n                mapping.put(s,\
    \ s);\n            } else {\n                if (Integer.parseInt(mapping.get(s))\
    \ != s.length()) {\n                    mapping = null;\n                }\n \
    \           }\n        }\n        if (mapping == null) {\n            return sentence;\n\
    \        }\n        StringBuilder result = new StringBuilder();\n        String[]\
    \ arr = sentence.split(\" \");\n        for (String s : arr) {\n            if\
    \ (mapping.get(s) == null) {\n                result.append(s);\n            }\
    \ else {\n                result.append(mapping.get(s));\n            }\n    \
    \    }\n        return result.toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0iz35yvs.java:40: error: variable arr is already defined in method\
    \ wordsInSentence(String)\n        String[] arr = sentence.split(\" \");\n   \
    \              ^\n1 error\n"
  stdout: ''
  timestamp: 1660010470
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        \n        List<String> prime = new ArrayList<>();\n        \n       \
    \ String[] arr = sentence.split(\" \");\n        for (int i = 0; i < arr.length;\
    \ i++) {\n            if (isPrime(arr[i].length())) {\n                prime.add(arr[i]);\n\
    \            }\n        }\n        \n        StringBuilder sb = new StringBuilder();\n\
    \        for (String s : prime) {\n            sb.append(s);\n        }\n    \
    \    return sb.toString();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpka44qdla.java:29: error: cannot find symbol\n            if (isPrime(arr[i].length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010470
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> list = new ArrayList<String>();\n        String[] strArray\
    \ = sentence.split(\" \");\n        for (String str : strArray) {\n          \
    \  list.add(str);\n        }\n        for (String str : list) {\n            int\
    \ count = 0;\n            for (int i = 0; i < str.length(); i++) {\n         \
    \       if (Character.isLetter(str.charAt(i))) {\n                    count++;\n\
    \                }\n            }\n            if (count == 1 || (Integer.parseInt(String.valueOf(str.length()))\
    \ % 2) != 0) {\n                list.add(str);\n            }\n        }\n   \
    \     List<String> finalList = new ArrayList<String>();\n        Collections.sort(list);\n\
    \        for (String str : list) {\n            if (finalList.indexOf(str) ==\
    \ -1) {\n                finalList.add(str);\n            }\n        }\n     \
    \   StringBuilder sb = new StringBuilder();\n        for (String str : finalList)\
    \ {\n            sb.append(str + \" \");\n        }\n        return sb.toString().trim();\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.util.ConcurrentModificationException\n\
    \tat java.base/java.util.ArrayList$Itr.checkForComodification(ArrayList.java:1013)\n\
    \tat java.base/java.util.ArrayList$Itr.next(ArrayList.java:967)\n\tat Problem.wordsInSentence(tmputibngx3.java:29)\n\
    \tat Problem.main(tmputibngx3.java:54)\n"
  stdout: ''
  timestamp: 1660010470
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // write your code here\n        List<String> words = new ArrayList<String>();\n\
    \        for (int i = 0; i < sentence.length(); i++) {\n            char c = sentence.charAt(i);\n\
    \            if (Character.isLetter(c))\n                words.add(Character.toString(c));\n\
    \        }\n        String[] result = new String[words.size()];\n        int count\
    \ = 0;\n        for (String string : words)\n            if (count++%2 == 0)\n\
    \                result[count++] = string;\n        return Arrays.toString(result);\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 11 out of bounds for length 11\n\tat Problem.wordsInSentence(tmp1bflnxuf.java:35)\n\
    \tat Problem.main(tmp1bflnxuf.java:39)\n"
  stdout: ''
  timestamp: 1660010470
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // The string representation of the prime numbers list.\n        List<String>\
    \ primes = IntStream.range(2, (100).toInt())\n                .filter(x -> Arrays.asList(1,\
    \ x).contains(new BigInteger(String.valueOf(x).intValue())))\n               \
    \ .boxed().collect(Collectors.toList());\n\n        String result = \"\";\n  \
    \      int counter = 1;\n        // The first word of the sentence.\n        String\
    \ first = sentence.substring(0,1);\n        // The first prime number that is\
    \ larger than the first.\n        int firstPrime = primes.stream().filter(p->p.compareTo(first)\
    \ > 0).findFirst().get();\n        while (counter<sentence.length()-1){\n    \
    \        // The next prime number that is larger than the current,\n         \
    \   // and is not larger than the first one.\n            int nextPrime = primes.stream().filter(p->p.compareTo(counter)\
    \ > 0 && p.compareTo(firstPrime) < 0).findFirst().get();\n            // The number\
    \ of the occurrence of the next prime number in sentence.\n            int counterOccurrence\
    \ = sentence.indexOf(nextPrime);\n            counter = counterOccurrence+1;\n\
    \            // The last occurrence of the next prime number in sentence.\n  \
    \          int lastOccurrence = sentence.lastIndexOf(nextPrime);\n           \
    \ result += nextPrime+sentence.substring(counterOccurrence+1, lastOccurrence);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5rwxlfon.java:25: error: int cannot be dereferenced\n        List<String>\
    \ primes = IntStream.range(2, (100).toInt())\n                               \
    \                       ^\n/tmp/tmp5rwxlfon.java:34: error: incompatible types:\
    \ String cannot be converted to int\n        int firstPrime = primes.stream().filter(p->p.compareTo(first)\
    \ > 0).findFirst().get();\n                                                  \
    \                                        ^\n/tmp/tmp5rwxlfon.java:38: error: incompatible\
    \ types: int cannot be converted to String\n            int nextPrime = primes.stream().filter(p->p.compareTo(counter)\
    \ > 0 && p.compareTo(firstPrime) < 0).findFirst().get();\n                   \
    \                                               ^\n/tmp/tmp5rwxlfon.java:38: error:\
    \ incompatible types: int cannot be converted to String\n            int nextPrime\
    \ = primes.stream().filter(p->p.compareTo(counter) > 0 && p.compareTo(firstPrime)\
    \ < 0).findFirst().get();\n                                                  \
    \                                            ^\n/tmp/tmp5rwxlfon.java:38: error:\
    \ incompatible types: String cannot be converted to int\n            int nextPrime\
    \ = primes.stream().filter(p->p.compareTo(counter) > 0 && p.compareTo(firstPrime)\
    \ < 0).findFirst().get();\n                                                  \
    \                                                                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n5 errors\n"
  stdout: ''
  timestamp: 1660010470
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        int len = sentence.length();\n        char[] chars = sentence.toCharArray();\n\
    \        String primes = \"\";\n        if (chars.length == 1) {\n           \
    \ return \"\";\n        } else {\n            for (int i = 0; i < len; i++) {\n\
    \                for (int j = i + 1; j < len; j++) {\n                    int\
    \ x = i + j;\n                    if (x % i == 0 || x % j == 0) {\n          \
    \              continue;\n                    }\n                    StringBuilder\
    \ builder = new StringBuilder();\n                    for (int k = 0; k < x; k++)\
    \ {\n                        char c = chars[k];\n                        builder.append(c);\n\
    \                    }\n                    if (builder.length() != i || builder.length()\
    \ != j) {\n                        primes += \" \" + builder.toString();\n   \
    \                 }\n                }\n            }\n        }\n        return\
    \ primes;\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArithmeticException: / by zero\n\
    \tat Problem.wordsInSentence(tmpas_dh8sw.java:33)\n\tat Problem.main(tmpas_dh8sw.java:50)\n"
  stdout: ''
  timestamp: 1660010470
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        ArrayList<String> newStr = new ArrayList<String>();\n        ArrayList<String>\
    \ str = new ArrayList<String>();\n        ArrayList<Integer> words = new ArrayList<Integer>();\n\
    \        str.addAll(Arrays.asList(sentence.split(\" \")));\n        for (int i\
    \ = 0; i < str.size(); i++) {\n            int count = str.get(i).length();\n\
    \            if (str.get(i).length() > 1) {\n                for (int j = 0; j\
    \ < str.get(i).length() - 1; j++) {\n                    for (int k = 0; k < str.get(i).length()\
    \ - 2; k++) {\n                        String w = new String(str.get(i).subSequence(j,\
    \ j + 2));\n                        if (str.get(i).subSequence(j, j + 2).equals(str.get(i).subSequence(k\
    \ + 1, k + 2))) {\n                            count--;\n                    \
    \    }\n                    }\n                }\n            }\n            words.add(count);\n\
    \            newStr.add(str.get(i));\n        }\n        Map<Integer, String>\
    \ sortedMap = new TreeMap<>();\n        for (int i = 0; i < words.size(); i++)\
    \ {\n            sortedMap.put(words.get(i), newStr.get(i));\n        }\n    \
    \    return sortedMap.values().toArray(new String[words.size()]);\n    }\n   \
    \ public static void main(String[] args) {\n    assert(wordsInSentence((\"This\
    \ is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzd78ri2b.java:33: error: no suitable constructor found for String(CharSequence)\n\
    \                        String w = new String(str.get(i).subSequence(j, j + 2));\n\
    \                                   ^\n    constructor String.String(String) is\
    \ not applicable\n      (argument mismatch; CharSequence cannot be converted to\
    \ String)\n    constructor String.String(char[]) is not applicable\n      (argument\
    \ mismatch; CharSequence cannot be converted to char[])\n    constructor String.String(byte[])\
    \ is not applicable\n      (argument mismatch; CharSequence cannot be converted\
    \ to byte[])\n    constructor String.String(StringBuffer) is not applicable\n\
    \      (argument mismatch; CharSequence cannot be converted to StringBuffer)\n\
    \    constructor String.String(StringBuilder) is not applicable\n      (argument\
    \ mismatch; CharSequence cannot be converted to StringBuilder)\n/tmp/tmpzd78ri2b.java:47:\
    \ error: incompatible types: no instance(s) of type variable(s) T exist so that\
    \ T[] conforms to String\n        return sortedMap.values().toArray(new String[words.size()]);\n\
    \                                         ^\n  where T is a type-variable:\n \
    \   T extends Object declared in method <T>toArray(T[])\nNote: Some messages have\
    \ been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660010470
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        HashSet<String> words = new HashSet<String>();\n        for (String word:\
    \ sentence.split(\" \")) {\n            int wordLength = word.length();\n    \
    \        if (wordLength == 1) {\n                continue;\n            } else\
    \ if (wordLength == 2) {\n                if (Character.isLetter(word.charAt(0)))\
    \ {\n                    words.add(word);\n                }\n            } else\
    \ if (isPrime(wordLength)) {\n                words.add(word);\n            }\n\
    \        }\n        return words.toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4d257byc.java:33: error: cannot find symbol\n            } else\
    \ if (isPrime(wordLength)) {\n                       ^\n  symbol:   method isPrime(int)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010470
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<Integer> wordLengths\
    \ = new ArrayList<>();\n        for (String word : words) {\n            wordLengths.add(word.length());\n\
    \        }\n        Collections.sort(wordLengths);\n        int wordLength = wordLengths.get(0);\n\
    \        for (int i = 0; i < wordLengths.size() - 1; i++) {\n            int currentLength\
    \ = wordLengths.get(i);\n            int nextLength = wordLengths.get(i + 1);\n\
    \            if (nextLength < currentLength) {\n                Collections.swap(wordLengths,\
    \ i, i + 1);\n                i = i + 1;\n            }\n        }\n        StringBuilder\
    \ result = new StringBuilder();\n        for (String word : words) {\n       \
    \     result.append(word);\n        }\n        return result.toString();\n   \
    \ }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7d1a_901.java:46)\n"
  stdout: ''
  timestamp: 1660010470
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        ArrayList<String> results = new ArrayList<>();\n        for (int i =\
    \ 2; i < sentence.length(); i++) {\n            for (int j = 1; j < i; j++) {\n\
    \                if (isPrimeNumber(j) && isPrimeNumber(i + j)) {\n           \
    \         if (result.contains(String.valueOf(j)))\n                        continue;\n\
    \                    results.add(String.valueOf(j));\n                }\n    \
    \        }\n        }\n        return results;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplm7_85zh.java:27: error: cannot find symbol\n                if\
    \ (isPrimeNumber(j) && isPrimeNumber(i + j)) {\n                    ^\n  symbol:\
    \   method isPrimeNumber(int)\n  location: class Problem\n/tmp/tmplm7_85zh.java:27:\
    \ error: cannot find symbol\n                if (isPrimeNumber(j) && isPrimeNumber(i\
    \ + j)) {\n                                        ^\n  symbol:   method isPrimeNumber(int)\n\
    \  location: class Problem\n/tmp/tmplm7_85zh.java:28: error: cannot find symbol\n\
    \                    if (result.contains(String.valueOf(j)))\n               \
    \         ^\n  symbol:   variable result\n  location: class Problem\n/tmp/tmplm7_85zh.java:34:\
    \ error: incompatible types: ArrayList<String> cannot be converted to String\n\
    \        return results;\n               ^\n4 errors\n"
  stdout: ''
  timestamp: 1660010470
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] arr = sentence.split(\" \");\n        int leng= arr.length;\n\
    \        Map<String, Integer> result = new HashMap<String, Integer>();\n     \
    \   // the length of prime number\n        List<Integer> prime = new ArrayList<Integer>();\n\
    \        // use hashmap for unique pairs only\n        for (String str : arr)\
    \ {\n            if (result.containsKey(str)) {\n                Integer length\
    \ = result.get(str);\n                length++;\n                result.put(str,\
    \ length);\n            } else {\n                result.put(str, 1);\n      \
    \      }\n        }\n        for (String str : result.keySet()) {\n          \
    \  Integer length = result.get(str);\n            boolean flag = false;\n    \
    \        for (int i = 1; i <= length / 2; i++) {\n                flag = true;\n\
    \                for (int j = 2; j < length; j++) {\n                    if (length\
    \ % i == 0) {\n                        flag = false;\n                       \
    \ break;\n                    }\n                }\n                if (flag)\
    \ {\n                    prime.add(i);\n                }\n            }\n   \
    \     }\n        List<String> ans = new LinkedList<>();\n        for (Integer\
    \ num : prime) {\n            String str = num + \" \";\n            for (String\
    \ s : arr) {\n                if (num == Integer.parseInt(s.split(\" \")[0]))\
    \ {\n                    str = str + s + \" \";\n                }\n         \
    \   }\n            ans.add(str);\n        }\n        return ans.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe8s_tqgt.java:68)\n"
  stdout: ''
  timestamp: 1660010471
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] arr = sentence.split(\" \");\n        Arrays.sort(arr);\n  \
    \      List<Integer> result = new ArrayList<>();\n        StringBuilder builder\
    \ = new StringBuilder();\n        for (int i = 0; i < arr.length; i++) {\n   \
    \         int j = 1;\n            while (j < arr[i]) {\n                j++;\n\
    \            }\n            if (result.contains(j)) {\n                continue;\n\
    \            }\n            result.add(j);\n            for (int k = j + 1; k\
    \ < arr[i]; k++) {\n                builder.append(arr[i] + \" \");\n        \
    \    }\n        }\n        return builder.toString();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfopeif02.java:30: error: bad operand types for binary operator\
    \ '<'\n            while (j < arr[i]) {\n                     ^\n  first type:\
    \  int\n  second type: String\n/tmp/tmpfopeif02.java:37: error: bad operand types\
    \ for binary operator '<'\n            for (int k = j + 1; k < arr[i]; k++) {\n\
    \                                  ^\n  first type:  int\n  second type: String\n\
    2 errors\n"
  stdout: ''
  timestamp: 1660010471
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        //  Your code here\n        int length = sentence.length();\n       \
    \ boolean flag = true;\n        while (flag) {\n            flag = false;\n  \
    \          for (int i = 0; i < length; i++) {\n                if (isPrimeNumber(length)\
    \ && Character.isLetter(sentence.charAt(i))) {\n                    flag = true;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < length;\
    \ i++) {\n            if (isPrimeNumber(length) && Character.isLetter(sentence.charAt(i)))\
    \ {\n                sb.append(sentence.charAt(i));\n            }\n        }\n\
    \        return sb.toString();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbuv4_se_.java:30: error: cannot find symbol\n                if\
    \ (isPrimeNumber(length) && Character.isLetter(sentence.charAt(i))) {\n      \
    \              ^\n  symbol:   method isPrimeNumber(int)\n  location: class Problem\n\
    /tmp/tmpbuv4_se_.java:38: error: cannot find symbol\n            if (isPrimeNumber(length)\
    \ && Character.isLetter(sentence.charAt(i))) {\n                ^\n  symbol: \
    \  method isPrimeNumber(int)\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660010471
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        Set<String> words = new HashSet<>();\n        Scanner scanner = new Scanner(sentence);\n\
    \        while (scanner.hasNext()) {\n            words.add(scanner.next());\n\
    \        }\n        StringBuilder result = new StringBuilder();\n        for (String\
    \ word : words) {\n            boolean isPrime = true;\n            for (int i\
    \ = 2; i < Math.sqrt(word.length()); i++) {\n                if (word.length()\
    \ % i == 0) {\n                    isPrime = false;\n                    break;\n\
    \                }\n            }\n            if (isPrime) {\n              \
    \  result.append(' ');\n                result.append(word);\n            }\n\
    \        }\n        return result.toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6q77tai1.java:46)\n"
  stdout: ''
  timestamp: 1660010471
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> words = new ArrayList<>();\n        for (int i = 0; i <\
    \ sentence.length(); i++) {\n            String letter = sentence.substring(i,\
    \ i + 1);\n            if (isPrime(letter.length())) {\n                words.add(letter);\n\
    \            }\n        }\n        return words.toString();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7po1qf3o.java:27: error: cannot find symbol\n            if (isPrime(letter.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010471
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        int[] primes = Primes.primes(100);\n        char[] arr = sentence.toCharArray();\n\
    \        Arrays.sort(arr);\n        Arrays.stream(primes).forEach(x -> {\n   \
    \         String s = \"\";\n            int left = 0, right = 0;\n           \
    \ while (left < arr.length && right < arr.length) {\n                String s1\
    \ = \"\" + arr[left] + arr[right];\n                if (s1.length() == x) {\n\
    \                    s += s1;\n                    left++;\n                 \
    \   right++;\n                } else if (s1.length() < x) {\n                \
    \    left++;\n                } else {\n                    right++;\n       \
    \         }\n            }\n            System.out.println(s);\n        });\n\
    \        return sentence;\n    }\n    public static void main(String[] args) {\n\
    \    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgrk047qf.java:24: error: cannot find symbol\n        int[] primes\
    \ = Primes.primes(100);\n                       ^\n  symbol:   variable Primes\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010471
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] wordsArray = sentence.split(\" \");\n        String[] resultArray\
    \ = new String[wordsArray.length];\n        int resultCount = 0;\n        for\
    \ (String s : wordsArray) {\n            int wordLength = 0;\n            try\
    \ {\n                wordLength = s.length();\n            } catch (Exception\
    \ e) {\n            }\n            for (; wordLength < 10; wordLength++) {\n \
    \               boolean isPrime = true;\n                for (int i = 3; i * i\
    \ <= wordLength; i++) {\n                    if (wordLength % i == 0) {\n    \
    \                    isPrime = false;\n                        break;\n      \
    \              }\n                }\n                if (isPrime) {\n        \
    \            resultArray[resultCount] = s;\n                    resultCount++;\n\
    \                }\n            }\n        }\n        Arrays.sort(resultArray);\n\
    \        String result = \"\";\n        for (int i = 0; i < resultCount; i++)\
    \ {\n            result += resultArray[i];\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 4 out of bounds for length 4\n\tat Problem.wordsInSentence(tmpyxpr4h32.java:42)\n\
    \tat Problem.main(tmpyxpr4h32.java:55)\n"
  stdout: ''
  timestamp: 1660010472
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        int count = 0;\n        int count = 0;\n        for(int i = 0; i < sentence.length();\
    \ i++){\n            if (Character.isLetter(sentence.charAt(i))){\n          \
    \      count++;\n            }\n        }\n        String result = \"\";\n   \
    \     for (int i = 0; i < count; i++){\n            int flag = 0;\n          \
    \  for(int j = 0; j < (count - 1); j++){\n                if (Character.isLetter(sentence.charAt(j))\
    \ != Character.isLetter(sentence.charAt(j + 1))){\n                    flag =\
    \ 1;\n                }\n            }\n            if (!flag){\n            \
    \    result += \" \" + sentence.substring(i, (i + 1));\n            }\n      \
    \  }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyvtt13fw.java:25: error: variable count is already defined in method\
    \ wordsInSentence(String)\n        int count = 0;\n            ^\n/tmp/tmpyvtt13fw.java:39:\
    \ error: bad operand type int for unary operator '!'\n            if (!flag){\n\
    \                ^\n2 errors\n"
  stdout: ''
  timestamp: 1660010471
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] arr = sentence.split(\" \");\n        List<String> primes =\
    \ primes(arr);\n        StringBuilder result = new StringBuilder();\n        for\
    \ (String prime : primes) {\n            result.append(arr[0]).append(\" \").append(prime).append(\"\
    \ \").append(arr[1]);\n        }\n        return result.toString();\n    }\n \
    \   public static void main(String[] args) {\n    assert(wordsInSentence((\"This\
    \ is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2hb_gfg9.java:25: error: cannot find symbol\n        List<String>\
    \ primes = primes(arr);\n                              ^\n  symbol:   method primes(String[])\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010471
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] tokens = sentence.split(\" \");\n        Set<Integer> primes\
    \ = new HashSet<>();\n        for (String t : tokens) {\n            try {\n \
    \               BigInteger.valueOf(t);\n            } catch (NumberFormatException\
    \ ex) {\n                continue;\n            }\n            primes.add(Integer.parseInt(t));\n\
    \        }\n        List<String> res = new ArrayList<>();\n        for (String\
    \ t : tokens) {\n            if (primes.contains(Integer.parseInt(t))) {\n   \
    \             res.add(t);\n            }\n        }\n        return res.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd7_01vbq.java:28: error: no suitable method found for valueOf(String)\n\
    \                BigInteger.valueOf(t);\n                          ^\n    method\
    \ BigInteger.valueOf(long) is not applicable\n      (argument mismatch; String\
    \ cannot be converted to long)\n    method BigInteger.valueOf(int[]) is not applicable\n\
    \      (argument mismatch; String cannot be converted to int[])\n1 error\n"
  stdout: ''
  timestamp: 1660010471
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        StringBuilder result = new StringBuilder();\n        // Do not write\
    \ main() function.\n        // Do not read input, instead use the arguments to\
    \ the function.\n        // Do not print anything, instead return an output argument.\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdkf1x0nt.java:28: error: incompatible types: StringBuilder cannot\
    \ be converted to String\n        return result;\n               ^\n1 error\n"
  stdout: ''
  timestamp: 1660010471
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        Set<Integer> primes = new HashSet<>();\n        List<String> words =\
    \ new ArrayList<>();\n        Stream<String> stream = Arrays.stream(sentence.split(\"\
    \ \"));\n        stream.forEach(word -> {\n            if (primes.contains(word.length()))\
    \ {\n                words.add(word);\n            }\n        });\n        return\
    \ words.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7uhup79b.java:35)\n"
  stdout: ''
  timestamp: 1660010472
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String result = \"\";\n        if (sentence == null || sentence.length()\
    \ == 0) {\n            return result;\n        }\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            boolean prime = true;\n\
    \            for (int i = 2; (i <= Math.sqrt(word.length())) && (prime); i++)\
    \ {\n                if (word.length() % i == 0) {\n                    prime\
    \ = false;\n                }\n            }\n            if (prime) {\n     \
    \           result = word + \" \" + result;\n            }\n        }\n      \
    \  return result;\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfwzhzrh9.java:43)\n"
  stdout: ''
  timestamp: 1660010472
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        Stack<Integer> stack = new Stack<Integer>();\n        for (String word\
    \ : sentence.split(\" \")) {\n            int len = word.length();\n         \
    \   if (stack.size() < len) {\n                stack.push(len);\n            }\
    \ else if (stack.size() == len) {\n                int temp = stack.peek();\n\
    \                if (temp % len != 0) {\n                    return \"\";\n  \
    \              }\n                stack.pop();\n                stack.push(len);\n\
    \            }\n        }\n        return \"\";\n    }\n    public static void\
    \ main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3os0l13x.java:41)\n"
  stdout: ''
  timestamp: 1660010471
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        return wordsInSentence(sentence.split(\" \")).join();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3w3828mp.java:24: error: incompatible types: String[] cannot be\
    \ converted to String\n        return wordsInSentence(sentence.split(\" \")).join();\n\
    \                                             ^\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660010471
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> results = new ArrayList<>();\n\n        String[] words =\
    \ sentence.split(\" \");\n        for (String word : words) {\n            if\
    \ (isPrime(word.length()) && results.size() < 100) {\n                String result\
    \ = word;\n                results.add(result);\n            }\n        }\n  \
    \      return String.join(\" \", results);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdfv48eyo.java:28: error: cannot find symbol\n            if (isPrime(word.length())\
    \ && results.size() < 100) {\n                ^\n  symbol:   method isPrime(int)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010471
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] arrayOfWords = sentence.split(\" \");\n        List<String>\
    \ list = Arrays.stream(arrayOfWords).map(String::trim).collect(Collectors.toList());\n\
    \        List<Integer> list = Arrays.stream(arrayOfWords).map(Integer::valueOf).collect(Collectors.toList());\n\
    \        int listSize = list.size();\n        List<String> newList = new ArrayList<>(listSize);\n\
    \        for (Integer i : list) {\n            while (true) {\n              \
    \  if (i%listSize==0) {\n                    newList.add(list.get(i/listSize));\n\
    \                    break;\n                } else {\n                    newList.add(list.get(i/listSize)\
    \ + \" \");\n                }\n                i++;\n            }\n        }\n\
    \        return String.join(\" \", newList);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2vfb1rq7.java:26: error: variable list is already defined in method\
    \ wordsInSentence(String)\n        List<Integer> list = Arrays.stream(arrayOfWords).map(Integer::valueOf).collect(Collectors.toList());\n\
    \                      ^\n/tmp/tmp2vfb1rq7.java:32: error: incompatible types:\
    \ Integer cannot be converted to String\n                    newList.add(list.get(i/listSize));\n\
    \                                        ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660010471
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        char[] arr = sentence.toCharArray();\n        List<String> arr = Arrays.stream(arr)\n\
    \            .filter(c -> Character.isLetter(c))\n            .collect(Collectors.toList());\n\
    \        List<Integer> prime = new ArrayList<Integer>();\n        for(int i =\
    \ 0; i < arr.size(); i++) {\n            prime.add((int)Math.sqrt(arr.size() -\
    \ i));\n        }\n        System.out.println(prime);\n        StringBuilder str\
    \ = new StringBuilder();\n        for(int i = 0; i < arr.size(); i++) {\n    \
    \        for(int j = 0; j < prime.size(); j++) {\n                if(arr.get(i).length()\
    \ == prime.get(j))\n                    str.append(arr.get(i));\n            }\n\
    \        }\n        return str.toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_l3fasai.java:25: error: variable arr is already defined in method\
    \ wordsInSentence(String)\n        List<String> arr = Arrays.stream(arr)\n   \
    \                  ^\n/tmp/tmp_l3fasai.java:25: error: no suitable method found\
    \ for stream(List<String>)\n        List<String> arr = Arrays.stream(arr)\n  \
    \                               ^\n    method Arrays.<T#1>stream(T#1[]) is not\
    \ applicable\n      (cannot infer type-variable(s) T#1\n        (argument mismatch;\
    \ List<String> cannot be converted to T#1[]))\n    method Arrays.<T#2>stream(T#2[],int,int)\
    \ is not applicable\n      (cannot infer type-variable(s) T#2\n        (actual\
    \ and formal argument lists differ in length))\n    method Arrays.stream(int[])\
    \ is not applicable\n      (argument mismatch; List<String> cannot be converted\
    \ to int[])\n    method Arrays.stream(long[]) is not applicable\n      (argument\
    \ mismatch; List<String> cannot be converted to long[])\n    method Arrays.stream(double[])\
    \ is not applicable\n      (argument mismatch; List<String> cannot be converted\
    \ to double[])\n  where T#1,T#2 are type-variables:\n    T#1 extends Object declared\
    \ in method <T#1>stream(T#1[])\n    T#2 extends Object declared in method <T#2>stream(T#2[],int,int)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n2 errors\n"
  stdout: ''
  timestamp: 1660010471
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // Write your code here\n        Set<String> set = new HashSet<>();\n\
    \        String[] arr = sentence.split(\" \");\n        for(String word : arr){\n\
    \            if(word.matches(\"[a-zA-Z]\")){\n                set.add(word);\n\
    \            }\n        }\n        List<String> str = new ArrayList<>(set);\n\
    \        Collections.sort(str);\n        String result = \"\";\n        for(int\
    \ i = 1; i < str.size();i++){\n            int flag = 0;\n            for(int\
    \ j = i; j < str.size();j++){\n                if(str.get(j).length() == str.get(i).length()){\n\
    \                    flag = 1;\n                    break;\n                }\n\
    \            }\n            if(flag == 0){\n                result += str.get(i)\
    \ + \" \";\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp28lkul8w.java:50)\n"
  stdout: ''
  timestamp: 1660010472
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        int n = 100;\n        if (n == 0)\n            throw new IllegalArgumentException(\"\
    n cannot be 0\");\n        int nPrimes = 0;\n        String[] words = sentence.split(\"\
    \ \");\n        if (words.length != 1)\n            return null;\n        for\
    \ (int i = 0; i < words.length; i++)\n            if (isPrime(words[i].length()))\n\
    \                nPrimes++;\n        if (nPrimes != n)\n            return null;\n\
    \        Collections.sort(words);\n        String result = \"\";\n        for\
    \ (int i = 0; i < words.length; i++) {\n            result += \" \" + words[i];\n\
    \            if (isPrime(words[i].length()))\n                nPrimes--;\n   \
    \     }\n        if (nPrimes != 0) {\n            return null;\n        }\n  \
    \      return result;\n    }\n    public static void main(String[] args) {\n \
    \   assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2kpjmxd0.java:32: error: cannot find symbol\n            if (isPrime(words[i].length()))\n\
    \                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    /tmp/tmp2kpjmxd0.java:36: error: no suitable method found for sort(String[])\n\
    \        Collections.sort(words);\n                   ^\n    method Collections.<T#1>sort(List<T#1>)\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (argument\
    \ mismatch; String[] cannot be converted to List<T#1>))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Comparable<? super T#1> declared in method\
    \ <T#1>sort(List<T#1>)\n    T#2 extends Object declared in method <T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>)\n/tmp/tmp2kpjmxd0.java:40: error: cannot find symbol\n         \
    \   if (isPrime(words[i].length()))\n                ^\n  symbol:   method isPrime(int)\n\
    \  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660010471
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // write your code here\n        List<Integer> l = new ArrayList<>();\n\
    \        Scanner s = new Scanner(sentence);\n        while (s.hasNext()) {\n \
    \           String s = s.next();\n            int l = s.length();\n          \
    \  l.add(l);\n        }\n        \n        int[] arr = l.stream().mapToInt(i ->\
    \ i).toArray();\n        Arrays.sort(arr);\n        for(int i=0;i<arr.length;i++)\
    \ {\n            if(arr[i] == 1) {\n                arr[i] = arr[i+1];\n     \
    \       }\n        }\n        StringBuilder sb = new StringBuilder();\n      \
    \  for (int i=0; i<arr.length; i++) {\n            sb.append(arr[i]+\" \");\n\
    \        }\n        return sb.toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw0t0eokk.java:28: error: variable s is already defined in method\
    \ wordsInSentence(String)\n            String s = s.next();\n                \
    \   ^\n/tmp/tmpw0t0eokk.java:28: error: cannot find symbol\n            String\
    \ s = s.next();\n                        ^\n  symbol:   method next()\n  location:\
    \ variable s of type String\n/tmp/tmpw0t0eokk.java:29: error: variable l is already\
    \ defined in method wordsInSentence(String)\n            int l = s.length();\n\
    \                ^\n/tmp/tmpw0t0eokk.java:30: error: int cannot be dereferenced\n\
    \            l.add(l);\n             ^\n4 errors\n"
  stdout: ''
  timestamp: 1660010472
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String res = \"\";\n        List<String> l = new ArrayList<String>();\n\
    \        for(String x : sentence.split(\" \")){\n            l.add(x);\n     \
    \   }\n        Map<Integer,Integer> mp = new HashMap<>();\n        for(int i=0;i<l.size();i++)\n\
    \        {\n            String x = l.get(i);\n            int l = x.length();\n\
    \            mp.put(i, l);\n        }\n        Set<Integer> set = new HashSet<Integer>(mp.keySet());\n\
    \        System.out.println(set);\n        for(Integer x : set) {\n          \
    \  int l = mp.get(x);\n            if((l%2)==0)\n            {\n             \
    \   res+=x;\n            }\n        }\n        return res;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp17fn58g9.java:33: error: variable l is already defined in method\
    \ wordsInSentence(String)\n            int l = x.length();\n                ^\n\
    /tmp/tmp17fn58g9.java:39: error: variable l is already defined in method wordsInSentence(String)\n\
    \            int l = mp.get(x);\n                ^\n2 errors\n"
  stdout: ''
  timestamp: 1660010471
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String result = \"\";\n        if (sentence == null) return result;\n\
    \        String[] arr = sentence.split(\" \");\n        Map<Character, Integer>\
    \ map = new HashMap<>();\n        for (String str : arr) {\n            char[]\
    \ c = str.toCharArray();\n            for (int i = 0; i < c.length; i++) {\n \
    \               if (!Character.isLetter(c[i])) continue;\n                int\
    \ count = map.get(c[i]);\n                if (count == null) map.put(c[i], 1);\n\
    \                else map.put(c[i], count + 1);\n            }\n        }\n  \
    \      List<Character> list = map.keySet().stream().sorted(Comparator.comparingInt(map\
    \ ::get)).collect(Collectors.toList());\n        for (Character c : list) {\n\
    \            if (map.get(c) > 0) continue;\n            result += c;\n       \
    \ }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmc98bneb.java:33: error: bad operand types for binary operator\
    \ '=='\n                if (count == null) map.put(c[i], 1);\n               \
    \           ^\n  first type:  int\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1660010472
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // Write your code here\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplqozb8fq.java:25: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010472
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        char[] chars = sentence.toCharArray();\n        StringBuilder result\
    \ = new StringBuilder();\n        for (char ch : chars) {\n            if (Character.isLetter(ch))\
    \ {\n                String word = String.valueOf(ch);\n                boolean\
    \ isPrime = true;\n                for (int i = 2; i <= Character.getNumericValue(ch);\
    \ i++) {\n                    if (Character.getNumericValue(ch) % i == 0) {\n\
    \                        isPrime = false;\n                        break;\n  \
    \                  }\n                }\n                if (isPrime) {\n    \
    \                result.append(word);\n                }\n            }\n    \
    \    }\n        return result.toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5_i71b_b.java:44)\n"
  stdout: ''
  timestamp: 1660010473
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        char[] chars = sentence.toCharArray();\n        Arrays.sort(chars);\n\
    \        List<String> list = Arrays.stream(chars).map(String::valueOf).collect(Collectors.toList());\n\
    \        StringBuilder sb = new StringBuilder();\n        boolean prime = true;\n\
    \        int index = 0;\n        while (prime && index < list.length) {\n    \
    \        prime = isPrime(list.get(index));\n            index++;\n        }\n\
    \        list.forEach(s -> {\n            if (isPrime(s))\n                prime\
    \ = true;\n            if (!prime)\n                sb.append(s);\n        });\n\
    \        return sb.toString();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy7r00qw9.java:26: error: no suitable method found for stream(char[])\n\
    \        List<String> list = Arrays.stream(chars).map(String::valueOf).collect(Collectors.toList());\n\
    \                                  ^\n    method Arrays.<T#1>stream(T#1[]) is\
    \ not applicable\n      (inference variable T#1 has incompatible bounds\n    \
    \    equality constraints: char\n        lower bounds: Object)\n    method Arrays.<T#2>stream(T#2[],int,int)\
    \ is not applicable\n      (cannot infer type-variable(s) T#2\n        (actual\
    \ and formal argument lists differ in length))\n    method Arrays.stream(int[])\
    \ is not applicable\n      (argument mismatch; char[] cannot be converted to int[])\n\
    \    method Arrays.stream(long[]) is not applicable\n      (argument mismatch;\
    \ char[] cannot be converted to long[])\n    method Arrays.stream(double[]) is\
    \ not applicable\n      (argument mismatch; char[] cannot be converted to double[])\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object declared in method\
    \ <T#1>stream(T#1[])\n    T#2 extends Object declared in method <T#2>stream(T#2[],int,int)\n\
    /tmp/tmpy7r00qw9.java:30: error: cannot find symbol\n        while (prime && index\
    \ < list.length) {\n                                    ^\n  symbol:   variable\
    \ length\n  location: variable list of type List<String>\n/tmp/tmpy7r00qw9.java:31:\
    \ error: cannot find symbol\n            prime = isPrime(list.get(index));\n \
    \                   ^\n  symbol:   method isPrime(String)\n  location: class Problem\n\
    /tmp/tmpy7r00qw9.java:35: error: cannot find symbol\n            if (isPrime(s))\n\
    \                ^\n  symbol:   method isPrime(String)\n  location: class Problem\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n4 errors\n"
  stdout: ''
  timestamp: 1660010472
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] s = sentence.split(\" \");\n        List<String> results = new\
    \ ArrayList<>();\n        for (String word : s) {\n            if (!isPrime(word.length()))\
    \ {\n                results.add(word);\n            }\n        }\n        return\
    \ results.get(0);\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppdppewje.java:27: error: cannot find symbol\n            if (!isPrime(word.length()))\
    \ {\n                 ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010472
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        Stack<Character> stack = new Stack<Character>();\n        StringBuilder\
    \ result = new StringBuilder();\n        for(char c : sentence.toCharArray()){\n\
    \            if(c == ' ' || Character.isLetter(c)){\n                while(!stack.isEmpty()){\n\
    \                    char popped = stack.pop();\n                    result.append(popped);\n\
    \                }\n                stack.add(c);\n            }\n        }\n\
    \        while(!stack.isEmpty()){\n            char popped = stack.pop();\n  \
    \          result.append(popped);\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl37jx69k.java:42)\n"
  stdout: ''
  timestamp: 1660010473
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        StringBuilder sb = new\
    \ StringBuilder();\n        for (String word : words) {\n            if (Integer.parseInt(word.toString().length())\
    \ == 1) {\n                sb.append(word);\n            } else if (Integer.parseInt(word.toString().length())\
    \ == 2) {\n                sb.append(word);\n            }\n        }\n      \
    \  return sb.toString();\n    }\n    public static void main(String[] args) {\n\
    \    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptoy0ym13.java:27: error: incompatible types: int cannot be converted\
    \ to String\n            if (Integer.parseInt(word.toString().length()) == 1)\
    \ {\n                                                       ^\n/tmp/tmptoy0ym13.java:29:\
    \ error: incompatible types: int cannot be converted to String\n            }\
    \ else if (Integer.parseInt(word.toString().length()) == 2) {\n              \
    \                                                ^\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660010472
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // Your code here\n        int result = 0;\n        int len = sentence.length();\n\
    \        String str = \"\";\n        ArrayList<String> words = new ArrayList<String>();\n\
    \        for (int i = 0; i < len; i++) {\n            char c = sentence.charAt(i);\n\
    \            if (Character.isLetter(c)) {\n                words.add(String.valueOf(c));\n\
    \            }\n        }\n        for (int i = 0; i < len; i++) {\n         \
    \   int count = 0;\n            for (int j = 0; j < words.size(); j++) {\n   \
    \             if (i == j) {\n                    count++;\n                }\n\
    \            }\n            if (count == 1) {\n                String t = words.get(j);\n\
    \                if (t.length() == 3) {\n                    str = new StringBuilder(t).reverse().toString();\n\
    \                }\n                else {\n                    str = t;\n   \
    \             }\n                result = Integer.parseInt(str);\n           \
    \     break;\n            }\n        }\n        char[] cs = new char[result];\n\
    \        for (int i = 0; i < result; i++) {\n            cs[i] = '0';\n      \
    \  }\n        for (int i = 0; i < len; i++) {\n            int count = 0;\n  \
    \          for (int j = 0; j < words.size(); j++) {\n                if (i ==\
    \ j) {\n                    count++;\n                }\n            }\n     \
    \       if (count == 1) {\n                String t = words.get(j);\n        \
    \        cs[Integer.parseInt(t)] = ' ';\n            }\n        }\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < len; i++) {\n       \
    \     sb.append(cs[i]);\n        }\n        return sb.toString();\n    }\n   \
    \ public static void main(String[] args) {\n    assert(wordsInSentence((\"This\
    \ is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz89jwtuu.java:43: error: cannot find symbol\n                String\
    \ t = words.get(j);\n                                     ^\n  symbol:   variable\
    \ j\n  location: class Problem\n/tmp/tmpz89jwtuu.java:66: error: cannot find symbol\n\
    \                String t = words.get(j);\n                                  \
    \   ^\n  symbol:   variable j\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660010472
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        if (sentence.length() == 0)\n            return \"\";\n\n        String[]\
    \ splitted = sentence.split(\" \");\n\n        Set<Integer> primes = new HashSet<Integer>();\n\
    \        List<String> result = new ArrayList<>();\n\n        for (int i = 0; i\
    \ < splitted.length; i++) {\n            boolean isPrime = true;\n           \
    \ for (int j = 0; j < splitted.length; j++) {\n                if (i % splitted[j]\
    \ == 0) {\n                    isPrime = false;\n                    break;\n\
    \                }\n            }\n            if (isPrime) {\n              \
    \  primes.add(i);\n                result.add(splitted[i]);\n            }\n \
    \       }\n\n        List<Integer> primeList = new ArrayList<Integer>();\n\n \
    \       primeList.addAll(primes);\n        Collections.sort(primeList);\n\n  \
    \      StringBuilder builder = new StringBuilder();\n        for (Integer prime\
    \ : primeList) {\n            builder.append(result.subList(prime, prime + 1).get(0)).append(\"\
    \ \");\n        }\n\n        return builder.toString();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbd7xig8q.java:35: error: bad operand types for binary operator\
    \ '%'\n                if (i % splitted[j] == 0) {\n                      ^\n\
    \  first type:  int\n  second type: String\n1 error\n"
  stdout: ''
  timestamp: 1660010473
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<Integer> lengths\
    \ = words.stream()\n                                .map(String::length)\n   \
    \                             .collect(toList());\n        List<String> result\
    \ = new ArrayList<>();\n        for(int i : lengths) {\n            if (isPrime(i))\
    \ {\n                result.add(words[lengths.indexOf(i)]);\n            }\n \
    \       }\n        return result.stream().collect(Collectors.joining(\" \"));\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyre0rvsf.java:25: error: cannot find symbol\n        List<Integer>\
    \ lengths = words.stream()\n                                     ^\n  symbol:\
    \   method stream()\n  location: variable words of type String[]\n/tmp/tmpyre0rvsf.java:27:\
    \ error: cannot find symbol\n                                .collect(toList());\n\
    \                                         ^\n  symbol:   method toList()\n  location:\
    \ class Problem\n/tmp/tmpyre0rvsf.java:30: error: cannot find symbol\n       \
    \     if (isPrime(i)) {\n                ^\n  symbol:   method isPrime(int)\n\
    \  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660010473
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        //Your code here\n        if (sentence.length() < 2) {\n            return\
    \ \"\";\n        }\n        \n        List<String> result = new ArrayList<>();\n\
    \        \n        for (String words : sentence.split(\" \")) {\n            if\
    \ (words.matches(\"[a-zA-Z]+\")) {\n                String string = words + \"\
    \ \";\n                for (int i = 0; i < string.length(); i++) {\n         \
    \           for (int j = i; j < string.length(); j++) {\n                    \
    \    if (j == i) {\n                            continue;\n                  \
    \      }\n                        for (int k = 0; k < j; k++) {\n            \
    \                if (string.charAt(k) != string.charAt(j)) {\n               \
    \                 String tmp = string.substring(i, j+1);\n                   \
    \             result.add(tmp);\n                                break;\n     \
    \                       }\n                        }\n                    }\n\
    \                }\n            }\n        }\n        \n        StringBuilder\
    \ strBuilder = new StringBuilder();\n        \n        for (String s : result)\
    \ {\n            strBuilder.append(s);\n            strBuilder.append(\" \");\n\
    \        }\n        \n        String ans = strBuilder.toString();\n        return\
    \ ans;\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvptch5r_.java:62)\n"
  stdout: ''
  timestamp: 1660010473
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        boolean isPrime = false;\n        ArrayList<String> words = new ArrayList<>();\n\
    \        \n        try (BufferedReader reader = new BufferedReader(new FileReader(\"\
    /usr/share/dict/words\"));) {\n            String word;\n            while ((word\
    \ = reader.readLine()) != null) {\n                String originalWord = word.toUpperCase();\n\
    \                StringTokenizer st = new StringTokenizer(word, \"\\n\");\n  \
    \              int length = st.countTokens();\n                for (String letter\
    \ : st.nextToken()) {\n                    for (String word : sentence.split(\"\
    \ \")) {\n                        if (letter.toUpperCase().equals(word.toUpperCase()))\
    \ {\n                            if (isPrime) {\n                            \
    \    words.add(word);\n                            }\n                       \
    \     break;\n                        }\n                    }\n             \
    \   }\n            }\n            \n            for (String word : words) {\n\
    \                for (int i = 2; i <= Math.sqrt(word.length()); i++) {\n     \
    \               if (isPrime) {\n                        break;\n             \
    \       }\n                    if (word.indexOf(String.valueOf(i), 0) >= 0) {\n\
    \                        isPrime = true;\n                        break;\n   \
    \                 }\n                }\n                if (!isPrime) {\n    \
    \                break;\n                }\n            }\n        } catch (FileNotFoundException\
    \ e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n\
    \            e.printStackTrace();\n        }\n        \n        StringBuilder\
    \ sb = new StringBuilder();\n        \n        for (String word : words) {\n \
    \           sb.append(word).append(\" \");\n        }\n        return sb.toString().trim();\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnjrm2ro0.java:33: error: for-each not applicable to expression\
    \ type\n                for (String letter : st.nextToken()) {\n             \
    \                                    ^\n  required: array or java.lang.Iterable\n\
    \  found:    String\n/tmp/tmpnjrm2ro0.java:34: error: variable word is already\
    \ defined in method wordsInSentence(String)\n                    for (String word\
    \ : sentence.split(\" \")) {\n                                ^\n/tmp/tmpnjrm2ro0.java:45:\
    \ error: variable word is already defined in method wordsInSentence(String)\n\
    \            for (String word : words) {\n                        ^\n3 errors\n"
  stdout: ''
  timestamp: 1660010473
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        if (sentence == null || sentence.isEmpty()) {\n            return \"\"\
    ;\n        }\n\n        Stack<Integer> stack = new Stack<>();\n\n        for (int\
    \ i = 0; i < sentence.length(); i++) {\n            char ch = sentence.charAt(i);\n\
    \            if (isPrime(ch)) {\n                while (stack.size() != 0 && isPrime(stack.peek()))\
    \ {\n                    stack.pop();\n                }\n                stack.push(ch);\n\
    \            }\n        }\n\n        return String.join(\" \", stack.stream().mapToInt(Integer::intValue).toArray());\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwmfcppuz.java:32: error: cannot find symbol\n            if (isPrime(ch))\
    \ {\n                ^\n  symbol:   method isPrime(char)\n  location: class Problem\n\
    /tmp/tmpwmfcppuz.java:33: error: cannot find symbol\n                while (stack.size()\
    \ != 0 && isPrime(stack.peek())) {\n                                         \
    \   ^\n  symbol:   method isPrime(Integer)\n  location: class Problem\n/tmp/tmpwmfcppuz.java:36:\
    \ error: incompatible types: char cannot be converted to Integer\n           \
    \     stack.push(ch);\n                           ^\n/tmp/tmpwmfcppuz.java:40:\
    \ error: no suitable method found for join(String,int[])\n        return String.join(\"\
    \ \", stack.stream().mapToInt(Integer::intValue).toArray());\n               \
    \      ^\n    method String.join(CharSequence,CharSequence...) is not applicable\n\
    \      (varargs mismatch; int[] cannot be converted to CharSequence)\n    method\
    \ String.join(CharSequence,Iterable<? extends CharSequence>) is not applicable\n\
    \      (argument mismatch; int[] cannot be converted to Iterable<? extends CharSequence>)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n4 errors\n"
  stdout: ''
  timestamp: 1660010473
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        Set<Integer> set = new HashSet<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (int i = 0; i < words.length; i++) {\n            int currentLength\
    \ = words[i].length();\n            if (set.add(currentLength)) {\n          \
    \      if (set.size() > 1) {\n                    return \"No solution\";\n  \
    \              }\n            }\n        }\n        return \"\";\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1lf4f317.java:37)\n"
  stdout: ''
  timestamp: 1660010473
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        ArrayList<String> wordsInNewOrder\
    \ = new ArrayList<String>();\n        for (String word : words) {\n          \
    \  Integer number = new Integer(word.length());\n            if (number == 3)\
    \ {\n                wordsInNewOrder.add(word);\n            }\n        }\n  \
    \      return wordsInNewOrder.stream().collect(Collectors.joining(\" \"));\n \
    \   }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpme0tr_jf.java:35)\n"
  stdout: ''
  timestamp: 1660010473
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words =\n                sentence.split(\" \");\n        List<String>\
    \ newWords = new ArrayList<>();\n        boolean prime = true;\n        for (String\
    \ word : words) {\n            int wordLength = word.length();\n            if\
    \ (prime) {\n                prime = false;\n                if (wordLength >\
    \ 1) {\n                    prime = true;\n                } else {\n        \
    \            newWords.add(word);\n                }\n            } else {\n  \
    \              if (wordLength == 2) {\n                    newWords.add(word);\n\
    \                } else {\n                    String lastWord = words.lastElement();\n\
    \                    if (word.equals(lastWord)) {\n                        newWords.add(word);\n\
    \                    } else {\n                        boolean isPrime = true;\n\
    \                        for (int i = 2; i <= Math.sqrt(wordLength); i++) {\n\
    \                            if (wordLength % i == 0) {\n                    \
    \            isPrime = false;\n                            }\n               \
    \         }\n                        if (isPrime) {\n                        \
    \    newWords.add(word);\n                        }\n                    }\n \
    \               }\n            }\n        }\n        StringBuilder wordList =\
    \ new StringBuilder();\n        for (String word : newWords) {\n            wordList.append(word);\n\
    \        }\n        return wordList.toString();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzr22nfa6.java:41: error: cannot find symbol\n                 \
    \   String lastWord = words.lastElement();\n                                 \
    \          ^\n  symbol:   method lastElement()\n  location: variable words of\
    \ type String[]\n1 error\n"
  stdout: ''
  timestamp: 1660010473
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String newString = \"\";\n        String[] wordsArray = sentence.split(\"\
    \ \");\n        List<String> words = new ArrayList<>();\n        for (String str\
    \ : wordsArray) {\n            words.add(str);\n        }\n        List<Integer>\
    \ primeNumbers = new ArrayList<>();\n        for (int i = 0; i < words.size();\
    \ i++) {\n            primeNumbers.add(i);\n        }\n        System.out.println(primeNumbers);\n\
    \        StringBuilder results = new StringBuilder();\n        for (Integer i:\
    \ primeNumbers) {\n            if (words.get(i).length() > 1) {\n            \
    \    if (results.isEmpty()) {\n                    results.append(words.get(i));\n\
    \                } else {\n                    results.append(\" \" + words.get(i));\n\
    \                }\n            }\n        }\n        return results;\n    }\n\
    \    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo2a2n5_7.java:45: error: incompatible types: StringBuilder cannot\
    \ be converted to String\n        return results;\n               ^\n1 error\n"
  stdout: ''
  timestamp: 1660010473
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] strings = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<String>();\n        for (int i = 0; i < strings.length; i++)\
    \ {\n            int count = 0;\n            while (strings[i].length() > 1) {\n\
    \                strings[i] = strings[i].substring(0, strings[i].length() - 1);\n\
    \                count += strings[i].length();\n                i++;\n       \
    \     }\n            if (strings[i].length() > 1) {\n                result.add(strings[i]);\n\
    \            }\n            if (count == strings[i].length()) {\n            \
    \    result.add(strings[i]);\n            }\n        }\n        return result.stream().collect(Collectors.toList()).toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 4 out of bounds for length 4\n\tat Problem.wordsInSentence(tmpasd1x63c.java:28)\n\
    \tat Problem.main(tmpasd1x63c.java:43)\n"
  stdout: ''
  timestamp: 1660010473
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        Set<String> words = new HashSet<>();\n        for (String word : sentence.split(\"\
    \ \")) {\n            words.add(word);\n        }\n        ArrayList<String> wordsSet\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (word.length()\
    \ > 1) {\n                boolean isPrime = true;\n                for (Character\
    \ c : word.toCharArray()) {\n                    if (Character.getNumericValue(c)\
    \ < 2 || Character.getNumericValue(c) > charCount(word)) {\n                 \
    \       isPrime = false;\n                        break;\n                   \
    \ }\n                }\n                if (isPrime) {\n                    wordsSet.add(word);\n\
    \                }\n            }\n        }\n        StringBuilder result = new\
    \ StringBuilder();\n        for (String word : wordsSet) {\n            result.append(word).append(\"\
    \ \");\n        }\n        return result.toString();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7h8newvv.java:33: error: cannot find symbol\n                 \
    \   if (Character.getNumericValue(c) < 2 || Character.getNumericValue(c) > charCount(word))\
    \ {\n                                                                        \
    \                   ^\n  symbol:   method charCount(String)\n  location: class\
    \ Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010473
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> results = new ArrayList<String>();\n        String[] words\
    \ = sentence.split(\" \");\n        for (String word : words) {\n            int\
    \ prime = 1;\n            boolean isPrime = true;\n            for (int i = 0;\
    \ i < word.length(); i++) {\n                int currentChar = word.charAt(i);\n\
    \                int nextChar = (i + 1) < word.length() ? word.charAt(i + 1) :\
    \ ' ';\n                boolean isNextCharPrime = true;\n                for (int\
    \ j = 1; j < word.length(); j++) {\n                    int currentChar2 = word.charAt(j);\n\
    \                    if (currentChar2 == nextChar)\n                        isNextCharPrime\
    \ = false;\n                }\n                isPrime = isPrime && isNextCharPrime;\n\
    \            }\n            if (isPrime) {\n                results.add(word);\n\
    \            }\n        }\n        return results.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoe0k9xpw.java:47)\n"
  stdout: ''
  timestamp: 1660010473
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words;\n        char[] sentenceArray;\n        int wordLength;\n\
    \        int sentenceArrayIndex;\n        String newSent;\n\n        words = sentence.split(\"\
    \ \");\n\n        sentenceArray = sentence.toCharArray();\n        sentenceArrayIndex\
    \ = 0;\n\n        while (sentenceArrayIndex < sentenceArray.length / 2) {\n  \
    \          for (wordLength = 1; wordLength <= words[sentenceArrayIndex].length();\
    \ wordLength++) {\n                int isPrime = 1;\n                for (int\
    \ i = 2; i <= Math.sqrt(wordLength); i++) {\n                    if (wordLength\
    \ % i == 0) {\n                        isPrime = 0;\n                        break;\n\
    \                    }\n                }\n                if (isPrime == 1) {\n\
    \                    newSent = newSent + \" \" + words[sentenceArrayIndex];\n\
    \                }\n            }\n            sentenceArrayIndex++;\n       \
    \ }\n\n        return newSent;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo8iej9r7.java:45: error: variable newSent might not have been initialized\n\
    \                    newSent = newSent + \" \" + words[sentenceArrayIndex];\n\
    \                              ^\n/tmp/tmpo8iej9r7.java:51: error: variable newSent\
    \ might not have been initialized\n        return newSent;\n               ^\n\
    2 errors\n"
  stdout: ''
  timestamp: 1660010473
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        return null;\n    }\n    public static void main(String[] args) {\n \
    \   assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.wordsInSentence(String)\"\
    \ is null\n\tat Problem.main(tmp58byv689.java:27)\n"
  stdout: ''
  timestamp: 1660010318
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // Your code goes here\n        List<String> result = new ArrayList<>();\n\
    \        char[] c = sentence.toCharArray();\n        int n = sentence.length();\n\
    \        int k = 0;\n        for (int i = 0; i < n; i++) {\n            for (int\
    \ j = i + 1; j < n; j++) {\n                if (isPrime(Math.abs(j - i))) {\n\
    \                    boolean same = true;\n                    for (int n = j;\
    \ n < n; n++) {\n                        if (Math.abs(n - i) > 1) {\n        \
    \                    same = false;\n                            break;\n     \
    \                   }\n                    }\n                    if (same) {\n\
    \                        k = i;\n                        break;\n            \
    \        }\n                }\n            }\n            result.add(sentence.substring(i\
    \ + 1, k + 1));\n        }\n        return new StringJoiner(\" \").join(result);\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpccmqo26f.java:31: error: cannot find symbol\n                if\
    \ (isPrime(Math.abs(j - i))) {\n                    ^\n  symbol:   method isPrime(int)\n\
    \  location: class Problem\n/tmp/tmpccmqo26f.java:33: error: variable n is already\
    \ defined in method wordsInSentence(String)\n                    for (int n =\
    \ j; n < n; n++) {\n                             ^\n/tmp/tmpccmqo26f.java:47:\
    \ error: cannot find symbol\n        return new StringJoiner(\" \").join(result);\n\
    \                                    ^\n  symbol:   method join(List<String>)\n\
    \  location: class StringJoiner\n3 errors\n"
  stdout: ''
  timestamp: 1660010473
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        int[] primeNumbers = new int[sentence.length()+1];\n        for(int i\
    \ = 0; i < primeNumbers.length; i++) {\n            primeNumbers[i]=1;\n     \
    \   }\n        for(int i = 0; i <primeNumbers.length; i++) {\n            for(int\
    \ j = 1; i*j <primeNumbers.length; j++){\n                if(primeNumbers[i]==1){\n\
    \                    if(primeNumbers[i*j]+1==primeNumbers.length){\n         \
    \               primeNumbers[i*j]=primeNumbers[i*j]+1;\n                     \
    \   break;\n                    }\n                }\n            }\n        }\n\
    \        for(int i = 0; i <primeNumbers.length; i++) {\n            if(primeNumbers[i]!=sentence.length())\
    \ {\n                return null;\n            }\n        }\n        return Arrays.stream(sentence.split(\"\
    \ \"))\n                .map(word -> word.length() == primeNumbers[word.length()]\
    \ ? word : null)\n                .filter(Objects::nonNull)\n                .collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660010478
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        char[] ch = sentence.toCharArray();\n        Arrays.sort(ch);\n     \
    \   int n = ch.length;\n        String result = \"\";\n        boolean flag =\
    \ false;\n        for (int i = 0; i < n; i++) {\n            for (int j = 1; j\
    \ <= n - i; j++) {\n                if (ch[j] == ch[j - 1]) {\n              \
    \      flag = true;\n                    break;\n                }\n         \
    \       if (!flag) {\n                    result = result + ch[j];\n         \
    \           break;\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpminqaoo4.java:44)\n"
  stdout: ''
  timestamp: 1660010473
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // Your code here\n        return null;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.wordsInSentence(String)\"\
    \ is null\n\tat Problem.main(tmpjtlhy724.java:28)\n"
  stdout: ''
  timestamp: 1660010322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        Map<String, Integer> dict = new HashMap<>();\n        for (String word\
    \ : sentence.split(\" \"))\n            dict.putIfAbsent(word, 0);\n        StringBuilder\
    \ newSentence = new StringBuilder();\n        for (String word : dict.keySet())\
    \ {\n            if (dict.containsKey(word)) {\n                newSentence.append(word);\n\
    \                dict.put(word, dict.get(word) + 1);\n            }\n        }\n\
    \        return newSentence.toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpskv69tj2.java:37)\n"
  stdout: ''
  timestamp: 1660010474
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String result = \"\";\n        String[] strs = sentence.split(\" \");\n\
    \        List<String> list = Arrays.asList(strs);\n        Set<String> set = new\
    \ HashSet<>(list);\n        boolean prime = true;\n        boolean duplicate =\
    \ false;\n        Set<String> set2 = new HashSet<>();\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (String string : set) {\n            int\
    \ count = list.stream().filter(s -> s.equals(string)).count();\n            if\
    \ (count > 1) {\n                duplicate = true;\n            }\n          \
    \  if (!(count == 1 && string.equals(list.get(0)))) {\n                prime =\
    \ false;\n            }\n        }\n        if (prime) {\n            for (String\
    \ string : set) {\n                if (!duplicate) {\n                    set2.add(string);\n\
    \                    sb.append(string + \" \");\n                }\n         \
    \   }\n        }\n        if (prime) {\n            result = sb.toString().trim().replace(\"\
    \ \", \"\");\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqjjhn_oo.java:33: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int count = list.stream().filter(s -> s.equals(string)).count();\n\
    \                                                                         ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010474
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        ArrayList arrayList = new ArrayList();\n        String[] strArray = sentence.split(\"\
    \ \");\n        int flag = 0;\n        for(int i=0;i<strArray.length;i++) {\n\
    \            if(strArray[i].length()>1 && strArray[i].length()%3!=0) {\n     \
    \           arrayList.add(strArray[i]);\n            }\n        }\n        for(int\
    \ i=0;i<arrayList.size();i++) {\n            String word = new String();\n   \
    \         word = arrayList.get(i);\n            for(int j=0;j<strArray.length;j++)\
    \ {\n                if(strArray[j].length()==word.length() && word.equals(strArray[j]))\
    \ {\n                    flag=1;\n                }\n            }\n        }\n\
    \        if(flag==1) {\n            return arrayList.toString();\n        } else\
    \ {\n            return null;\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7pecyeqo.java:34: error: incompatible types: Object cannot be converted\
    \ to String\n            word = arrayList.get(i);\n                          \
    \      ^\nNote: /tmp/tmp7pecyeqo.java uses unchecked or unsafe operations.\nNote:\
    \ Recompile with -Xlint:unchecked for details.\n1 error\n"
  stdout: ''
  timestamp: 1660010474
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] wordsArray = sentence.split(\" \");\n        List<String> wordsList\
    \ = new ArrayList<String>();\n        for (String word: wordsArray) {\n      \
    \      try {\n                Long.parseLong(word);\n            } catch (NumberFormatException\
    \ e) {\n                wordsList.add(word);\n            }\n        }\n     \
    \   Arrays.sort(wordsList, String.CASE_INSENSITIVE_ORDER);\n        String[] result\
    \ = new String[wordsList.size()];\n        int i = 0;\n        for (String word:\
    \ wordsList) {\n            result[i++] = word;\n        }\n        return Arrays.toString(result);\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc6lvgt6a.java:33: error: no suitable method found for sort(List<String>,Comparator<String>)\n\
    \        Arrays.sort(wordsList, String.CASE_INSENSITIVE_ORDER);\n            \
    \  ^\n    method Arrays.<T#1>sort(T#1[],Comparator<? super T#1>) is not applicable\n\
    \      (cannot infer type-variable(s) T#1\n        (argument mismatch; List<String>\
    \ cannot be converted to T#1[]))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660010474
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String newString = sentence;\n        \n        int count = 0;\n    \
    \    \n        for(int i = 0; i < newString.length(); i++){\n            \n  \
    \          if (Character.isLetter(newString.charAt(i)) == true){\n           \
    \     count++;\n            }\n            \n            if (count == 2) {\n \
    \               \n                String firstWord = newString.substring(0, newString.indexOf(\"\
    \ \"));\n                String secondWord = newString.substring(newString.indexOf(\"\
    \ \"), newString.indexOf(\" \")).trim();\n                \n                System.out.println(firstWord);\n\
    \                System.out.println(secondWord);\n                \n         \
    \       String fullString = firstWord + secondWord;\n                \n      \
    \          newString = fullString;\n            }\n        }\n        \n     \
    \   \n        return newString;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq6slug5o.java:52)\n"
  stdout: 'This


    '
  timestamp: 1660010474
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        //return wordsThatArePrimes(sentence.length());\n        HashSet<String>\
    \ primeWords = new HashSet<>();\n        for(int i = 0; i < sentence.length();\
    \ i++){\n            int wordLength = i;\n            while(wordLength >= 2 &&\
    \ isPrime(wordLength)){\n                primeWords.add(sentence.substring(i,wordLength));\n\
    \                wordLength -= 1;\n            }\n        }\n        return primeWords.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp03o2agp3.java:28: error: cannot find symbol\n            while(wordLength\
    \ >= 2 && isPrime(wordLength)){\n                                     ^\n  symbol:\
    \   method isPrime(int)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010474
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        int[] primeLength = new int[10];\n        Arrays.fill(primeLength, 2);\n\
    \        LinkedList<Integer> primeLengthList = new LinkedList<>();\n        ArrayList<Integer>\
    \ wordLengths = new ArrayList<>();\n\n        for(String word : sentence.split(\"\
    \ \")){\n            int length = word.length();\n            wordLengths.add(length);\n\
    \            if(primeLength[length] == 2){\n                primeLengthList.add(length);\n\
    \            }\n            int index = primeLengthList.indexOf(length);\n   \
    \         primeLength[index] ++;\n        }\n\n        StringBuilder result =\
    \ new StringBuilder(sentence);\n        for(int length : wordLengths){\n     \
    \       if(!primeLengthList.contains(length)){\n                result.deleteCharAt(result.length()\
    \ - 1);\n            }\n        }\n        return result.toString();\n    }\n\
    \    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index -1 out of bounds for length 10\n\tat Problem.wordsInSentence(tmpg5b4cq9e.java:36)\n\
    \tat Problem.main(tmpg5b4cq9e.java:48)\n"
  stdout: ''
  timestamp: 1660010474
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        char[] sentenceAsCharArray = sentence.toCharArray();\n        Arrays.sort(sentenceAsCharArray);\n\
    \        String ret = \"\";\n        for (int i = 0; i < sentenceAsCharArray.length;\
    \ i++) {\n            if (Math.sqrt(sentenceAsCharArray.length + 1) - Math.sqrt(i)\
    \ > 2) {\n                ret += sentenceAsCharArray[i];\n            }\n    \
    \    }\n        return ret;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmoh7v1wk.java:35)\n"
  stdout: ''
  timestamp: 1660010474
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        StringBuilder sb = new StringBuilder();\n        for(String s : sentence.split(\"\
    \ \")){\n            int n = s.length();\n            if(n<2 || n>100){\n    \
    \            continue;\n            }\n            for(int i = 1; i <= n; i++){\n\
    \                int temp = 0;\n                for(int j = 1; j < i; j++){\n\
    \                    if(s.charAt(i - j) != s.charAt(i)) temp++;\n            \
    \    }\n                if(temp == i){\n                    sb.append(s);\n  \
    \                  break;\n                }\n            }\n        }\n     \
    \   return sb.toString();\n    }\n    public static void main(String[] args) {\n\
    \    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: 4\n\tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\
    \tat java.base/java.lang.String.charAt(String.java:1515)\n\tat Problem.wordsInSentence(tmpwsttn7m1.java:33)\n\
    \tat Problem.main(tmpwsttn7m1.java:44)\n"
  stdout: ''
  timestamp: 1660010474
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        Scanner sc = new Scanner(sentence);\n        ArrayList<Integer> primes\
    \ = new ArrayList<>();\n        primes.add(2);\n        int n = sc.nextInt();\n\
    \        sc.nextLine();\n        for (int i = 0; i < n; i++) {\n            int\
    \ n = sc.nextInt();\n            if (n % 2 == 0) primes.add(i);\n            sc.nextLine();\n\
    \        }\n        String ans = \"\";\n        for (int i = 0; i < n; i++) {\n\
    \            int num = sc.nextInt();\n            sc.nextLine();\n           \
    \ if (num % 2 == 0) {\n                int n = sc.nextInt();\n               \
    \ for (int k = 0; k < n; k++) {\n                    int d = sc.nextInt();\n \
    \                   if (d % 2 != 0) {\n                        primes.add(d);\n\
    \                    }\n                }\n                for (int j = 0; j <\
    \ primes.size(); j++) {\n                    if (primes.get(j) > num) {\n    \
    \                    break;\n                    }\n                }\n      \
    \          primes.remove(primes.size() - 1);\n                ans += String.valueOf(num);\n\
    \                for (int j = 0; j < primes.size(); j++) {\n                 \
    \   if (j < primes.size() - 1) {\n                        ans += \" \" + String.valueOf(primes.get(j));\n\
    \                    }\n                }\n                ans += \" \";\n   \
    \         }\n        }\n        return ans;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hjrm19r.java:30: error: variable n is already defined in method\
    \ wordsInSentence(String)\n            int n = sc.nextInt();\n               \
    \ ^\n/tmp/tmp6hjrm19r.java:39: error: variable n is already defined in method\
    \ wordsInSentence(String)\n                int n = sc.nextInt();\n           \
    \         ^\n2 errors\n"
  stdout: ''
  timestamp: 1660010474
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // split words by space\n        String[] wordsArray = sentence.split(\"\
    \ \");\n        Map<Character, Integer> countMap = new HashMap<>();\n        //\
    \ iterate every word\n        for (String word: wordsArray) {\n            //\
    \ find word length\n            int wordLength = word.length();\n            //\
    \ if word length is prime\n            if (wordLength % 2 == 0) {\n          \
    \      // if word is not in countMap, add it with its count 1\n              \
    \  if (!countMap.containsKey(word.charAt(0))) {\n                    countMap.put(word.charAt(0),\
    \ 1);\n                } else {\n                    // if word in countMap, increment\
    \ its count\n                    countMap.put(word.charAt(0), countMap.get(word.charAt(0))\
    \ + 1);\n                }\n            }\n        }\n        // prepare result\
    \ string\n        StringBuilder result = new StringBuilder();\n        // iterate\
    \ every key of countMap\n        for (Map.Entry<Character, Integer> entry : countMap.entrySet())\
    \ {\n            // prepare word with its count\n            String word = entry.getKey()\
    \ + \"\" + entry.getValue();\n            // append word to result\n         \
    \   result.append(word).append(\" \");\n        }\n        // return result string\n\
    \        return result.toString().trim();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp22m1kmsm.java:55)\n"
  stdout: ''
  timestamp: 1660010474
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        StringBuilder res = new StringBuilder();\n        char[] letters = sentence.toCharArray();\n\
    \        for (int i = 0; i < letters.length - 1; i++) {\n            String next\
    \ = letters[i];\n            String prev = letters[i + 1];\n            int nextLength\
    \ = next.length();\n            int prevLength = prev.length();\n            if\
    \ (prevLength == 1 && (prevLength + nextLength == 1\n                || next.equalsIgnoreCase(prev.substring(1)))\n\
    \                || nextLength > prevLength\n                || nextLength ==\
    \ prevLength && next.equalsIgnoreCase(prev.substring(0, 1)))\n               \
    \ res.append(next);\n        }\n        return res.toString();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkbozhy4p.java:27: error: incompatible types: char cannot be converted\
    \ to String\n            String next = letters[i];\n                         \
    \        ^\n/tmp/tmpkbozhy4p.java:28: error: incompatible types: char cannot be\
    \ converted to String\n            String prev = letters[i + 1];\n           \
    \                      ^\n2 errors\n"
  stdout: ''
  timestamp: 1660010474
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> words = new ArrayList<>();\n        String[] splitted =\
    \ sentence.split(\" \");\n        for (String s : splitted) {\n            if\
    \ (isValid(s, words)) {\n                words.add(s);\n            }\n      \
    \  }\n\n        StringBuilder result = new StringBuilder();\n        for (String\
    \ s : words) {\n            result.append(s);\n            result.append(' ');\n\
    \        }\n        return result.toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdcmko6hm.java:27: error: cannot find symbol\n            if (isValid(s,\
    \ words)) {\n                ^\n  symbol:   method isValid(String,List<String>)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010474
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        int size = sentence.length();\n        String result = \"\";\n      \
    \  for(int i = 0; i < size; i++){\n            int value = sentence.length() -\
    \ 1;\n            String tmp = Integer.toString(value);\n            String word\
    \ = sentence.substring(i,i + 1);\n            if(isPrimeNumber(word.length()))\
    \ {\n                result = result + word + \" \";\n            }\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2dcvlu0c.java:30: error: cannot find symbol\n            if(isPrimeNumber(word.length()))\
    \ {\n               ^\n  symbol:   method isPrimeNumber(int)\n  location: class\
    \ Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010474
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        IntStream.range(2, words.length).forEach(x\
    \ -> {\n            boolean flag = true;\n            for (int i = 0; i < words.length;\
    \ i++) {\n                if (words[i].length() != x) {\n                    flag\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (flag)\n                System.out.println(words[i]);\n        });\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnwbelf7z.java:34: error: cannot find symbol\n                System.out.println(words[i]);\n\
    \                                         ^\n  symbol:   variable i\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010474
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> words2\
    \ = Arrays.asList(words);\n        List<String> sortedWords = words2.stream().sorted().collect(Collectors.toList());\n\
    \        List<String> primes = words2.stream().filter(w -> wString.isPrime(w)).collect(Collectors.toList());\n\
    \        List<String> finalWords = sortedWords.stream().filter(p -> primes.contains(p)).collect(Collectors.toList());\n\
    \        return finalWords.toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkuyuxm52.java:27: error: cannot find symbol\n        List<String>\
    \ primes = words2.stream().filter(w -> wString.isPrime(w)).collect(Collectors.toList());\n\
    \                                                          ^\n  symbol:   variable\
    \ wString\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010474
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        StringBuilder result = new StringBuilder();\n        List<String> words=\
    \ Arrays.asList(sentence.split(\" \"));\n        List<Integer> resultList = words.stream().filter(w->w.length()>=1\
    \ && w.length()<=100).map(w->Integer.valueOf(w)).filter(w->isPrime(w)).collect(Collectors.toList());\n\
    \        words.stream().filter(w->w.length()>=1 && w.length()<=100).map(w->Integer.valueOf(w)).filter(w->isPrime(w)).forEach(resultList::add);\n\
    \        resultList=resultList.stream().distinct().collect(Collectors.toList());\n\
    \        words.stream().filter(w->w.length()>=1 && w.length()<=100).map(w->Integer.valueOf(w)).filter(w->isPrime(w)).forEach(resultList::add);\n\
    \        resultList=resultList.stream().distinct().collect(Collectors.toList());\n\
    \        result.setLength(0);\n        result.append(resultList);\n        System.out.println(result.stream().distinct().collect(Collectors.toList()));\n\
    \        return result.toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9ghc44ug.java:26: error: cannot find symbol\n        List<Integer>\
    \ resultList = words.stream().filter(w->w.length()>=1 && w.length()<=100).map(w->Integer.valueOf(w)).filter(w->isPrime(w)).collect(Collectors.toList());\n\
    \                                                                            \
    \                                                       ^\n  symbol:   method\
    \ isPrime(Integer)\n  location: class Problem\n/tmp/tmp9ghc44ug.java:27: error:\
    \ cannot find symbol\n        words.stream().filter(w->w.length()>=1 && w.length()<=100).map(w->Integer.valueOf(w)).filter(w->isPrime(w)).forEach(resultList::add);\n\
    \                                                                            \
    \                            ^\n  symbol:   method isPrime(Integer)\n  location:\
    \ class Problem\n/tmp/tmp9ghc44ug.java:29: error: cannot find symbol\n       \
    \ words.stream().filter(w->w.length()>=1 && w.length()<=100).map(w->Integer.valueOf(w)).filter(w->isPrime(w)).forEach(resultList::add);\n\
    \                                                                            \
    \                            ^\n  symbol:   method isPrime(Integer)\n  location:\
    \ class Problem\n/tmp/tmp9ghc44ug.java:33: error: cannot find symbol\n       \
    \ System.out.println(result.stream().distinct().collect(Collectors.toList()));\n\
    \                                 ^\n  symbol:   method stream()\n  location:\
    \ variable result of type StringBuilder\n4 errors\n"
  stdout: ''
  timestamp: 1660010474
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<Integer> primes\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                primes.add(word.length());\n            }\n        }\n  \
    \      String[] primeStr = new String[primes.size()];\n        for (int i = 0;\
    \ i < primes.size(); i++) {\n            primeStr[i] = words[primes.get(i)];\n\
    \        }\n        Arrays.sort(primeStr);\n        return Arrays.toString(primeStr);\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8b14ocxa.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010474
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String res = \"\";\n        if (sentence == null || sentence.isEmpty())\
    \ {\n            return \"\";\n        }\n        List<String> arr = Arrays.asList(sentence.split(\"\
    \ \"));\n        Collections.sort(arr);\n        IntStream.rangeClosed(2, arr.size()\
    \ - 1).forEach(i -> {\n            if (isPrime(arr.get(i))) {\n              \
    \  res += arr.get(i);\n            }\n        });\n        return res;\n    }\n\
    \    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptq27eogh.java:31: error: cannot find symbol\n            if (isPrime(arr.get(i)))\
    \ {\n                ^\n  symbol:   method isPrime(String)\n  location: class\
    \ Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010474
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        Set<String> set = new HashSet<String>();\n        String output = \"\"\
    ;\n        String[] splits = sentence.split(\" \");\n        for(String s : splits)\
    \ {\n            System.out.println(s);\n            set.add(s);\n        }\n\
    \        int k = 1;\n        for(String s : set) {\n            if(s.length()\
    \ == k) {\n                output = output + \" \" + s;\n            }\n     \
    \   }\n        return output;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp18c0r58a.java:40)\n"
  stdout: 'This

    is

    a

    test

    '
  timestamp: 1660010475
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // Your code goes here\n        List<String> wordsList = Arrays.stream(sentence.split(\"\
    \ \")).map(String::toUpperCase).collect(Collectors.toList());\n        List<Integer>\
    \ list = new ArrayList<>(wordsList.size());\n        for (String word : wordsList)\
    \ {\n            int len = word.length();\n            list.add((int)Math.sqrt(len));\n\
    \        }\n        List<Integer> result = new ArrayList<>(wordsList.size());\n\
    \        int maxLen = wordsList.stream().max(Comparator.comparingInt(Integer::intValue)).orElse(-1);\n\
    \        for (String word : wordsList) {\n            if (list.get(word.length())\
    \ == maxLen) {\n                result.add(word);\n            }\n        }\n\
    \        return result.stream().collect(Collectors.joining(\" \"));\n    }\n \
    \   public static void main(String[] args) {\n    assert(wordsInSentence((\"This\
    \ is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp30772s0c.java:32: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        int maxLen = wordsList.stream().max(Comparator.comparingInt(Integer::intValue)).orElse(-1);\n\
    \                                       ^\n    lower bounds: Integer,Object\n\
    \    lower bounds: String\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>comparingInt(ToIntFunction<? super T>)\n/tmp/tmp30772s0c.java:35:\
    \ error: incompatible types: String cannot be converted to Integer\n         \
    \       result.add(word);\n                           ^\n/tmp/tmp30772s0c.java:38:\
    \ error: no suitable method found for collect(Collector<CharSequence,CAP#1,String>)\n\
    \        return result.stream().collect(Collectors.joining(\" \"));\n        \
    \                      ^\n    method Stream.<R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super Integer>,BiConsumer<R#1,R#1>) is not applicable\n      (cannot infer type-variable(s)\
    \ R#1\n        (actual and formal argument lists differ in length))\n    method\
    \ Stream.<R#2,A>collect(Collector<? super Integer,A,R#2>) is not applicable\n\
    \      (cannot infer type-variable(s) R#2,A\n        (argument mismatch; Collector<CharSequence,CAP#2,String>\
    \ cannot be converted to Collector<? super Integer,A,R#2>))\n  where R#1,T,R#2,A\
    \ are type-variables:\n    R#1 extends Object declared in method <R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super T>,BiConsumer<R#1,R#1>)\n    T extends Object declared in interface Stream\n\
    \    R#2 extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \    A extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \  where CAP#1,CAP#2 are fresh type-variables:\n    CAP#1 extends Object from\
    \ capture of ?\n    CAP#2 extends Object from capture of ?\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1660010474
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> words = new ArrayList<>();\n        for(int i = 0; i < sentence.length();\
    \ i++){\n            String currentWord = sentence.substring(i, i+1);\n      \
    \      if(isPrime(currentWord.length())){\n                words.add(currentWord);\n\
    \            }\n        }\n        String returnString = \"\";\n        for(int\
    \ i = 0; i < words.size(); i++){\n            returnString += words.get(i);\n\
    \        }\n        return returnString;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptibz3mhl.java:27: error: cannot find symbol\n            if(isPrime(currentWord.length())){\n\
    \               ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010475
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        Set<String> words = splitWords(sentence);\n        HashMap<String, Integer>\
    \ map = new HashMap<>();\n        for (String s : words) {\n            int cnt\
    \ = map.get(s);\n            if (cnt == null) map.put(s, 1);\n            else\
    \ map.put(s, cnt + 1);\n        }\n        List<String> output = new ArrayList<>();\n\
    \        for (String s : map.keySet()) {\n            if (map.get(s) > 2) {\n\
    \                output.add(s);\n            }\n        }\n        return output.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyq3np7xw.java:24: error: cannot find symbol\n        Set<String>\
    \ words = splitWords(sentence);\n                            ^\n  symbol:   method\
    \ splitWords(String)\n  location: class Problem\n/tmp/tmpyq3np7xw.java:28: error:\
    \ bad operand types for binary operator '=='\n            if (cnt == null) map.put(s,\
    \ 1);\n                    ^\n  first type:  int\n  second type: <null>\n2 errors\n"
  stdout: ''
  timestamp: 1660010475
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        char[] charArray = sentence.toCharArray();\n        Arrays.sort(charArray);\n\
    \        StringBuilder builder = new StringBuilder();\n        boolean flag =\
    \ false;\n        int index = 0;\n        while (!flag) {\n            int prime\
    \ = 1;\n            while (true) {\n                if (charArray[index] == '\\\
    0') {\n                    flag = true;\n                    break;\n        \
    \        }\n                if (charArray[index] % prime != 0) {\n           \
    \         flag = true;\n                    break;\n                }\n      \
    \          prime++;\n                index++;\n            }\n            if (index\
    \ > 1) {\n                builder.append(charArray[index - 1]);\n            \
    \    builder.append(\" \");\n            }\n        }\n        return builder.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfxxl6aho.java:51)\n"
  stdout: ''
  timestamp: 1660010475
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> words = Arrays.stream(sentence.split(\" \"))\n         \
    \       .filter(s -> !s.equals(\"\"))\n                .map(String::toUpperCase)\n\
    \                .collect(toList());\n        Set<Integer> primes = words.stream()\n\
    \                .map(String::length)\n                .filter(l -> l > 1)\n \
    \               .collect(toSet());\n\n        String[] result = new String[primes.size()];\n\
    \        int index = 0;\n        boolean checkPrime = true;\n        while (!checkPrime\
    \ && primes.contains(Integer.valueOf(words.size()))) {\n            for (String\
    \ word : words) {\n                for (int i = word.length() - 1; i >= 0; i--)\
    \ {\n                    if (Character.isLetter(word.charAt(i))) {\n         \
    \               String temp = word.substring(0, i + 1);\n                    \
    \    primes.remove(Integer.valueOf(temp).intValue());\n                    }\n\
    \                }\n            }\n            checkPrime = true;\n          \
    \  for (int prime : primes) {\n                for (int i = 0; i < prime; i++)\
    \ {\n                    if (prime % words.size() == 0) {\n                  \
    \      result[index] = words.get(prime / words.size());\n                    \
    \    checkPrime = false;\n                    }\n                }\n         \
    \   }\n            index++;\n        }\n        return Arrays.toString(result);\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp35gqkh2w.java:27: error: cannot find symbol\n                .collect(toList());\n\
    \                         ^\n  symbol:   method toList()\n  location: class Problem\n\
    /tmp/tmp35gqkh2w.java:31: error: cannot find symbol\n                .collect(toSet());\n\
    \                         ^\n  symbol:   method toSet()\n  location: class Problem\n\
    2 errors\n"
  stdout: ''
  timestamp: 1660010475
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        int len = 1;\n        LinkedList<String> list = new LinkedList<>();\n\
    \        while (list.size() <= 100 && len <= 100) {\n            if (list.isEmpty()\
    \ || list.get(list.size() - 1).length() > len) {\n                list.add(String.valueOf(len));\n\
    \            }\n            for (String s : sentence.split(\" \")) {\n       \
    \         if (list.isEmpty() || list.get(list.size() - 1).length() > s.length())\
    \ {\n                    list.add(s);\n                }\n            }\n    \
    \        len++;\n        }\n        return list;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv2ydyzxh.java:37: error: incompatible types: LinkedList<String>\
    \ cannot be converted to String\n        return list;\n               ^\n1 error\n"
  stdout: ''
  timestamp: 1660010475
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        if (sentence.length() <= 0) {\n            return \"\";\n        }\n\
    \        char[] array = sentence.toCharArray();\n        ArrayList<Character>\
    \ newList = new ArrayList<Character>();\n        ArrayList<Character> oldList\
    \ = new ArrayList<Character>();\n        for (int i = 0; i < array.length; i++)\
    \ {\n            char c = array[i];\n            if (!Character.isLetter(c)) {\n\
    \                continue;\n            }\n            oldList.add(c);\n     \
    \   }\n        Collections.sort(oldList);\n        int length = oldList.size();\n\
    \        int maxLength = 2;\n        while (length > maxLength) {\n          \
    \  for (int i = maxLength; i < length && oldList.contains(oldList.get(i)); i++)\
    \ {\n                newList.add(oldList.get(i));\n            }\n           \
    \ oldList.removeAll(Collections.singleton(newList));\n            length--;\n\
    \            maxLength++;\n        }\n        String result = \"\";\n        for\
    \ (Character cn : oldList) {\n            result += cn + \" \";\n        }\n \
    \       return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8h557a6t.java:55)\n"
  stdout: ''
  timestamp: 1660010475
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        Set<String> wordsInSentence = new HashSet<>();\n        // Your code\
    \ goes here\n        String[] words=sentence.split(\" \");\n        for(String\
    \ word : words) {\n            int len = (int) Math.ceil(Math.sqrt(word.length()));\n\
    \            String a = wordsInSentence.stream().filter(w -> w.length()==len).collect(Collectors.joining(\"\
    \ \"));\n            wordsInSentence.add(word);\n        }\n        String[] a2\
    \ = new String[wordsInSentence.size()];\n        a2 = wordsInSentence.toArray(a2);\n\
    \        String b=\"\";\n        for (int i=0;i<a2.length;i++) {\n           \
    \ b+=a2[i]+\" \";\n        }\n        return b;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3gwc4c2k.java:41)\n"
  stdout: ''
  timestamp: 1660010476
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // write your code here\n        try{\n            String[] strings =\
    \ sentence.split(\" \");\n            List<String> result = new ArrayList<>();\n\
    \            Set<String> primeNums = new HashSet<>();\n            for(String\
    \ s: strings){\n                if(primeNums.contains(s.trim())){\n          \
    \          continue;\n                }\n                StringBuilder b = new\
    \ StringBuilder();\n                for(int i = 0; i < s.length(); i++){\n   \
    \                 b.append(s.charAt(i));\n                }\n                int\
    \ length = b.length();\n                if(length == 2 || length == 3){\n    \
    \                primeNums.add(b.toString());\n                    result.add(b.toString());\n\
    \                }\n            }\n            StringBuilder builder = new StringBuilder();\n\
    \            for (String s : result) {\n                for (int i = 0; i < s.length();\
    \ i++) {\n                    builder.append(s.charAt(i));\n                }\n\
    \            }\n            return builder.toString();\n        }catch(Exception\
    \ e){\n            e.printStackTrace();\n        }\n        return null;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp87wbpaq0.java:57)\n"
  stdout: ''
  timestamp: 1660010475
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        ArrayList <String> arrayList = new ArrayList <>();\n        StringBuilder\
    \ words = new StringBuilder();\n\n        for (int i = 0; i < sentence.length();\
    \ i++) {\n            if (Character.isLetter(sentence.charAt(i))) {\n        \
    \        String wordToAdd = sentence.substring(i);\n                String finalWord\
    \ = wordToAdd.trim();\n\n                if (isPrime(finalWord.length())) {\n\
    \                    words.append(finalWord);\n                    arrayList.add(finalWord);\n\
    \                }\n            }\n        }\n        return words.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpof97gruo.java:32: error: cannot find symbol\n                if\
    \ (isPrime(finalWord.length())) {\n                    ^\n  symbol:   method isPrime(int)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010475
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            result.add(word);\n \
    \       }\n        Collections.sort(result);\n        int n = result.size();\n\
    \        for (int i = 0; i <= n; i++) {\n            Collections.sort(result);\n\
    \            String str = result.get(n - i - 1);\n            for (int j = 2;\
    \ j <= n / j; j++) {\n                if (j % i == 0) {\n                    str\
    \ = result.get(n - i - j) + str;\n                }\n            }\n         \
    \   result.add(n - i - 1, str);\n        }\n        String str = \"\";\n     \
    \   for (String s : result) {\n            str = s + str;\n        }\n       \
    \ return str;\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArithmeticException: / by zero\n\
    \tat Problem.wordsInSentence(tmpzrikw7zn.java:35)\n\tat Problem.main(tmpzrikw7zn.java:48)\n"
  stdout: ''
  timestamp: 1660010476
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // Your code goes here\n        StringBuilder sb = new StringBuilder();\n\
    \        for(String word : sentence.split(\" \")){\n            if(!sb.toString().contains(word))\n\
    \                sb.append(word);\n        }\n        return sb.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp604lew3g.java:33)\n"
  stdout: ''
  timestamp: 1660010475
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        if (sentence.matches(\"[a-zA-Z]+\")) {\n            int[] array = getPrimes(sentence);\n\
    \            return getWords(array, sentence);\n        }\n        return null;\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8l9eh7n0.java:25: error: cannot find symbol\n            int[]\
    \ array = getPrimes(sentence);\n                          ^\n  symbol:   method\
    \ getPrimes(String)\n  location: class Problem\n/tmp/tmp8l9eh7n0.java:26: error:\
    \ cannot find symbol\n            return getWords(array, sentence);\n        \
    \           ^\n  symbol:   method getWords(int[],String)\n  location: class Problem\n\
    2 errors\n"
  stdout: ''
  timestamp: 1660010475
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        int[] primes = new int[26];\n        int primesIndex = 0;\n        String\
    \ result = \"\";\n        StringBuilder builder = new StringBuilder();\n     \
    \   List<String> list = new ArrayList<String>();\n        String[] stringArray\
    \ = sentence.split(\" \");\n        for (String string : stringArray) {\n    \
    \        list.add(string);\n        }\n        for (int i = 0; i < list.size();\
    \ i++) {\n            String str = list.get(i);\n            int lengthOfString\
    \ = str.length();\n            for (int j = str.length(); j > 0; j--) {\n    \
    \            if (j % 2 == 0) {\n                    continue;\n              \
    \  } else {\n                    primesIndex++;\n                    primes[primesIndex]\
    \ = j;\n                }\n            }\n            for (int j = primesIndex\
    \ - 1; j >= 0; j--) {\n                if (primes[j] == lengthOfString) {\n  \
    \                  result = result + \" \" + str;\n                    break;\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmmjy_h6i.java:54)\n"
  stdout: ''
  timestamp: 1660010476
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        Map<String, Integer> result = new HashMap<>();\n        String[] words\
    \ = sentence.split(\" \");\n        for (String word : words) {\n            if\
    \ (result.containsKey(word)) {\n                result.put(word, result.get(word)\
    \ + 1);\n            } else {\n                result.put(word, 1);\n        \
    \    }\n        }\n        List<String> result = new ArrayList<>(result.keySet());\n\
    \        Collections.sort(result);\n        String res = \"\";\n        for (int\
    \ i = 0; i < result.size(); i++) {\n            if (result.get(i) % 2 == 0) {\n\
    \                res += result.get(i);\n            }\n        }\n        return\
    \ res;\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8obvm6as.java:33: error: variable result is already defined in\
    \ method wordsInSentence(String)\n        List<String> result = new ArrayList<>(result.keySet());\n\
    \                     ^\n/tmp/tmp8obvm6as.java:33: error: cannot find symbol\n\
    \        List<String> result = new ArrayList<>(result.keySet());\n           \
    \                                         ^\n  symbol:   method keySet()\n  location:\
    \ variable result of type List<String>\n/tmp/tmp8obvm6as.java:37: error: bad operand\
    \ types for binary operator '%'\n            if (result.get(i) % 2 == 0) {\n \
    \                             ^\n  first type:  String\n  second type: int\n3\
    \ errors\n"
  stdout: ''
  timestamp: 1660010475
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String words = \"\";\n        for(String word: sentence.split(\" \"))\
    \ {\n            int length = word.length();\n            int prime = 1;\n   \
    \         for(int i = 1; i < length; i++) {\n                if(i != length &&\
    \ word.charAt(i) >= 'a' && word.charAt(i) <= 'z') {\n                    prime\
    \ = prime * i;\n                }\n            }\n            if(prime == length)\
    \ {\n                words += \" \" + word;\n            }\n        }\n      \
    \  return words.substring(2);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpawd5ws0m.java:40)\n"
  stdout: ''
  timestamp: 1660010476
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // splitting the sentence to create a list of words\n        String[]\
    \ arr = sentence.split(\" \");\n        List<String> list = new ArrayList<>();\n\
    \        // iterate through the list of words and check\n        // if they are\
    \ prime numbers and add to a new list\n        for (String str: arr) {\n     \
    \       if (!str.isEmpty()) {\n                for (int i = 2; i < str.length();\
    \ i++) {\n                    if (!str.substring(i, i + 1).equals(\"0\") && !str.substring(i,\
    \ i + 1).equals(\"1\") && !str.substring(i, i + 1).equals(\"2\") && !str.substring(i,\
    \ i + 1).equals(\"3\") && !str.substring(i, i + 1).equals(\"4\") && !str.substring(i,\
    \ i + 1).equals(\"5\") && !str.substring(i, i + 1).equals(\"6\") && !str.substring(i,\
    \ i + 1).equals(\"7\") && !str.substring(i, i + 1).equals(\"8\") && !str.substring(i,\
    \ i + 1).equals(\"9\")) {\n                        list.add(str);\n          \
    \          }\n                }\n            }\n        }\n        // iterating\
    \ through the new list of primes\n        // and creating a string\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (String s: list) {\n            sb.append(s);\n\
    \        }\n        return sb.toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfl0yniw9.java:47)\n"
  stdout: ''
  timestamp: 1660010476
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String wordsInSentence = Arrays.stream(sentence.split(\" \"))\n     \
    \           .filter(word -> word.length() > 1 && \"a\" <= word.charAt(0) && word.charAt(0)\
    \ <= \"z\")\n                .collect(Collectors.joining(\" \"));\n        \n\
    \        // return wordsInSentence;\n        \n        PriorityQueue<Integer>\
    \ pq = new PriorityQueue<>(wordsInSentence.length(), Comparator.comparingInt(String::length));\n\
    \        \n        Arrays.stream(sentence.split(\" \"))\n                .filter(word\
    \ -> word.length() > 1 && \"a\" <= word.charAt(0) && word.charAt(0) <= \"z\")\n\
    \                .forEach(word -> {\n                    if (pq.isEmpty() || !pq.peek().equals(word.length()))\
    \ {\n                        pq.add(word.length());\n                    }\n \
    \                   pq.poll();\n                });\n\n        return pq.poll();\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsnt5x20h.java:25: error: bad operand types for binary operator\
    \ '<='\n                .filter(word -> word.length() > 1 && \"a\" <= word.charAt(0)\
    \ && word.charAt(0) <= \"z\")\n                                              \
    \           ^\n  first type:  String\n  second type: char\n/tmp/tmpsnt5x20h.java:25:\
    \ error: bad operand types for binary operator '<='\n                .filter(word\
    \ -> word.length() > 1 && \"a\" <= word.charAt(0) && word.charAt(0) <= \"z\")\n\
    \                                                                            \
    \                 ^\n  first type:  char\n  second type: String\n/tmp/tmpsnt5x20h.java:30:\
    \ error: incompatible types: cannot infer type arguments for PriorityQueue<>\n\
    \        PriorityQueue<Integer> pq = new PriorityQueue<>(wordsInSentence.length(),\
    \ Comparator.comparingInt(String::length));\n                                \
    \                     ^\n    reason: inference variable E has incompatible bounds\n\
    \      equality constraints: Integer\n      lower bounds: T,String,Object\n  where\
    \ E,T are type-variables:\n    E extends Object declared in class PriorityQueue\n\
    \    T extends Object declared in method <T>comparingInt(ToIntFunction<? super\
    \ T>)\n/tmp/tmpsnt5x20h.java:33: error: bad operand types for binary operator\
    \ '<='\n                .filter(word -> word.length() > 1 && \"a\" <= word.charAt(0)\
    \ && word.charAt(0) <= \"z\")\n                                              \
    \           ^\n  first type:  String\n  second type: char\n/tmp/tmpsnt5x20h.java:33:\
    \ error: bad operand types for binary operator '<='\n                .filter(word\
    \ -> word.length() > 1 && \"a\" <= word.charAt(0) && word.charAt(0) <= \"z\")\n\
    \                                                                            \
    \                 ^\n  first type:  char\n  second type: String\n/tmp/tmpsnt5x20h.java:41:\
    \ error: incompatible types: Integer cannot be converted to String\n        return\
    \ pq.poll();\n                      ^\n6 errors\n"
  stdout: ''
  timestamp: 1660010476
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // Convert sentence to array of words\n        String[] words = sentence.split(\"\
    \ \");\n        // Return the words\n        return wordsInSentence(words);\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp05arvn7v.java:27: error: incompatible types: String[] cannot be\
    \ converted to String\n        return wordsInSentence(words);\n              \
    \                 ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660010475
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] strArr = sentence.split(\" \");\n        List<String> strList\
    \ = Arrays.asList(strArr);\n        List<String> retList = Arrays.asList(new String[strList.size()]);\n\
    \        for(int i = 0; i < strList.size(); i++){\n            List<String> newList\
    \ = Arrays.asList(new String[strList.size()]);\n            for(int j = 0; j <\
    \ strList.size(); j++){\n                if(i != j){\n                    newList.add(strList.get(i));\n\
    \                    newList.add(strList.get(j));\n                }\n       \
    \         for(int k = 0; k < strList.size(); k++){\n                    if(k ==\
    \ i){\n                        if(strList.get(k).equals(strList.get(k+1))){\n\
    \                            newList.add(strList.get(k));\n                  \
    \          newList.add(strList.get(k+1));\n                        }\n       \
    \             }\n                    if(k == j){\n                        if(strList.get(k).equals(strList.get(k-1))){\n\
    \                            newList.add(strList.get(k));\n                  \
    \          newList.add(strList.get(k-1));\n                        }\n       \
    \             }\n                }\n            }\n            for(int l = 0;\
    \ l < newList.size(); l++){\n                if(retList.contains(newList.get(l))){\n\
    \                    retList.remove(strList.get(i));\n                    retList.remove(strList.get(j));\n\
    \                }\n            }\n        }\n        return String.join(\" \"\
    , retList);\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6iskog7k.java:52: error: cannot find symbol\n                 \
    \   retList.remove(strList.get(j));\n                                        \
    \       ^\n  symbol:   variable j\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010476
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // TODO: Implement me!\n        \n        return \"\";\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7w4x8aj4.java:29)\n"
  stdout: ''
  timestamp: 1660010476
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> words = new ArrayList<>(Arrays.asList(sentence.split(\"\
    \ \")));\n        List<String> result = new ArrayList<>();\n        boolean prime\
    \ = true;\n        for (int i = 0; i < words.size(); i++) {\n            if (prime\
    \ == true) {\n                prime = false;\n                break;\n       \
    \     } else {\n                result.add(words.get(i));\n            }\n   \
    \     }\n        Collections.sort(result);\n        return result;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(wordsInSentence((\"This\
    \ is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpykq448ql.java:36: error: incompatible types: List<String> cannot\
    \ be converted to String\n        return result;\n               ^\n1 error\n"
  stdout: ''
  timestamp: 1660010476
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> words = new ArrayList<String>();\n        // Split sentence\
    \ by space to get individual words\n        String[] splitted = sentence.split(\"\
    \ \");\n        for (String s : splitted) {\n            // Check if word is a\
    \ valid number\n            if (s.matches(\"\\\\d+\")) {\n                words.add(s);\n\
    \            }\n        }\n\n        // Return the list of prime numbers in the\
    \ list\n        List<Integer> primeNumbers = new ArrayList<>();\n        // Check\
    \ if there are any primes in the list\n        if (words.size() > 0) {\n     \
    \       for (String s : words) {\n                primeNumbers.add(Integer.valueOf(s));\n\
    \            }\n            Arrays.sort(primeNumbers);\n            for (Integer\
    \ p : primeNumbers) {\n                if (p.equals(1)) {\n                  \
    \  continue;\n                }\n                if (p.equals(words.size())) {\n\
    \                    return null;\n                }\n                boolean\
    \ isPrime = true;\n                for (int i = 2; i <= Math.sqrt(words.size());\
    \ i++) {\n                    if (p % i == 0) {\n                        isPrime\
    \ = false;\n                        break;\n                    }\n          \
    \      }\n                if (isPrime) {\n                    return String.join(\"\
    \ \", words);\n                }\n            }\n        }\n\n        return null;\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpin3ahmly.java:41: error: no suitable method found for sort(List<Integer>)\n\
    \            Arrays.sort(primeNumbers);\n                  ^\n    method Arrays.sort(int[])\
    \ is not applicable\n      (argument mismatch; List<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; List<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; List<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; List<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; List<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; List<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; List<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; List<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660010476
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String result = \"\";\n        String[] splitted = sentence.split(\"\
    \ \");\n        for (String s : splitted) {\n            if (s.matches(\"[a-zA-Z]+\"\
    )) {\n                result += s;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsbr6pcdm.java:34)\n"
  stdout: ''
  timestamp: 1660010476
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // write your code here\n        int n = wordsInSentence(sentence, 0);\n\
    \        System.out.println(\"n = \" + n);\n        return String.join(\" \",\
    \ wordsInSentence(sentence, n).stream().toArray(String[]::new));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdp2e3j5e.java:25: error: method wordsInSentence in class Problem\
    \ cannot be applied to given types;\n        int n = wordsInSentence(sentence,\
    \ 0);\n                ^\n  required: String\n  found:    String,int\n  reason:\
    \ actual and formal argument lists differ in length\n/tmp/tmpdp2e3j5e.java:27:\
    \ error: method wordsInSentence in class Problem cannot be applied to given types;\n\
    \        return String.join(\" \", wordsInSentence(sentence, n).stream().toArray(String[]::new));\n\
    \                                ^\n  required: String\n  found:    String,int\n\
    \  reason: actual and formal argument lists differ in length\n2 errors\n"
  stdout: ''
  timestamp: 1660010476
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        ArrayList<String> words = new ArrayList<String>(Arrays.asList(sentence.split(\"\
    \ \")));\n        ArrayList<String> result = new ArrayList<String>();\n      \
    \  for (int i = 0; i < words.size(); i++) {\n            String word = words.get(i);\n\
    \            if (isPrime(word.length())) {\n                result.add(word);\n\
    \            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpul8y_104.java:28: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010476
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        //TODO implement this function\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkl4l8fwl.java:25: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010476
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // write your code here\n        String[] arr = sentence.split(\" \"\
    );\n        for(int i = 0;i<arr.length; i++){\n            int len = getPrime(arr[i].length());\n\
    \            if(len == arr[i].length()){\n                for(int j =0;j<len;\
    \ j++){\n                    if(arr[i].charAt(j) != ' ' && arr[i].charAt(j) !=\
    \ '\\n' && arr[i].charAt(j) != '\\r' && arr[i].charAt(j) != '\\t' && arr[i].charAt(j)\
    \ != '\\v'){\n                        if(arr[i].charAt(j) != arr[j].charAt(j)){\n\
    \                            arr[i] = arr[i]+\" \"+arr[j];\n                 \
    \       }\n                    }\n                }\n            }\n        }\n\
    \        return String.join(\" \", arr);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa7d6ok27.java:30: error: illegal escape character\n           \
    \         if(arr[i].charAt(j) != ' ' && arr[i].charAt(j) != '\\n' && arr[i].charAt(j)\
    \ != '\\r' && arr[i].charAt(j) != '\\t' && arr[i].charAt(j) != '\\v'){\n     \
    \                                                                            \
    \                                                                           ^\n\
    /tmp/tmpa7d6ok27.java:30: error: unclosed character literal\n                \
    \    if(arr[i].charAt(j) != ' ' && arr[i].charAt(j) != '\\n' && arr[i].charAt(j)\
    \ != '\\r' && arr[i].charAt(j) != '\\t' && arr[i].charAt(j) != '\\v'){\n     \
    \                                                                            \
    \                                                                         ^\n\
    /tmp/tmpa7d6ok27.java:30: error: unclosed character literal\n                \
    \    if(arr[i].charAt(j) != ' ' && arr[i].charAt(j) != '\\n' && arr[i].charAt(j)\
    \ != '\\r' && arr[i].charAt(j) != '\\t' && arr[i].charAt(j) != '\\v'){\n     \
    \                                                                            \
    \                                                                            ^\n\
    3 errors\n"
  stdout: ''
  timestamp: 1660010476
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        ArrayList <Integer> lengths = new ArrayList<Integer>();\n        ArrayList\
    \ <String> words = new ArrayList<String>();\n        char[] strArray = sentence.toCharArray();\n\
    \        Arrays.stream(strArray).forEach((char) -> (strArray));\n        for(char\
    \ c : strArray) {\n            if(!Character.isLetter(c)) {\n                return\
    \ \"NO\";\n            }\n            if(Character.isLetter(c)) {\n          \
    \      if(c == '.') {\n                    return;\n                }\n      \
    \          String s = \"\";\n                while(strArray[c] != '.') {\n   \
    \                 s = s + strArray[c];\n                    c++;\n           \
    \     }\n                lengths.add(s.length());\n                words.add(s);\n\
    \            }\n        }\n        if(lengths.size() == 0) {\n            return\
    \ \"NO\";\n        }\n        if(lengths.size() == 1) {\n            return words.get(0);\n\
    \        }\n        Collections.sort(lengths);\n        int maxLength = 0;\n \
    \       for(int i : lengths) {\n            if(maxLength < i) {\n            \
    \    maxLength = i;\n            }\n        }\n        String newWords = \"\"\
    ;\n        for(String s : words) {\n            int count = 0;\n            int\
    \ start = 0;\n            int end = maxLength;\n            while(start < end)\
    \ {\n                if(s.length() == (end - start)) {\n                    count++;\n\
    \                    start = start + maxLength;\n                }\n         \
    \       else {\n                    count--;\n                    end = end -\
    \ maxLength;\n                }\n            }\n            if(count == 0) {\n\
    \                newWords = newWords + s + \" \";\n            }\n        }\n\
    \        return newWords.trim();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7ixwajpj.java:27: error: illegal start of expression\n        Arrays.stream(strArray).forEach((char)\
    \ -> (strArray));\n                                               ^\n/tmp/tmp7ixwajpj.java:27:\
    \ error: not a statement\n        Arrays.stream(strArray).forEach((char) -> (strArray));\n\
    \                                                   ^\n/tmp/tmp7ixwajpj.java:27:\
    \ error: ';' expected\n        Arrays.stream(strArray).forEach((char) -> (strArray));\n\
    \                                                           ^\n3 errors\n"
  stdout: ''
  timestamp: 1660010476
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdkrbquvy.java:27)\n"
  stdout: ''
  timestamp: 1660010318
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<String>();\n        boolean isPrime\
    \ = false;\n        int n = sentence.length();\n        for (int i = 0; i < n;\
    \ i++) {\n            char c = sentence.charAt(i);\n            if (Character.isLetter(c))\
    \ {\n                boolean isPrime2 = true;\n                for (int k = i\
    \ + 1; k < n; k++) {\n                    char d = sentence.charAt(k);\n     \
    \               if (Character.isLetter(d))\n                        isPrime2 &=\
    \ ((c - d) % k == 0); // check if d is dividable by k\n                    else\n\
    \                        isPrime2 = false;\n                }\n              \
    \  if (!isPrime2) {\n                    result.add(c);\n                }\n \
    \           }\n        }\n        return result.stream().map(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp7glf2jq.java:39: error: incompatible types: char cannot be converted\
    \ to String\n                    result.add(c);\n                            \
    \   ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660010476
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] strArr = sentence.split(\" \");\n        String[] resArr = new\
    \ String[strArr.length];\n        Arrays.sort(strArr);\n        for(int i = 0;\
    \ i< strArr.length; i++){\n            boolean found = false;\n            for(int\
    \ j = 0; j < resArr.length; j++){\n                if(strArr[i].length()==resArr[j].length()){\n\
    \                    if(strArr[i].equals(resArr[j])){\n                      \
    \  found = true;\n                    }\n                }\n            }\n  \
    \          if(!found){\n                resArr.length+=1;\n                resArr.push(strArr[i]);\n\
    \            }\n        }\n        return Arrays.stream(resArr).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjolgboxm.java:37: error: cannot assign a value to final variable\
    \ length\n                resArr.length+=1;\n                      ^\n/tmp/tmpjolgboxm.java:38:\
    \ error: cannot find symbol\n                resArr.push(strArr[i]);\n       \
    \               ^\n  symbol:   method push(String)\n  location: variable resArr\
    \ of type String[]\n2 errors\n"
  stdout: ''
  timestamp: 1660010477
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // split sentence into words\n        String[] words = sentence.split(\"\
    \ \");\n        // map each word to its length\n        Map<Integer, Integer>\
    \ wordLengths = Arrays.stream(words).collect(toMap(word -> word.length(), word\
    \ -> word.length()));\n        // filter out words that aren't prime length\n\
    \        Map<Integer, Integer> primes = wordLengths.entrySet().stream().filter(e\
    \ -> e.getValue() % 2 == 0).collect(toMap(e -> e.getKey(), e -> e.getValue()));\n\
    \        \n        \n        \n        return primes.entrySet().stream().filter(e\
    \ -> e.getValue() % 2 != 0).collect(joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4pdscs8w.java:27: error: cannot find symbol\n        Map<Integer,\
    \ Integer> wordLengths = Arrays.stream(words).collect(toMap(word -> word.length(),\
    \ word -> word.length()));\n                                                 \
    \                        ^\n  symbol:   method toMap((word)->wo[...]gth(),(word)->wo[...]gth())\n\
    \  location: class Problem\n/tmp/tmp4pdscs8w.java:29: error: cannot find symbol\n\
    \        Map<Integer, Integer> primes = wordLengths.entrySet().stream().filter(e\
    \ -> e.getValue() % 2 == 0).collect(toMap(e -> e.getKey(), e -> e.getValue()));\n\
    \                                                                            \
    \                                      ^\n  symbol:   method toMap((e)->e.getKey(),(e)->e.getValue())\n\
    \  location: class Problem\n/tmp/tmp4pdscs8w.java:33: error: cannot find symbol\n\
    \        return primes.entrySet().stream().filter(e -> e.getValue() % 2 != 0).collect(joining(\"\
    \ \"));\n                                                                    \
    \                 ^\n  symbol:   method joining(String)\n  location: class Problem\n\
    3 errors\n"
  stdout: ''
  timestamp: 1660010477
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        return null;\n    }\n    public static void main(String[] args) {\n \
    \   assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.wordsInSentence(String)\"\
    \ is null\n\tat Problem.main(tmp58byv689.java:27)\n"
  stdout: ''
  timestamp: 1660010318
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        ArrayList<Integer> lengths = new ArrayList<>();\n        char[] chars\
    \ = sentence.toCharArray();\n        for (char c : chars) {\n            if (Character.isLetter(c))\
    \ {\n                lengths.add((int) Math.sqrt(Integer.parseInt(String.valueOf(c).length())));\n\
    \            }\n        }\n        HashSet<Integer> primes = new HashSet<>();\n\
    \        for(int i = 1; i < lengths.size(); i++){\n            if (lengths.get(i).equals(lengths.get(i\
    \ + 1))){\n                primes.add(i);\n            }\n        }\n        List<String>\
    \ result = new ArrayList<>();\n        for (int i = 0; i < lengths.size(); i++)\
    \ {\n            if (primes.contains(i)) {\n                String str = String.join(\"\
    \ \", Arrays.copyOf(chars, chars.length));\n                while (!str.equals(String.join(\"\
    \ \", Arrays.copyOf(chars, chars.length)))) str += \" \";\n                result.add(str);\n\
    \            }\n        }\n        return result.stream().map(String::trim).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp81_y23wg.java:28: error: incompatible types: int cannot be converted\
    \ to String\n                lengths.add((int) Math.sqrt(Integer.parseInt(String.valueOf(c).length())));\n\
    \                                                                            \
    \         ^\n/tmp/tmp81_y23wg.java:40: error: no suitable method found for join(String,char[])\n\
    \                String str = String.join(\" \", Arrays.copyOf(chars, chars.length));\n\
    \                                   ^\n    method String.join(CharSequence,CharSequence...)\
    \ is not applicable\n      (varargs mismatch; char[] cannot be converted to CharSequence)\n\
    \    method String.join(CharSequence,Iterable<? extends CharSequence>) is not\
    \ applicable\n      (argument mismatch; char[] cannot be converted to Iterable<?\
    \ extends CharSequence>)\n/tmp/tmp81_y23wg.java:41: error: no suitable method\
    \ found for join(String,char[])\n                while (!str.equals(String.join(\"\
    \ \", Arrays.copyOf(chars, chars.length)))) str += \" \";\n                  \
    \                       ^\n    method String.join(CharSequence,CharSequence...)\
    \ is not applicable\n      (varargs mismatch; char[] cannot be converted to CharSequence)\n\
    \    method String.join(CharSequence,Iterable<? extends CharSequence>) is not\
    \ applicable\n      (argument mismatch; char[] cannot be converted to Iterable<?\
    \ extends CharSequence>)\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1660010477
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        Set<String> strings = new HashSet<>();\n        char[] sentenceArray\
    \ = sentence.toCharArray();\n        int index = 0;\n        for (int i = 0; i\
    \ < sentenceArray.length; i++) {\n            if (Character.isLetter(sentenceArray[i]))\
    \ {\n                if (index == sentenceArray.length) {\n                  \
    \  break;\n                }\n                strings.add(String.valueOf(sentenceArray[i]));\n\
    \                index++;\n            }\n        }\n        List<String> sortedStrings\
    \ = new ArrayList<>(strings);\n        sortedStrings.sort(Comparator.reverseOrder());\n\
    \        return String.join(\" \", sortedStrings);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_i0gk5rj.java:41)\n"
  stdout: ''
  timestamp: 1660010477
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        Map<String, String> data = new HashMap<>();\n        for (String word\
    \ : sentence.split(\"\\\\s+\")) {\n            if (data.containsKey(word)) {\n\
    \                data.put(word, data.get(word) + \", \" + word);\n           \
    \ } else {\n                data.put(word, word);\n            }\n        }\n\n\
    \        return data.values()\n                .stream()\n                .sorted((w1,\
    \ w2) -> Integer.compare(w1.length(), w2.length()))\n                .map(w ->\
    \ w.substring(w.length() - 3))\n                .collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin -2, end 1, length 1\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat java.base/java.lang.String.substring(String.java:2680)\n\
    \tat Problem.lambda$wordsInSentence$1(tmp08te8ewo.java:36)\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n\
    \tat java.base/java.util.stream.SortedOps$SizedRefSortingSink.end(SortedOps.java:357)\n\
    \tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:510)\n\
    \tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)\n\
    \tat java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)\n\
    \tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n\
    \tat java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)\n\
    \tat Problem.wordsInSentence(tmp08te8ewo.java:37)\n\tat Problem.main(tmp08te8ewo.java:40)\n"
  stdout: ''
  timestamp: 1660010477
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        ArrayList<Integer> primeNumbers = new ArrayList<Integer>();\n       \
    \ for (String word : sentence.split(\" \")) {\n            int prime = Integer.valueOf(word.length());\n\
    \            if (!primeNumbers.contains(prime)) {\n                primeNumbers.add(prime);\n\
    \            }\n        }\n        ArrayList<String> newWords = new ArrayList<>();\n\
    \        for (Integer prime : primeNumbers) {\n            for (String word :\
    \ sentence.split(\" \")) {\n                if (Integer.valueOf(word.length())\
    \ == prime) {\n                    newWords.add(word);\n                }\n  \
    \          }\n        }\n        return newWords.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnlt0d9_q.java:42)\n"
  stdout: ''
  timestamp: 1660010477
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        if (sentence.isEmpty())\n            return \"Nothing to return\";\n\
    \        // Your code here\n        // Your code here\n        ArrayList<String>\
    \ array = new ArrayList<>();\n        String[] str = sentence.split(\" \");\n\
    \        for (int i = 0; i < str.length; i++) {\n            array.add(str[i]);\n\
    \        }\n        StringBuilder result = new StringBuilder();\n        int n\
    \ = 2;\n        boolean isPrime = true;\n        for (int i = 0; i < array.length;\
    \ i++) {\n            int count = 0;\n            for (int j = 0; j < array.length;\
    \ j++) {\n                if (array[j].length() > array[i].length()) {\n     \
    \               count = array[j].length() - array[i].length();\n             \
    \       break;\n                }\n            }\n            if (count % 2 ==\
    \ 0)\n                isPrime = false;\n            if (isPrime)\n           \
    \     for (int k = 0; k < array.length; k++)\n                    for (int l =\
    \ 0; l < array.length; l++)\n                        result.append(array[k]);\n\
    \        }\n        return result.toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplvzcvnfp.java:36: error: cannot find symbol\n        for (int i\
    \ = 0; i < array.length; i++) {\n                                 ^\n  symbol:\
    \   variable length\n  location: variable array of type ArrayList<String>\n/tmp/tmplvzcvnfp.java:38:\
    \ error: cannot find symbol\n            for (int j = 0; j < array.length; j++)\
    \ {\n                                     ^\n  symbol:   variable length\n  location:\
    \ variable array of type ArrayList<String>\n/tmp/tmplvzcvnfp.java:39: error: array\
    \ required, but ArrayList<String> found\n                if (array[j].length()\
    \ > array[i].length()) {\n                         ^\n/tmp/tmplvzcvnfp.java:39:\
    \ error: array required, but ArrayList<String> found\n                if (array[j].length()\
    \ > array[i].length()) {\n                                             ^\n/tmp/tmplvzcvnfp.java:40:\
    \ error: array required, but ArrayList<String> found\n                    count\
    \ = array[j].length() - array[i].length();\n                                 ^\n\
    /tmp/tmplvzcvnfp.java:40: error: array required, but ArrayList<String> found\n\
    \                    count = array[j].length() - array[i].length();\n        \
    \                                             ^\n/tmp/tmplvzcvnfp.java:47: error:\
    \ cannot find symbol\n                for (int k = 0; k < array.length; k++)\n\
    \                                         ^\n  symbol:   variable length\n  location:\
    \ variable array of type ArrayList<String>\n/tmp/tmplvzcvnfp.java:48: error: cannot\
    \ find symbol\n                    for (int l = 0; l < array.length; l++)\n  \
    \                                           ^\n  symbol:   variable length\n \
    \ location: variable array of type ArrayList<String>\n/tmp/tmplvzcvnfp.java:49:\
    \ error: array required, but ArrayList<String> found\n                       \
    \ result.append(array[k]);\n                                           ^\n9 errors\n"
  stdout: ''
  timestamp: 1660010477
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String result=\"\";\n        if (sentence.length()<1) {\n           \
    \ return \"\";\n        }\n        ArrayList<Integer> a=new ArrayList<>();\n \
    \       String[] words=sentence.split(\" \");\n        Arrays.stream(words).forEach(w\
    \ -> {\n            if(w.length()<1) {\n                return;\n            }\n\
    \            a.add(w.length());\n        });\n        Arrays.sort(a);\n      \
    \  Arrays.stream(a).forEach(x -> {\n            int min=0;\n            for(int\
    \ i=0;i<x;i++){\n                if(min>0){\n                    min=Math.min(min,i);\n\
    \                }\n            }\n            String s=\"\";\n            for(int\
    \ i=min;i<x;i++){\n                s+=words[i];\n            }\n            result+=s+\"\
    \ \";\n        });\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm1086qz7.java:36: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(a);\n              ^\n    method Arrays.sort(int[]) is not\
    \ applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpm1086qz7.java:37: error: no suitable method found for stream(ArrayList<Integer>)\n\
    \        Arrays.stream(a).forEach(x -> {\n              ^\n    method Arrays.<T#1>stream(T#1[])\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to T#1[]))\n    method Array"
  stdout: ''
  timestamp: 1660010477
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // Your code here\n    }\n    public static void main(String[] args)\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjrofttis.java:25: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010477
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        Stack<Integer> primeStack = new Stack<>();\n        Set<String> stringSet\
    \ = new HashSet<>();\n        String[] strings = sentence.split(\" \");\n    \
    \    for (String string : strings) {\n            stringSet.add(string);\n   \
    \     }\n        while (primeStack.isEmpty()) {\n            String str = stringSet.pop();\n\
    \            for (int i = 2; i <= str.length(); i++) {\n                if (str.charAt(0)\
    \ == str.charAt(i)) {\n                    continue;\n                }\n    \
    \            else {\n                    if (stringSet.contains(str + str.charAt(0)))\
    \ {\n                        primeStack.add(i);\n                    }\n     \
    \           }\n            }\n        }\n        StringBuilder newString = new\
    \ StringBuilder();\n        primeStack.stream().forEach(i -> newString.append(stringSet.contains(str\
    \ + str.charAt(0))\n                ? str.charAt(0)\n                : str.charAt(0)));\n\
    \        return newString.toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyd9w6zkt.java:31: error: cannot find symbol\n            String\
    \ str = stringSet.pop();\n                                  ^\n  symbol:   method\
    \ pop()\n  location: variable stringSet of type Set<String>\n/tmp/tmpyd9w6zkt.java:44:\
    \ error: reference to append is ambiguous\n        primeStack.stream().forEach(i\
    \ -> newString.append(stringSet.contains(str + str.charAt(0))\n              \
    \                                    ^\n  both method append(boolean) in StringBuilder\
    \ and method append(char) in StringBuilder match\n/tmp/tmpyd9w6zkt.java:44: error:\
    \ cannot find symbol\n        primeStack.stream().forEach(i -> newString.append(stringSet.contains(str\
    \ + str.charAt(0))\n                                                         \
    \                    ^\n  symbol:   variable str\n  location: class Problem\n\
    /tmp/tmpyd9w6zkt.java:44: error: cannot find symbol\n        primeStack.stream().forEach(i\
    \ -> newString.append(stringSet.contains(str + str.charAt(0))\n              \
    \                                                                     ^\n  symbol:\
    \   variable str\n  location: class Problem\n/tmp/tmpyd9w6zkt.java:45: error:\
    \ cannot find symbol\n                ? str.charAt(0)\n                  ^\n \
    \ symbol:   variable str\n  location: class Problem\n/tmp/tmpyd9w6zkt.java:46:\
    \ error: cannot find symbol\n                : str.charAt(0)));\n            \
    \      ^\n  symbol:   variable str\n  location: class Problem\n6 errors\n"
  stdout: ''
  timestamp: 1660010477
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] tokens = sentence.split(\" \");\n        ArrayList<Integer>\
    \ primes = new ArrayList<Integer>();\n        for(String token : tokens){\n  \
    \          int num = Integer.parseInt(token);\n            if(num > 2 && num <\
    \ 100){\n                primes.add(num);\n            }\n        }\n        StringBuilder\
    \ builder = new StringBuilder();\n        for(Integer num : primes){\n       \
    \     builder.append(num + \" \");\n        }\n        return builder.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"This\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.wordsInSentence(tmp25ueaxj1.java:27)\n\tat Problem.main(tmp25ueaxj1.java:39)\n"
  stdout: ''
  timestamp: 1660010477
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        Arrays.sort(sentence.toLowerCase().split(\" \"));\n        Arrays.sort(sentence.toLowerCase().split(\"\
    \ \"));\n        String res = \"\";\n        for(int i = 0 ; i < sentence.length();\
    \ i++) {\n            if(isPrime(sentence.length()) && isPrime(i)) {\n       \
    \         if(i == 0) {\n                    res = sentence;\n                }\
    \ else {\n                    res += \" \" + sentence;\n                }\n  \
    \          }\n        }\n        return res;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp658zx85h.java:28: error: cannot find symbol\n            if(isPrime(sentence.length())\
    \ && isPrime(i)) {\n               ^\n  symbol:   method isPrime(int)\n  location:\
    \ class Problem\n/tmp/tmp658zx85h.java:28: error: cannot find symbol\n       \
    \     if(isPrime(sentence.length()) && isPrime(i)) {\n                       \
    \                      ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    2 errors\n"
  stdout: ''
  timestamp: 1660010477
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        Map<String, String> map = new HashMap<>();\n        String key = \"\"\
    ;\n        String value = \"\";\n\n        for (int i = 0; i < sentence.length();\
    \ i++) {\n            if (Character.isLetter(sentence.charAt(i))) {\n        \
    \        key = sentence + \" \" + i;\n                value = sentence.substring(i\
    \ + 1);\n            }\n            map.put(key, value);\n        }\n\n      \
    \  List<String> list = new ArrayList<>(map.values());\n        Collections.sort(list);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ list.size(); i++) {\n            String s = list.get(i);\n            int flag\
    \ = 0;\n            for (int j = i; j < list.size(); j++) {\n                if\
    \ (s.equals(list.get(j))) {\n                    flag = 1;\n                 \
    \   break;\n                }\n            }\n            if (flag == 0) {\n \
    \               sb.append(s);\n                sb.append(\" \");\n           \
    \ }\n        }\n        return sb.toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr00n4pn1.java:56)\n"
  stdout: ''
  timestamp: 1660010477
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String string = new String();\n        int[] primeNumbers = new int[100];\n\
    \        String[] words = sentence.split(\" \");\n        for (int i = 0; i <\
    \ words.length; ++i) {\n            String word = words[i];\n            int l\
    \ = word.length();\n            int p = (int) Math.sqrt(l);\n            int count\
    \ = 0;\n            for (int j = p; j < l; j++) {\n                for (int k\
    \ = p; k < j; k++) {\n                    if (word.charAt(k) == word.charAt(j))\n\
    \                        ++count;\n                }\n            }\n        \
    \    if (count == p) {\n                primeNumbers[p] = count;\n           \
    \ }\n        }\n        Arrays.sort(primeNumbers);\n        for (int i = 0; i\
    \ < primeNumbers.length; ++i) {\n            if (primeNumbers[i] > 0)\n      \
    \          string += words[i] + \" \";\n        }\n        return string;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptteqdciw.java:50)\n"
  stdout: ''
  timestamp: 1660010477
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        Scanner scanner = new Scanner(sentence);\n        List<Integer> primeNumbers\
    \ = new ArrayList<Integer>();\n        // We keep a boolean value to know if the\
    \ sentence is empty or not\n        boolean sentenceEmpty = false;\n        int\
    \ index = 0;\n        while (scanner.hasNext()) {\n            String word = scanner.next();\n\
    \            // If the word is not empty, add it to the list and increment the\
    \ index\n            if (word != null && word.length() > 0) {\n              \
    \  primeNumbers.add(new Integer(word.length()));\n                index++;\n \
    \           }\n            // If an empty sentence is encountered, the sentence\
    \ is empty and we break the loop\n            if (scanner.hasNext()) {\n     \
    \           sentenceEmpty = true;\n                break;\n            }\n   \
    \     }\n        // We create a StringBuilder and set the initial value of it\n\
    \        StringBuilder newSentence = new StringBuilder();\n        if (primeNumbers.isEmpty())\
    \ {\n            newSentence.append(sentence);\n        } else {\n           \
    \ // If there is at least one prime number, we iterate on the primes list and\
    \ append them in the string\n            for (int p : primeNumbers) {\n      \
    \          newSentence.append(sentence.substring(0, index));\n               \
    \ newSentence.append(\" \");\n                newSentence.append(sentence.substring(index,\
    \ index + p));\n                newSentence.append(\" \");\n                index\
    \ += p;\n            }\n            if (sentenceEmpty) {\n                newSentence.append(sentence.substring(0,\
    \ index));\n            }\n        }\n        // Return the string built and printed\n\
    \        return newSentence.toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkhqk6rp9.java:63)\n"
  stdout: ''
  timestamp: 1660010477
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        if (sentence == null || sentence.isEmpty()) {\n            return \"\"\
    ;\n        }\n        // Find lengths of words in sentence\n        Set<Integer>\
    \ lengths = new HashSet<>();\n        for (String word : sentence.split(\" \"\
    )) {\n            lengths.add(word.length());\n        }\n\n        // Find prime\
    \ numbers of words in sentence\n        List<Integer> primeNumbers = new ArrayList<>();\n\
    \        int length = lengths.size();\n        int index = 0;\n        while (index\
    \ < length) {\n            int prime = true;\n            for (Integer primeLength\
    \ : lengths) {\n                if (index < primeLength) {\n                 \
    \   continue;\n                }\n                if (index%primeLength == 0)\
    \ {\n                    prime = false;\n                    break;\n        \
    \        }\n            }\n            if (prime) {\n                primeNumbers.add(index);\n\
    \                index++;\n            }\n        }\n\n        // Combine lengths\
    \ and prime numbers\n        List<Integer> combinableNumbers = new ArrayList<>();\n\
    \        combinableNumbers.addAll(lengths);\n        combinableNumbers.addAll(primeNumbers);\n\
    \n        // Generate new sentence\n        StringBuilder result = new StringBuilder();\n\
    \        for (Integer combinableNumber : combinableNumbers) {\n            result.append(sentence.substring(combinableNumber,\
    \ combinableNumber + 2));\n            result.append(' ');\n        }\n      \
    \  return result.toString();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6p_u30yc.java:38: error: incompatible types: boolean cannot be\
    \ converted to int\n            int prime = true;\n                        ^\n\
    /tmp/tmp6p_u30yc.java:44: error: incompatible types: boolean cannot be converted\
    \ to int\n                    prime = false;\n                            ^\n\
    /tmp/tmp6p_u30yc.java:48: error: incompatible types: int cannot be converted to\
    \ boolean\n            if (prime) {\n                ^\n3 errors\n"
  stdout: ''
  timestamp: 1660010477
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] strArr = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String str : strArr) {\n            if (isPrime(strArr.length))\
    \ {\n                result.add(str);\n            }\n        }\n        String\
    \ newStr = \"\";\n        for (String str : result) {\n            newStr = newStr\
    \ + \" \" + str;\n        }\n        return newStr.substring(1);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3t3a6ina.java:27: error: cannot find symbol\n            if (isPrime(strArr.length))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010477
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // split sentence into words\n        String[] words = sentence.split(\"\
    \ \");\n        boolean isPrime = true;\n        List<Integer> primes = IntStream.range(0,\
    \ words.length)\n                .filter(i -> !isPrime)\n                .boxed()\n\
    \                .collect(Collectors.toList());\n        String result = \"\"\
    ;\n        for (int i = 0; i < words.length && primes.contains(words[i].length());\
    \ i++) {\n            String w = words[i];\n            if (!isPrime) {\n    \
    \            isPrime = true;\n            }\n            isPrime = checkPrime(w,\
    \ primes);\n            if (!isPrime) {\n                continue;\n         \
    \   }\n            result += w;\n        }\n        return result;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(wordsInSentence((\"This\
    \ is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm8tf6uzx.java:37: error: cannot find symbol\n            isPrime\
    \ = checkPrime(w, primes);\n                      ^\n  symbol:   method checkPrime(String,List<Integer>)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010477
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        char[] chars = sentence.toCharArray();\n        List<String> result =\
    \ new ArrayList<>();\n        for(int i = 0; i < chars.length; i++) {\n      \
    \      boolean isPrime = true;\n            for(int j = i; j < chars.length; j++)\n\
    \                isPrime = isPrime && Character.getNumericValue(chars[j]) == Character.getNumericValue(chars[j]);\n\
    \            if(isPrime)\n                result.add(String.valueOf(chars[i]));\n\
    \        }\n        String result = new String(result.toArray());\n        Arrays.sort(result.chars().mapToObj(c\
    \ -> (char)c).toArray());\n        return result.replaceAll(\" \", \"\");\n  \
    \  }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbiaz9zf1.java:33: error: variable result is already defined in\
    \ method wordsInSentence(String)\n        String result = new String(result.toArray());\n\
    \               ^\n/tmp/tmpbiaz9zf1.java:33: error: cannot find symbol\n     \
    \   String result = new String(result.toArray());\n                          \
    \               ^\n  symbol:   method toArray()\n  location: variable result of\
    \ type String\n2 errors\n"
  stdout: ''
  timestamp: 1660010477
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        ArrayList primes = new ArrayList();\n        boolean prime = true;\n\
    \        StringBuilder builder = new StringBuilder();\n        for (char c : sentence.toCharArray())\
    \ {\n            int length = Character.getLength(c);\n            if (prime)\
    \ {\n                for (int i = 2; i <= length / 2; i++) {\n               \
    \     if (isPrime(i) && Character.getNumericValue(c) % i == 0) {\n           \
    \             prime = false;\n                        break;\n               \
    \     }\n                }\n                if (prime)\n                    primes.add(length);\n\
    \            }\n            if (!prime)\n                builder.append(c);\n\
    \        }\n        return builder.toString();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvaaauaq1.java:28: error: cannot find symbol\n            int length\
    \ = Character.getLength(c);\n                                  ^\n  symbol:  \
    \ method getLength(char)\n  location: class Character\n/tmp/tmpvaaauaq1.java:31:\
    \ error: cannot find symbol\n                    if (isPrime(i) && Character.getNumericValue(c)\
    \ % i == 0) {\n                        ^\n  symbol:   method isPrime(int)\n  location:\
    \ class Problem\nNote: /tmp/tmpvaaauaq1.java uses unchecked or unsafe operations.\n\
    Note: Recompile with -Xlint:unchecked for details.\n2 errors\n"
  stdout: ''
  timestamp: 1660010477
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] arr = sentence.split(\" \");\n        List<String> results =\
    \ new ArrayList<>();\n        for (String string : arr) {\n            List<String>\
    \ list = new ArrayList<>();\n            for (int i = 0; i < string.length();\
    \ i++) {\n                String letter = string.substring(0, i);\n          \
    \      for (int k = i; k < string.length(); k++) {\n                    String\
    \ letter1 = string.substring(i, k);\n                    int k = i;\n        \
    \            for (int j = i; j < string.length(); j++) {\n                   \
    \     String letter2 = string.substring(i, k);\n                        if (isPrime(letter)\
    \ && isPrime(letter1) && isPrime(letter2) && letter.length() != letter1.length()\
    \ || letter1.length() != letter2.length() || letter.length() < 2 || letter1.length()\
    \ < 2 || letter2.length() < 2 || k.length() < 2) {\n                         \
    \   list.add(\"true\");\n                            k++;\n                  \
    \      }\n                        else {\n                            list.add(\"\
    false\");\n                            k++;\n                        }\n     \
    \               }\n                }\n            }\n            if (list.contains(\"\
    true\"))\n                results.add(string);\n        }\n        String result\
    \ = \"\";\n        for (String s : results) {\n            result += s +\" \"\
    ;\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpys18ue1e.java:32: error: variable k is already defined in method\
    \ wordsInSentence(String)\n                    int k = i;\n                  \
    \      ^\n/tmp/tmpys18ue1e.java:35: error: cannot find symbol\n              \
    \          if (isPrime(letter) && isPrime(letter1) && isPrime(letter2) && letter.length()\
    \ != letter1.length() || letter1.length() != letter2.length() || letter.length()\
    \ < 2 || letter1.length() < 2 || letter2.length() < 2 || k.length() < 2) {\n \
    \                           ^\n  symbol:   method isPrime(String)\n  location:\
    \ class Problem\n/tmp/tmpys18ue1e.java:35: error: cannot find symbol\n       \
    \                 if (isPrime(letter) && isPrime(letter1) && isPrime(letter2)\
    \ && letter.length() != letter1.length() || letter1.length() != letter2.length()\
    \ || letter.length() < 2 || letter1.length() < 2 || letter2.length() < 2 || k.length()\
    \ < 2) {\n                                               ^\n  symbol:   method\
    \ isPrime(String)\n  location: class Problem\n/tmp/tmpys18ue1e.java:35: error:\
    \ cannot find symbol\n                        if (isPrime(letter) && isPrime(letter1)\
    \ && isPrime(letter2) && letter.length() != letter1.length() || letter1.length()\
    \ != letter2.length() || letter.length() < 2 || letter1.length() < 2 || letter2.length()\
    \ < 2 || k.length() < 2) {\n                                                 \
    \                  ^\n  symbol:   method isPrime(String)\n  location: class Problem\n\
    /tmp/tmpys18ue1e.java:35: error: int cannot be dereferenced\n                \
    \        if (isPrime(letter) && isPrime(letter1) && isPrime(letter2) && letter.length()\
    \ != letter1.length() || letter1.length() != letter2.length() || letter.length()\
    \ < 2 || letter1.length() < 2 || letter2.length() < 2 || k.length() < 2) {\n \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \         ^\n5 errors\n"
  stdout: ''
  timestamp: 1660010477
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] wordsAsArray = sentence.split(\" \");\n        int[] array =\
    \ new int[wordsAsArray.length];\n        Arrays.fill(array, 0);\n        for (String\
    \ word : wordsAsArray) {\n            array[word.length() - 1]++;\n        }\n\
    \        Arrays.sort(array);\n        StringBuilder result = new StringBuilder();\n\
    \        for (String word : wordsAsArray) {\n            if (array[word.length()\
    \ - 1] == 1) {\n                result.append(word).append(\" \");\n         \
    \   }\n        }\n        return result.toString();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqmo1wqmq.java:40)\n"
  stdout: ''
  timestamp: 1660010478
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String result=\"\";\n        if (sentence.contains(\"\\\\d\"))\n    \
    \        sentence=sentence.substring(0,sentence.indexOf(\"\\\\d\"));\n       \
    \ if (sentence.contains(\"\\\\D\"))\n            sentence=sentence.substring(0,sentence.indexOf(\"\
    \\\\D\"));\n        String[] strArr=sentence.split(\" \");\n        Arrays.sort(strArr);\n\
    \        List<String> primes=new ArrayList<String>();\n        for (String str:strArr)\n\
    \            primes.add(String.valueOf(str.length()));\n        for (String str:primes)\n\
    \            if (str.length()==strArr.length)\n                result+=str+\"\
    \ \";\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjjdfm0ns.java:40)\n"
  stdout: ''
  timestamp: 1660010478
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String s = sentence;\n        // convert sentence into an array of words\n\
    \        String[] arr = s.split(\" \");\n        // keep an array of booleans,\
    \ to keep track of words that are prime or not\n        boolean[] prime = new\
    \ boolean[arr.length];\n        // store the length of each prime word\n     \
    \   int[] len = new int[arr.length];\n        // store which indexes of arr are\
    \ prime\n        int[] prime_arr = new int[arr.length];\n        // store which\
    \ indexes of arr are prime\n        int[] prime_arr = new int[arr.length];\n \
    \       for (int i = 0; i < arr.length; i++) {\n            prime[i] = true;\n\
    \            len[i] = 1;\n            prime_arr[i] = 0;\n            for (int\
    \ j = i + 1; j < arr.length; j++) {\n                // if the current index has\
    \ a prime word from arr then remove it from the array\n                if (prime[j]\
    \ && arr[j].length() > len[i]) {\n                    len[i] = arr[j].length();\n\
    \                    prime[i] = false;\n                    break;\n         \
    \       }\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < arr.length; i++) {\n            // check if len[i]\
    \ is a prime number\n            if (len[i] == 1 && !prime[i]) {\n           \
    \     sb.append(arr[i]);\n            }\n            // check if len[i] is bigger\
    \ than one and is a prime number\n            else if (len[i] > 1 && prime[i])\
    \ {\n                // check if the previous words are prime numbers\n      \
    \          for (int j = prime_arr[i] + 1; j < arr.length; j++) {\n           \
    \         if (prime[j] && arr[j].length() > len[i]) {\n                      \
    \  sb.append(arr[j]);\n                        break;\n                    }\n\
    \                }\n                // check if previous words are not prime numbers\n\
    \                for (int j = prime_arr[i] + 1; j < arr.length; j++) {\n     \
    \               if (arr[j].length() > len[i] && !prime[j]) {\n               \
    \         sb.append(arr[j]);\n                        break;\n               \
    \     }\n                }\n            }\n        }\n        return sb.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx80icbx5.java:34: error: variable prime_arr is already defined\
    \ in method wordsInSentence(String)\n        int[] prime_arr = new int[arr.length];\n\
    \              ^\n1 error\n"
  stdout: ''
  timestamp: 1660010478
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // Split sentence into words\n        String[] words = sentence.split(\"\
    \ \");\n\n        // Create a set to hold words already used\n        Set<String>\
    \ used = new HashSet<String>();\n        \n        // Add the first word\n   \
    \     used.add(words[0]);\n\n        // For each subsequent word, check whether\
    \ its length is prime\n        for (int i = 1; i < words.length; i++) {\n    \
    \        String word = words[i];\n            if (isPrime(word.length())) {\n\
    \                if (!used.contains(word)) {\n                    used.add(word);\n\
    \                }\n            }\n        }\n\n        // Reverse the set and\
    \ convert to a List\n        List<String> reversed = new ArrayList<>(used);\n\n\
    \        // Sort and convert to a String joining the words\n        return String.join(\"\
    \ \", reversed);\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcgxecmqp.java:36: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010478
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] arr = sentence.split(\" \");\n        List<String> result =\
    \ new ArrayList<>();\n        for (String str : arr) {\n            if (isPrime(str.length()))\
    \ {\n                result.add(str);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1zos0pom.java:27: error: cannot find symbol\n            if (isPrime(str.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010478
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        String[] result = new\
    \ String[words.length];\n        int n = words.length;\n        for (int i = 0;\
    \ i < n; i++) {\n            int count = 0;\n            String word = words[i];\n\
    \            for (int j = i; j > 0 && isPrime(j); j--) {\n                if (word.compareTo(words[j])\
    \ > 0) {\n                    word = words[j];\n                    count++;\n\
    \                }\n            }\n            result[i] = word;\n        }\n\
    \        return Arrays.toString(result);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp72fybndm.java:30: error: cannot find symbol\n            for (int\
    \ j = i; j > 0 && isPrime(j); j--) {\n                                     ^\n\
    \  symbol:   method isPrime(int)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010478
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        int[] arr = new int[26];\n        Arrays.fill(arr, 2);\n        return\
    \ IntStream.range(1, 100).filter(i -> Integer.valueOf(sentence.charAt(i)) > 2\
    \ && Integer.valueOf(sentence.charAt(i)) <= 26).filter(i -> Arrays.binarySearch(arr,\
    \ Integer.valueOf(sentence.charAt(i))) >= 0).mapToObj(i -> sentence.charAt(i)).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqm31cy5g.java:26: error: no suitable method found for collect(Collector<CharSequence,CAP#1,String>)\n\
    \        return IntStream.range(1, 100).filter(i -> Integer.valueOf(sentence.charAt(i))\
    \ > 2 && Integer.valueOf(sentence.charAt(i)) <= 26).filter(i -> Arrays.binarySearch(arr,\
    \ Integer.valueOf(sentence.charAt(i))) >= 0).mapToObj(i -> sentence.charAt(i)).collect(Collectors.joining(\"\
    \ \"));\n                                                                    \
    \                                                                            \
    \                                                                            \
    \                              ^\n    method Stream.<R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super Character>,BiConsumer<R#1,R#1>) is not applicable\n      (cannot infer\
    \ type-variable(s) R#1\n        (actual and formal argument lists differ in length))\n\
    \    method Stream.<R#2,A>collect(Collector<? super Character,A,R#2>) is not applicable\n\
    \      (cannot infer type-variable(s) R#2,A\n        (argument mismatch; Collector<CharSequence,CAP#2,String>\
    \ cannot be converted to Collector<? super Character,A,R#2>))\n  where R#1,T,R#2,A\
    \ are type-variables:\n    R#1 extends Object declared in method <R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super T>,BiConsumer<R#1,R#1>)\n    T extends Object declared in interface Stream\n\
    \    R#2 extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \    A extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \  where CAP#1,CAP#2 are fresh type-variables:\n    CAP#1 extends Object from\
    \ capture of ?\n    CAP#2 extends Object from capture of ?\n1 error\n"
  stdout: ''
  timestamp: 1660010478
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        Stack<Integer> primes\
    \ = new Stack<>();\n        for(int i = 0; i < sentence.length(); i++){\n    \
    \        int length = i + 1;\n            while(primes.contains(length)){\n  \
    \              length++;\n            }\n            primes.push(length);\n  \
    \      }\n\n        for(int i = 0; i < sentence.length(); i++){\n            int\
    \ length = i + 1;\n            while(primes.contains(length)){\n             \
    \   length++;\n            }\n            while(!primes.isEmpty() && primes.peek()\
    \ > length){\n                primes.pop();\n            }\n            if(primes.isEmpty()){\n\
    \                result.add(sentence.substring(i, length));\n                primes.push(length);\n\
    \            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg0xldzgo.java:50)\n"
  stdout: ''
  timestamp: 1660010478
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String res = \"(\";\n        for(String word : sentence.split(\"\\\\\
    s+\"))\n            res += word;\n        res += \")\";\n        return res;\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq1hjeq2w.java:31)\n"
  stdout: ''
  timestamp: 1660010478
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        Set<Integer> primes = new HashSet<>();\n        HashMap<String, Integer>\
    \ stringToPrime = new HashMap<>();\n        // Your code goes here\n        return\
    \ \"\";\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgaop8wpq.java:30)\n"
  stdout: ''
  timestamp: 1660010478
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // split sentence in words\n        String[] words = sentence.split(\"\
    \ \");\n        // create empty string for results\n        StringBuilder stringBuilder\
    \ = new StringBuilder();\n        // go through each word\n        for (String\
    \ word : words) {\n            // check length of word\n            if (isPrime(word.length()))\
    \ {\n                // add word to stringBuilder\n                stringBuilder.append(word);\n\
    \            }\n        }\n        // return results\n        return stringBuilder.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp_d9em07.java:31: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010478
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // write your code here\n        String[] sentenceArray = sentence.split(\"\
    \ \");\n        String[] newWordArray = new String[sentenceArray.length];\n\n\
    \        for (int i = 0; i < sentenceArray.length; i++) {\n            char c\
    \ = sentenceArray[i].charAt(0);\n            int d = Character.getNumericValue(c);\n\
    \            while (d % 2 == 0) {\n                d = d / 2;\n            }\n\
    \            if (d != 1) {\n                newWordArray[i] = sentenceArray[i];\n\
    \            }\n        }\n        return Arrays.toString(newWordArray);\n   \
    \ }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7iso5m7f.java:41)\n"
  stdout: ''
  timestamp: 1660010479
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        \n        return null;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.wordsInSentence(String)\"\
    \ is null\n\tat Problem.main(tmp5f1hybwh.java:28)\n"
  stdout: ''
  timestamp: 1660010478
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        ArrayList<String> result = new ArrayList<String>();\n        if (sentence\
    \ == null || sentence.isEmpty()) {\n            return \"\";\n        }\n    \
    \    String word = \"\";\n        char previous = ' ';\n        int length = sentence.length();\n\
    \        for (int i = 0; i < length; i++) {\n            String wordAtIndex =\
    \ sentence.substring(i, i + 1);\n            if (isPrimeNumber(Integer.valueOf(wordAtIndex)))\
    \ {\n                result.add(word);\n                word = \"\";\n       \
    \     } else {\n                word += wordAtIndex;\n            }\n        \
    \    previous = sentence[i];\n        }\n        result.add(word);\n        String\
    \ finalResult = \" \";\n        for (String str : result) {\n            finalResult\
    \ += str + \" \";\n        }\n        return finalResult.replaceAll(\" \", \"\"\
    );\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpipxjrgpl.java:33: error: cannot find symbol\n            if (isPrimeNumber(Integer.valueOf(wordAtIndex)))\
    \ {\n                ^\n  symbol:   method isPrimeNumber(Integer)\n  location:\
    \ class Problem\n/tmp/tmpipxjrgpl.java:39: error: array required, but String found\n\
    \            previous = sentence[i];\n                               ^\n2 errors\n"
  stdout: ''
  timestamp: 1660010478
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        StringBuilder sb = new StringBuilder();\n        Set<String> set = new\
    \ HashSet<>();\n        boolean prime = true;\n        for (char c : sentence.toCharArray())\
    \ {\n            String word = Character.toString(c);\n            if (word.matches(\"\
    \\\\p{L}\")) {\n                set.add(word);\n            }\n        }\n   \
    \     set.forEach(n -> {\n            if (prime) {\n                for (int i\
    \ = 0; i < n.length(); i++) {\n                    for (int j = i; j < n.length();\
    \ j++) {\n                        String letter = n.substring(i, j);\n       \
    \                 if (set.contains(letter)) {\n                            prime\
    \ = false;\n                        }\n                    }\n               \
    \ }\n            }\n        });\n        if (prime == true) {\n            for\
    \ (String n : set) {\n                sb.append(n);\n            }\n        }\n\
    \        return sb.toString();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzi2kaaog.java:34: error: local variables referenced from a lambda\
    \ expression must be final or effectively final\n            if (prime) {\n  \
    \              ^\n/tmp/tmpzi2kaaog.java:39: error: local variables referenced\
    \ from a lambda expression must be final or effectively final\n              \
    \              prime = false;\n                            ^\n2 errors\n"
  stdout: ''
  timestamp: 1660010478
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // Write your code here.\n        Set<String> words = new HashSet<String>();\n\
    \        String[] words = sentence.split(\" \");\n        for (String word : words)\
    \ {\n            words.add(word);\n        }\n        int sum = 0;\n        for\
    \ (int i = 0; i < words.length; i++) {\n            sum = sum + words[i].length();\n\
    \        }\n        if (sum % 2 != 0) {\n            return \"NO\";\n        }\n\
    \        Arrays.sort(words);\n        StringBuilder wordBuilder = new StringBuilder();\n\
    \        for (String s : words) {\n            wordBuilder.append(s);\n      \
    \  }\n        return wordBuilder.toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc69vnf2x.java:26: error: variable words is already defined in method\
    \ wordsInSentence(String)\n        String[] words = sentence.split(\" \");\n \
    \                ^\n/tmp/tmpc69vnf2x.java:28: error: cannot find symbol\n    \
    \        words.add(word);\n                 ^\n  symbol:   method add(String)\n\
    \  location: variable words of type String[]\n2 errors\n"
  stdout: ''
  timestamp: 1660010478
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] splittedWords = sentence.split(\" \");\n        Arrays.sort(splittedWords);\n\
    \        StringBuilder builder = new StringBuilder();\n        for(int i = 0;\
    \ i < splittedWords.length; i++){\n            if(splittedWords[i].length() ==\
    \ 1){\n                builder.append(splittedWords[i]);\n            } else {\n\
    \                String first = splittedWords[i].substring(0, 1);\n          \
    \      String rest = splittedWords[i].substring(1);\n                boolean found\
    \ = false;\n                for(int j = i + 1; j < splittedWords.length; j++){\n\
    \                    if(splittedWords[j].length() == 1){\n                   \
    \     String second = splittedWords[j].substring(0, 1);\n                    \
    \    String rest2 = splittedWords[j].substring(1);\n                        if(first\
    \ == second){\n                            found = true;\n                   \
    \         break;\n                        }\n                    }\n         \
    \       }\n                if(!found){\n                    return builder.toString();\n\
    \                }\n            }\n        }\n        return builder.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz4ve4qzq.java:52)\n"
  stdout: ''
  timestamp: 1660010479
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] arr = sentence.split(\" \");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        for (int i = 0; i < arr.length; i++) {\n\
    \            int n = Integer.parseInt(arr[i]);\n            if (isPrime(n)) {\n\
    \                result.add(arr[i]);\n            }\n        }\n        return\
    \ Arrays.toString(result.toArray());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpany_nfqc.java:28: error: cannot find symbol\n            if (isPrime(n))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010479
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        ArrayList<String> res = new ArrayList<>();\n        Set<String> resSet\
    \ = new HashSet<>();\n        for (String word : sentence.split(\" \")) {\n  \
    \          word = word.trim();\n            if (word.length() > 0) {\n       \
    \         res.add(word);\n                resSet.add(word);\n            }\n \
    \       }\n        LinkedList<String> newRes = new LinkedList<>();\n        for\
    \ (String word : res) {\n            for (int i = 1; i < word.length(); i++) {\n\
    \                for (int j = i + 1; j < word.length(); j++) {\n             \
    \       if (word.charAt(i) == word.charAt(j)) {\n                        if (isPrime(word.charAt(i)))\
    \ {\n                            if (isPrime(word.charAt(j))) {\n            \
    \                    newRes.add(word.substring(i + 1, j));\n                 \
    \           }\n                        }\n                    }\n            \
    \    }\n            }\n        }\n        return newRes.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1o6dgmgj.java:38: error: cannot find symbol\n                 \
    \       if (isPrime(word.charAt(i))) {\n                            ^\n  symbol:\
    \   method isPrime(char)\n  location: class Problem\n/tmp/tmp1o6dgmgj.java:39:\
    \ error: cannot find symbol\n                            if (isPrime(word.charAt(j)))\
    \ {\n                                ^\n  symbol:   method isPrime(char)\n  location:\
    \ class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660010479
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] a = sentence.replaceAll(\"[^\\\\w]+\", \"\").split(\" \");\n\
    \        List<Integer> primes = new ArrayList<>();\n        for (int i = 0; i\
    \ < a.length; i++) {\n            primes.add(i);\n        }\n        int sum =\
    \ 0;\n        List<String> result = new ArrayList<>();\n        for (int i = 1;\
    \ i < primes.size() - 1; i++) {\n            if (primes.get(i) < primes.get(i\
    \ + 1)) {\n                boolean ok = true;\n                for (int j = primes.get(i);\
    \ j < (primes.get(i) + primes.get(i + 1)); j++) {\n                    if (!primes.get(j\
    \ - 1).equals(primes.get(i))) {\n                        ok = false;\n       \
    \                 break;\n                    }\n                }\n         \
    \       if (ok) {\n                    result.add(primes.get(i) + \" \");\n  \
    \              }\n            }\n        }\n        if (!result.isEmpty()) {\n\
    \            String output = result.get(0);\n            for (int i = 1; i < result.size();\
    \ i++) {\n                output += result.get(i) + \" \";\n            }\n  \
    \          return output;\n        } else {\n            return sentence;\n  \
    \      }\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyuo9zyc8.java:56)\n"
  stdout: ''
  timestamp: 1660010479
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // split the sentence into tokens\n        String[] tokens = sentence.split(\"\
    \ \");\n        // generate prime numbers\n        List<Integer> primeNumbers\
    \ = new ArrayList<>();\n        for (int i = 1; i <= 100; i++) {\n           \
    \ // if the length is divisible by any prime\n            if (tokens.length /\
    \ i == 0)\n                primeNumbers.add(i);\n        }\n        Collections.sort(primeNumbers);\n\
    \        // construct the new string\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i : primeNumbers) {\n            sb.append(tokens[i-1]);\n \
    \       }\n        return sb.toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 4 out of bounds for length 4\n\tat Problem.wordsInSentence(tmp0m9_8ncn.java:37)\n\
    \tat Problem.main(tmp0m9_8ncn.java:42)\n"
  stdout: ''
  timestamp: 1660010479
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        Set<Integer> primes = primes.stream().filter(p -> !isPrime(p)).collect(Collectors.toSet());\n\
    \        Set<Integer> ordered = wordsInSentence(sentence, primes);\n        List<Integer>\
    \ list = new ArrayList<Integer>();\n        list.add(primes.stream().min().orElse(0));\n\
    \        list.add(primes.stream().max().orElse(0));\n        list.add(primes.stream().max(p\
    \ -> Math.max(primes.stream().filter(i -> i > p).count(), list.get(1))));\n  \
    \      list.add(primes.stream().min(p -> Math.min(primes.stream().filter(i ->\
    \ i < p).count(), list.get(2))));\n        list.add(primes.stream().min(p -> Math.min(primes.stream().filter(i\
    \ -> i >= p).count(), list.get(3))));\n        list.add(primes.stream().max(p\
    \ -> Math.max(primes.stream().filter(i -> i <= p).count(), list.get(4))));\n \
    \       list.add(primes.stream().max(p -> Math.max(primes.stream().filter(i ->\
    \ i >= p).count(), list.get(5))));\n        return list.stream().map(i -> ordered).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2yepmn81.java:24: error: cannot find symbol\n        Set<Integer>\
    \ primes = primes.stream().filter(p -> !isPrime(p)).collect(Collectors.toSet());\n\
    \                                                           ^\n  symbol:   method\
    \ isPrime(Integer)\n  location: class Problem\n/tmp/tmp2yepmn81.java:25: error:\
    \ method wordsInSentence in class Problem cannot be applied to given types;\n\
    \        Set<Integer> ordered = wordsInSentence(sentence, primes);\n         \
    \                      ^\n  required: String\n  found:    String,Set<Integer>\n\
    \  reason: actual and formal argument lists differ in length\n/tmp/tmp2yepmn81.java:27:\
    \ error: method min in interface Stream<T> cannot be applied to given types;\n\
    \        list.add(primes.stream().min().orElse(0));\n                        \
    \        ^\n  required: Comparator<? super Integer>\n  found:    no arguments\n\
    \  reason: actual and formal argument lists differ in length\n  where T is a type-variable:\n\
    \    T extends Object declared in interface Stream\n/tmp/tmp2yepmn81.java:28:\
    \ error: method max in interface Stream<T> cannot be applied to given types;\n\
    \        list.add(primes.stream().max().orElse(0));\n                        \
    \        ^\n  required: Comparator<? super Integer>\n  found:    no arguments\n\
    \  reason: actual and formal argument lists differ in length\n  where T is a type-variable:\n\
    \    T extends Object declared in interface Stream\n/tmp/tmp2yepmn81.java:29:\
    \ error: incompatible types: incompatible parameter types in lambda expression\n\
    \        list.add(primes.stream().max(p -> Math.max(primes.stream().filter(i ->\
    \ i > p).count(), list.get(1))));\n                                     ^\n/tmp/tmp2yepmn81.java:29:\
    \ error: bad operand types for binary operator '>'\n        list.add(primes.stream().max(p\
    \ -> Math.max(primes.stream().filter(i -> i > p).count(), list.get(1))));\n  \
    \                                                                            \
    \   ^\n  first type:  Integer\n  second type: T\n  where T is a type-variable:\n\
    \    T extends Object declared in interface Stream\n/tmp/tmp2yepmn81.java:30:\
    \ error:"
  stdout: ''
  timestamp: 1660010479
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        for (int i = 0; i <\
    \ sentence.length(); i++) {\n            String word = sentence.substring(i);\n\
    \            int result = isPrime(word.length());\n            if (result == 1)\
    \ {\n                result.add(word);\n            } else {\n               \
    \ for (int j = 0; j < result.size(); j++) {\n                    if (result.size()\
    \ == 1) {\n                        break;\n                    }\n           \
    \         String temp = result.get(j) + \" \";\n                    String word2\
    \ = temp.concat(word);\n                    if (isPrime(word2.length()) == 1)\
    \ {\n                        result.add(word2);\n                        break;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ result.get(0);\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeou18ndl.java:27: error: variable result is already defined in\
    \ method wordsInSentence(String)\n            int result = isPrime(word.length());\n\
    \                ^\n/tmp/tmpeou18ndl.java:27: error: cannot find symbol\n    \
    \        int result = isPrime(word.length());\n                         ^\n  symbol:\
    \   method isPrime(int)\n  location: class Problem\n/tmp/tmpeou18ndl.java:29:\
    \ error: int cannot be dereferenced\n                result.add(word);\n     \
    \                 ^\n/tmp/tmpeou18ndl.java:31: error: int cannot be dereferenced\n\
    \                for (int j = 0; j < result.size(); j++) {\n                 \
    \                         ^\n/tmp/tmpeou18ndl.java:32: error: int cannot be dereferenced\n\
    \                    if (result.size() == 1) {\n                             \
    \ ^\n/tmp/tmpeou18ndl.java:35: error: int cannot be dereferenced\n           \
    \         String temp = result.get(j) + \" \";\n                             \
    \           ^\n/tmp/tmpeou18ndl.java:37: error: cannot find symbol\n         \
    \           if (isPrime(word2.length()) == 1) {\n                        ^\n \
    \ symbol:   method isPrime(int)\n  location: class Problem\n/tmp/tmpeou18ndl.java:38:\
    \ error: int cannot be dereferenced\n                        result.add(word2);\n\
    \                              ^\n8 errors\n"
  stdout: ''
  timestamp: 1660010479
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] str = sentence.split(\" \");\n        List<String> res = new\
    \ ArrayList<>();\n        for (String s : str) {\n            if (s.length() ==\
    \ 2 && Character.isLetter(s.charAt(0))) {\n                boolean prime = true;\n\
    \                for (char c : s.toCharArray()) {\n                    if (Character.isLetter(c))\
    \ {\n                        prime = false;\n                        break;\n\
    \                    }\n                }\n                if (prime)\n      \
    \              res.add(s);\n            }\n        }\n        Collections.sort(res);\n\
    \        return res.toString();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzcxlwwlw.java:43)\n"
  stdout: ''
  timestamp: 1660010480
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] result = new String[sentence.length()];\n        int index =\
    \ 0;\n        boolean first = false;\n        boolean last = false;\n        for\
    \ (char c : sentence.toCharArray()) {\n            first = false;\n          \
    \  last = false;\n            if (Character.isLetter(c)) {\n                if\
    \ (first) {\n                    result[index++] = c;\n                    first\
    \ = false;\n                } else {\n                    int length = Integer.parseInt(Character.toString(c));\n\
    \                    if (length <= 1) {\n                        first = true;\n\
    \                        last = true;\n                    } else if (length <=\
    \ 3) {\n                        result[index++] = c;\n                    } else\
    \ {\n                        int sum = 0;\n                        for (int i\
    \ = 2; i <= length; i++) {\n                            if (i == 2 * length) sum++;\n\
    \                            if (i == 3 * length) sum++;\n                   \
    \         if (i == length + 1) sum++;\n                            if (i == length)\
    \ sum++;\n                        }\n                        boolean isPrime =\
    \ false;\n                        for (int i = 2; i <= Math.sqrt(sum); i++) {\n\
    \                            if (sum % i == 0) isPrime = true;\n             \
    \           }\n                        if (!isPrime) {\n                     \
    \       last = true;\n                        }\n                        result[index++]\
    \ = c;\n                    }\n                }\n            }\n        }\n \
    \       return Strings.join(\" \", result);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5h5t4_53.java:33: error: incompatible types: char cannot be converted\
    \ to String\n                    result[index++] = c;\n                      \
    \                ^\n/tmp/tmp5h5t4_53.java:41: error: incompatible types: char\
    \ cannot be converted to String\n                        result[index++] = c;\n\
    \                                          ^\n/tmp/tmp5h5t4_53.java:57: error:\
    \ incompatible types: char cannot be converted to String\n                   \
    \     result[index++] = c;\n                                          ^\n/tmp/tmp5h5t4_53.java:62:\
    \ error: cannot find symbol\n        return Strings.join(\" \", result);\n   \
    \            ^\n  symbol:   variable Strings\n  location: class Problem\n4 errors\n"
  stdout: ''
  timestamp: 1660010479
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        Set<String> set = new HashSet<String>();\n        for (String s : sentence.split(\"\
    \ \")) {\n            int length = (int) Math.sqrt(s.length());\n            for\
    \ (int i = 1; i <= length; i++) {\n                if (s.equals(\"x\")) {\n  \
    \                  set.add(\"x\");\n                } else {\n               \
    \     set.add(\"x\" + s);\n                }\n            }\n        }\n     \
    \   return set.toString();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc7np3k3g.java:38)\n"
  stdout: ''
  timestamp: 1660010480
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        char[] a = sentence.toCharArray();\n        Arrays.sort(a);\n       \
    \ int[] b = IntStream.range(0, a.length).filter(i -> a[i] >= 'a' && a[i] <= 'z')\n\
    \                .mapToObj(i -> a[i] - 'a' + 10)\n                .sorted()\n\
    \                .toArray();\n        Arrays.sort(b);\n        int m = a.length;\n\
    \        List<Integer> primes = new ArrayList<>();\n        int prime = 0;\n \
    \       int max = 2;\n        while (b[m] != 0) {\n            if (b[m] < m) {\n\
    \                m--;\n                prime = 0;\n            }\n           \
    \ if (b[m] % 2 == 0) {\n                prime = prime + 1;\n            }\n  \
    \          if (b[m] > m) {\n                prime = prime - 1;\n            }\n\
    \            if (prime > max) {\n                max = prime;\n            }\n\
    \            primes.add(prime);\n            int k = 0;\n            for (;k <\
    \ m; k++) {\n                if (b[k] == 0) {\n                    break;\n  \
    \              }\n            }\n            m--;\n        }\n        Arrays.sort(primes);\n\
    \        StringBuilder builder = new StringBuilder();\n        int index = -1;\n\
    \        int pos = 0;\n        while (pos < primes.size()) {\n            if (primes.get(pos)\
    \ == index) {\n                builder.append(a.substring(index + 1, pos + 1));\n\
    \                index++;\n                pos++;\n            } else {\n    \
    \            index++;\n                pos++;\n            }\n        }\n    \
    \    return builder.toString();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwftyppyn.java:29: error: incompatible types: Object[] cannot be\
    \ converted to int[]\n                .toArray();\n                        ^\n\
    /tmp/tmpwftyppyn.java:58: error: no suitable method found for sort(List<Integer>)\n\
    \        Arrays.sort(primes);\n              ^\n    method Arrays.sort(int[])\
    \ is not applicable\n      (argument mismatch; List<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; List<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; List<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; List<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; List<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; List<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; List<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; List<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpwftyppyn.java:64: error: cannot find symbol\n         \
    \       builder.append(a.substring(index + 1, pos + 1));\n                   \
    \             ^\n  symbol:   method substring(int,int)\n  location: variable a\
    \ of type char[]\nNot"
  stdout: ''
  timestamp: 1660010479
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] str = sentence.split(\" \");\n        List<Integer> primes =\
    \ Arrays.stream(str)\n                .filter(l -> !l.isEmpty())\n           \
    \     .map(Integer::valueOf)\n                .filter(l -> l%2 ==0)\n        \
    \        .collect(Collectors.toList());\n        return str\n                .stream()\n\
    \                .filter(l -> primes.contains(l.length()))\n                .collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgaylb3vn.java:31: error: cannot find symbol\n                .stream()\n\
    \                ^\n  symbol:   method stream()\n  location: variable str of type\
    \ String[]\n1 error\n"
  stdout: ''
  timestamp: 1660010480
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> list =\
    \ new ArrayList<>();\n        for (String word : words) {\n            try {\n\
    \                if (Integer.valueOf(word.length()) == primeNumber(word)) {\n\
    \                    list.add(word);\n                }\n            } catch (NumberFormatException\
    \ e) {\n                System.out.println(\"The length of word is invalid!\"\
    );\n            }\n        }\n        return list.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0pvuwm9r.java:28: error: cannot find symbol\n                if\
    \ (Integer.valueOf(word.length()) == primeNumber(word)) {\n                  \
    \                                    ^\n  symbol:   method primeNumber(String)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010479
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // Write your code here\n        String newString = \"\";\n        char[]\
    \ chars = sentence.toCharArray();\n        Set<String> set = new HashSet<>();\n\
    \        for(char c : chars){\n            if (Character.isLetter(c)) {\n    \
    \            String str = new StringBuffer(String.valueOf(c)).deleteCharAt(0).toString();\n\
    \                if (!set.contains(str)){\n                    set.add(str);\n\
    \                    newString += str + \" \";\n                }\n          \
    \  }\n        }\n        return newString;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpknhpkl5g.java:40)\n"
  stdout: ''
  timestamp: 1660010480
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        \n        // Step 1: Remove all spaces from the sentence and store it\
    \ in a String\n        // NOTE: we could have used StringUtils.removeWhitespace(sentence)\
    \ from the org.apache.commons.lang package instead of\n        // the built-in\
    \ trim() method on the String class. However, it is important to note that StringUtils\
    \ will\n        // also remove empty strings. That is why we have explicitly used\
    \ the built-in trim() method here\n        \n        String trimmedSentence =\
    \ sentence.trim();\n        \n        // Step 2: Create a new String with same\
    \ length as the trimmed sentence\n        \n        String newSentence = \"\"\
    ;\n        \n        for (int i = 0; i < trimmedSentence.length(); i++) {\n  \
    \          \n            // Step 3: If this character is space then add it to\
    \ the newSentence\n            if (trimmedSentence.charAt(i) == ' ') {\n     \
    \           newSentence += \" \";\n            } else {\n                \n  \
    \              // Step 4: If this character is not a space then add the character\
    \ to the newSentence\n                newSentence += trimmedSentence.charAt(i);\n\
    \            }\n        }\n        \n        // Step 5: Return the newSentence\n\
    \        return newSentence;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1crt2ohx.java:52)\n"
  stdout: ''
  timestamp: 1660010480
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // Write your code here.\n        char[] arr = sentence.toCharArray();\n\
    \        List<Integer> lens = new ArrayList<Integer>();\n        for (int i =\
    \ 0; i < arr.length; i++) {\n            if (Character.isLetter(arr[i])) {\n \
    \               lens.add(i);\n            }\n        }\n        Collections.sort(lens);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ lens.size(); i++) {\n            sb.append(sentence.subSequence(lens.get(i),\
    \ lens.get(i) + 1));\n        }\n        return sb.toString();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp762fjskk.java:40)\n"
  stdout: ''
  timestamp: 1660010480
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String result = \"\";\n        boolean isPrime = true;\n        int tempLength\
    \ = 1;\n        int testLength = 2;\n        while (testLength <= tempLength)\
    \ {\n            for (int i = 0; i < tempLength; i++) {\n                if (isPrime)\
    \ {\n                    for (int j = 0; j < tempLength - i; j++) {\n        \
    \                if (tempLength % i == 0) {\n                            isPrime\
    \ = false;\n                        }\n                    }\n               \
    \ }\n                if (isPrime) {\n                    for (int j = 0; j < tempLength\
    \ - i; j++) {\n                        if (tempLength % i == 0) {\n          \
    \                  isPrime = false;\n                        }\n             \
    \       }\n                }\n                if (isPrime) {\n               \
    \     for (int j = 0; j < tempLength - i; j++) {\n                        if (tempLength\
    \ % i == 0) {\n                            isPrime = false;\n                \
    \        }\n                    }\n                }\n                if (isPrime)\
    \ {\n                    for (int j = 0; j < tempLength - i; j++) {\n        \
    \                if (tempLength % i == 0) {\n                            isPrime\
    \ = false;\n                        }\n                    }\n               \
    \ }\n                if (isPrime) {\n                    for (int j = 0; j < tempLength\
    \ - i; j++) {\n                        if (tempLength % i == 0) {\n          \
    \                  isPrime = false;\n                        }\n             \
    \       }\n                }\n            }\n            tempLength = testLength;\n\
    \            testLength = testLength + 2;\n        }\n        char[] c = sentence.toCharArray();\n\
    \        Arrays.sort(c);\n        boolean isPrime2 = true;\n        for (int i\
    \ = 0; i < c.length; i++) {\n            if (isPrime2) {\n                for\
    \ (int j = 0; j < c.length - i; j++) {\n                    if (c[i] % i == 0)\
    \ {\n                        isPrime2 = false;\n                    }\n      \
    \          }\n            }\n            if (isPrime2) {\n                for\
    \ (int j = 0; j < c.length - i; j++) {\n                    if (c[i] % i == 0)\
    \ {\n                        isPrime2 = false;\n                    }\n      \
    \          }\n            }\n            if (isPrime2) {\n                for\
    \ (int j = 0; j < c.length - i; j++) {\n                    if (c[i] % i == 0)\
    \ {\n                        isPrime2 = false;\n                    }\n      \
    \          }\n            }\n            if (isPrime2) {\n                for\
    \ (int j = 0; j < c.length - i; j++) {\n                    if (c[i] % i == 0)\
    \ {\n                        isPrime2 = false;\n                    }\n      \
    \          }\n            }\n            if (isPrime2) {\n                for\
    \ (int j = 0; j < c.length - i; j++) {\n                    if (c[i] % i == 0)\
    \ {\n                        isPrime2 = false;\n                    }\n      \
    \          }\n            }\n            if (isPrime2) {\n                for\
    \ (int j = 0; j < c.length - i; j++) {\n                    if (c[i] % i == 0)\
    \ {\n                        isPrime2 = false;\n                    }\n      \
    \          }\n            }\n        }\n        StringBuilder temp = new StringBuilder();\n\
    \        for (int i = 0; i < c.length; i++) {\n            if (tempLength > 0\
    \ && c[i] != ' ') {\n                temp.append(c[i]);\n                tempLength--;\n\
    \            }\n        }\n        result = temp.toString();\n        Arrays.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgjc5vxvu.java:124: error: no suitable method found for sort(String)\n\
    \        Arrays.sort(result);\n              ^\n    method Arrays.sort(int[])\
    \ is not applicable\n      (argument mismatch; String cannot be converted to int[])\n\
    \    method Arrays.sort(long[]) is not applicable\n      (argument mismatch; String\
    \ cannot be converted to long[])\n    method Arrays.sort(short[]) is not applicable\n\
    \      (argument mismatch; String cannot be converted to short[])\n    method\
    \ Arrays.sort(char[]) is not applicable\n      (argument mismatch; String cannot\
    \ be converted to char[])\n    method Arrays.sort(byte[]) is not applicable\n\
    \      (argument mismatch; String cannot be converted to byte[])\n    method Arrays.sort(float[])\
    \ is not applicable\n      (argument mismatch; String cannot be converted to float[])\n\
    \    method Arrays.sort(double[]) is not applicable\n      (argument mismatch;\
    \ String cannot be converted to double[])\n    method Arrays.sort(Object[]) is\
    \ not applicable\n      (argument mismatch; String cannot be converted to Object[])\n\
    \    method Arrays.<T#1>sort(T#1[],Comparator<? super T#1>) is not applicable\n\
    \      (cannot infer type-variable(s) T#1\n        (actual and formal argument\
    \ lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660010480
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        return Arrays.stream(words).map(a\
    \ -> a.length()==2 && a.charAt(0)==a.charAt(1)).filter(x -> x).sorted().map(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprkno2vj4.java:28)\n"
  stdout: ''
  timestamp: 1660010480
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        Set<Integer> primeNumbers = new HashSet<>();\n        String newSentence\
    \ = \"\";\n        String tempWord = \"\";\n        String wordToFindInSentence\
    \ = \"\";\n        String[] wordsInSentence = sentence.split(\" \");\n       \
    \ for(int i = 0; i < wordsInSentence.length; i++) {\n            int wordLength\
    \ = wordsInSentence[i].length();\n            for(int j = 0; j < wordLength; j++)\
    \ {\n                if(wordsInSentence[i].charAt(j) == ' ') {\n             \
    \       tempWord = wordsInSentence[i].substring(0, j);\n                    if(!primeNumbers.contains(wordLength))\
    \ {\n                        newSentence = newSentence + \" \" + tempWord;\n \
    \                       primeNumbers.add(wordLength);\n                    }\n\
    \                    break;\n                } else {\n                    tempWord\
    \ = wordsInSentence[i].substring(j);\n                    if(!primeNumbers.contains(wordLength))\
    \ {\n                        newSentence = newSentence + \" \" + tempWord;\n \
    \                       primeNumbers.add(wordLength);\n                    }\n\
    \                }\n            }\n        }\n        return newSentence;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4atbeacx.java:51)\n"
  stdout: ''
  timestamp: 1660010480
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        //write your code here\n        Map<Integer, List<String>> hashMap =\
    \ new HashMap<>();\n        StringBuilder sb = new StringBuilder();\n        String[]\
    \ s = sentence.split(\" \");\n        for (String str : s) {\n            int\
    \ length = str.length();\n            if (length != 0)\n                hashMap.computeIfAbsent(length,\
    \ k -> new ArrayList<>()).add(str);\n        }\n        ArrayList primeNums =\
    \ new ArrayList();\n        ArrayList<String> primeStr = new ArrayList<>();\n\
    \        for (Map.Entry<Integer, List<String>> entry : hashMap.entrySet()) {\n\
    \            boolean isPrime = true;\n            int length = entry.getKey();\n\
    \            for (int i = 0; i < length; i++) {\n                int a = length\
    \ / i;\n                if (a == 1)\n                    primeNums.add(entry.getKey());\n\
    \                if (a != 1) {\n                    isPrime = false;\n       \
    \             break;\n                }\n            }\n            if (isPrime)\
    \ {\n                primeStr.add(entry.getValue().get(0));\n            }\n \
    \       }\n        for (int i = 0; i < primeNums.size(); i++) {\n            sb.append(primeStr.get(i)\
    \ + \" \");\n        }\n        return sb.toString();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArithmeticException: / by zero\n\
    \tat Problem.wordsInSentence(tmp216xlr8y.java:39)\n\tat Problem.main(tmp216xlr8y.java:57)\n"
  stdout: ''
  timestamp: 1660010480
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for(int i=0;i<words.length;i++) {\n          \
    \  for(int j=0;j<words.length;j++) {\n                if(words[i].length() !=\
    \ words[j].length())\n                    continue;\n                String word1\
    \ = words[i];\n                String word2 = words[j];\n                if(!word1.equalsIgnoreCase(word2))\n\
    \                    continue;\n                boolean isPrime = true;\n    \
    \            for(int k=0;k<word1.length();k++) {\n                    char c =\
    \ word1.charAt(k);\n                    if(!Character.isLetter(c))\n         \
    \               isPrime = false;\n                    else\n                 \
    \       break;\n                }\n                if(isPrime) {\n           \
    \         result.add(word1);\n                }\n            }\n        }\n  \
    \      return String.join(\" \", result);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3h1xzj0n.java:50)\n"
  stdout: ''
  timestamp: 1660010480
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> words = Arrays.asList(sentence.split(\" \"));\n        List<Integer>\
    \ lengths = words.stream().map(String::length).collect(Collectors.toList());\n\
    \        List<String> result = new ArrayList<>();\n        List<Integer> primes\
    \ = new ArrayList<>();\n        \n        for(int i = 1; i < lengths.size(); i++)\
    \ {\n            \n            if(lengths.get(i) % 2 == 0)\n                primes.add(i);\n\
    \            \n            for(int j = i; (j + 3) <= lengths.get(i); j += 2)\n\
    \                primes.add(j);\n        }\n        \n        for(int i = 0; i\
    \ < primes.size(); i++) {\n            String word = words.get(i);\n         \
    \   \n            for(int j = i; (j + 3) <= lengths.get(i); j += 2) {\n      \
    \          if(lengths.get(j) == (lengths.get(i) / 2) && lengths.get(j + 2) ==\
    \ (lengths.get(i) / 2)) {\n                    result.add(word);\n           \
    \         break;\n                }\n            }\n        }\n        \n    \
    \    String res = \"\";\n        for(String s : result)\n            res += \"\
    \ \" + s;\n        return res.replace(\" \", \"\");\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp76icwkux.java:55)\n"
  stdout: ''
  timestamp: 1660010480
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        if (sentence == null || sentence.isEmpty()) {\n            return \"\"\
    ;\n        }\n        List<String> splitSentence = Arrays.asList(sentence.split(\"\
    \ \"));\n        List<String> result = new ArrayList<>();\n        for (String\
    \ words : splitSentence) {\n            result.add(words);\n        }\n      \
    \  Map<String, List<String>> wordDict = new HashMap<>();\n        List<String>\
    \ uniqueWords = new ArrayList<>();\n        for (String s : result) {\n      \
    \      if (wordDict.containsKey(s)) {\n                wordDict[s].add(s);\n \
    \           } else {\n                wordDict.put(s, new ArrayList<>());\n  \
    \              wordDict[s].add(s);\n                uniqueWords.add(s);\n    \
    \        }\n        }\n        List<String> finalResult = new ArrayList<>();\n\
    \        List<String> finalUniqueWords = new ArrayList<>();\n        for (String\
    \ uniqueWord : uniqueWords) {\n            int uniqueWordLength = Math.sqrt(uniqueWord.length());\n\
    \            List<String> primeResult = new ArrayList<>();\n            for (int\
    \ i = 2; i <= uniqueWordLength; i++) {\n                if (isPrime(i) && primeResult.contains(uniqueWord.substring(0,\
    \ i))) {\n                    primeResult.add(uniqueWord.substring(0, i));\n \
    \               }\n            }\n            if (!primeResult.isEmpty()) {\n\
    \                finalUniqueWords.add(uniqueWord);\n                for (String\
    \ p : primeResult) {\n                    finalResult.add(p);\n              \
    \  }\n            }\n        }\n        return new StringJoiner(\" \")\n     \
    \           .addAll(finalResult)\n                .addAll(finalUniqueWords)\n\
    \                .toString();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpopb5fnjg.java:36: error: incompatible types: String cannot be converted\
    \ to int\n                wordDict[s].add(s);\n                         ^\n/tmp/tmpopb5fnjg.java:36:\
    \ error: array required, but Map<String,List<String>> found\n                wordDict[s].add(s);\n\
    \                        ^\n/tmp/tmpopb5fnjg.java:39: error: incompatible types:\
    \ String cannot be converted to int\n                wordDict[s].add(s);\n   \
    \                      ^\n/tmp/tmpopb5fnjg.java:39: error: array required, but\
    \ Map<String,List<String>> found\n                wordDict[s].add(s);\n      \
    \                  ^\n/tmp/tmpopb5fnjg.java:46: error: incompatible types: possible\
    \ lossy conversion from double to int\n            int uniqueWordLength = Math.sqrt(uniqueWord.length());\n\
    \                                            ^\n/tmp/tmpopb5fnjg.java:49: error:\
    \ cannot find symbol\n                if (isPrime(i) && primeResult.contains(uniqueWord.substring(0,\
    \ i))) {\n                    ^\n  symbol:   method isPrime(int)\n  location:\
    \ class Problem\n/tmp/tmpopb5fnjg.java:61: error: cannot find symbol\n       \
    \         .addAll(finalResult)\n                ^\n  symbol:   method addAll(List<String>)\n\
    \  location: class StringJoiner\n7 errors\n"
  stdout: ''
  timestamp: 1660010480
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        Map<String, Integer> charCount = new HashMap<>();\n        for (char\
    \ c : sentence.toCharArray())\n            charCount.put(c, (charCount.getOrDefault(c,\
    \ 0) + 1));\n        PriorityQueue<Integer> heap = new PriorityQueue<>(Comparator.comparingInt(x\
    \ -> charCount.getOrDefault(x.toString(), 0)));\n        charCount.entrySet().stream().filter(x\
    \ -> x.getValue() >= 2).forEachOrdered(x -> heap.offer(x.getValue()));\n     \
    \   StringBuilder result = new StringBuilder();\n        int i = 0;\n        while\
    \ (!heap.isEmpty() && i < heap.peek())\n            result.append(heap.pollFirst());\n\
    \        while (i < heap.peek())\n            result.append(heap.pollLast());\n\
    \        return result.toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeiihomwd.java:26: error: incompatible types: char cannot be converted\
    \ to String\n            charCount.put(c, (charCount.getOrDefault(c, 0) + 1));\n\
    \                          ^\n/tmp/tmpeiihomwd.java:32: error: cannot find symbol\n\
    \            result.append(heap.pollFirst());\n                              ^\n\
    \  symbol:   method pollFirst()\n  location: variable heap of type PriorityQueue<Integer>\n\
    /tmp/tmpeiihomwd.java:34: error: cannot find symbol\n            result.append(heap.pollLast());\n\
    \                              ^\n  symbol:   method pollLast()\n  location: variable\
    \ heap of type PriorityQueue<Integer>\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1660010480
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        ArrayList<Integer> lens = new ArrayList<Integer>();\n        for (String\
    \ s : sentence.split(\" \")) {\n            lens.add(s.length());\n        }\n\
    \        boolean duplicate = false;\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        for(int i=0;i<lens.size();i++) {\n            if(!duplicate) {\n    \
    \            duplicate = result.contains(lens.get(i));\n            }\n      \
    \      if(duplicate) {\n                return sentence.substring(0,i);\n    \
    \        }\n            if(!duplicate) {\n                result.add(lens.get(i));\n\
    \            }\n        }\n        return sentence;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkttp_ar4.java:44)\n"
  stdout: ''
  timestamp: 1660010480
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> words = new ArrayList<String>();\n        String[] tokens\
    \ = sentence.split(\" \");\n        for (String token : tokens) {\n          \
    \  words.add(token);\n        }\n        List<Integer> primes = new ArrayList<Integer>();\n\
    \        StringBuilder builder = new StringBuilder();\n        for (String word\
    \ : words) {\n            if (isPrime(Integer.parseInt(word))) {\n           \
    \     primes.add(Integer.parseInt(word));\n            }\n        }\n        for\
    \ (int p : primes) {\n            builder.append(words.get(p));\n        }\n \
    \       return builder.toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mcgwmem.java:32: error: cannot find symbol\n            if (isPrime(Integer.parseInt(word)))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010480
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        ArrayList<String> results\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrimeNumber(word.length()))\
    \ {\n                results.add(word);\n            }\n        }\n        StringBuilder\
    \ builder = new StringBuilder();\n        for (String word : results) {\n    \
    \        builder.append(word).append(\" \");\n        }\n        return builder.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3kvnobqa.java:27: error: cannot find symbol\n            if (isPrimeNumber(word.length()))\
    \ {\n                ^\n  symbol:   method isPrimeNumber(int)\n  location: class\
    \ Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010480
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        IntStream.range(0, words.length).filter(i\
    \ -> isPrime(words[i].length())).sorted().forEach(i -> {\n            words[i]\
    \ = words[i].toUpperCase();\n        });\n        String ans = \"\";\n       \
    \ for (int i = 0; i < words.length; i++) {\n            if (isPrime(words[i].length())\
    \ && ans.contains(words[i]) && ans.length() != ans.lastIndexOf(words[i])) {\n\
    \                ans = ans + \" \" + words[i];\n            }\n        }\n   \
    \     return ans.replaceAll(\"\\\\s+\", \" \");\n    }\n    public static void\
    \ main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzdf4y5bc.java:25: error: cannot find symbol\n        IntStream.range(0,\
    \ words.length).filter(i -> isPrime(words[i].length())).sorted().forEach(i ->\
    \ {\n                                                     ^\n  symbol:   method\
    \ isPrime(int)\n  location: class Problem\n/tmp/tmpzdf4y5bc.java:30: error: cannot\
    \ find symbol\n            if (isPrime(words[i].length()) && ans.contains(words[i])\
    \ && ans.length() != ans.lastIndexOf(words[i])) {\n                ^\n  symbol:\
    \   method isPrime(int)\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660010480
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] arr = sentence.split(\" \");\n        List<String> res = new\
    \ ArrayList<String>();\n        for (String word : arr) {\n            String\
    \ check = Integer.toString(word.length());\n            if (isPrimeNumber(check))\
    \ {\n                res.add(word);\n            }\n        }\n        return\
    \ res.toString();\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwdfjw0p5.java:28: error: cannot find symbol\n            if (isPrimeNumber(check))\
    \ {\n                ^\n  symbol:   method isPrimeNumber(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010480
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // Split sentence into words\n        // Split each word in sentence\n\
    \        // For each word check if it can be prime\n        String[] split = sentence.split(\"\
    \ \");\n        String result = \"\";\n        for (int i = 0; i < split.length;\
    \ i++) {\n            String word = split[i];\n            // Check if word can\
    \ be prime\n            boolean isPrime = false;\n            for(int j = 2; j\
    \ < Integer.parseInt(word); j++) {\n                if(isPrime) {\n          \
    \          break;\n                }\n                if(new BigInteger(word).divide(new\
    \ BigInteger(String.valueOf(j))).equals(BigInteger.ONE)) {\n                 \
    \   isPrime = true;\n                }\n            }\n            if (isPrime)\
    \ {\n                result += word;\n                result += \" \";\n     \
    \       }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"This\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.wordsInSentence(tmpkv51hs2d.java:33)\n\tat Problem.main(tmpkv51hs2d.java:49)\n"
  stdout: ''
  timestamp: 1660010480
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        int count = 0;\n        List<Integer> primes = new ArrayList<>();\n \
    \       List<String> words = new ArrayList<>();\n        ArrayList<Integer> primes\
    \ = new ArrayList<>();\n        ArrayList<String> words = new ArrayList<>();\n\
    \        for (char c: sentence.toCharArray()) {\n            if (Character.isLetter(c))\
    \ {\n                words.add(c);\n                count++;\n            }\n\
    \        }\n        StringBuilder str = new StringBuilder();\n        boolean\
    \ isPrime = true;\n        long startTime = System.nanoTime();\n        for (char\
    \ c: sentence.toCharArray()) {\n            if (Character.isLetter(c)) {\n   \
    \             str.append(c);\n                count++;\n            }\n      \
    \  }\n        for (int i = 0; i < count; i++) {\n            primes.add(count*i);\n\
    \        }\n        isPrime = true;\n        startTime = System.nanoTime();\n\
    \        for (int i = 0; i < count; i++) {\n            if (primes.get(i) % words.get(i).length()\
    \ == 0) {\n                isPrime = false;\n                break;\n        \
    \    }\n        }\n        if (isPrime) {\n            long endTime = System.nanoTime();\n\
    \            System.out.println(\"Time to run: \" + endTime - startTime);\n  \
    \          return str.toString();\n        }\n        startTime = System.nanoTime();\n\
    \        for (int i = 0; i < count; i++) {\n            if (primes.get(i) % str.length()\
    \ == 0) {\n                isPrime = false;\n                break;\n        \
    \    }\n        }\n        if (isPrime) {\n            long endTime = System.nanoTime();\n\
    \            System.out.println(\"Time to run: \" + endTime - startTime);\n  \
    \          return str.toString();\n        }\n        return sentence;\n    }\n\
    \    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpizyon1xk.java:27: error: variable primes is already defined in\
    \ method wordsInSentence(String)\n        ArrayList<Integer> primes = new ArrayList<>();\n\
    \                           ^\n/tmp/tmpizyon1xk.java:28: error: variable words\
    \ is already defined in method wordsInSentence(String)\n        ArrayList<String>\
    \ words = new ArrayList<>();\n                          ^\n/tmp/tmpizyon1xk.java:31:\
    \ error: incompatible types: char cannot be converted to String\n            \
    \    words.add(c);\n                          ^\n/tmp/tmpizyon1xk.java:57: error:\
    \ bad operand types for binary operator '-'\n            System.out.println(\"\
    Time to run: \" + endTime - startTime);\n                                    \
    \                     ^\n  first type:  String\n  second type: long\n/tmp/tmpizyon1xk.java:69:\
    \ error: bad operand types for binary operator '-'\n            System.out.println(\"\
    Time to run: \" + endTime - startTime);\n                                    \
    \                     ^\n  first type:  String\n  second type: long\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    5 errors\n"
  stdout: ''
  timestamp: 1660010480
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // write your code here\n        List<String> list = new ArrayList<>();\n\
    \        for(int i = 0; i< sentence.length(); i++){\n            if(!Character.isLetter(sentence.charAt(i))){\n\
    \                continue;\n            }\n            int length = Integer.parseInt(sentence.substring(i,\
    \ i + 1));\n            for(int j = 1; j < length; j++){\n                if(!Character.isLetter(sentence.charAt(i\
    \ + j))){\n                    continue;\n                }\n                list.add(sentence.substring(i,\
    \ i + j));\n            }\n        }\n        Collections.sort(list);\n      \
    \  String s = \"\";\n        for(String x: list){\n            s += x;\n     \
    \   }\n        return s;\n    }\n    public static void main(String[] args) {\n\
    \    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"T\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.wordsInSentence(tmptjy0lcqe.java:30)\n\tat Problem.main(tmptjy0lcqe.java:46)\n"
  stdout: ''
  timestamp: 1660010481
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // Your code here\n        return \"\";\n    }\n    public static void\
    \ main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_muq304c.java:28)\n"
  stdout: ''
  timestamp: 1660010318
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String wordsInSentence = \"\";\n        LinkedList wordsList = new LinkedList();\n\
    \        String[] wordsArray = sentence.split(\" \");\n        Integer number\
    \ = 2;\n        for (String word : wordsArray) {\n            int length = word.length();\n\
    \            if (length % number != 0) {\n                return \"Invalid sentence\
    \ input\";\n            }\n            wordsList.addLast(word);\n            number++;\n\
    \        }\n        while (!wordsList.equals(new LinkedList())) {\n          \
    \  String nextWord = wordsList.last();\n            int nextWordLength = nextWord.length();\n\
    \            wordsInSentence += nextWord;\n            wordsList.removeLast();\n\
    \            while (!wordsList.equals(new LinkedList())) {\n                String\
    \ lastWord = wordsList.last();\n                int lastWordLength = lastWord.length();\n\
    \                if (nextWordLength == lastWordLength) {\n                   \
    \ wordsInSentence += lastWord;\n                    wordsList.removeLast();\n\
    \                } else {\n                    wordsInSentence += nextWord;\n\
    \                    wordsList.removeLast();\n                    wordsInSentence\
    \ += lastWord;\n                    wordsList.removeLast();\n                \
    \    nextWord = lastWord;\n                    nextWordLength = lastWordLength;\n\
    \                }\n            }\n        }\n        return wordsInSentence;\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdbonzrqw.java:37: error: cannot find symbol\n            String\
    \ nextWord = wordsList.last();\n                                       ^\n  symbol:\
    \   method last()\n  location: variable wordsList of type LinkedList\n/tmp/tmpdbonzrqw.java:42:\
    \ error: cannot find symbol\n                String lastWord = wordsList.last();\n\
    \                                           ^\n  symbol:   method last()\n  location:\
    \ variable wordsList of type LinkedList\nNote: /tmp/tmpdbonzrqw.java uses unchecked\
    \ or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n\
    2 errors\n"
  stdout: ''
  timestamp: 1660010480
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        Set<Integer> lens = new HashSet<>();\n        List<String> words = Arrays.asList(sentence.split(\"\
    \ \"));\n        for (int i = 0; i < words.size(); i++) {\n            int len\
    \ = words.get(i).length();\n            if (!lens.contains(len)) {\n         \
    \       lens.add(len);\n            }\n        }\n        List<String> ret = new\
    \ ArrayList<>(words);\n        ret.removeAll(lens);\n        ret.sort(Comparator.comparing(x\
    \ -> x.length()));\n        return Joiner.on(\" \").join(ret);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuxydvdjk.java:35: error: cannot find symbol\n        return Joiner.on(\"\
    \ \").join(ret);\n               ^\n  symbol:   variable Joiner\n  location: class\
    \ Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010480
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        if (sentence.isEmpty()) return \"\";\n        ArrayList<Integer> primeNumbers\
    \ = new ArrayList<>();\n        for (String word : sentence.split(\" \")) {\n\
    \            if (isPrimeNumber(Integer.valueOf(word)))\n                primeNumbers.add(Integer.valueOf(word));\n\
    \        }\n        return primeNumbers.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_zrzrcot.java:27: error: cannot find symbol\n            if (isPrimeNumber(Integer.valueOf(word)))\n\
    \                ^\n  symbol:   method isPrimeNumber(Integer)\n  location: class\
    \ Problem\n/tmp/tmp_zrzrcot.java:30: error: no suitable method found for collect(Collector<CharSequence,CAP#1,String>)\n\
    \        return primeNumbers.stream().collect(Collectors.joining(\" \"));\n  \
    \                                  ^\n    method Stream.<R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super Integer>,BiConsumer<R#1,R#1>) is not applicable\n      (cannot infer type-variable(s)\
    \ R#1\n        (actual and formal argument lists differ in length))\n    method\
    \ Stream.<R#2,A>collect(Collector<? super Integer,A,R#2>) is not applicable\n\
    \      (cannot infer type-variable(s) R#2,A\n        (argument mismatch; Collector<CharSequence,CAP#2,String>\
    \ cannot be converted to Collector<? super Integer,A,R#2>))\n  where R#1,T,R#2,A\
    \ are type-variables:\n    R#1 extends Object declared in method <R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super T>,BiConsumer<R#1,R#1>)\n    T extends Object declared in interface Stream\n\
    \    R#2 extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \    A extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \  where CAP#1,CAP#2 are fresh type-variables:\n    CAP#1 extends Object from\
    \ capture of ?\n    CAP#2 extends Object from capture of ?\n2 errors\n"
  stdout: ''
  timestamp: 1660010481
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // Write your code here.\n        String[] stringArray = sentence.split(\"\
    \ \");\n        List<String> list = new ArrayList<String>();\n        for(String\
    \ s:stringArray){\n            if(s.length()%2 ==0){\n                String a\
    \ = s;\n                String b = a;\n                StringBuffer temp = new\
    \ StringBuffer();\n                while(b.length()>0){\n                    int\
    \ length = b.length();\n                    int index = 0;\n                 \
    \   int index2 = 0;\n                    int index3 = 0;\n                   \
    \ for(; index <= length; index++){\n                        if(b.charAt(index)\
    \ != b.charAt(length)){\n                            temp.append(b.charAt(index));\n\
    \                            b.deleteCharAt(index2);\n                       \
    \     index3 = 0;\n                        }\n                        else if(b.charAt(index)\
    \ == b.charAt(length)){\n                            b.deleteCharAt(index2);\n\
    \                            b.deleteCharAt(index3);\n                       \
    \ }\n                        index2++;\n                        index3++;\n  \
    \                  }\n                }\n                list.add(a);\n      \
    \      }\n        }\n        String res = \"\";\n        for(String s:list){\n\
    \            res+=s+\" \";\n        }\n        return res;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqmp0nlur.java:40: error: cannot find symbol\n                 \
    \           b.deleteCharAt(index2);\n                             ^\n  symbol:\
    \   method deleteCharAt(int)\n  location: variable b of type String\n/tmp/tmpqmp0nlur.java:44:\
    \ error: cannot find symbol\n                            b.deleteCharAt(index2);\n\
    \                             ^\n  symbol:   method deleteCharAt(int)\n  location:\
    \ variable b of type String\n/tmp/tmpqmp0nlur.java:45: error: cannot find symbol\n\
    \                            b.deleteCharAt(index3);\n                       \
    \      ^\n  symbol:   method deleteCharAt(int)\n  location: variable b of type\
    \ String\n3 errors\n"
  stdout: ''
  timestamp: 1660010481
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        // Your code here\n        StringBuilder str = new StringBuilder();\n\
    \        String[] arr = sentence.split(\" \");\n        for (String s : arr) {\n\
    \            if (s.matches(\"\\\\d+\")) {\n                str.append(s);\n  \
    \          }\n        }\n        return str.toString();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmb_46mhp.java:35)\n"
  stdout: ''
  timestamp: 1660010481
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        return null;\n    }\n    public static void main(String[] args) {\n \
    \   assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.wordsInSentence(String)\"\
    \ is null\n\tat Problem.main(tmp58byv689.java:27)\n"
  stdout: ''
  timestamp: 1660010318
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        char[] charArray = sentence.toCharArray();\n        Arrays.sort(charArray);\n\
    \        StringBuilder result = new StringBuilder();\n        for(int i=0;i<charArray.length;i++)\
    \ {\n            boolean flag = true;\n            for(int j=1;j<=charArray.length-i;j++)\
    \ {\n                if(charArray[j]*i == charArray[j-1]) {\n                \
    \    flag = false;\n                    break;\n                }\n          \
    \  }\n            if(flag) {\n                result.append(charArray[i]);\n \
    \           }\n        }\n        return result.toString();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 14 out of bounds for length 14\n\tat Problem.wordsInSentence(tmpbi3m7ixe.java:30)\n\
    \tat Problem.main(tmpbi3m7ixe.java:42)\n"
  stdout: ''
  timestamp: 1660010481
