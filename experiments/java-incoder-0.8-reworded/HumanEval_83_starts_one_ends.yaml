name: HumanEval_83_starts_one_ends
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given a positive integer n, return the count of the numbers\
  \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
  \ long startsOneEnds(long n) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(startsOneEnds((1l))\
  \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
  \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
  \ == (18000l));\n    }\n\n}\n"
completions: ["        final int base = 10;\n        final long start = Integer.parseInt(String.format(\"\
    %0\" + base + \"d\", n));\n        return LongStream.range(start, n).filter(i\
    \ -> i % base == 1).count();", "        // This problem was inspired by this problem:\n\
    \        // http://stackoverflow.com/questions/24778337/how-to-count-the-number-of-numbers-that-are-start-or-end-to-a-given-number\n\
    \        long count = 0;\n        for (int i = 1; i <= n; i++) {\n           \
    \ if (isStartOrEnd(i, n)) {\n                count++;\n            }\n       \
    \ }\n        return count;", "        long count = 0;\n        for(long i = n;\
    \ (i > 1) && (i <= Math.sqrt(n));) {\n            if((n % i) == 0) {\n       \
    \         if((n / i) == 1)\n                    count++;\n                else\n\
    \                    count--;\n            }\n            i += i;\n        }\n\
    \        return count;", "        if (n == 0 || n == 1) {\n            return\
    \ 0;\n        }\n        long count = 0;\n        if (n % 100 == 0) {\n      \
    \      count = count + startsOneEnds(n / 100) - 1;\n        }\n        if (n %\
    \ 10 == 0) {\n            count = count + startsOneEnds(n / 10) - 1;\n       \
    \ }\n        if (n % 5 == 0) {\n            count = count + startsOneEnds(n /\
    \ 5) - 1;\n        }\n        if (n % 2 == 0) {\n            count = count + startsOneEnds(n\
    \ / 2);\n        }\n        return count;", "        if (n < 10)\n           \
    \ return 0;\n        long sum = 0;\n        for (long i = n; i <= 10; i++)\n \
    \           sum += startsOneEnds(i) == 1;\n        return sum;", "        long\
    \ count = 0;\n        long start = 1, end = 1;\n        do {\n            start\
    \ = end;\n            while (start < n && end < n && start % 10 == 1 && end %\
    \ 10 == 1) {\n                start += 1;\n                end += 1;\n       \
    \     }\n            count++;\n        } while (start <= n);\n        return count;",
  "        return LongStream.rangeClosed(1, n)\n                .filter(i -> n % i\
    \ == 0 && i != 0)\n                .count();", "        long count = 0;\n    \
    \    long digit = n / 10;\n        long rem = n % 10;\n        while (digit >\
    \ 0) {\n            if (rem == 1) {\n                count++;\n            }\n\
    \            digit--;\n            rem = rem / 10;\n        }\n        return\
    \ count;", "        long startsOneCount = 0;\n        while (n > 0) {\n      \
    \      int nDigits = (int) (Math.log10(n) + 1);\n            String numberAsString\
    \ = Long.toString(n);\n            long endsWith1 = Long.parseLong(numberAsString.substring(0,\
    \ nDigits));\n            long startsWith1 = Long.parseLong(numberAsString.substring(endsWith1\
    \ + 1));\n            if (startsWith1 == 1) {\n                startsOneCount++;\n\
    \            }\n            n = endsWith1;\n        }\n        return startsOneCount;",
  "        long count = 0;\n        while (n != 0) {\n            if (n%10 == 1) {\n\
    \                n = (n/10);\n                count++;\n            } else if\
    \ (n%10 != 1 && n%10 != 9) {\n                return count;\n            }\n \
    \       }\n        return count;", "        if (n < 10)\n            return n;\n\
    \        long count = 0;\n        long m = n / 10;\n        long t = n % 10;\n\
    \        if (t == 1) {\n            count += m;\n        } else {\n          \
    \  for (int i = 0; i < 10; i++) {\n                count += Math.pow(m, i);\n\
    \                m /= 10;\n            }\n            count += Math.pow((long)\
    \ Math.pow(m, t), n - 10 * t);\n        }\n        return count;", "        if\
    \ (n == 1)\n            return 0;\n        long count = 0;\n        for (long\
    \ i = 1; i <= n; i++)\n            if (n%i == 0)\n                if (i%1 == 0)\n\
    \                    count++;\n        return count;", "        if (n == 0) return\
    \ 0;\n        long ones = n / 10;\n        if (n % 10 == 1) ones++;\n        long\
    \ startsOnes = Long.parseLong(new String(new char[n - ones]).replace(\"\\0\",\
    \ \"1\"));\n        long endsOnes = n - (ones * (startsOnes - 1));\n        return\
    \ (startsOnes + endsOnes) / 2;", '        return (n * 10 + n % 10 == 1) ? 1 :
    0;', "        if (n == 1)\n            return 0;\n        long count = 0;\n  \
    \      boolean hasStartOrEnd = isStartOrEnd(n);\n        for (long i = 1; i <=\
    \ n; i++) {\n            if (hasStartOrEnd && isStartOrEnd(i))\n             \
    \   count++;\n        }\n        return count;", "        long num = 0;\n    \
    \    // Find starting digits: n-1 of n%10==0 \n        for(long digit = n; digit\
    \ != 0; digit/=10)\n            if(digit%10 == 1)\n                num++;\n  \
    \      // Find ending digits: n-1 of n%10!=9\n        for(long digit = n; digit\
    \ != 0; digit/=10)\n            if(digit%10 != 9)\n                num++;\n  \
    \      return num;", '        return IntStream.rangeClosed(1, n).filter(i -> n
    % i == 0).count();', "        long c = 0;\n        for (long i = 1; i <= n; i++)\
    \ {\n            if (n % i == 0)\n                c += 1;\n        }\n       \
    \ return c;", "        long count = 0;\n        while (n > 9) {\n            count\
    \ += n % 10 == 1;\n            n /= 10;\n        }\n        return count;", " \
    \       if (n == 0 || n == 1) {\n            return n;\n        }\n        long\
    \ count = 1;\n        for (long i = 1; i <= n; i++) {\n            if ((i % 10)\
    \ == 1) {\n                count++;\n            }\n            if ((i % 10) ==\
    \ 0) {\n                if (i % 100 == 0) {\n                    if (i % 1000\
    \ == 0) {\n                        count++;\n                    }\n         \
    \       } else {\n                    count++;\n                }\n          \
    \  }\n        }\n        return count;", "        return IntStream.range(10L,\
    \ n)\n                .filter(i -> i % 10 == 1)\n                .filter(i ->\
    \ i % 10 != 11)\n                .count() + n;", "        if (n < 1) {\n     \
    \       return 0;\n        }\n        long counter = 0;\n        while (n > 0)\
    \ {\n            n /= 10;\n            counter++;\n        }\n        return counter;",
  "        long sum = 0;\n        // Write your code here.\n        if(n < 10)\n \
    \           return 0;\n        while(n > 0) {\n            sum += (n % 10 == 1)\
    \ ? 1 : 0;\n            n /= 10;\n        }\n        return sum;", "        long\
    \ count = 0;\n        for (int i = n; i > 0; i--) {\n            if (isStartsOne(i,\
    \ i)) {\n                count++;\n            }\n        }\n        return count;",
  "        long result = 0;\n        int digit = 1;\n        while (n != 0) {\n  \
    \          if (n % 10 == 1) {\n                result += (digit++);\n        \
    \    }\n            n /= 10;\n        }\n        return result;", "        if\
    \ (n == 1)\n            return 0;\n        if (n == 0)\n            return 1;\n\
    \        long count = 0;\n        for (int i = 9; i <= n; ++i) {\n           \
    \ if (n % i == 0) {\n                long val = n / i;\n                if (val\
    \ == 1)\n                    ++count;\n                else if (val > 1 && val\
    \ % 2 == 1)\n                    ++count;\n                else if (val > 1 &&\
    \ val % 2 == 0)\n                    ++count;\n            }\n        }\n    \
    \    return count;", "        long count = 0;\n        for (long i = 1; i <= n;\
    \ i++) {\n            if (n % 10 == 1) {\n                if (i == n) return count;\n\
    \                count++;\n            }\n        }\n        return count;", " \
    \       long count = 0, start = 0;\n        for (int i = 1; n >= i; i++) {\n \
    \           count = i * n / i;\n            if (count == 1) {\n              \
    \  start = i;\n            } else if (count == n - 1) {\n                return\
    \ count;\n            }\n        }\n        return count;", "        long ans\
    \ = 0;\n        for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n\
    \                ans += (i / i - 1);\n            }\n        }\n        return\
    \ ans;", "        // Write your code here\n        long answer = 1;\n        long\
    \ first;\n        long last;\n        for(long i=1;i<=n;i++) {\n            first\
    \ = i;\n            for(long j=i;j>1;j--) {\n                last = j;\n     \
    \           if(first%10==last%10) {\n                    if(first%10 == 1) {\n\
    \                        answer++;\n                    }\n                  \
    \  first/=10;\n                    last/=10;\n                }\n            }\n\
    \        }\n        return answer;", "        if (n < 10)\n            return\
    \ 1;\n        if (n > 100000)\n            return 0;\n        // find start by\
    \ summing the first n-2 digits\n        long start = sumOfDigits(n, 2) - 1;\n\
    \        // find end by summing last n-2 digits\n        long end = sumOfDigits(n,\
    \ 2);\n        boolean startsOne = sumOfDigits(start, 1) == 1;\n        boolean\
    \ endsOne = sumOfDigits(end, 1) == 1;\n        if (startsOne && endsOne)\n   \
    \         return 1;\n        if (startsOne || endsOne)\n            return 0;\n\
    \        return startsOne + endsOne;", "        long count = 0;\n        for(long\
    \ m = n; m >= 10; m /= 10)\n            if(m == 1) count++;\n        return count;",
  "        long count = 0;\n        if (n == 1) {\n            return 1;\n       \
    \ }\n        for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n\
    \                count += startsOneEnds(i / i) + 1;\n            }\n        }\n\
    \        return count;", "        long count = 0;\n        for (long i = n; i\
    \ > 0; i /= 10)\n            if (i % 10 == 1)\n                count++;\n    \
    \    return count;", "        long count = 0;\n        while (n>0) {\n       \
    \     if (n%10==1) {\n                count++;\n                n/=10;\n     \
    \       }\n            else {\n                n/=10;\n            }\n       \
    \ }\n        return count;", "        // Initialize two arrays of size n\n   \
    \     long[] numbers = new long[n];\n        long[] count = new long[n];\n   \
    \     Arrays.fill(numbers, 0);\n        Arrays.fill(count, 0);\n\n        // A\
    \ number is considered as n-digit positive integer if its digits are\n       \
    \ // all equal to 1, and the other digits contain zero.\n        for (int i =\
    \ n; i >= 1; i--) {\n            int digit = n % 10;\n            numbers[digit]\
    \ = 1;\n            n /= 10;\n        }\n\n        // Count the number of n-digit\
    \ positive integers that start or end with 1.\n        for (int i = numbers.length\
    \ - 1; i >= 0; i--) {\n            if (numbers[i] == 0) {\n                for\
    \ (int j = i; j >= 0; j--) {\n                    if (numbers[j] == 0) {\n   \
    \                     count[i] += 1;\n                        break;\n       \
    \             }\n                }\n            }\n        }\n        return count[0];",
  "        List<Long> result = new ArrayList<>();\n        long current = n;\n   \
    \     while(current > 0 && current % 10 == 0) {\n            result.add(current\
    \ / 10);\n            current /= 10;\n        }\n        current = n;\n      \
    \  while(current > 0 && current % 10 != 0) {\n            result.add(current /\
    \ 10);\n            current /= 10;\n        }\n        current = n;\n        while(current\
    \ > 0) {\n            while(current % 10 != 0) {\n                result.add(current\
    \ / 10);\n                current /= 10;\n            }\n            current /=\
    \ 10;\n        }\n        return result.stream().filter(x -> x == 1).count();",
  "        ArrayDeque<Long> arr = new ArrayDeque<>();\n        long result = 0;\n\
    \        while (n > 0) {\n            long lastDigit = n % 10;\n            arr.push(lastDigit);\n\
    \            n /= 10;\n        }\n        while (!arr.isEmpty()) {\n         \
    \   long lastDigit = arr.pop();\n            if (lastDigit == 1) {\n         \
    \       ++result;\n            }\n        }\n        return result;", "      \
    \  long[] start = new long[n];\n        long[] end = new long[n];\n        for\
    \ (int i = 0; i < n; i++) {\n            if (isStart(n, i)) {\n              \
    \  start[i] = 1;\n            } else {\n                end[i] = 1;\n        \
    \    }\n        }\n        long count = 0;\n        for (int i = 0; i < n; i++)\
    \ {\n            if (start[i] == 1 && end[i] == 1) {\n                count++;\n\
    \            }\n        }\n        return count;", "        if (n == 0) {\n  \
    \          return 0;\n        }\n        if (n >= 100) {\n            return startsOneEnds(n\
    \ % 100) + 1;\n        }\n        if (n >= 10) {\n            return startsOneEnds(n\
    \ % 10) + 1;\n        }\n        return startsOneEnds(n % 1) + 1;", "        long\
    \ count = 1;\n        while (n > 1) {\n            n = divide(n, 10);\n      \
    \      count++;\n        }\n        return count;", "        long[] arr = new\
    \ long[n + 1];\n        arr[0] = 1;\n        Arrays.fill(arr, 1);\n        long\
    \ res = 0;\n        for(int i = 0; i < n; i++) {\n            long curr = arr[i];\n\
    \            int left = n - i;\n            int leftCnt = (int) Math.floor((long)\
    \ Math.log10(left));\n            int rightCnt = (int) Math.ceil(((long) Math.log10(curr)));\n\
    \            for(int j = leftCnt; j >= 0; j--) {\n                if(curr == 1)\
    \ {\n                    res = (res * 10) + i;\n                    break;\n \
    \               }\n                curr *= 10;\n            }\n            for(int\
    \ j = rightCnt ; j >= 0; j--) {\n                if(curr == 1) {\n           \
    \         res = (res * 10) + i;\n                    break;\n                }\n\
    \                curr /= 10;\n            }\n        }\n        return res;",
  "        long count = 1, count2 = 1, last = 1;\n        do {\n            last *=\
    \ 10;\n            int next = n;\n            do {\n                last = (last\
    \ * 10) + next % 10;\n                next = next / 10;\n            } while (next\
    \ != 1);\n            count2 = (last * last) + count;\n            if (count2\
    \ == n) return count;\n            count *= 10 * n - count;\n        } while (++n\
    \ != 1);\n        return count;", "        // base case\n        if (n <= 0) {\n\
    \            return 0;\n        }\n        // n is positive\n        if (n ==\
    \ 1) {\n            return 1;\n        }\n        // n is odd, starting with 1\n\
    \        if (n % 2 == 0) {\n            return startsOneEnds(n / 2) + 1;\n   \
    \     }\n        // n is even, starting with 1\n        long count = startsOneEnds(n\
    \ / 2);\n        // recurse with n/2\n        return count + startsOneEnds(n /\
    \ 2);", "        int count = 0;\n        while (n > 0) {\n            n = n /\
    \ 10;\n            count++;\n        }\n        return count;", '        return
    IntStream.range(1, n).filter(x -> x == 1 || n % x == 0).count();', "        long\
    \ count = 0;\n        long start = 1, end = n;\n        while (start != end)\n\
    \        {\n            start = start / 10;\n            end = end / 10;\n   \
    \         if (start % 10 == 1 && end % 10 == 1)\n                count++;\n  \
    \      }\n        return count;", "        long result = 0;\n        for (int\
    \ i = 1; i <= n; i++) {\n            if (startsOne(String.valueOf(i))) {\n   \
    \             result++;\n            }\n        }\n        return result;", " \
    \       long count = 0;\n        for (int i = 1; i <= n; i++) {\n            if\
    \ ((n % i) == 0)\n                count++;\n        }\n        return count;",
  "        Set<Long> set = numbers(n);\n        return set.stream()\n            \
    \    .filter(l -> l.equals(1))\n                .count();", "        long count\
    \ = 1;\n        long limit = n;\n        while (limit >= 10) {\n            if\
    \ (limit % 10 == 1) {\n                count += 1;\n            }\n          \
    \  limit = limit / 10;\n        }\n        return count;", "        long count\
    \ = 0; // number of such numbers\n        long m = 1000000000; // largest possible\
    \ number\n        while (m > 1) {\n            if (n < m)\n                m =\
    \ n;\n            else\n                n = m;\n            long m2 = m * m;\n\
    \            if (n > m2)\n                n = m2;\n            while (n / 10 !=\
    \ 0 && n % 10 != 0) {\n                if (n % 10 == 1 && n % 100 != 11 && n %\
    \ 100 != 71 && n % 100 != 81 \n                        && n % 100 != 91 && n %\
    \ 100 != 73 && n % 100 != 87\n                        && n % 100 != 99 && n %\
    \ 100 != 999 && n % 100 != 999) {\n                    count++;\n            \
    \    }\n                n /= 10;\n            }\n            m /= 10;\n      \
    \  }\n        return count;", "        \n        long nDig = n%10;\n        long\
    \ count = 0L;\n        \n        for(long x = n; x > 0; x/= 10) {\n          \
    \  \n            if (x%10 == nDig) {\n                count++;\n            }\n\
    \        }\n        \n        return count;", "        if (n == 1) {\n       \
    \     return 0;\n        } else {\n            return 1 + (endsOne(n-1) + (endsOne(n)));\n\
    \        }", "        long count = 0;\n        long limit = n;\n        while\
    \ (limit > 0) {\n            if (limit % 10 == 1) {\n                count++;\n\
    \            }\n            limit = limit / 10;\n        }\n        return count;",
  "        long count = 0;\n        if (n == 0) return count;\n        if (n >= 1000000000\
    \ || n <= -10000000) return count;\n        long ones = 0;\n        while (n!=0){\n\
    \            ones++;\n            n /= 10;\n        }\n        if (ones >= 10)\
    \ {\n            ones++;\n            ones++;\n        }\n        if (ones ==\
    \ 9) count++;\n        if (ones == 8) count++;\n        if (ones == 7) count++;\n\
    \        if (ones == 6) count++;\n        if (ones == 5) count++;\n        if\
    \ (ones == 4) count++;\n        if (ones == 3) count++;\n        if (ones == 2)\
    \ count++;\n        if (ones == 1) count++;\n        return count;", "       \
    \ long sum = 0;\n        long one = 0;\n        long two = 0;\n        long three\
    \ = 0;\n        long four = 0;\n        long five = 0;\n        long six = zero\
    \ = 0;\n        long seven = 0;\n        long eight = 0;\n        long nine =\
    \ 0;\n        while (n > 0)\n        {\n            if (n % 10 == 1) one++;\n\
    \            if (n % 10 == 2) two++;\n            if (n % 10 == 3) three++;\n\
    \            if (n % 10 == 4) four++;\n            if (n % 10 == 5) five++;\n\
    \            if (n % 10 == 6) six++;\n            if (n % 10 == 7) seven++;\n\
    \            if (n % 10 == 8) eight++;\n            if (n % 10 == 9) nine++;\n\
    \            n /= 10;\n        }\n        sum = (one * 100) + (two * 10) + (three\
    \ * 1) + (four * 1) + (five * 1) + (six * 1) + (seven * 1) + (eight * 1) + (nine\
    \ * 1);\n        return sum;", "        long count = 0;\n        do {\n      \
    \      n = n - 1;\n            count = count + n;\n        } while (n > 1);\n\
    \        return count;", '        return IntStream.range(1, n+1).filter (x ->
    x == 1 || x % 10 == 1).count ();', "        long total = 0;\n        long current\
    \ = 1;\n        while (current <= n) {\n            if (current % 10 == 1 && current\
    \ != 1) {\n                total++;\n            }\n            current++;\n \
    \       }\n        return total;", '        // TODO write your code here', " \
    \       long starts = 1, ends = 0;\n        while (n > 0) {\n            if (n\
    \ % 10 == 1) starts++;\n            if (n % 10 == 0) ends++;\n            n =\
    \ n / 10;\n        }\n        return (starts * ends) % 100000000;", "        long\
    \ counter = 0;\n        if (n == 1) return 0;\n        while (n > 10) {\n    \
    \        counter++;\n            n = n / 10;\n        }\n        return counter;",
  "        long[] arr = new long[n];\n        long startsOne = 0, endsOne = 0;\n \
    \       for(int i = 0; i < n; i++) {\n            arr[i] = i + 1;\n          \
    \  if(i == 0) {\n                startsOne = arr[i];\n            } else {\n \
    \               if(arr[i] == 1) {\n                    endsOne = arr[i];\n   \
    \             }\n            }\n        }\n        if(endsOne - startsOne == 0)\
    \ {\n            return startsOne + endsOne;\n        } else {\n            return\
    \ -1;\n        }", "        long num = 0;\n        while (n > 0) {\n         \
    \   long temp = n % 10;\n            if (temp != 1 && temp != 7) {\n         \
    \       num = num + 1;\n            }\n            n /= 10;\n        }\n     \
    \   return num;", "        Set<Long> numbers = new HashSet<>();\n        for (int\
    \ i = 1; i <= n; i++) {\n            if (isOneOne(i, numbers)) {\n           \
    \     numbers.add(i);\n            }\n        }\n        return numbers.size();",
  "        Set<Long> set = new HashSet<>();\n        while (n) {\n            set.add(-n);\n\
    \            n /= 10;\n        }\n        if (set.contains(1)) {\n           \
    \ return set.size();\n        } else {\n            return 0;\n        }", " \
    \       long count = 1;\n        for (long i = 1; i <= n; i++) count += (n/i %\
    \ (i != i));\n        return count;", "        long count = 0;\n        while\
    \ (n > 0) {\n            count += n / 10;\n            n = n % 10;\n        }\n\
    \        return count;", "        long count = 0;\n        \n        for (int\
    \ i = n; i >= 1; i--) {\n            if (n % i == 0) {\n                count\
    \ += startsOneEnds(n / i);\n            }\n        }\n        \n        return\
    \ count;", "        Set<Long> result = new HashSet<>();\n        for (long i =\
    \ 1; i * i <= n; i++) {\n            if (n % i == 0) {\n                result.add(i);\n\
    \                if (n / i == i) {\n                    result.add(n - i);\n \
    \               }\n            }\n        }\n        return result.size();", " \
    \       long count = 0;\n        long digit = n;\n        while (n > 1) {\n  \
    \          while (digit % 10 == 1 && digit > 1) {\n                count++;\n\
    \                digit /= 10;\n            }\n            while (digit % 10 !=\
    \ 1 && digit <= 1) {\n                digit /= 10;\n            }\n          \
    \  n = digit;\n        }\n        return count;", '        return count(startsOne,
    endsOne, n);', "        long count = 0;\n        for (int i = 1; i <= n / 10;\
    \ i++) {\n            if (isStartsOne(i, n)) {\n                count++;\n   \
    \         }\n        }\n        for (int i = (n / 10) * 10; i <= n; i++) {\n \
    \           if (isStartsOne(i, n)) {\n                count++;\n            }\n\
    \        }\n        return count;", "        if (n < 10) {\n            return\
    \ 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n   \
    \     if (n % 10 == 0) {\n            return startsOneEnds(n / 10) * 1 + (n %\
    \ 10 == 1);\n        }\n        return startsOneEnds(n / 10) * 1 + (n % 10 !=\
    \ 1);", "        Set<Long> nums = IntStream.rangeClosed(1, n).filter(n -> n >=\
    \ 10).boxed().collect(Collectors.toSet());\n        return IntStream.rangeClosed(1,\
    \ n).filter(n -> n==1 || n==n%10).count();", "        int count = 0;\n       \
    \ while (n>0) {\n            n=n/ 10;\n            count++;\n        }\n     \
    \   return count;", "        long count = 0;\n        for (long i = 1; i <= n;\
    \ i++) {\n            if (i % 10 == 1) {\n                count += 1;\n      \
    \      }\n        }\n        return count;", "        long count = 1;\n      \
    \  long maxNum = 10000000;\n        while (n != 0) {\n            if (n % 10 ==\
    \ 1) {\n                count += 1;\n            }\n            maxNum *= 10;\n\
    \            n /= 10;\n        }\n        return count - (long) (maxNum + 1);",
  "        long count = 0;\n        long ones = 1;\n        long last = 1;\n     \
    \   for (long i = 1; i <= n; i++) {\n            if (i % 10 == 1) {\n        \
    \        ones = 1;\n            } else if (i % 10 == 0) {\n                ones\
    \ = 0;\n            }\n            last *= 10;\n            if (ones == 1 && last\
    \ == i) {\n                count++;\n            }\n        }\n        return\
    \ count;", '        return countStartsOne(n);', "        long counter = 0;\n \
    \       if (n > 0) {\n            int length = String.valueOf(n).length();\n \
    \           for (int i = length - 1; i >= 0; i--) {\n                if (String.valueOf(n).charAt(i)\
    \ == '1') {\n                    counter++;\n                    if (i == 0) {\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n        return counter;", '        return LongStream.rangeClosed(1,
    n).filter(i -> i % 10 == 1 && i % 10 != 1).count();', "        int count = 0;\n\
    \        while (n > 9) {\n            if (n % 10 == 1)\n                count++;\n\
    \            n /= 10;\n        }\n        return count;", "        long count\
    \ = 0;\n        long remain = n;\n        int count = 0;\n        while (remain\
    \ > 0) {\n            long div = remain;\n            int digit = 0;\n       \
    \     while (remain > 0 && (div % 10) == 1) {\n                div = div / 10;\n\
    \                digit++;\n            }\n            count += digit;\n      \
    \      remain = div;\n        }\n        return count;", '        return IntStream.rangeClosed(1,
    n).filter(i -> n % i == 0).count();', "        // Find first digit of n\n    \
    \    long firstDigit = (long) Math.floor(n/10);\n        \n        // Iterate\
    \ over digits of n\n        for (long i = firstDigit; i <= 9; i++) {\n       \
    \     \n            // If n is divisble by i, increment counter\n            if\
    \ ((n % i) == 0) {\n                n = (n / i) + i;\n                \n     \
    \           // If first digit of n is 1, return counter\n                if (n\
    \ == 1) {\n                    return (long) Math.ceil(Math.log10(n));\n     \
    \           }\n            }\n        }\n        \n        // If n has no digits\
    \ divisible by 1, 2, or 3, return zero\n        return 0;", "        long count\
    \ = 0;\n        while (n!=0){\n            if (n%10==1) count++;\n           \
    \ n = n/10;\n        }\n        return count;", "        List<Integer> starts\
    \ = new ArrayList<Integer>();\n        List<Integer> ends = new ArrayList<Integer>();\n\
    \        for (int i = 10; i <= n; i++) {\n            long k = i / 10;\n     \
    \       if (k > 1) {\n                starts.add(k);\n            }\n        \
    \    if (i % (long) 10 == 1) {\n                ends.add(i);\n            }\n\
    \        }\n        return starts.stream().filter(n -> n > 0).count() +\n    \
    \            ends.stream().filter(n -> n > 0).count();", "        long numOnes\
    \ = 0, numZeros = 0, cnt = 0;\n        for (int i = 0; i < (long) n; i++) {\n\
    \            int digit = (int) Math.abs(n % 10);\n            if (i == 0)\n  \
    \              numOnes = digit;\n            else\n                numZeros =\
    \ digit;\n\n            cnt += numOnes == 0 || numZeros == 0 ? 0 : 1;\n      \
    \      n = n / 10;\n        }\n\n        return cnt;", "        long count = 0;\n\
    \        long digit = 10000009;\n        while (n != 0) {\n            if (n %\
    \ digit == 0) {\n                long value = Math.pow(2, Integer.parseInt(String.valueOf((n\
    \ / digit))));\n                if (value == 1) count++;\n                n =\
    \ n / digit;\n            }\n            else {\n                digit--;\n  \
    \          }\n        }\n        return count;", "        long count = 0;\n  \
    \      if (n >= 0)\n            while (n >= 10) {\n                count += n\
    \ / 10;\n                n %= 10;\n            }\n        if (n == 1)\n      \
    \      count += 1;\n        return count;", "        long count = 0;\n       \
    \ for (long i = 1; i * i <= n; i++) {\n            if (n % (i * i) == 0) {\n \
    \               count++;\n            }\n        }\n        return count;", " \
    \       // TODO return sum of all n-digit positive integers that start or end\
    \ with 1\n        long count = 0;\n        for (long i = 1; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                count++;\n                if (i\
    \ == 1 || i == n - 1 || n % i == 0) {\n                    count = count;\n  \
    \                  break;\n                }\n            }\n        }\n     \
    \   return count;", "        long count = 0;\n        if (n == 1L) {\n       \
    \     return 0;\n        }\n        if (n < 10) {\n            count++;\n    \
    \        return count;\n        }\n        while (n > 0) {\n            if (n\
    \ % 10 == 1) {\n                count++;\n            }\n            n /= 10;\n\
    \        }\n        return count;", "        long nDigitCount = n / 10;\n    \
    \    long nRemaining = n % 10;\n        if ((nRemaining == 1) && nDigitCount >\
    \ 1) {\n            return 1 + startsOneEnds(n);\n        }\n        else if (nRemaining\
    \ == 1) {\n            return 1 + startsOneEnds(n);\n        }\n        return\
    \ startsOneEnds(nDigitCount) + 1;", "        long sum = 0;\n        for(long i\
    \ = 0; i < n; i++) {\n            if(i % 10 == 1 && i % 100 != 11) {\n       \
    \         sum++;\n            }\n        }\n        return sum;", "        long\
    \ count = 1;\n        for (int i = 2; i <= n/3; i++) {\n            if (n % i\
    \ == 0) {\n                count += 1 + ((n/i) < i);\n            }\n        }\n\
    \        return count;", "        long count = 0; \n        while (n > 1) {\n\
    \            if (n / 10 == 1) {\n                count++;\n            }\n   \
    \         n = n / 10;\n        }\n        return count;", "        long count\
    \ = 0;\n        if (n >= 1000000000000L) {\n            count = startsOneEnds(n\
    \ / 1000000000000L);\n            count += startsOneEnds(n / 100000L);\n     \
    \       count += startsOneEnds(n % 100000L);\n            count += startsOneEnds(n\
    \ % 1000000000000L);\n        } else {\n            count = 1;\n            if\
    \ (n >= 100000L) {\n                count += startsOneEnds(n / 100000L);\n   \
    \             count += startsOneEnds(n % 100000L);\n            } else {\n   \
    \             count += 1;\n                if (n >= 1000000000000L) {\n      \
    \              count += startsOneEnds(n / 1000000000000L);\n                 \
    \   count += startsOneEnds(n % 1000000000000L);\n                } else {\n  \
    \                  count += 1;\n                }\n            }\n        }\n\
    \        return count;", "        // Solve the problem recursively.\n        if\
    \ (n < 100) {\n            return 1;\n        }\n        long c = startsOneEnds(n\
    \ % 10);\n        c += startsOneEnds(n / 10);\n        return c;", "        long\
    \ count = 0;\n        if (n == 0) return count;\n        if (n == 1 || n % 10\
    \ == 1) return count++;\n        if (n < 10 && n % 10 == 9) {\n            if\
    \ (n == 9 || n % 10 == 9 || n == 10) count++;\n            if (n >= 10 && n %\
    \ 10 == 9) count++;\n            if (n >= 10 && n % 10 == 9 && n != 9) count++;\n\
    \        }\n        if (n < 10 && n % 10 != 9) count++;\n        return count;",
  "        return IntStream.rangeClosed(1, n)\n                .filter(x -> x == 1)\n\
    \                .count() - 1;", "        long count = 0;\n        for (int i\
    \ = 0; i < n; i++) {\n            count += isStartsOrEnd(i, n);\n        }\n \
    \       return count;", "        if(n <= 0) {\n            return 0;\n       \
    \ }\n        long count = 0;\n        while(n > 1) {\n            count += (n\
    \ / 100) % 10;\n            n = n / 100;\n        }\n        return count;", " \
    \       if(n <= 0) {\n            return 0;\n        }\n        long ones = 0;\n\
    \        for(long i = 1; i <= n; i++) {\n            if(i % 10 == 1) {\n     \
    \           ones += 1;\n            }\n        }\n        long ends = n - (ones\
    \ % n);\n        return ones + ends;", "        int count = 0;\n        while\
    \ (n >= 10)\n        {\n            int r = n % 10;\n            if (r == 1)\n\
    \            {\n                count++;\n            }\n            n = n/10;\n\
    \        }\n        return count;", "        long count = 0;\n        long remainder\
    \ = n % 10;\n        n /= 10;\n        if (n < 1) {\n            return count;\n\
    \        }\n        long base = 1;\n        while (n > 1) {\n            n = remainder\
    \ * base + n;\n            if (n % 10 == 1) {\n                count++;\n    \
    \        }\n            base += 10;\n            n /= 10;\n        }\n       \
    \ return count;", "        // Your code here\n        return 1;", "        Set<Long>\
    \ s = new HashSet<>();\n        while (n % 10 == 0) {\n            s.add(n % 10);\n\
    \            n /= 10;\n        }\n        s.add(n);\n        return s.stream().filter(l\
    \ -> l >= 1 && l <= 9).collect(Collectors.counting());", "        // TODO: Use\
    \ an efficient data structure to hold all these values\n        long numOnes =\
    \ 0, endsWithOnes = 0, numEndsWithOnes = 0;\n        for (long i = 1; i <= n;\
    \ i++) {\n            if (isEndsWithOne(i)) {\n                numEndsWithOnes++;\n\
    \            } else {\n                numOnes++;\n            }\n        }\n\
    \        endsWithOnes = numOnes - numEndsWithOnes;\n        return endsWithOnes;",
  "        long count = 0;\n        \n        if (n == 0) {\n            return count;\n\
    \        }\n        \n        long base = 1;\n        long i = 1;\n        while\
    \ (n / base != 0) {\n            base = base * i;\n            i++;\n        }\n\
    \        \n        for (i = 1; i < base; i++) {\n            if (n % (base - i)\
    \ == 1) {\n                count++;\n            }\n        }\n        \n    \
    \    return count;", '        return LongStream.rangeClosed(1, n).filter(i ->
    i % 10 == 1).count();', "        long count = 0;\n        long x = 0L;\n     \
    \   while (n > x) {\n            count += n / x;\n            n %= x;\n      \
    \  }\n        if (n != 0) ++count;\n        return count;", "        if (n ==\
    \ 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return\
    \ 1;\n        }\n        if (n % 2 != 0) {\n            return 0;\n        }\n\
    \        int m = n;\n        long l = 1;\n        while (m-- != 0) {\n       \
    \     l <<= 1;\n        }\n        int count = 0;\n        for (long i = l; i\
    \ < n; i++) {\n            if ((i & 1L) == 1) {\n                count++;\n  \
    \          }\n        }\n        return count;", "        long count = 0;\n  \
    \      for (long x = n; x > 0; x /= 10) {\n            if (x % 10 == 1) {\n  \
    \              count++;\n                if (x == n) break;\n            }\n \
    \       }\n        return count;", "        long count = 0;\n        for (int\
    \ i = 0; i < n; i++) {\n            boolean isFirst = isFirst(i);\n          \
    \  if (isFirst) {\n                count += isFirst;\n            }\n        }\n\
    \        return count;", "        long count = 0;\n        // Use this variable\
    \ to count the occurrences.\n        long startOrEndWith1 = 1;\n        long num\
    \ = (long) Math.pow(n, 1.0 / n.toString().length());\n        // Iterate the whole\
    \ range of the numbers starting at 1.\n        while (startOrEndWith1 <= num)\
    \ {\n            // Test if the number is divisible by n.\n            if (n %\
    \ startOrEndWith1 == 0) {\n                // If the number is divisible by n,\
    \ increment the count.\n                count++;\n            }\n            //\
    \ Increment the starting or ending number with 1.\n            startOrEndWith1++;\n\
    \        }\n        return count;", "        long count = 0, p = 1;\n        while\
    \ ( n != 0 ) {\n            count = count + ((n / p) % 10);\n            n = n\
    \ / 10;\n            p = p * 10;\n        }\n        return count;", "       \
    \ long count = 0;\n        long base = 1;\n        do {\n            if (n % base\
    \ == 1) {\n                count++;\n            }\n            base <<= 1;\n\
    \        } while (base < n);\n        return count;", "        long count = 0;\n\
    \        if (n == 1) {\n            count++;\n        }\n        while (n > 0\
    \ && n % 10 == 0) {\n            count++;\n            n /= 10;\n        }\n \
    \       if (n == 1) {\n            count++;\n        }\n        return count;",
  "        // A helper function that computes the n-digit number of 1s that start\n\
    \        // or end with 1.\n        long num = n / 10;\n        long remainder\
    \ = n % 10;\n        long count = 0;\n        if (remainder == 0) {\n        \
    \    count = num - 2;\n        } else {\n            count = num + 2;\n      \
    \  }\n        return count;", "        long count = 1;\n        if (n > 0) {\n\
    \            while (n >= 1) {\n                n = n / 10;\n                count++;\n\
    \            }\n        }\n        return count;", "        long sum = 0;\n  \
    \      while (n > 0) {\n            sum += (n / 10) * (n % 10 > 1 ? 1 : 0);\n\
    \            n /= 10;\n        }\n        return sum;", "        if (n == 0) {\n\
    \            return 0;\n        }\n        long[] nums = new long[n];\n      \
    \  Arrays.fill(nums, 1);\n        nums[n - 1] = 1;\n        long nDigits = nums.length;\n\
    \        long[] digits = new long[nDigits + 1];\n        System.arraycopy(nums,\
    \ 0, digits, 1, nDigits);\n        digits[0] = 1;\n        for (int i = 1; i <\
    \ nDigits; i++) {\n            digits[i] = digits[i - 1] * 10;\n        }\n  \
    \      return Arrays.stream(digits).filter(d -> d % 10 == 1).count();", "    \
    \    boolean end = n % 1000 == 1;\n        long count = (end ? 0 : 1) + (n % 1000\
    \ ? 2 : 1);\n        while (n / 1000 != 0) {\n            count++;\n         \
    \   n /= 1000;\n        }\n        return count;", "        long count = 0;\n\
    \        for (long i = 1; i <= n; i++) {\n            if (i % 10 == 1) {\n   \
    \             count += 1;\n            }\n            if (i % 10 == -1) {\n  \
    \              count += 1;\n            }\n        }\n        return count;",
  "        Set<Long> numbers = new HashSet<>();\n        long one = 1;\n        while\
    \ (n>0) {\n            while (one<n && n>0) {\n                if (n%one==0) numbers.add(one);\n\
    \                one++;\n                n--;\n            }\n            while\
    \ (one>0 && n>0) {\n                if (n%one==0) numbers.add(one);\n        \
    \        one--;\n                n--;\n            }\n            if (one>0 &&\
    \ n>0) one++;\n            if (one<n && n>0) one--;\n        }\n        return\
    \ numbers.stream().filter(n->n>1).count();", "        if (n < 10) return 1; //\
    \ 0 starts and 1 ends\n        long count = 0;\n        while (n > 0) {\n    \
    \        long cur = n;\n            for (long i = 0; i < 9; i++) {\n         \
    \       if (cur % 10 == 1) count++;\n                cur /= 10;\n            }\n\
    \            n /= 10;\n        }\n        return count;", '        return IntStream.rangeClosed(1,
    n).filter(x -> n % x == 0).count();', "        long count = 0;\n        // Find\
    \ starting number of 1\n        while (n % 10 == 1) {\n            ++count;\n\
    \            n = n / 10;\n        }\n\n        if (n >= 2) {\n            // Find\
    \ ending number of 1\n            while (n % 10 == 1) {\n                ++count;\n\
    \                n = n / 10;\n            }\n        }\n\n        return count;",
  "        LongStream stream = LongStream.range(1, n).filter(i -> i % 10 == 0);\n\
    \        return stream.count();", "        int count = 0;\n        while (n>0)\
    \ {\n            if((n%10)==1 && n%100!=11 && n%100!=21){\n                count++;\n\
    \            }\n            n/=10;\n        }\n        return count;", "     \
    \   long count = 0;\n        long digit = Long.MIN_VALUE;\n        while (n >\
    \ digit) {\n            count += (n-digit)/(long)(Math.pow(10, (Long.MAX_VALUE\
    \ - digit)));\n            n = n % long(Math.pow(10, (Long.MAX_VALUE - digit)));\n\
    \        }\n        return count;", "        List<Integer> numbers = new ArrayList<>();\n\
    \        long one = 1;\n        long ones = 0;\n        long end = n;\n      \
    \  while(true) {\n            int digit = (int) (end/one);\n            if (end%one\
    \ == 0)\n                end = (end/one)*one;\n            else\n            \
    \    end = end % one;\n            if (end == 1)\n                ones++;\n  \
    \          else\n                numbers.add(digit);\n            if (end == n)\n\
    \                break;\n            one = one*10;\n        }\n        if (ones\
    \ > 1)\n            return ones;\n        else\n            return numbers.size();",
  "        int count = 0;\n        int temp = 0;\n        while (n > 10) {\n     \
    \       temp = (n / 10) % 10;\n            n = n / 10;\n            if (temp ==\
    \ 1) {\n                count++;\n            }\n        }\n        if (n == 0)\
    \ {\n            count++;\n        }\n        return count;", "        List<Long>\
    \ ends = new ArrayList<>();\n        long end = 1;\n        long start = 1;\n\
    \        long count = 0;\n        while (n > 0) {\n            if (n % 10 != 0)\
    \ {\n                count += n / 10;\n                n %= 10;\n            }\
    \ else if (n == 0) {\n                break;\n            }\n            if (n\
    \ >= 10) {\n                n /= 10;\n                ends.add(end);\n       \
    \         end *= 10;\n            }\n            if (end > n) {\n            \
    \    end = n;\n            }\n            if (end > start) {\n               \
    \ count += (end - start);\n            }\n            start = end;\n        }\n\
    \        if (start != 1) {\n            count += (n - start);\n        }\n   \
    \     ends.add(0, start);\n        ends.add(n, end);\n        count += Collections.frequency(ends,\
    \ 1);\n        return count;", "        // Return 1 when n is 0 or a number that\
    \ starts with 1.\n        if (n == 0 || n / 10 != 1 || n % 10 != 0) {\n      \
    \      return 1;\n        }\n        // Return 1 when n is positive.\n       \
    \ if (n >= 1) {\n            return count((long) Math.log10(n));\n        }\n\
    \        // Return 0 when n is negative.\n        if (n < -1) {\n            return\
    \ 0;\n        }\n        // Return 0 when n is 0.\n        if (n == 0) {\n   \
    \         return 0;\n        }\n        // The only way for n to be positive is\
    \ if n / 10 is 1.\n        if (n / 10 == 1) {\n            // Return the count\
    \ of numbers that start with 1.\n            return count((long) Math.log10(n));\n\
    \        }\n        // The only way for n to be negative is if n / 10 is 0.\n\
    \        if (n / 10 == 0) {\n            // Return the count of numbers that end\
    \ with 1.\n            return count((long) Math.log10(n));\n        }\n      \
    \  // The only way for n to be zero is if n / 10 is 0 or n % 10 is 0.\n      \
    \  if (n / 10 == 0 || n % 10 == 0) {\n            // Return the count of numbers\
    \ that start with 1 or end with 1.\n            return count((long) Math.log10(n));\n\
    \        }\n        throw new RuntimeException(\"Unknown problem\");", "     \
    \   long count = 0;\n        while (n > 9) {\n            if (n % 10 == 1) count++;\n\
    \            n /= 10;\n        }\n        return count;", "        long count\
    \ = 0;\n        while (n > 0) {\n            if (n % 10 == 1) count++;\n     \
    \       n = n / 10;\n        }\n        return count;", "        if (n == 0 ||\
    \ n == 1) {\n            return 0;\n        }\n        if (n % 10 == 1) {\n  \
    \          return n + startsOneEnds(n/10);\n        }\n        return startsOneEnds(n/10)\
    \ + 1;", "        long result = 0;\n        for (long i = 1; i <= n; i++) {\n\
    \            if (i % 10 != 1) {\n                result += 1;\n            }\n\
    \        }\n        return result;", "        if (n == 1) return 0;\n        long\
    \ start = 0;\n        long end = 0;\n        for (long i = 1; i <= n; i++) {\n\
    \            long digit = i / 10;\n            if (digit % 10 == 1) {\n      \
    \          start = i;\n            }\n            if (digit % 10 == n - 1) {\n\
    \                end = i;\n            }\n        }\n        return end - start\
    \ + 1;", "        // Write your code here\n        long count = 0;\n        long\
    \ endsWithOne = Long.MAX_VALUE / 10;\n        for(long num = 1; num < endsWithOne;\
    \ num++) {\n            if(n % num == 0) {\n                if(num == 1 && n %\
    \ 10 == 0) {\n                    count++;\n                } else if(num > 1\
    \ && num < 10) {\n                    count += 2;\n                }\n       \
    \     }\n        }\n        return count;", "        if (n < 10) return 1;\n \
    \       return 1 + ((n % 10) == 0 ? 0 : startsOneEnds(n / 10));", "        List<Long>\
    \ numbers = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n     \
    \       long j = (long) Math.pow(10, i - 1);\n            if (j == 1) {\n    \
    \            numbers.add (i);\n            } else {\n                int count\
    \ = 0;\n                for (int j2 = (long) Math.pow(10, i - 2); j2 < j; j2++)\
    \ {\n                    if (j % j2 == 0) {\n                        count++;\n\
    \                    }\n                }\n                numbers.add (count);\n\
    \            }\n        }\n        long count = 0;\n        for (long i : numbers)\
    \ {\n            if (i == 1) {\n                count++;\n            }\n    \
    \    }\n        return count;", "        long sum = 0;\n        for(long i=0;i<=n;i++)\n\
    \            sum += i%10==0? 1 : 0;\n        return sum;", "        long count\
    \ = 0;\n        // start counting the number that are equal to or 1\n        long\
    \ ones = 1;\n        while ((ones * ones) <= n) {\n            // count the number\
    \ of times 1's are encountered or divided by 2.\n            ones += n / ones;\n\
    \            count += ones;\n        }\n        return count;", "        long\
    \ count = 0, last = 1;\n        for (int i = 2; i <= n; i++) {\n            if\
    \ (last == 1) {\n                count++;\n            }\n            last = (last\
    \ * (i - 1))/i;\n        }\n        return count;", "        if (n == 0) return\
    \ 0;\n        long count = 0;\n        while (n/10 !=0){\n            n /= 10;\n\
    \            count++;\n        }\n        long remainder = n;\n        while(remainder\
    \ !=0){\n            if(remainder%10 == 1){\n                count += 2;\n   \
    \         }\n            remainder /= 10;\n        }\n        return count;",
  "        // write your code here\n        return 0;", "        long count = 1;\n\
    \        while(n != 0) {\n            if((n%10) == 1)\n                count++;\n\
    \            n /= 10;\n        }\n        return count;", "        int count =\
    \ 0;\n        // First number is all 1s\n        if (n == 1) {\n            return\
    \ 0;\n        }\n        // Count the number of first and last numbers\n     \
    \   while (n % 10 == 1) {\n            n /= 10;\n            ++count;\n      \
    \  }\n        if (n == 0) {\n            return count;\n        }\n        long\
    \ lastDigit = n;\n        while (lastDigit % 10 != 1) {\n            lastDigit\
    \ /= 10;\n            --count;\n        }\n        return count + (lastDigit ==\
    \ 1);", "        long count = 1;\n        // If n is 0, then there is only one\
    \ such number.\n        if (n == 0) return 1;\n        for (int i = 0; i < n;\
    \ ++i) {\n            // If i starts with 1, then we found a new starting number.\n\
    \            if (i%10 == 1) {\n                count++;\n            }\n     \
    \       // If i ends with 1, then we found a new ending number.\n            else\
    \ if (i%10 == 9) {\n                count--;\n            }\n        }\n     \
    \   return count;", "        long count = 0;\n        for (long i = 1; i <= n;\
    \ i++) {\n            if (i == 1 || i % 10 == 1) count++;\n            if (i %\
    \ 10 == 0) count++;\n        }\n        return count;", "        return IntStream.rangeClosed(1,\
    \ n)\n            .filter(i -> n % i == 0 || i == 1)\n            .count();",
  "        long count = 0;\n        while (n != 0) {\n            count += (n / 10)\
    \ * Math.pow(10, (n%10) + 1);\n            n /= 10;\n        }\n        return\
    \ count;", "        if (n<=1)\n            return 0;\n        if (n==2)\n    \
    \        return 1;\n        if (n%2==0)\n            return startsOneEnds(n/2)+startsOneEnds(n/2)+1;\n\
    \        else\n            return startsOneEnds(n/2)+startsOneEnds(n/2)+startsOneEnds(n/2)+2;",
  "        long count = 0;\n        long remain = n;\n        while (remain > 0) {\n\
    \            remain /= 10;\n            count += remain;\n        }\n        return\
    \ count;", "        // Your code here\n        return IntStream.range(0, n).filter(i\
    \ -> i % 2 == 0).sum();", "        long result = 0;\n        while (n>0) {\n \
    \           result += (n - 1) % 10;\n            n = n / 10;\n        }\n    \
    \    return result;", "        if (n == 1) return 0;\n        long count = 0;\n\
    \        for (int i = 1; i < n; i++) {\n            if (n % i == 0)\n        \
    \        for (int j = 0; j < i; j++)\n                    if (j + i == n)\n  \
    \                      count++;\n        }\n        return count;", "        long[]\
    \ ones = new long[n+1];\n        Arrays.fill(ones, 1);\n        Arrays.fill(ones,\
    \ 1, n, 1);\n        long count = 0;\n        for (int i = 0; i < ones.length;\
    \ i++) {\n            long startOne = ones[i];\n            long endOne = ones[i+1];\n\
    \            if (endOne == 1) count += 1;\n            while (i < ones.length-1\
    \ && ones[i+1] == startOne) {\n                count += 1;\n                i\
    \ += 2;\n            }\n        }\n        return count;", "        if (n <= 0)\
    \ return 0;\n        long count = 0;\n        if (n == 1) return 1;\n        while\
    \ (n > 0) {\n            count += n / 10;\n            n = n / 10;\n        }\n\
    \        count += n / 10;\n        return count;", "        // The only way we\
    \ can do this is by checking all possible combinations.\n        // So let's just\
    \ start by checking a trivial case.\n        long count = 0;\n        if (n ==\
    \ 1)\n            count = 1;\n        else if (n == 2)\n            count = 2;\n\
    \        else {\n            long start = 0;\n            long end = n / 10;\n\
    \            for (long x = start; x <= end; x++) {\n                if (n%x ==\
    \ 0)\n                    count++;\n            }\n        }\n        return count;",
  "        long count = 0;\n        if (n > 0) {\n            if (n / 10 == 1) count++;\n\
    \            if (n % 10 == 1) count++;\n            if (n % 10 == 0) count++;\n\
    \            n = n / 10;\n            while (n > 0) {\n                if (n /\
    \ 10 == 1) count++;\n                if (n % 10 == 1) count++;\n             \
    \   if (n % 10 == 0) count++;\n                n = n / 10;\n            }\n  \
    \      }\n        return count;", "        long count = 0;\n        long limit\
    \ = Math.abs(n);\n        while (n != 0) {\n            n /= 10;\n           \
    \ count++;\n        }\n        if (n < Math.pow(10, limit)) {\n            count\
    \ += 1;\n        }\n        return count;", "        Set<Integer> ones = new HashSet<>();\n\
    \        for (int i = 1; i <= n; i++) {\n            if (isStarts(i)) ones.add(i);\n\
    \            if (isEnds(i)) ones.add(-i);\n        }\n        return ones.size();",
  "        // Write your code here.\n        return 0;", "        long count = 0;\n\
    \        for (long i = 1; i <= n; ++i) {\n            if (i % 10 == 1) ++count;\n\
    \            if (i % 10 == 0) --count;\n        }\n        return count;", " \
    \       if (n == 0)\n            return 0;\n        if (n < 10)\n            return\
    \ 0;\n        long start = 0;\n        long end = 1;\n        long count = 1;\n\
    \        while (n > 0) {\n            n = n / 10;\n            count++;\n    \
    \    }\n        while (start < end) {\n            long mid = start + (end - start)\
    \ / 2;\n            if (mid >= n && (mid - start) % n == 0)\n                count++;\n\
    \            start = mid;\n        }\n        while (end < n) {\n            long\
    \ mid = end + (n - end) / 2;\n            if (mid <= n && (mid - end) % n == 0)\n\
    \                count++;\n            end = mid;\n        }\n        return count;",
  "        if (n == 0)\n            return 0;\n        long count = 0, power = 1;\n\
    \        while (power < n) {\n            long digit = Long.valueOf(Math.pow(10,\
    \ power)).longValue();\n            if (digit == 1)\n                count++;\n\
    \            power++;\n        }\n        return count;", "        long count\
    \ = 0;\n        if (n >= 1) {\n            do {\n                if (n % 10 ==\
    \ 1) {\n                    n = n/10;\n                    count++;\n        \
    \        }\n            } while (n>0);\n        }\n        return count;", " \
    \       int countOne = 0;\n        for (int i = 1; i <= n; ++i) {\n          \
    \  if (n % 10 == 1 && i % 10 != 1) {\n                countOne++;\n          \
    \  }\n            n = n / 10;\n        }\n        return countOne;", "       \
    \ int count = 0;\n        boolean isOne = true;\n        for(int i = 2; i<=n;\
    \ i++) {\n            if(isOne) {\n                if(i % 10 == 0) {\n       \
    \             isOne = false;\n                }\n            } else {\n      \
    \          if(i % 10 != 0) {\n                    isOne = true;\n            \
    \    }\n            }\n            count++;\n        }\n        return count;",
  "        long count = 1;\n        while (n != 0) {\n            n = n % 10;\n  \
    \          if (n == 1) {\n                count++;\n            }\n        }\n\
    \        return count;", "        long starts = 0;\n        for (int i = 0; i\
    \ < n; i++) {\n            if (startsOne(i)) {\n                starts += 1;\n\
    \            }\n        }\n        return starts;", "        long count = 0;\n\
    \        for (int i = 0; i < n; i++) {\n            long currentNum = i;\n   \
    \         boolean startsOne = true;\n            while (currentNum > 0) {\n  \
    \              if (currentNum % 10 != 1) {\n                    startsOne = false;\n\
    \                    break;\n                }\n                currentNum /=\
    \ 10;\n            }\n            if (startsOne) count++;\n        }\n       \
    \ return count;", "        \n        Set<Integer> set = new HashSet<>();\n   \
    \     long count = 0;\n        while (n > 0) {\n            int digit = n % 10;\n\
    \            n /= 10;\n            if (digit == 1) {\n                if (set.contains(n))\
    \ {\n                    count++;\n                }\n                else {\n\
    \                    set.add(n);\n                }\n            }\n        }\n\
    \        return count;", "        int count = 0;\n        while (n>0) {\n    \
    \        long digit = n % 10;\n            if (digit==1) count++;\n          \
    \  n = n / 10;\n        }\n        return count;", "        // write your code\
    \ in Java SE 8\n        Map<Long, Long> map = new HashMap<Long, Long>();\n   \
    \     long n = 1;\n        while (n != 0) {\n            map.put(n, map.getOrDefault(n,\
    \ 0L) + 1);\n            n = n / 10;\n        }\n        long count = 1;\n   \
    \     LongEntry<Long, Long> first = map.entrySet().stream().filter(t->t.getValue()\
    \ == 1 && t.getKey() < n).findAny().get();\n        if (first.isPresent() && first.getKey().equals(n))\
    \ {\n            count = first.getValue();\n        }\n        return count;",
  "        long count = 0;\n        for (long i = 1; i <= n; i += i) {\n         \
    \   count += i / i % 1 != 0;\n        }\n        return count;", "        long\
    \ count = 0;\n        if (n <= 0) return 0;\n        while ((n % 10) == 1) {\n\
    \            n /= 10;\n            ++count;\n        }\n        return count +\
    \ startsOneEnds(n);", "        long num1 = 1;\n        long num2 = 2;\n      \
    \  long count1 = 1;\n        long count2 = 1;\n        long count = 0;\n\n   \
    \     // Find the first 1 and count the number starting with it\n        while\
    \ ((n % num1) != 0) {\n            count1++;\n            num1 += num2;\n    \
    \    }\n        // Find the first 2 and count the number starting with it\n  \
    \      while ((n % num2) != 0) {\n            count2++;\n            num2 += num1;\n\
    \        }\n\n        // If n was a perfect square, there would be 1 number starts\
    \ with 1 and 1 number starts with 2\n        // so count the number starts with\
    \ 1\n        while (((n % num2) == 0) || ((n % num1) == 0)) {\n            count1++;\n\
    \            count2++;\n            num1 += num2;\n            num2 += num1;\n\
    \        }\n\n        // Count the numbers that start or end with 1\n        while\
    \ ((n % (num1 + num2)) != 0) {\n            count++;\n            n -= (num1 +\
    \ num2);\n        }\n        return count;", "        if (n < 10)\n          \
    \  return 1L;\n        long count = 0;\n        while (n > 0) {\n            n\
    \ = n-1;\n            count += n / 10;\n        }\n        return count;", '        return
    n.length() <= 3 ? n : LongStream.rangeClosed(1, n).filter(i -> i % 1000000009
    == 0).count() - 1;', "        long count = 0;\n        long current = n;\n   \
    \     while (current > 0) {\n            if (current % 10 == 1) {\n          \
    \      count++;\n            }\n            current /= 10;\n        }\n      \
    \  return count;", "        ArrayList<Integer> digits = new ArrayList<Integer>();\n\
    \        digits.addAll(Arrays.asList(LongStream.rangeClosed(0, n).boxed().toArray()));\n\
    \        long cnt = 0;\n        for (long d : digits) {\n            cnt += countNumbersStartingWithOneAndEndWithOne(digits,\
    \ d);\n        }\n        return cnt;", "        Set<Long> set = new HashSet<>();\n\
    \        for (long i = 1; i <= n; i++) set.add(1);\n        for (long i = 2; i\
    \ <= n; i++) if (set.contains(i)) return i;\n        return 0;", "        if(n\
    \ < 10) return 1; // 0 -> 9\n        long count = 0;\n        long max = (long)Math.pow(10,\
    \ n-1);\n        long current = (long)Math.pow(10, n);\n        if(current ==\
    \ 1) {\n            count++;\n        }\n        while(current != 1) {\n     \
    \       current = current / 10;\n            if(current == 1) {\n            \
    \    count++;\n            }\n            if(current > max) {\n              \
    \  break;\n            }\n        }\n        return count;", '        return IntStream.range(2,
    n).filter(i -> n % i == 0).count();', "        if (n == 1)\n            return\
    \ 1;\n        \n        if (n % 10 == 1)\n            return startsOneEnds(n /\
    \ 10);\n        \n        return startsOneEnds(n / 10) + startsOneEnds(n % 10);",
  "        Set<Long> set = new HashSet<>();\n        boolean isFirstOne = true;\n\
    \        while (n!=0)\n        {\n            long x = n/10;\n            long\
    \ y = x%10;\n            set.add(y);\n            n/=10;\n        }\n        int\
    \ count = 0;\n        for(long num : set)\n        {\n            if(num==1)\n\
    \            {\n                if(isFirstOne)\n                    count++;\n\
    \                isFirstOne = false;\n            }\n        }\n        return\
    \ count;", "        long count = 0;\n        while (n > 0) {\n            int\
    \ d = (int) Math.floor(Math.log10(n));\n            long pow10 = n / Math.pow(10,\
    \ d);\n            long mod = (int) Math.floor(pow10 - 1);\n            if ((mod\
    \ == 1) && (pow10 == 1)) {\n                count++;\n            }\n        \
    \    n = pow10;\n        }\n        return count;", "        int count = 1;\n\
    \        while (n > 0) {\n            if (n % 10 == 1) {\n                ++count;\n\
    \            }\n            n /= 10;\n        }\n        return count;", "   \
    \     return LongStream.range(2, n + 1)\n                .filter(x -> x % 10 ==\
    \ 1)\n                .filter(x -> x % 100 != 11 && x % 100 != 12)\n         \
    \       .count();", "        // Using Stream API: \n        return LongStream.iterate(n+1,\
    \ x -> x + 1).limit(10).filter(x -> x % 2 == 0).count();", "        if (n >= 10)\
    \ {\n            String s = String.valueOf(n);\n            return s.chars().filter(c\
    \ -> (c == '1') || (c == '0')).count();\n        } else {\n            return\
    \ 0;\n        }", "        long ones = 0;\n        long tens = n / 10;\n     \
    \   long zeros = n % 10;\n        ones = ones + 1;\n        ones = ones * startsOneEnds(tens);\n\
    \        ones = ones * startsOneEnds(zeros);\n        return ones;", "       \
    \ long nDig = (long) Math.log10(n);\n        long countOnes = 0;\n        long\
    \ ones = 0;\n        long ends = 0;\n        long countTwos = 0;\n        long\
    \ twos = 0;\n        long ends2 = 0;\n        for (int i = 0; i < nDig; i++) {\n\
    \            long digit = n / Math.pow(10, nDig - i - 1);\n            int remainder\
    \ = n % Math.pow(10, nDig - i - 1);\n            if (digit == 1) {\n         \
    \       if (remainder == 1) {\n                    ones++;\n                }\n\
    \            } else if (digit == 2) {\n                if (remainder == 1) {\n\
    \                    twos++;\n                }\n            } else if (digit\
    \ == 3) {\n                if (remainder == 1) {\n                    ends++;\n\
    \                }\n            } else if (digit == 4) {\n                if (remainder\
    \ == 1) {\n                    ends2++;\n                }\n            } else\
    \ if (digit == 5) {\n                if (remainder == 1) {\n                 \
    \   ends2++;\n                }\n            } else if (digit == 6) {\n      \
    \          if (remainder == 1) {\n                    ends2++;\n             \
    \   }\n            } else if (digit == 7) {\n                if (remainder ==\
    \ 1) {\n                    ends2++;\n                }\n            } else if\
    \ (digit == 8) {\n                if (remainder == 1) {\n                    ends2++;\n\
    \                }\n            } else if (digit == 9) {\n                if (remainder\
    \ == 1) {\n                    ends2++;\n                }\n            } else\
    \ if (digit == 10) {\n                if (remainder == 1) {\n                \
    \    ends2++;\n                }\n            } else if (digit == 11) {\n    \
    \            if (remainder == 1) {\n                    ends2++;\n           \
    \     }\n            } else if (digit == 12) {\n                if (remainder\
    \ == 1) {\n                    ends2++;\n                }\n            } else\
    \ if (digit == 13) {\n                if (remainder == 1) {\n                \
    \    ends2++;\n                }\n            } else if (digit == 14) {\n    \
    \            if (remainder == 1) {\n                    ends2++;\n           \
    \     }\n            } else if (digit == 15) {\n                if (remainder\
    \ == 1) {\n                    ends2++;\n                }\n            } else\
    \ if (digit == 16) {\n                if (remainder == 1) {\n                \
    \    ends2++;\n                }\n            } else if (digit == 17) {\n    \
    \            if (remainder == 1) {\n                    ends2++;\n           \
    \     }\n            } else if (digit == 18) {\n                if (remainder\
    \ == 1) {\n                    ends2++;\n                }\n            } else\
    \ if (digit == 19) {\n                if (remainder == 1) {\n                \
    \    ends2++;\n                }\n            } else if (digit == 20) {\n    \
    \            if (remainder == 1) {\n                    ends2++;\n           \
    \     }\n            } else if (digit == 21) {\n                if (remainder\
    \ == 1) {\n                    ends2++;\n                }\n            } else\
    \ if (digit == 22) {\n                if (remainder == 1) {\n                \
    \    ends2++;\n                }\n            } else if (digit == 23) {\n    \
    \            if (remainder == 1) {\n                    ends2++;\n"]
stop_tokens:
- "\n    }\n"
