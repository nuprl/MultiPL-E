language: java
name: HumanEval_114_minSubArraySum
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        Arrays.sort(nums);\n\
    \        long sum = 0;\n        final int size = nums.size();\n        // Find\
    \ the max and min values in the sorted subarray\n        long start = nums.get(0);\n\
    \        long end = nums.get(size - 1);\n        // If the array is empty or contains\
    \ only one element, return that value\n        if (size == 1) {\n            return\
    \ start;\n        }\n        if (nums.get(size - 2) > start + end) {\n       \
    \     start = nums.get(size - 2);\n        }\n        if (nums.get(size - 3) >\
    \ start + end) {\n            end = nums.get(size - 3);\n        }\n        System.out.println(start\
    \ + \" \" + end);\n        // If the start and end are equal, return that value\n\
    \        if (start == end) {\n            return start;\n        }\n        //\
    \ If the start is less than end, find the max between the two values\n       \
    \ if (start < end) {\n            sum += start;\n            // Iterate from the\
    \ min to the max and sum all values in between\n            for (int i = start\
    \ + 1; i <= end; i++) {\n                sum += i;\n            }\n          \
    \  // Add the last number to the sum\n            sum += end;\n        }\n   \
    \     // If the end is less than start, find the min between the two values\n\
    \        else {\n            sum += end;\n            // Iterate from the max\
    \ to the min and sum all values in between\n            for (int i = end - 1;\
    \ i >= start; i--) {\n                sum += i;\n            }\n            //\
    \ Add the last number to the sum\n            sum += start;\n        }\n     \
    \   return sum;\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptpp39sw0.java:17: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(nums);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmptpp39sw0.java:42: error: incompatible types: possible lossy\
    \ conversion from long to int\n            for (int i = start + 1; i <= end; i++)\
    \ {\n                               ^\n/tmp/tmptpp39sw0.java:52: error: incompatible\
    \ types: possible lossy conversion from long to int\n            for (int i =\
    \ end - 1; i >= start; i--) {\n                            "
  stdout: ''
  timestamp: 1660011993
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long sum\
    \ = nums.stream().mapToLong(value -> ((value == -1l) ? 0l : value)).sum();\n \
    \       long min = sum;\n        for (Long num : nums) {\n            min = (min\
    \ < num) ? num : min;\n        }\n        return min;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyyzwtile.java:25)\n"
  stdout: ''
  timestamp: 1660011993
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSubArraySum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        int numsSize = nums.size();\n\
    \        for( int i = 0; i < numsSize; i++ ) {\n            long subArraySum =\
    \ nums.get(i);\n            sum += subArraySum;\n            if( sum < minSubArraySum\
    \ ) {\n                minSubArraySum = sum;\n            }\n        }\n     \
    \   return minSubArraySum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd7614igg.java:30)\n"
  stdout: ''
  timestamp: 1660011993
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        // TODO:\
    \ Implement me!\n        ArrayList<Long> subArrays = Arrays.asList(new ArrayList<Long>(nums.size()));\n\
    \        long minSum = -1l;\n        for (Long sum : subArrays) {\n          \
    \  if (sum < 0)\n                sum = -sum;\n            minSum = Math.min(sum,\
    \ minSum);\n        }\n        return minSum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv94p2hj3.java:18: error: incompatible types: no instance(s) of\
    \ type variable(s) T exist so that List<T> conforms to ArrayList<Long>\n     \
    \   ArrayList<Long> subArrays = Arrays.asList(new ArrayList<Long>(nums.size()));\n\
    \                                                 ^\n  where T is a type-variable:\n\
    \    T extends Object declared in method <T>asList(T...)\n1 error\n"
  stdout: ''
  timestamp: 1660011993
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        if (nums.isEmpty())\
    \ {\n            return 0;\n        }\n\n        if (nums.size() == 1l) { return\
    \ nums.get(0); }\n\n        // We will use a map of indices as keys to store the\
    \ sub-array whose minimum sum we will find\n        Map<Long, ArrayList<Long>>\
    \ map = new HashMap<>();\n\n        // First find the sum of all the elements\
    \ in the first sub-array \n        // We will use this sum to find the minimum\
    \ sub-array \n        long sum = nums.get(0);\n        ArrayList<Long> subArray\
    \ = new ArrayList<>(nums);\n        map.put(0l, subArray);\n\n        // Now find\
    \ all the minimum sub-arrays from the rest of the sub-arrays\n        for (int\
    \ i = 1; i < nums.size(); i++) {\n            sum = subArray.get(0) + nums.get(i);\n\
    \            ArrayList<Long> newSubArray = new ArrayList<>(subArray);\n      \
    \      newSubArray.add(sum);\n            if (map.containsKey(sum)) {\n      \
    \          ArrayList<Long> oldSubArray = map.get(sum);\n                if (oldSubArray.size()\
    \ < subArray.size()) {\n                    oldSubArray = subArray;\n        \
    \        }\n                newSubArray = oldSubArray.removeAll(subArray);\n \
    \           }\n            map.put(sum, newSubArray);\n        }\n\n        //\
    \ Now, find the minimum sub-array from all elements not yet added to the map\n\
    \        long min = map.keySet().stream().mapToLong(Long::longValue).min().getAsLong();\n\
    \        for (Long key : map.keySet()) {\n            if (key < min) {\n     \
    \           min = key;\n            }\n        }\n\n        return min;\n    }\n\
    \    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1e47dba8.java:42: error: incompatible types: boolean cannot be\
    \ converted to ArrayList<Long>\n                newSubArray = oldSubArray.removeAll(subArray);\n\
    \                                                   ^\n1 error\n"
  stdout: ''
  timestamp: 1660011993
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long result\
    \ = 0;\n        Arrays.stream(nums).forEach(n->{\n            result += n;\n \
    \       });\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmdggszyi.java:18: error: no suitable method found for stream(ArrayList<Long>)\n\
    \        Arrays.stream(nums).forEach(n->{\n              ^\n    method Arrays.<T#1>stream(T#1[])\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (argument\
    \ mismatch; ArrayList<Long> cannot be converted to T#1[]))\n    method Arrays.<T#2>stream(T#2[],int,int)\
    \ is not applicable\n      (cannot infer type-variable(s) T#2\n        (actual\
    \ and formal argument lists differ in length))\n    method Arrays.stream(int[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.stream(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.stream(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n  where T#1,T#2 are type-variables:\n    T#1 extends Object declared\
    \ in method <T#1>stream(T#1[])\n    T#2 extends Object declared in method <T#2>stream(T#2[],int,int)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1660011993
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = 0;\n        // Find the minimum subarray sum\n        Arrays.sort(nums);\n\
    \        for (int i = 0; i < nums.size() - 1; i++) {\n            long sum = 0;\n\
    \            for (int j = i; j < nums.size(); j++) {\n                sum += nums.get(j);\n\
    \            }\n            minSum = Math.min(sum, minSum);\n        }\n     \
    \   return minSum;\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4pk62qpd.java:19: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(nums);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011993
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        return\
    \ minSubArraySum(nums, new HashSet<>());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu5_m7wub.java:17: error: method minSubArraySum in class Problem\
    \ cannot be applied to given types;\n        return minSubArraySum(nums, new HashSet<>());\n\
    \               ^\n  required: ArrayList<Long>\n  found:    ArrayList<Long>,HashSet<Object>\n\
    \  reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011993
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        // Write\
    \ your logic here\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplhxu98j_.java:18: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011993
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        for (Long sum : nums) {\n            if (sum != Long.MIN_VALUE\
    \ && sum > min) {\n                min = sum;\n            }\n        }\n    \
    \    return min;\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpujfhgj0n.java:26)\n"
  stdout: ''
  timestamp: 1660011993
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        ArrayList\
    \ <Long> list = new ArrayList<>();\n        ArrayList <Long> subArray = new ArrayList<>();\n\
    \        list.add(nums.get(0));\n        subArray.add(nums.get(0));\n        for\
    \ (int i = 1; i < nums.size(); i++) {\n            if (nums.get(i) > list.get(list.size()-1))\
    \ {\n                list.add(nums.get(i));\n            } else {\n          \
    \      subArray.add(nums.get(i));\n            }\n        }\n        ArrayList\
    \ <Long> a = new ArrayList<>();\n        a.add(list.get(0));\n        long minSum\
    \ = a.get(0).longValue();\n        for (int i = 1; i < list.size(); i++) {\n \
    \           if (list.get(i) + list.get(i-1) <= a.size()-1) {\n               \
    \ a.add(list.get(i) + list.get(i-1));\n            }\n        }\n        for (int\
    \ i = 1; i < subArray.size(); i++) {\n            if (subArray.get(i) + subArray.get(i-1)\
    \ <= a.size()-1) {\n                a.add(subArray.get(i) + subArray.get(i-1));\n\
    \            }\n        }\n        minSum = Math.min(minSum, a.get(a.size() -\
    \ 1).longValue());\n        return minSum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq5u8cpw8.java:45)\n"
  stdout: ''
  timestamp: 1660011993
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        if (nums.size()\
    \ < 1) throw new IllegalArgumentException(\"Invalid input. Can't have an empty\
    \ input array.\");\n        long min_sum = Long.MAX_VALUE;\n        long curr_sum\
    \ = nums.get(0) + nums.get(nums.size() - 1);\n        if (nums.size() > 2) {\n\
    \            for (long i = 2; i < nums.size(); i++) {\n                curr_sum\
    \ += nums.get(i);\n                if (curr_sum < min_sum) min_sum = curr_sum;\n\
    \            }\n        }\n        return min_sum;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoqflhjuw.java:22: error: incompatible types: possible lossy conversion\
    \ from long to int\n                curr_sum += nums.get(i);\n               \
    \                      ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011993
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        for (long l : nums) {\n            min = Math.min(min,\
    \ l + minSubArraySum(nums.subList(1, nums.size())));\n        }\n        return\
    \ min;\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2ffp8g6s.java:19: error: incompatible types: List<Long> cannot\
    \ be converted to ArrayList<Long>\n            min = Math.min(min, l + minSubArraySum(nums.subList(1,\
    \ nums.size())));\n                                                          \
    \     ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011993
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        // Find\
    \ sum of sub-array where each element is greater than or equal to zero\n     \
    \   // Return minimum sum\n        int minSum = nums.get(0).intValue();\n    \
    \    for(int i = 1; i < nums.size(); i++) {\n            if(nums.get(i).intValue()\
    \ >= 0) {\n                minSum = nums.get(i).intValue() + minSum;\n       \
    \     }\n        }\n        return minSum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbsmk6ggk.java:28)\n"
  stdout: ''
  timestamp: 1660011993
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        // Find\
    \ sum of any non-empty sub-array list of nums\n        long sum = 0;\n       \
    \ long minSum = Long.MAX_VALUE;\n\n        for (Long num : nums) {\n         \
    \   if (num != -1) {\n                sum += num;\n                if (sum < minSum)\
    \ minSum = sum;\n            }\n        }\n\n        return minSum;\n    }\n \
    \   public static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5dyiuy0t.java:31)\n"
  stdout: ''
  timestamp: 1660011993
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        for (Long n : nums) {\n            if (minSum - n\
    \ < 0) {\n                minSum = n;\n            }\n        }\n        return\
    \ minSum;\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxz7i2m5d.java:26)\n"
  stdout: ''
  timestamp: 1660011993
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        int n\
    \ = nums.size();\n        long sum = 0; // Minimum sum of the given nums\n   \
    \     int start = 0; // Starting index of the given nums\n        int end = 0;\
    \ // End index of the given nums\n        int middle = 0; // Middle index of the\
    \ given nums\n        boolean isRight = false;\n\n        // Calculate the sum\
    \ of the middle nums of nums\n        if (n <= 1) {\n            return 0;\n \
    \       }\n        sum = nums.get(0) + nums.get(1);\n\n        // Calculating\
    \ starting and end index for nums\n        for (int i = 2; i < n; i++) {\n   \
    \         sum = nums.get(i) + sum;\n        }\n\n        // Calculating middle\
    \ index of the nums\n        for (int i = 2; i < n; i++) {\n            if (sum\
    \ > nums.get(i)) {\n                isRight = true;\n                end = i;\n\
    \                break;\n            } else if (sum < nums.get(i)) {\n       \
    \         isRight = false;\n                start = i;\n                break;\n\
    \            }\n        }\n\n        // Calculating minimum sum of sub-array nums[start:end]\
    \ if nums[start:end] is not empty\n        if (start < end && !isRight) {\n  \
    \          middle = (start + end) / 2;\n            if (nums.get(middle) != 0)\
    \ {\n                sum = sum - nums.get(middle);\n                middle++;\n\
    \            } else {\n                middle++;\n            }\n            sum\
    \ = sum + minSubArraySum(Arrays.asList(nums.subList(start, middle)));\n      \
    \      sum = sum + minSubArraySum(Arrays.asList(nums.subList(middle + 1, end)));\n\
    \        }\n\n        // Return minimum sum\n        return sum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9a8tck0z.java:57: error: incompatible types: no instance(s) of\
    \ type variable(s) T exist so that List<T> conforms to ArrayList<Long>\n     \
    \       sum = sum + minSubArraySum(Arrays.asList(nums.subList(start, middle)));\n\
    \                        ^\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>asList(T...)\n/tmp/tmp9a8tck0z.java:58: error: incompatible\
    \ types: no instance(s) of type variable(s) T exist so that List<T> conforms to\
    \ ArrayList<Long>\n            sum = sum + minSubArraySum(Arrays.asList(nums.subList(middle\
    \ + 1, end)));\n                        ^\n  where T is a type-variable:\n   \
    \ T extends Object declared in method <T>asList(T...)\nNote: Some messages have\
    \ been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011993
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        ArrayList<Long> minSub = new ArrayList<>();\n   \
    \     for(Long i : nums) {\n            if(min > i) {\n                min = i;\n\
    \            }\n        }\n        for(Long i : nums) {\n            long sum\
    \ = 0;\n            for(Long j : nums) {\n                sum += j;\n        \
    \        if(sum > i) {\n                    break;\n                }\n      \
    \      }\n            if(i == sum) {\n                minSub.add(i);\n       \
    \     }\n        }\n        return minSub.size() > 0 ? (minSub.stream().reduce(Long::sum).orElse(0))\
    \ : Long.MAX_VALUE;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwhn23q32.java:36: error: incompatible types: int cannot be converted\
    \ to Long\n        return minSub.size() > 0 ? (minSub.stream().reduce(Long::sum).orElse(0))\
    \ : Long.MAX_VALUE;\n                                                        \
    \                     ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011993
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long sum\
    \ = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n\
    \        }\n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnyujarz4.java:24)\n"
  stdout: ''
  timestamp: 1660011993
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        int N\
    \ = nums.size();\n        long sum = 0;\n        long min;\n        long max;\n\
    \        boolean hasMin;\n        boolean hasMax;\n        for (int i = 0; i <\
    \ N; i++) {\n            hasMin = false;\n            hasMax = false;\n      \
    \      sum = 0;\n            max = nums.get(i);\n            for (int j = i; j\
    \ < N; j++) {\n                min = Math.min(nums.get(j), max);\n           \
    \     max = Math.max(nums.get(j), max);\n                if (min < max) {\n  \
    \                  if (min < sum) hasMin = true;\n                    if (max\
    \ > sum) hasMax = true;\n                    sum = min + max;\n              \
    \  }\n            }\n            if (hasMin) {\n                min = sum;\n \
    \               hasMin = true;\n            }\n            if (hasMax) {\n   \
    \             max = sum;\n                hasMax = true;\n            }\n    \
    \    }\n        if (hasMin) {\n            min = sum;\n        }\n        if (hasMax)\
    \ {\n            max = sum;\n        }\n        return min;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplnbfju52.java:46: error: variable hasMin might not have been initialized\n\
    \        if (hasMin) {\n            ^\n/tmp/tmplnbfju52.java:49: error: variable\
    \ hasMax might not have been initialized\n        if (hasMax) {\n            ^\n\
    /tmp/tmplnbfju52.java:52: error: variable min might not have been initialized\n\
    \        return min;\n               ^\n3 errors\n"
  stdout: ''
  timestamp: 1660011993
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        // Write\
    \ your code here\n        // Complete the method signature and logic here\n  \
    \      // You may use recursion as well\n        long min = nums.get(0L);\n  \
    \      long sum = 0L;\n        for (int i = 1; i < nums.size(); i++) {\n     \
    \       if (nums.get(i) < min) {\n                min = nums.get(i);\n       \
    \     }\n        }\n        long max = nums.get(nums.size() - 1L);\n        sum\
    \ = sum + min - max;\n        return sum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd0qewoi4.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long min = nums.get(0L);\n                       \
    \     ^\n/tmp/tmpd0qewoi4.java:27: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long max = nums.get(nums.size() - 1L);\n         \
    \                               ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011993
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minimum\
    \ = Long.MAX_VALUE;\n\n        for (int i = 0; i < nums.size(); i++) {\n     \
    \       Long current = nums.get(i);\n            if (current > 0) {\n        \
    \        minimum = Math.min(minimum, current + minimum);\n            }\n    \
    \    }\n\n        return minimum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx1iroti4.java:29)\n"
  stdout: ''
  timestamp: 1660011993
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        Long result\
    \ = Collections.min(nums);\n        return Collections.min(nums, Comparator.naturalOrder());\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3diwdcq8.java:22)\n"
  stdout: ''
  timestamp: 1660011993
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        for (Long el : nums) {\n            long sum = el;\n\
    \            int k = nums.size() - 1;\n            while ((k > 0) && (nums.get(k\
    \ - 1) == nums.get(k))) {\n                sum -= nums.get(k - 1);\n         \
    \       k--;\n            }\n            if (sum < minSum) {\n               \
    \ minSum = sum;\n            }\n        }\n        return minSum;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6f3hiq3a.java:33)\n"
  stdout: ''
  timestamp: 1660011995
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        for (Long sum : nums.stream().flatMap(Arrays::stream))\
    \ {\n            min = Math.min(sum, min);\n        }\n        return min;\n \
    \   }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2f7sl4ui.java:18: error: incompatible types: cannot infer type-variable(s)\
    \ R\n        for (Long sum : nums.stream().flatMap(Arrays::stream)) {\n      \
    \                                       ^\n    (argument mismatch; invalid method\
    \ reference\n      no suitable method found for stream(Long)\n          method\
    \ Arrays.<T#2>stream(T#2[]) is not applicable\n            (cannot infer type-variable(s)\
    \ T#2\n              (argument mismatch; Long cannot be converted to T#2[]))\n\
    \          method Arrays.<T#3>stream(T#3[],int,int) is not applicable\n      \
    \      (cannot infer type-variable(s) T#3\n              (actual and formal argument\
    \ lists differ in length))\n          method Arrays.stream(int[]) is not applicable\n\
    \            (argument mismatch; Long cannot be converted to int[])\n        \
    \  method Arrays.stream(long[]) is not applicable\n            (argument mismatch;\
    \ Long cannot be converted to long[])\n          method Arrays.stream(double[])\
    \ is not applicable\n            (argument mismatch; Long cannot be converted\
    \ to double[]))\n  where R,T#1,T#2,T#3 are type-variables:\n    R extends Object\
    \ declared in method <R>flatMap(Function<? super T#1,? extends Stream<? extends\
    \ R>>)\n    T#1 extends Object declared in interface Stream\n    T#2 extends Object\
    \ declared in method <T#2>stream(T#2[])\n    T#3 extends Object declared in method\
    \ <T#3>stream(T#3[],int,int)\n1 error\n"
  stdout: ''
  timestamp: 1660011995
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        // Write\
    \ your code here.\n        ArrayList <Long> subArrayList = new ArrayList<>();\n\
    \n        long min = 0;\n        long max = 0;\n        for(Long num : nums) {\n\
    \            if(num < 0)\n            {\n                min = Math.max(min, num);\n\
    \            }\n            else\n            {\n                max = Math.max(max,\
    \ num);\n            }\n        }\n\n        for(Long num : nums) {\n        \
    \    if(num < 0)\n            {\n                subArrayList.add(num);\n    \
    \        }\n            else\n            {\n                subArrayList.remove(num);\n\
    \            }\n        }\n\n        return min;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6gjp9z66.java:47)\n"
  stdout: ''
  timestamp: 1660011995
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        return\
    \ minSubArraySum(nums, 0l, nums.stream().mapToLong(Long::longValue).toArray());\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq6dngfvz.java:17: error: method minSubArraySum in class Problem\
    \ cannot be applied to given types;\n        return minSubArraySum(nums, 0l, nums.stream().mapToLong(Long::longValue).toArray());\n\
    \               ^\n  required: ArrayList<Long>\n  found:    ArrayList<Long>,long,long[]\n\
    \  reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011994
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        Arrays.stream(nums).limit(nums.size()).forEach(System.out::println);\n\
    \        ArrayList<Long> sums = new ArrayList<>();\n        Arrays.stream(nums).filter(n\
    \ -> nums.size() > 1).forEach(System.out::println);\n        long minSum = nums.get(0l);\n\
    \        boolean isMinSum = true;\n        for (long i : nums) {\n           \
    \ isMinSum = sums.isEmpty() || sums.get(0l) < i;\n            if (isMinSum) {\n\
    \                sums.add(0l);\n            }\n            sums.add(i);\n    \
    \    }\n        return isMinSum\n                ? sums.get(0l)\n            \
    \    : Long.MAX_VALUE;\n    }\n    public static void main(String[] args) {\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphiyms76z.java:17: error: no suitable method found for stream(ArrayList<Long>)\n\
    \        Arrays.stream(nums).limit(nums.size()).forEach(System.out::println);\n\
    \              ^\n    method Arrays.<T#1>stream(T#1[]) is not applicable\n   \
    \   (cannot infer type-variable(s) T#1\n        (argument mismatch; ArrayList<Long>\
    \ cannot be converted to T#1[]))\n    method Arrays.<T#2>stream(T#2[],int,int)\
    \ is not applicable\n      (cannot infer type-variable(s) T#2\n        (actual\
    \ and formal argument lists differ in length))\n    method Arrays.stream(int[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.stream(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.stream(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n  where T#1,T#2 are type-variables:\n    T#1 extends Object declared\
    \ in method <T#1>stream(T#1[])\n    T#2 extends Object declared in method <T#2>stream(T#2[],int,int)\n\
    /tmp/tmphiyms76z.java:19: error: no suitable method found for stream(ArrayList<Long>)\n\
    \        Arrays.stream(nums).filter(n -> nums.size() > 1).forEach(System.out::println);\n\
    \              ^\n    method Arrays.<T#1>stream(T#1[]) is not applicable\n   \
    \   (cannot infer type-variable(s) T#1\n        (argument mismatch; ArrayList<Long>\
    \ cannot be converted to T#1[]))\n    method Arrays.<T#2>stream(T#2[],int,int)\
    \ is not applicable\n      (cannot infer type-variable(s) T#2\n        (actual\
    \ and formal argument lists differ in length))\n    method Arrays.stream(int[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.stream(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.stream(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n  where T#1,T#2 are type-variables:\n    T#1 extends Object declared\
    \ in method <T#1>stream(T#1["
  stdout: ''
  timestamp: 1660011994
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = 0;\n        long sumOfAllNumbers = 0;\n        for (Long i : nums) {\n   \
    \         sumOfAllNumbers += i;\n        }\n        for (Long i : nums) {\n  \
    \          minSum = i + (minSum > sumOfAllNumbers ? sumOfAllNumbers : minSum);\n\
    \        }\n        return minSum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp9dh56eq.java:28)\n"
  stdout: ''
  timestamp: 1660011995
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        // Write\
    \ your code here.\n        if (nums == null || nums.size() == 0)\n           \
    \ return Long.MAX_VALUE;\n        long minimum = nums.get(0);\n        for (int\
    \ i = 1; i < nums.size(); i++) {\n            long sum = nums.get(i);\n      \
    \      while (sum != 0 && sum < minimum) {\n                sum -= minimum;\n\
    \            }\n            minimum = sum;\n        }\n        return minimum;\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660012000
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        ArrayList numsCopy = new ArrayList(nums);\n     \
    \   ArrayList next = new ArrayList();\n        ArrayList currentSum = new ArrayList();\n\
    \        ArrayList currentMin = new ArrayList();\n        ArrayList currentMax\
    \ = new ArrayList();\n        ArrayList nextMin = new ArrayList();\n        ArrayList\
    \ nextMax = new ArrayList();\n        for (int i = 0; i < nums.size() - 1; i++)\
    \ {\n            currentSum.add(nums.get(i));\n            currentMin.add(nums.get(i));\n\
    \            currentMax.add(nums.get(i));\n        }\n        numsCopy.add(nums.get(nums.size()\
    \ - 1));\n        next.add(nums.get(nums.size() - 1));\n        nextMax.add(nums.get(nums.size()\
    \ - 1));\n        nextMin.add(nums.get(nums.size() - 1));\n\n        for (int\
    \ i = 0; i < nums.size() - 1; i++) {\n            if (nums.get(i + 1) < nums.get(i))\
    \ {\n                currentMin.add(nums.get(i + 1));\n                currentMax.add(nums.get(i));\n\
    \                next.add(nums.get(i + 1));\n                nextMin.add(nums.get(i\
    \ + 1));\n                nextMax.add(nums.get(i + 1));\n            } else {\n\
    \                currentMin.add(nums.get(i));\n                currentMax.add(nums.get(i\
    \ + 1));\n                next.add(nums.get(i));\n                nextMin.add(nums.get(i));\n\
    \                nextMax.add(nums.get(i + 1));\n            }\n        }\n   \
    \     if (next.size() > 0) {\n            currentSum.addAll(next);\n         \
    \   currentMax.addAll(nextMax);\n            currentMin.addAll(nextMin);\n   \
    \     }\n        for (int i = 0; i < currentSum.size(); i++) {\n            minSum\
    \ = Math.min(minSum, currentSum.get(i));\n        }\n        return minSum;\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpab7tmgkq.java:56: error: no suitable method found for min(long,Object)\n\
    \            minSum = Math.min(minSum, currentSum.get(i));\n                 \
    \        ^\n    method Math.min(int,int) is not applicable\n      (argument mismatch;\
    \ possible lossy conversion from long to int)\n    method Math.min(long,long)\
    \ is not applicable\n      (argument mismatch; Object cannot be converted to long)\n\
    \    method Math.min(float,float) is not applicable\n      (argument mismatch;\
    \ Object cannot be converted to float)\n    method Math.min(double,double) is\
    \ not applicable\n      (argument mismatch; Object cannot be converted to double)\n\
    Note: /tmp/tmpab7tmgkq.java uses unchecked or unsafe operations.\nNote: Recompile\
    \ with -Xlint:unchecked for details.\n1 error\n"
  stdout: ''
  timestamp: 1660011995
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        // 1.\
    \ Calculate the sum of the first n-1 elements of the sub-array\n\n        long\
    \ sum = nums.get(0) + nums.get(1);\n        for(int i = 2; i < nums.size(); ++i)\
    \ {\n            sum = sum + nums.get(i);\n        }\n        \n        // 2.\
    \ Add the minimum sum obtained from step 1. to the minimum sum obtained from step\
    \ 1.\n        \n        long minSum = sum;\n        \n        // 3. Iterate through\
    \ the remaining elements and update minSum\n\n        for(int i = 2; i < nums.size();\
    \ ++i) {\n            sum -= nums.get(i);\n            minSum = minSum - sum;\n\
    \        }\n        \n        // 4. The minimum sum obtained from step 3. is equal\
    \ to the sum obtained from step 2.\n        \n        return minSum;\n    }\n\
    \    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwrurl_li.java:40)\n"
  stdout: ''
  timestamp: 1660011995
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        if (nums.isEmpty())\n\
    \            return 0;\n\n        ArrayList<Long> numsCopy = new ArrayList<>(nums);\n\
    \        long min = Long.MAX_VALUE;\n        long sum = 0;\n        long sumWithoutMin\
    \ = nums.get(0) + nums.get(1) + nums.get(2);\n        Arrays.sort(numsCopy);\n\
    \n        for (long cur : numsCopy) {\n            sum += cur;\n        }\n\n\
    \        while (sumWithoutMin > sum) {\n            min = sum;\n            sumWithoutMin\
    \ = sum;\n            for (long cur : numsCopy) {\n                sum += cur;\n\
    \                sumWithoutMin = sumWithoutMin - cur;\n            }\n\n     \
    \       if (sumWithoutMin < min) {\n                min = sumWithoutMin;\n   \
    \         }\n        }\n\n        return min;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj41bax07.java:24: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(numsCopy);\n              ^\n    method Arrays.sort(int[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011994
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = -1L;\n        // Loop through all possible sub-arrays (i.e. length of nums)\n\
    \        for (long curSum = -1L; curSum < nums.size(); curSum += nums.size())\
    \ {\n            // Loop through all possible sub-array (i.e. length of nums)\n\
    \            for (long curSum2 = -1L; curSum2 < nums.size(); curSum2 += nums.size())\
    \ {\n                ArrayList<Long> subArray = new ArrayList<Long>();\n     \
    \           // Add first nums to subarray\n                for (long i = 0; i\
    \ < nums.size(); i++) {\n                    subArray.add(nums.get(i));\n    \
    \            }\n                // Add remaining nums to subarray\n          \
    \      for (int j = nums.size() - 1; j >= 0; j--) {\n                    subArray.add(nums.get(j));\n\
    \                }\n                // Find the minimum sum of the subarray and\
    \ update minSum\n                long subArraySum = 0;\n                for (long\
    \ element : subArray) {\n                    subArraySum += element;\n       \
    \         }\n                if (subArraySum < minSum) {\n                   \
    \ minSum = subArraySum;\n                }\n            }\n        }\n       \
    \ return minSum;\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohtydbd7.java:25: error: incompatible types: possible lossy conversion\
    \ from long to int\n                    subArray.add(nums.get(i));\n         \
    \                                 ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011994
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        if (nums.isEmpty())\n\
    \            return 0l;\n        long[] subArray = nums.stream().skip(nums.size()\
    \ / 2).mapToLong(Long::longValue).toArray();\n        Arrays.sort(subArray);\n\
    \        if (subArray[0] < 0l || subArray[subArray.length - 1] < 0l)\n       \
    \     return 0l;\n        long left = subArray[0];\n        long right = subArray[subArray.length\
    \ - 1];\n        for (int i = 1; i < subArray.length - 1; i++) {\n           \
    \ long mid = subArray[i] + (subArray[i - 1] - subArray[i]) * ((subArray[i + 1]\
    \ - subArray[i]) * (subArray[i - 1] + subArray[i + 1]) / 2);\n            left\
    \ = Math.min(left, mid);\n            right = Math.max(right, mid);\n        }\n\
    \        if (left > right) {\n            long result = left;\n        } else\
    \ {\n            long result = right;\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqttn4zo0.java:35: error: cannot find symbol\n        return result;\n\
    \               ^\n  symbol:   variable result\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011995
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        if (nums.size()\
    \ == 0) {\n            return 0;\n        }\n        ArrayList <Long> res = new\
    \ ArrayList<>();\n        res.add(0);\n        long min = res.get(0); // set min\
    \ to 0\n        long minSum = 0;\n        for (int i = 0; i < nums.size(); i++)\
    \ {\n            // use Collections.min instead of Collections.max\n         \
    \   minSum = Math.min(minSum + nums.get(i), res.get(i));\n            res.set(i,\
    \ minSum);\n        }\n        return res.get(0);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpahlsopyk.java:21: error: incompatible types: int cannot be converted\
    \ to Long\n        res.add(0);\n                ^\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011995
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        for (long num : nums) {\n            min = Math.min((min+num),\
    \ num);\n        }\n        return min;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1kubkv0z.java:24)\n"
  stdout: ''
  timestamp: 1660011995
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        for (long sum : nums) {\n            minSum = Integer.MAX_VALUE;\n\
    \            int len = nums.size();\n            for (int i = 0; i < len; i++)\
    \ {\n                if (nums.get(i) < 0) {\n                    break;\n    \
    \            }\n                long current = sum + nums.get(i);\n          \
    \      if (current < minSum) {\n                    minSum = current;\n      \
    \          }\n            }\n        }\n        return minSum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_ffteyrd.java:34)\n"
  stdout: ''
  timestamp: 1660011995
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long sum\
    \ = nums.stream().reduce(Long::sum).get();\n        for (int i = 0; i < nums.size();\
    \ i++) {\n            sum += nums.get(i);\n            if (sum < 0)\n        \
    \        sum = 0;\n        }\n        return sum;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpza503pwj.java:26)\n"
  stdout: ''
  timestamp: 1660011995
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        if (nums.isEmpty())\
    \ {\n            return 0L;\n        }\n        List<Long> nums2 = nums.stream().mapToLong(n\
    \ -> n).collect(Collectors.toList());\n        \n        final long minSum = nums2.stream().reduce(Long.MAX_VALUE,\
    \ (a, b) -> {\n            return a + b;\n        }) + nums2.get(0L);\n      \
    \  final long maxSum = nums2.stream().reduce(Long.MIN_VALUE, (a, b) -> {\n   \
    \         return a + b;\n        });\n        final long currentSum = nums2.stream().reduce(Long.MAX_VALUE,\
    \ (a, b) -> {\n            return a + b;\n        });\n        long currentSum_1\
    \ = nums2.stream().reduce(Long.MIN_VALUE, (a, b) -> {\n            return a +\
    \ b;\n        });\n        \n        boolean flag = false;\n        while(true)\
    \ {\n            if(currentSum > minSum) {\n                minSum = currentSum;\n\
    \                currentSum_1 = currentSum;\n                flag = true;\n  \
    \          }\n            else if(currentSum < minSum) {\n                currentSum\
    \ = currentSum_1;\n                minSum = currentSum;\n            }\n     \
    \       else if(flag) {\n                break;\n            }\n        }\n  \
    \      \n        return minSum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp08cka8x8.java:20: error: method collect in interface LongStream\
    \ cannot be applied to given types;\n        List<Long> nums2 = nums.stream().mapToLong(n\
    \ -> n).collect(Collectors.toList());\n                                      \
    \                    ^\n  required: Supplier<R>,ObjLongConsumer<R>,BiConsumer<R,R>\n\
    \  found:    Collector<Object,CAP#1,List<Object>>\n  reason: cannot infer type-variable(s)\
    \ R\n    (actual and formal argument lists differ in length)\n  where R is a type-variable:\n\
    \    R extends Object declared in method <R>collect(Supplier<R>,ObjLongConsumer<R>,BiConsumer<R,R>)\n\
    \  where CAP#1 is a fresh type-variable:\n    CAP#1 extends Object from capture\
    \ of ?\n/tmp/tmp08cka8x8.java:20: error: incompatible types: cannot infer type-variable(s)\
    \ R\n        List<Long> nums2 = nums.stream().mapToLong(n -> n).collect(Collectors.toList());\n\
    \                                                                  ^\n    (argument\
    \ mismatch; no instance(s) of type variable(s) CAP#1,T exist so that Collector<T,?,List<T>>\
    \ conforms to Supplier<R>)\n  where R,T are type-variables:\n    R extends Object\
    \ declared in method <R>collect(Supplier<R>,ObjLongConsumer<R>,BiConsumer<R,R>)\n\
    \    T extends Object declared in method <T>toList()\n  where CAP#1 is a fresh\
    \ type-variable:\n    CAP#1 extends Object from capture of ?\n/tmp/tmp08cka8x8.java:24:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \    }) + nums2.get(0L);\n                       ^\n/tmp/tmp08cka8x8.java:38:\
    \ error: cannot assign a value to final variable minSum\n                minSum\
    \ = currentSum;\n                ^\n/tmp/tmp08cka8x8.java:43: error: cannot assign\
    \ a value to final variable currentSum\n                currentSum = currentSum_1;\n\
    \                ^\n/tmp/tmp08cka8x8.java:44: error: cannot assign a value to\
    \ final variable minSum\n                minSum = currentSum;\n              \
    \  ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n6 errors\n"
  stdout: ''
  timestamp: 1660011995
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long maxSum\
    \ = nums.get(0) + nums.get(nums.size()-1);\n        for (int i = 1; i < nums.size();\
    \ i++) {\n            int index = i;\n            while (index > 0 && nums.get(index-1)\
    \ < nums.get(index)) {\n                index--;\n            }\n            int\
    \ diff = nums.get(index) - nums.get(index-1);\n            if (diff > 0) maxSum\
    \ += diff;\n            nums.set(index, nums.get(index-1) + diff);\n        }\n\
    \        return maxSum;\n    }\n    public static void main(String[] args) {\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc2nrzsvf.java:23: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int diff = nums.get(index) - nums.get(index-1);\n\
    \                                       ^\n1 error\n"
  stdout: ''
  timestamp: 1660011995
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        // write\
    \ your code here\n        return minSubArraySum0(nums);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9m7mhtn0.java:18: error: cannot find symbol\n        return minSubArraySum0(nums);\n\
    \               ^\n  symbol:   method minSubArraySum0(ArrayList<Long>)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011994
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        int sz = nums.size();\n        for (int i = 0; i\
    \ < sz; i++) {\n            if (nums.get(i) < 0) {\n                sz -= i;\n\
    \                i += sz;\n            }\n            if (sz > 0) {\n        \
    \        int count = 0;\n                for (int j = i + 1; j < sz; j++) count\
    \ += nums.get(j);\n                if (count < min) min = count;\n           \
    \ }\n        }\n        return min;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbu5l56ev.java:33)\n"
  stdout: ''
  timestamp: 1660011995
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        boolean hasElements = false;\n        boolean hasNonEmpty\
    \ = true;\n\n        for(Long num : nums) {\n            minSum = Math.min(minSum,\
    \ num);\n            hasElements = true;\n        }\n\n        if(hasElements\
    \ && nums.size() > 0) {\n            for(Long num : nums) {\n                minSum\
    \ = Math.min(minSum, num);\n                hasNonEmpty = hasNonEmpty && (nums.size()\
    \ > 0);\n            }\n        }\n\n        if(hasNonEmpty) {\n            for(Long\
    \ num : nums) {\n                minSum = Math.min(minSum, num);\n           \
    \ }\n        }\n\n        return minSum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwt8p0ex4.java:43)\n"
  stdout: ''
  timestamp: 1660011995
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        for (int i=0; i<nums.size(); i++) {\n           \
    \ int start = i;\n            int end = nums.size()-1;\n            while (end>start)\
    \ {\n                int mid = (end+start)/2;\n                long sum = 0;\n\
    \                for (int j = start; j < end; j++) {\n                    sum+=nums.get(j);\n\
    \                    if (sum<0) {\n                        sum+=nums.get(j);\n\
    \                    }\n                }\n                if (sum<minSum) {\n\
    \                    minSum = sum;\n                }\n                end = mid-1;\n\
    \                for (int j = start; j < end; j++) {\n                    sum-=nums.get(j);\n\
    \                    if (sum<0) {\n                        sum+=nums.get(j);\n\
    \                    }\n                }\n                start = mid+1;\n  \
    \          }\n        }\n        return minSum;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpumhvplnw.java:46)\n"
  stdout: ''
  timestamp: 1660011995
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = nums.stream().mapToLong(Long::longValue).sum();\n        \n        for (int\
    \ i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 0) {\n       \
    \         min = Math.min(min, nums.get(i) + minSubArraySum(nums.subList(i + 1,\
    \ nums.size())));\n            }\n        }\n        \n        return min;\n \
    \   }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3j0z_pkb.java:21: error: incompatible types: List<Long> cannot\
    \ be converted to ArrayList<Long>\n                min = Math.min(min, nums.get(i)\
    \ + minSubArraySum(nums.subList(i + 1, nums.size())));\n                     \
    \                                                        ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011995
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        // The\
    \ minimum sum of any non-empty sub-array is going to be negative\n        // So\
    \ we can just return 0\n        if (nums.isEmpty()) {\n            return 0l;\n\
    \        }\n        // The starting position\n        int start = 0;\n       \
    \ // The ending position\n        int end = nums.size() - 1;\n\n        // The\
    \ sum of the current position\n        long sum = 0l;\n        // The minimum\
    \ sum of any non-empty sub-array\n        long minSum = -1l;\n        // The index\
    \ of the current position\n        int index = -1;\n\n        // Do a while loop\
    \ to find the current position\n        while (start < end) {\n            //\
    \ Do the sum of the current position\n            sum += nums.get(start);\n  \
    \          // If the sum is less than the minimum sum, we should record it\n \
    \           if (sum < minSum) {\n                // Record the new minimum sum\n\
    \                minSum = sum;\n                // Record the current position\n\
    \                index = start;\n            }\n            // Increment the current\
    \ position\n            start++;\n        }\n\n        // Return the minimum sum\n\
    \        return minSum;\n    }\n    public static void main(String[] args) {\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuqmehfql.java:53)\n"
  stdout: ''
  timestamp: 1660011996
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long sum\
    \ = 0;\n        Set<Long> s = new HashSet<>();\n        for(int i = 0; i < nums.size();\
    \ i++){\n            if(s.contains(nums.get(i))){\n                sum = sum +\
    \ nums.get(i);\n                s.remove(nums.get(i));\n            }else{\n \
    \               s.add(nums.get(i));\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsrw2witc.java:30)\n"
  stdout: ''
  timestamp: 1660011996
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        return\
    \ nums.stream()\n                .mapToLong(n -> Math.min(n,\n               \
    \         nums.stream()\n                                .filter(i->!n.equals(i))\n\
    \                                .filter(i->!nums.contains(i))\n             \
    \                   .mapToLong(i -> i)\n                                .sum()))\n\
    \                .min().getAsLong();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgujit6e0.java:27)\n"
  stdout: ''
  timestamp: 1660011996
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minimum\
    \ = Long.MAX_VALUE;\n        for(long i = 0; i < nums.size(); i++) {\n       \
    \     if((nums.get(i) < 0 && nums.get(i) > Long.MIN_VALUE) || (nums.get(i) > 0\
    \ && nums.get(i) < Long.MIN_VALUE)) {\n                minimum = Math.min(minimum,\
    \ nums.get(i) + nums.get(i + 1));\n            }\n        }\n        return minimum;\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpusordvq2.java:19: error: incompatible types: possible lossy conversion\
    \ from long to int\n            if((nums.get(i) < 0 && nums.get(i) > Long.MIN_VALUE)\
    \ || (nums.get(i) > 0 && nums.get(i) < Long.MIN_VALUE)) {\n                  \
    \       ^\n/tmp/tmpusordvq2.java:19: error: incompatible types: possible lossy\
    \ conversion from long to int\n            if((nums.get(i) < 0 && nums.get(i)\
    \ > Long.MIN_VALUE) || (nums.get(i) > 0 && nums.get(i) < Long.MIN_VALUE)) {\n\
    \                                            ^\n/tmp/tmpusordvq2.java:19: error:\
    \ incompatible types: possible lossy conversion from long to int\n           \
    \ if((nums.get(i) < 0 && nums.get(i) > Long.MIN_VALUE) || (nums.get(i) > 0 &&\
    \ nums.get(i) < Long.MIN_VALUE)) {\n                                         \
    \                                     ^\n/tmp/tmpusordvq2.java:19: error: incompatible\
    \ types: possible lossy conversion from long to int\n            if((nums.get(i)\
    \ < 0 && nums.get(i) > Long.MIN_VALUE) || (nums.get(i) > 0 && nums.get(i) < Long.MIN_VALUE))\
    \ {\n                                                                        \
    \                         ^\n/tmp/tmpusordvq2.java:20: error: incompatible types:\
    \ possible lossy conversion from long to int\n                minimum = Math.min(minimum,\
    \ nums.get(i) + nums.get(i + 1));\n                                          \
    \           ^\n/tmp/tmpusordvq2.java:20: error: incompatible types: possible lossy\
    \ conversion from long to int\n                minimum = Math.min(minimum, nums.get(i)\
    \ + nums.get(i + 1));\n                                                      \
    \               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n6 errors\n"
  stdout: ''
  timestamp: 1660011996
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        if (nums.isEmpty())\
    \ {\n            return -1l;\n        }\n        long minSum = Long.MAX_VALUE;\n\
    \        for (int i = 0; i < nums.size() - 1; i++) {\n            long currentSum\
    \ = nums.get(i) + nums.get(i + 1);\n            if (currentSum < minSum) {\n \
    \               minSum = currentSum;\n            }\n        }\n        return\
    \ minSum;\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppmb7ff2o.java:30)\n"
  stdout: ''
  timestamp: 1660011996
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long max = 0;\n        long sum = 0;\n        for\
    \ (long x : nums) {\n            min = Math.min(min, x);\n            max = Math.max(max,\
    \ x);\n            sum += x;\n        }\n        sum -= min;\n        if (sum\
    \ > 0) return sum;\n        else return max;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplk17nhyd.java:30)\n"
  stdout: ''
  timestamp: 1660011996
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        if(nums.size()\
    \ == 0) return Long.MAX_VALUE;\n        Set<Long> set = new HashSet<>();\n   \
    \     for(Long num : nums) {\n            set.add(num);\n        }\n        for(long\
    \ sum : set.stream().mapToLong(Long::longValue).sum()) {\n            for(long\
    \ num : nums) {\n                if(num == sum) return sum;\n            }\n \
    \       }\n        return Long.MAX_VALUE;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0br2nnw6.java:22: error: for-each not applicable to expression\
    \ type\n        for(long sum : set.stream().mapToLong(Long::longValue).sum())\
    \ {\n                                                                  ^\n  required:\
    \ array or java.lang.Iterable\n  found:    long\n1 error\n"
  stdout: ''
  timestamp: 1660011996
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long sum = nums.stream().reduce(Long::sum);\n   \
    \     for (long num : nums) {\n            sum += num;\n            if (sum <\
    \ min) {\n                min = sum;\n            }\n        }\n        return\
    \ min;\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk2k5mmxl.java:18: error: incompatible types: Optional<Long> cannot\
    \ be converted to long\n        long sum = nums.stream().reduce(Long::sum);\n\
    \                                       ^\n1 error\n"
  stdout: ''
  timestamp: 1660011996
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        if(nums\
    \ == null) return -1;\n        long min = Long.MAX_VALUE;\n        for(Long value\
    \ : nums) {\n            if(value < min)\n                min = value;\n     \
    \   }\n        long sum = 0;\n        for(Long value : nums) {\n            sum\
    \ += value;\n            if(sum < min)\n                min = sum;\n        }\n\
    \        return min;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc_osrd7e.java:38)\n"
  stdout: ''
  timestamp: 1660011996
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long sum\
    \ = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum = Math.min(sum,\
    \ nums.get(i));\n        }\n        return sum;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjgnxgkd3.java:24)\n"
  stdout: ''
  timestamp: 1660011996
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        ArrayList<Long>\
    \ numsSubs = new ArrayList<>();\n        long currentSum = nums.stream().reduce(0l,\
    \ Long::sum);\n        for (int i = 1; i < nums.size(); i++) {\n            for\
    \ (int j = 0; j < i; j++) {\n                currentSum += nums.get(j);\n    \
    \            if (currentSum < nums.get(j)) {\n                    numsSubs.add(currentSum);\n\
    \                    currentSum = nums.get(j);\n                }\n          \
    \  }\n        }\n        if (currentSum > 0) {\n            numsSubs.add(currentSum);\n\
    \        }\n        return numsSubs.stream().reduce(0l, Long::sum);\n    }\n \
    \   public static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkdklwg3u.java:34)\n"
  stdout: ''
  timestamp: 1660011996
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        // Solution\
    \ 1:\n        // The best solution that is guaranteed to work is:\n        //\
    \ return nums.stream().reduce((l1, l2) -> l1 + l2);\n\n        // Solution 2:\n\
    \        // The best solution that is guaranteed to work is:\n        // return\
    \ nums.stream().filter(i -> i > 0).reduce((l1, l2) -> l1 + l2);\n\n        //\
    \ Solution 3:\n        // The best solution that is guaranteed to work is:\n \
    \       // return nums.stream().mapToLong(i -> i).sum();\n\n        // Solution\
    \ 4:\n        // The best solution that is guaranteed to work is:\n        //\
    \ return nums.stream().reduce(0, (i, l) -> i + l);\n\n        // Solution 5:\n\
    \        // The best solution that is guaranteed to work is:\n        // return\
    \ nums.stream().collect(Math::addExact);\n        long sum = 0;\n        for(int\
    \ i = 0; i < nums.size(); i++) {\n            if((nums.get(i) > 0)) {\n      \
    \          sum += nums.get(i);\n            }\n        }\n        return sum;\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3jec3mon.java:45)\n"
  stdout: ''
  timestamp: 1660011996
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long max = 0;\n        long sum = 0;\n        for(long\
    \ x: nums) {\n            if(x < min)\n                min = x;\n            if(x\
    \ > max)\n                max = x;\n            sum += x;\n        }\n       \
    \ long min = Math.max(sum, min);\n        return min - max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx8n1lg4j.java:27: error: variable min is already defined in method\
    \ minSubArraySum(ArrayList<Long>)\n        long min = Math.max(sum, min);\n  \
    \           ^\n1 error\n"
  stdout: ''
  timestamp: 1660011996
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        return\
    \ minSubArraySum(nums, 0l);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpubccu0fb.java:17: error: method minSubArraySum in class Problem\
    \ cannot be applied to given types;\n        return minSubArraySum(nums, 0l);\n\
    \               ^\n  required: ArrayList<Long>\n  found:    ArrayList<Long>,long\n\
    \  reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011996
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        return\
    \ Arrays.stream(nums.toArray()).mapToLong(Long::longValue).sorted().reduce((a,\
    \ b) -> a + b).orElse(-1l);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx8_2mt5x.java:17: error: incompatible types: invalid method reference\n\
    \        return Arrays.stream(nums.toArray()).mapToLong(Long::longValue).sorted().reduce((a,\
    \ b) -> a + b).orElse(-1l);\n                                                \
    \       ^\n    method longValue in class Long cannot be applied to given types\n\
    \      required: no arguments\n      found:    Object\n      reason: actual and\
    \ formal argument lists differ in length\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011996
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        if (nums.isEmpty())\
    \ return 0;\n        if (nums.size() == 1) return nums.get(0l);\n        long\
    \ res = Long.MAX_VALUE;\n        long sum = 0;\n        for (long i : nums) {\n\
    \            if (i != -1) sum += i;\n            if (sum < res)\n            \
    \    res = sum;\n        }\n        return res;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvoq0bi9a.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        if (nums.size() == 1) return nums.get(0l);\n     \
    \                                         ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011996
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        return\
    \ minSubArraySum(Arrays.asList(nums));\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwgzefd87.java:17: error: incompatible types: no instance(s) of\
    \ type variable(s) T exist so that List<T> conforms to ArrayList<Long>\n     \
    \   return minSubArraySum(Arrays.asList(nums));\n               ^\n  where T is\
    \ a type-variable:\n    T extends Object declared in method <T>asList(T...)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1660011996
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minimum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for(long num : nums) {\n \
    \           sum += num;\n            if(sum < minimum) {\n                minimum\
    \ = sum;\n            }\n        }\n        return minimum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprp8sa4k7.java:28)\n"
  stdout: ''
  timestamp: 1660011996
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long n : nums) {\n  \
    \          if (sum + n < min) {\n                min = sum + n;\n            }\n\
    \            sum += n;\n        }\n        return min;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7bs_tjta.java:28)\n"
  stdout: ''
  timestamp: 1660011996
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        ArrayList\
    \ <int[]> list = new ArrayList<>();\n        for(Long num : nums) {\n        \
    \    int[] arr = {(int)(num%100000000)%1000000, (int)num%10000000};\n        \
    \    list.add(arr);\n        }\n        ArrayList <int[]> arrList = new ArrayList<>();\n\
    \        int sum = 0;\n        for(int i = 0; i < list.size(); i++) {\n      \
    \      arr = list.get(i);\n            if(i == 0) {\n                sum += arr[0];\n\
    \            } else {\n                for(int j = 1; j < arr.length; j++) {\n\
    \                    sum += arr[j];\n                }\n            }\n      \
    \      arrList.add(arr);\n        }\n        int minSum = Integer.MAX_VALUE;\n\
    \        for(int i = 0; i < arrList.size(); i++) {\n            arr = arrList.get(i);\n\
    \            for(int j = 1; j < arr.length; j++) {\n                if(arr[j]\
    \ < minSum) {\n                    minSum = arr[j];\n                }\n     \
    \       }\n        }\n        return sum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7i7cd8sa.java:19: error: incompatible types: Long cannot be converted\
    \ to int\n            int[] arr = {(int)(num%100000000)%1000000, (int)num%10000000};\n\
    \                                                            ^\n/tmp/tmp7i7cd8sa.java:25:\
    \ error: cannot find symbol\n            arr = list.get(i);\n            ^\n \
    \ symbol:   variable arr\n  location: class Problem\n/tmp/tmp7i7cd8sa.java:27:\
    \ error: cannot find symbol\n                sum += arr[0];\n                \
    \       ^\n  symbol:   variable arr\n  location: class Problem\n/tmp/tmp7i7cd8sa.java:29:\
    \ error: cannot find symbol\n                for(int j = 1; j < arr.length; j++)\
    \ {\n                                   ^\n  symbol:   variable arr\n  location:\
    \ class Problem\n/tmp/tmp7i7cd8sa.java:30: error: cannot find symbol\n       \
    \             sum += arr[j];\n                           ^\n  symbol:   variable\
    \ arr\n  location: class Problem\n/tmp/tmp7i7cd8sa.java:33: error: cannot find\
    \ symbol\n            arrList.add(arr);\n                        ^\n  symbol:\
    \   variable arr\n  location: class Problem\n/tmp/tmp7i7cd8sa.java:37: error:\
    \ cannot find symbol\n            arr = arrList.get(i);\n            ^\n  symbol:\
    \   variable arr\n  location: class Problem\n/tmp/tmp7i7cd8sa.java:38: error:\
    \ cannot find symbol\n            for(int j = 1; j < arr.length; j++) {\n    \
    \                           ^\n  symbol:   variable arr\n  location: class Problem\n\
    /tmp/tmp7i7cd8sa.java:39: error: cannot find symbol\n                if(arr[j]\
    \ < minSum) {\n                   ^\n  symbol:   variable arr\n  location: class\
    \ Problem\n/tmp/tmp7i7cd8sa.java:40: error: cannot find symbol\n             \
    \       minSum = arr[j];\n                             ^\n  symbol:   variable\
    \ arr\n  location: class Problem\n10 errors\n"
  stdout: ''
  timestamp: 1660011996
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long res\
    \ = Long.MAX_VALUE;\n        for( int i=0;i<nums.size();i++)\n            for(\
    \ int j=0;j<i;j++) \n                if( nums.get(i)>nums.get(j))\n          \
    \          res = Math.min(res, nums.get(i)+nums.get(j));\n                else\n\
    \                    res = Math.min(res, nums.get(i));\n        return res;\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp24b34psa.java:28)\n"
  stdout: ''
  timestamp: 1660011996
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        // sort\
    \ first to keep track of minimum sum\n        ArrayList<Long> sorted = new ArrayList<>(nums);\n\
    \        Collections.sort(sorted);\n\n        long currentMin = Long.MAX_VALUE;\n\
    \        long minSum = Long.MAX_VALUE;\n\n        // loop through sub arrays while\
    \ current sum is less than new minimum\n        for(int i = 0; i < sorted.size()\
    \ - 1; i++) {\n            // sum the elements of the subarray\n            long\
    \ sum = sorted.get(i) + sorted.get(i + 1);\n\n            // if the new sum is\
    \ less than current minimum, then store new min and current sum\n            if\
    \ (sum < currentMin) {\n                currentMin = sum;\n                minSum\
    \ = currentMin;\n            }\n\n            // if the sum is equal to the current\
    \ minimum, then store the current sum\n            if (sum == currentMin) {\n\
    \                minSum = sum;\n            }\n        }\n\n        // return\
    \ the minimum\n        return minSum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaij465im.java:45)\n"
  stdout: ''
  timestamp: 1660011997
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        if (nums.isEmpty())\n\
    \            return 0L;\n        long sum = 0L;\n        long min = Long.MAX_VALUE;\n\
    \        for (long number : nums) {\n            sum = sum + number;\n       \
    \     if (min > sum)\n                min = sum;\n        }\n        return min;\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnh9c__hk.java:29)\n"
  stdout: ''
  timestamp: 1660011997
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        if (nums.size()\
    \ == 0) throw new IllegalArgumentException();\n        ArrayList<Long> helper\
    \ = new ArrayList<>(nums);\n        helper.remove(helper.size() - 1);\n      \
    \  long minSum = Long.MAX_VALUE;\n        for (long sum : helper) {\n        \
    \    minSum = Math.min(minSum, sum);\n        }\n        return minSum;\n    }\n\
    \    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5m19whou.java:28)\n"
  stdout: ''
  timestamp: 1660011997
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long result\
    \ = Long.MAX_VALUE;\n        if (nums.size() > 1) {\n            for (int i =\
    \ 0; i < nums.size() - 1; i++) {\n                long min = Long.MAX_VALUE;\n\
    \                for (int j = i; j < nums.size(); j++) {\n                   \
    \ if (nums.get(j) < nums.get(i))\n                        min = Math.min(min,\
    \ nums.get(j) + nums.get(i));\n                    else\n                    \
    \    min = Math.min(min, nums.get(j) - nums.get(i));\n                }\n    \
    \            result = Math.min(result, min);\n            }\n        }\n     \
    \   return result;\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2_3gitgp.java:33)\n"
  stdout: ''
  timestamp: 1660011997
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        return\
    \ nums.stream().mapToLong(x -> x).reduce(Math::addExact).orElse(-1l);\n    }\n\
    \    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6wb9sm9t.java:20)\n"
  stdout: ''
  timestamp: 1660011998
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        int min\
    \ = Long.MAX_VALUE;\n        for (long num : nums) {\n            min = Math.min(min,\
    \ num);\n        }\n        return min;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp66het12e.java:17: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int min = Long.MAX_VALUE;\n                      ^\n\
    /tmp/tmp66het12e.java:19: error: incompatible types: possible lossy conversion\
    \ from long to int\n            min = Math.min(min, num);\n                  \
    \        ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011997
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        ArrayList<Long>\
    \ subs = new ArrayList<Long>();\n        for (Long num : nums) {\n           \
    \ if (num != 0) {\n                subs.add(num);\n            }\n        }\n\
    \        return minSubArraySum(subs);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem.minSubArraySum(tmph4w5mgjm.java:18)\n\
    \tat Problem.minSubArraySum(tmph4w5mgjm.java:23)\n\tat Problem.minSubArraySum(tmph4w5mgjm.java:23)\n\
    \tat Problem.minSubArraySum(tmph4w5mgjm.java:23)\n\tat Problem.minSubArraySum(tmph4w5mgjm.java:23)\n\
    \tat Problem.minSubArraySum(tmph4w5mgjm.java:23)\n\tat Problem.minSubArraySum(tmph4w5mgjm.java:23)\n\
    \tat Problem.minSubArraySum(tmph4w5mgjm.java:23)\n\tat Problem.minSubArraySum(tmph4w5mgjm.java:23)\n\
    \tat Problem.minSubArraySum(tmph4w5mgjm.java:23)\n\tat Problem.minSubArraySum(tmph4w5mgjm.java:23)\n\
    \tat Problem.minSubArraySum(tmph4w5mgjm.java:23)\n\tat Problem.minSubArraySum(tmph4w5mgjm.java:23)\n\
    \tat Problem.minSubArraySum(tmph4w5mgjm.java:23)\n\tat Problem.minSubArraySum(tmph4w5mgjm.java:23)\n\
    \tat Problem.minSubArraySum(tmph4w5mgjm.java:23)\n\tat Problem.minSubArraySum(tmph4w5mgjm.java:23)\n\
    \tat Problem.minSubArraySum(tmph4w5mgjm.java:23)\n\tat Problem.minSubArraySum(tmph4w5mgjm.java:23)\n\
    \tat Problem.minSubArraySum(tmph4w5mgjm.java:23)\n\tat Problem.minSubArraySum(tmph4w5mgjm.java:23)\n\
    \tat Problem.minSubArraySum(tmph4w5mgjm.java:23)\n\tat Problem.minSubArraySum(tmph4w5mgjm.java:23)\n\
    \tat Problem.minSubArraySum(tmph4w5mgjm.java:23)\n\tat Problem.minSubArraySum(tmph4w5mgjm.java:23)\n\
    \tat Problem.minSubArraySum(tmph4w5mgjm.java:23)\n\tat Problem.minSubArraySum(tmph4w5mgjm.java:23)\n\
    \tat Problem.minSubArraySum(tmph4w5mgjm.java:23)\n\tat Problem.minSubArraySum(tmph4w5mgjm.java:23)\n\
    \tat Problem.minSubArraySum(tmph4w5mgjm.java:23)\n\tat Problem.minSubArraySum(tmph4w5mgjm.java:23)\n\
    \tat Problem.minSubArraySum(tmph4w5mgjm.java:23)\n\tat Problem.minSubArraySum(tmph4w5mgjm.java:23)\n\
    \tat Problem.minSubArraySum(tmph4w5mgjm.java:23)\n\tat Problem.minSubArraySum(tmph4w5mgjm.java:23)\n\
    \tat Problem.minSubArraySum(tmph4w5mgjm.java:23)\n\tat Problem.minSubArraySum(tmph4w5mgjm.java:23)\n\
    \tat Problem.minSubArraySum(tmph4w5mgjm.java:23)\n\tat Problem.minSubArraySum(tmph4w5mgjm.java:23)\n\
    \tat Problem.minSubArraySum(tmph4w5mgjm.java:23)\n\tat Problem.minSubArraySum(tmph4w5mgjm.java:23)\n\
    \tat Problem.minSubArrayS"
  stdout: ''
  timestamp: 1660011998
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        ArrayList<ArrayList<Long>>\
    \ subArrays = new ArrayList<ArrayList<Long>>();\n        long min = Long.MAX_VALUE;\n\
    \        for(int i = 0; i < nums.size(); ++i) {\n            ArrayList<Long> list\
    \ = new ArrayList<Long>();\n            for(long j = 0; j < nums.size(); ++j)\
    \ {\n                list.add((long)nums.get(j));\n                if(list.size()\
    \ > i) {\n                    list.subList(0, i).removeAll(list);\n          \
    \      }\n            }\n            subArrays.add(list);\n            min = 0;\n\
    \            for(ArrayList<Long> subList : subArrays) {\n                if(subList.size()\
    \ > min) {\n                    min = subList.size();\n                }\n   \
    \         }\n        }\n        return min;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpur72bd5b.java:22: error: incompatible types: possible lossy conversion\
    \ from long to int\n                list.add((long)nums.get(j));\n           \
    \                             ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011998
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSoFar\
    \ = nums.stream().mapToLong(i -> i).sum();\n        for (long sum : nums.stream().mapToLong(i\
    \ -> i).collect(Collectors.toList())) {\n            if (sum != 0) {\n       \
    \         minSoFar = Long.min(minSoFar, sum);\n            }\n        }\n    \
    \    return minSoFar;\n    }\n    public static void main(String[] args) {\n \
    \   assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqkvi6in2.java:18: error: method collect in interface LongStream\
    \ cannot be applied to given types;\n        for (long sum : nums.stream().mapToLong(i\
    \ -> i).collect(Collectors.toList())) {\n                                    \
    \                   ^\n  required: Supplier<R>,ObjLongConsumer<R>,BiConsumer<R,R>\n\
    \  found:    Collector<Object,CAP#1,List<Object>>\n  reason: cannot infer type-variable(s)\
    \ R\n    (actual and formal argument lists differ in length)\n  where R is a type-variable:\n\
    \    R extends Object declared in method <R>collect(Supplier<R>,ObjLongConsumer<R>,BiConsumer<R,R>)\n\
    \  where CAP#1 is a fresh type-variable:\n    CAP#1 extends Object from capture\
    \ of ?\n/tmp/tmpqkvi6in2.java:18: error: incompatible types: cannot infer type-variable(s)\
    \ R\n        for (long sum : nums.stream().mapToLong(i -> i).collect(Collectors.toList()))\
    \ {\n                                                               ^\n    (argument\
    \ mismatch; no instance(s) of type variable(s) CAP#1,T exist so that Collector<T,?,List<T>>\
    \ conforms to Supplier<R>)\n  where R,T are type-variables:\n    R extends Object\
    \ declared in method <R>collect(Supplier<R>,ObjLongConsumer<R>,BiConsumer<R,R>)\n\
    \    T extends Object declared in method <T>toList()\n  where CAP#1 is a fresh\
    \ type-variable:\n    CAP#1 extends Object from capture of ?\n2 errors\n"
  stdout: ''
  timestamp: 1660011998
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        // Write\
    \ your code here\n        long result = nums.get(0); // get first element\n  \
    \      for (int i = 1; i < nums.size(); i++) { // loop through all remaining elements\n\
    \            result += nums.get(i); // add it to the result\n        }\n     \
    \   return result;\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbqwoy04v.java:25)\n"
  stdout: ''
  timestamp: 1660011998
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long sum = 0l;\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum < min) {\n                min =\
    \ sum;\n            }\n        }\n        return min;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbo_g1rbt.java:28)\n"
  stdout: ''
  timestamp: 1660011998
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        if (nums.size()\
    \ == 0) {\n            return Long.MAX_VALUE;\n        }\n\n        long subsum;\n\
    \n        subsum = nums.get(0) + nums.get(0);\n\n        for (int i = 1; i < nums.size();\
    \ i++) {\n            subsum += nums.get(i);\n            if (nums.get(i) < subsum)\
    \ {\n                subsum = nums.get(i);\n            }\n        }\n\n     \
    \   return subsum;\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiuoyzzj2.java:35)\n"
  stdout: ''
  timestamp: 1660011998
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n\n        for (long i : nums) {\n            minSum = minSum\
    \ - i;\n        }\n\n        return minSum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph4gjdvk_.java:26)\n"
  stdout: ''
  timestamp: 1660011998
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long sum\
    \ = 0;\n        long min = Long.MAX_VALUE;\n        for (long num : nums) {\n\
    \            sum += num;\n            min = Math.min(min, sum);\n        }\n \
    \       return min;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpca2e4y2r.java:26)\n"
  stdout: ''
  timestamp: 1660011998
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = -1l;\n        final int MAX_LOOPS = 1000000000;\n        for (long sum = 0l;\
    \ sum < nums.size(); ) {\n            for (int i = nums.size() - 1; i >= 0; i--)\
    \ {\n                sum += nums.get(i);\n                if (sum < minSum) {\n\
    \                    minSum = sum;\n                }\n                if (sum\
    \ == nums.get(i) && i >= nums.size() - 1) {\n                    return sum;\n\
    \                }\n            }\n            if (--MAX_LOOPS == 0) {\n     \
    \           break;\n            }\n        }\n        return minSum;\n    }\n\
    \    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgcmco32j.java:29: error: cannot assign a value to final variable\
    \ MAX_LOOPS\n            if (--MAX_LOOPS == 0) {\n                  ^\n1 error\n"
  stdout: ''
  timestamp: 1660011998
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = nums.get(0);\n        for (Long curSum : nums.subList(1, nums.size())) {\n\
    \            if (curSum - minSum > 0) {\n                minSum = curSum;\n  \
    \          }\n        }\n        return minSum;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp__u_l24f.java:26)\n"
  stdout: ''
  timestamp: 1660011998
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long max = 0;\n        long sum = 0;\n        for\
    \ (long num : nums) {\n            sum += num;\n            max = Math.max(max,\
    \ num);\n            min = Math.min(min, num);\n        }\n        return sum\
    \ + (min == Long.MAX_VALUE ? 1 : -1) * (max - min);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz66qg8el.java:28)\n"
  stdout: ''
  timestamp: 1660011998
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        int start\
    \ = 0;\n        int end = nums.size()-1;\n        int min = Long.MAX_VALUE;\n\
    \        while (start < end) {\n            int sum = 0;\n            int mid\
    \ = (start+end)/2;\n            for (int i = 0; i < nums.size(); i++) {\n    \
    \            sum += nums.get(i);\n                if (sum < min) {\n         \
    \           min = sum;\n                    start = mid+1;\n                }\
    \ else {\n                    end = mid-1;\n                }\n            }\n\
    \        }\n        return min;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmtm3lg6y.java:19: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int min = Long.MAX_VALUE;\n                      ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011998
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        // Write\
    \ your code here\n        long sum = 0;\n        int n = nums.size();\n      \
    \  long[] sums = new long[n];\n        for (int i = 0; i < n; i++) {\n       \
    \     sums[i] += nums.get(i);\n        }\n        Arrays.sort(sums);\n       \
    \ \n        for (int i = 0; i < n; i++) {\n            sum += sums[i];\n     \
    \   }\n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo2brhuqb.java:32)\n"
  stdout: ''
  timestamp: 1660011998
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long[] sums = nums.stream().map(i -> i).toArray();\n\
    \        for (int i = 0; i < sums.length; i++) {\n            long sum = sums[i];\n\
    \            while (sum != 0) {\n                sum -= sums[i];\n           \
    \     minSum = Math.min(sum, minSum);\n                i++;\n            }\n \
    \       }\n        return minSum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp94xji1ze.java:18: error: incompatible types: Object[] cannot be\
    \ converted to long[]\n        long[] sums = nums.stream().map(i -> i).toArray();\n\
    \                                                       ^\n1 error\n"
  stdout: ''
  timestamp: 1660011998
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        boolean isMinSet = false;\n        ArrayList<Long>\
    \ subArray = nums.stream().filter(n->n.longValue()>=0).sorted().collect(Collectors.toCollection(ArrayList::new));\n\
    \        long sumSubArray = subArray.get(0).longValue();\n        for(int i=0;\
    \ i<subArray.size(); i++) {\n            sumSubArray += subArray.get(i).longValue();\n\
    \            if((subArray.get(i).longValue()-sumSubArray) < min) {\n         \
    \       isMinSet = true;\n                min = subArray.get(i).longValue()-sumSubArray;\n\
    \            }\n        }\n        if(!isMinSet) {\n            min = -min;\n\
    \        }\n        return min;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9nl56804.java:34)\n"
  stdout: ''
  timestamp: 1660011998
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        for (long num : nums) {\n            if (num < 0)\
    \ {\n                continue;\n            }\n            long sum = 0;\n   \
    \         for (long i = num; true; i -= num) {\n                sum += i;\n  \
    \              if (sum < minSum) {\n                    minSum = sum;\n      \
    \          }\n            }\n        }\n        return minSum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660012003
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long result\
    \ = Long.MAX_VALUE;\n        List<Long> subArray = nums.stream()\n           \
    \     .filter(i -> !nums.contains(i))\n                .collect(Collectors.toList());\n\
    \        if (subArray.size() > 0) {\n            long min = subArray.get(0);\n\
    \            for (long current : subArray) {\n                long newSum = current\
    \ + min;\n                if (newSum < result) {\n                    result =\
    \ newSum;\n                }\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2u_amfcs.java:33)\n"
  stdout: ''
  timestamp: 1660011999
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        int len = 0;\n        int\
    \ minLen = 0;\n        for(int i = 0; i < nums.size(); i++) {\n            len\
    \ += nums.get(i);\n            min = Math.min(min, len);\n            sum += len;\n\
    \            if(sum == min && len >= minLen) {\n                minLen = len;\n\
    \            }\n        }\n        return minLen;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3azw6ofb.java:32)\n"
  stdout: ''
  timestamp: 1660011999
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        if (nums.size()\
    \ < 1) {\n            return 0;\n        }\n\n        long sum = 0, minSum = Long.MAX_VALUE;\n\
    \        Arrays.stream(nums).forEach(value -> {\n            sum += value;\n \
    \           if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        });\n\n        return minSum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpemdgnklv.java:22: error: no suitable method found for stream(ArrayList<Long>)\n\
    \        Arrays.stream(nums).forEach(value -> {\n              ^\n    method Arrays.<T#1>stream(T#1[])\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (argument\
    \ mismatch; ArrayList<Long> cannot be converted to T#1[]))\n    method Arrays.<T#2>stream(T#2[],int,int)\
    \ is not applicable\n      (cannot infer type-variable(s) T#2\n        (actual\
    \ and formal argument lists differ in length))\n    method Arrays.stream(int[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.stream(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.stream(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n  where T#1,T#2 are type-variables:\n    T#1 extends Object declared\
    \ in method <T#1>stream(T#1[])\n    T#2 extends Object declared in method <T#2>stream(T#2[],int,int)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1660011999
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long sum\
    \ = 0;\n        for (Long i : nums) {\n            if (i >= 0) sum += i;\n   \
    \         else return 0l;\n        }\n        return sum;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2zh0_5ax.java:25)\n"
  stdout: ''
  timestamp: 1660011999
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        if (nums.size()\
    \ == 0)\n            return 0;\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        long ans = nums.get(0);\n        for (int i = 1; i < nums.size(); i++)\
    \ {\n            long diff = nums.get(i) - nums.get(i - 1);\n            if (diff\
    \ > 0) {\n                res.add(nums.get(i - 1) + diff);\n            }\n  \
    \      }\n        Collections.sort(res);\n        long min = res.get(0);\n   \
    \     for (int i = 1; i < res.size(); i++) {\n            min = min < res.get(i)\
    \ ? min : res.get(i);\n        }\n        return min;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7nq038sa.java:35)\n"
  stdout: ''
  timestamp: 1660011999
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        int n = nums.size();\n        for (int i = 0; i <\
    \ n - 1; i++) {\n            for (int j = i + 1; j < n; j++) {\n             \
    \   long sum = nums.get(i) + nums.get(j);\n                if (sum < min) {\n\
    \                    min = sum;\n                }\n            }\n        }\n\
    \        return min;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8rfkzjtt.java:30)\n"
  stdout: ''
  timestamp: 1660011999
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        for (long num : nums) {\n            if (num < 0)\
    \ {\n                break;\n            }\n            min = Math.min(min, num);\n\
    \        }\n        boolean flag = true;\n        for (long num : nums) {\n  \
    \          if (flag && num < 0) {\n                min = Math.min(min, num);\n\
    \                break;\n            }\n            if (num <= min) {\n      \
    \          flag = false;\n                break;\n            }\n            min\
    \ = Math.min(min, num - 1);\n        }\n        return min;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaf0x64kh.java:40)\n"
  stdout: ''
  timestamp: 1660011999
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        if (nums\
    \ == null || nums.size() == 0) {\n            return -1L;\n        }\n       \
    \ long minSum = nums.get(0);\n        for (long i : nums) {\n            minSum\
    \ = Math.min(minSum, i);\n        }\n        return minSum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0m2zbrx8.java:28)\n"
  stdout: ''
  timestamp: 1660011999
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long result\
    \ = Long.MAX_VALUE;\n        for(int i = 0; i < nums.size(); i++) {\n        \
    \    long curSum = nums.get(i);\n            for(int j = i + 1; j < nums.size();\
    \ j++) {\n                curSum += nums.get(j);\n                if(curSum <\
    \ result) {\n                    result = curSum;\n                }\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9_rfxbpb.java:30)\n"
  stdout: ''
  timestamp: 1660011999
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long sum\
    \ = 0;\n        for (long number : nums) {\n            sum += number;\n     \
    \   }\n        long low = 1, high = nums.size() - 1;\n        while (low < high)\
    \ {\n            int mid = (low + high) / 2;\n            long a = nums.get(mid);\n\
    \            long b = nums.get(mid + 1);\n            if (a < b) {\n         \
    \       low = mid + 1;\n            } else {\n                high = mid - 1;\n\
    \            }\n        }\n        return sum;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5xf934z5.java:23: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int mid = (low + high) / 2;\n                \
    \                   ^\n1 error\n"
  stdout: ''
  timestamp: 1660011999
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        if (nums.size()\
    \ == 0) {\n            return -1l;\n        }\n\n        List<Long> numsCopy =\
    \ new ArrayList<>(nums);\n        Arrays.sort(numsCopy);\n        long minSum\
    \ = numsCopy.get(0l) + numsCopy.get(nums.size() - 1l);\n        for (long i =\
    \ 1; i < nums.size(); i++) {\n            minSum = Math.min(minSum, numsCopy.get(i\
    \ - 1l) + numsCopy.get(i));\n        }\n        return minSum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi5s7b4bh.java:22: error: no suitable method found for sort(List<Long>)\n\
    \        Arrays.sort(numsCopy);\n              ^\n    method Arrays.sort(int[])\
    \ is not applicable\n      (argument mismatch; List<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; List<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; List<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; List<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; List<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; List<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; List<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; List<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpi5s7b4bh.java:23: error: incompatible types: possible lossy\
    \ conversion from long to int\n        long minSum = numsCopy.get(0l) + numsCopy.get(nums.size()\
    \ - 1l);\n                                   ^\n/tmp/tmpi5s7b4bh.java:23: error:\
    \ incompatible types: possible lossy conversion from long to int\n        long\
    \ minSum = numsCopy.get(0l) + numsCopy.get(nums.size() - 1l);\n              \
    \           "
  stdout: ''
  timestamp: 1660011999
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long min = Integer.MAX_VALUE;\n        for (long\
    \ sum : nums) {\n            sum += min;\n            if (sum < min) {\n     \
    \           min = sum;\n            }\n        }\n        return min;\n    }\n\
    \    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn5b0n540.java:18: error: variable min is already defined in method\
    \ minSubArraySum(ArrayList<Long>)\n        long min = Integer.MAX_VALUE;\n   \
    \          ^\n1 error\n"
  stdout: ''
  timestamp: 1660011999
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        // Write\
    \ your code here\n        \n        return 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpce53iso5.java:22)\n"
  stdout: ''
  timestamp: 1660011999
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        if (nums.size()\
    \ == 0) {\n            return 0;\n        }\n\n        long sum = 0;\n       \
    \ for (long num : nums) {\n            sum = sum + num;\n        }\n        \n\
    \        ArrayList<Long> numsToSum = new ArrayList<>(nums);\n        for (long\
    \ i = nums.size() - 1; i > 0; i--) {\n            List<Long> subArray = new ArrayList<>();\n\
    \            boolean isSubArray = true;\n            for (long j = 0; j < i; j++)\
    \ {\n                subArray.add(numsToSum.get(j));\n                isSubArray\
    \ = isSubArray && (numsToSum.get(j) == numsToSum.get(i));\n            }\n   \
    \         if (isSubArray) {\n                subArray.add(numsToSum.get(0));\n\
    \                subArray.add(numsToSum.get(i - 1));\n                sum = sum\
    \ + minSubArraySum(subArray);\n                subArray.remove(subArray.size()\
    \ - 1);\n            }\n            numsToSum.remove(i);\n        }\n        \n\
    \        return sum;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt287xaa5.java:31: error: incompatible types: possible lossy conversion\
    \ from long to int\n                subArray.add(numsToSum.get(j));\n        \
    \                                   ^\n/tmp/tmpt287xaa5.java:32: error: incompatible\
    \ types: possible lossy conversion from long to int\n                isSubArray\
    \ = isSubArray && (numsToSum.get(j) == numsToSum.get(i));\n                  \
    \                                        ^\n/tmp/tmpt287xaa5.java:32: error: incompatible\
    \ types: possible lossy conversion from long to int\n                isSubArray\
    \ = isSubArray && (numsToSum.get(j) == numsToSum.get(i));\n                  \
    \                                                            ^\n/tmp/tmpt287xaa5.java:36:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \            subArray.add(numsToSum.get(i - 1));\n                           \
    \                  ^\n/tmp/tmpt287xaa5.java:37: error: incompatible types: List<Long>\
    \ cannot be converted to ArrayList<Long>\n                sum = sum + minSubArraySum(subArray);\n\
    \                                           ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n5 errors\n"
  stdout: ''
  timestamp: 1660011999
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        if(nums\
    \ == null || nums.size() == 0)\n            return 0;\n        int n = nums.size();\n\
    \        ArrayList<Long> subset = new ArrayList<>(n);\n        subset.addAll(Arrays.asList(1l,\
    \ 2l, 3l, 4l, 5l, 6l));\n        long result = subset.get(n-1) + subset.get(n-2);\n\
    \        for(int i = 2; i < n; i++) {\n            result += nums.get(i) * subset.get(i);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6sthyl4a.java:29)\n"
  stdout: ''
  timestamp: 1660011999
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        for (long i : nums) {\n            min = Math.min(min,\
    \ i);\n        }\n        return min;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpce0ickkn.java:25)\n"
  stdout: ''
  timestamp: 1660011999
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long sum\
    \ = 0;\n        Set<Long> subSet = new TreeSet<>(nums);\n        for(int i = 0;\
    \ i < nums.size(); i++) {\n            if(!subSet.contains(nums.get(i))) {\n \
    \               break;\n            }\n            sum += nums.get(i);\n     \
    \       subSet.remove(nums.get(i));\n        }\n        return sum;\n    }\n \
    \   public static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa4bpxjt3.java:29)\n"
  stdout: ''
  timestamp: 1660011999
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MIN_VALUE;\n        long minSum2 = Long.MIN_VALUE;\n        ArrayList\
    \ <Long> list = new ArrayList<>(); // Array list to store minimum sum of sub-array\n\
    \        int size = nums.size();\n        long currSum = nums.get(0); // Stores\
    \ the current sum\n        list.add((long)currSum); // Adds current sum to list\n\
    \        for (int i = 1; i < size; i++) {\n            currSum = nums.get(i);\n\
    \            list.add((long)currSum); // Adds current sum to list\n          \
    \  for (int j = i + 1; j < size; j++) {\n                currSum = nums.get(i)\
    \ + nums.get(j);\n                if (currSum < minSum) {\n                  \
    \  minSum = currSum;\n                } else if (currSum < minSum2) {\n      \
    \              minSum2 = currSum;\n                }\n            }\n        }\n\
    \        return (minSum + minSum2);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg_xw7l0q.java:38)\n"
  stdout: ''
  timestamp: 1660011999
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long result\
    \ = Long.MAX_VALUE;\n        ArrayList subArray = new ArrayList();\n        for\
    \ (Long num : nums) {\n            if (num != -1) {\n                subArray.add(num);\n\
    \            }\n        }\n        if (subArray.isEmpty()) {\n            return\
    \ result;\n        }\n        result = minSubArraySum(subArray);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem.minSubArraySum(tmp4iiawz3u.java:19)\n\
    \tat Problem.minSubArraySum(tmp4iiawz3u.java:27)\n\tat Problem.minSubArraySum(tmp4iiawz3u.java:27)\n\
    \tat Problem.minSubArraySum(tmp4iiawz3u.java:27)\n\tat Problem.minSubArraySum(tmp4iiawz3u.java:27)\n\
    \tat Problem.minSubArraySum(tmp4iiawz3u.java:27)\n\tat Problem.minSubArraySum(tmp4iiawz3u.java:27)\n\
    \tat Problem.minSubArraySum(tmp4iiawz3u.java:27)\n\tat Problem.minSubArraySum(tmp4iiawz3u.java:27)\n\
    \tat Problem.minSubArraySum(tmp4iiawz3u.java:27)\n\tat Problem.minSubArraySum(tmp4iiawz3u.java:27)\n\
    \tat Problem.minSubArraySum(tmp4iiawz3u.java:27)\n\tat Problem.minSubArraySum(tmp4iiawz3u.java:27)\n\
    \tat Problem.minSubArraySum(tmp4iiawz3u.java:27)\n\tat Problem.minSubArraySum(tmp4iiawz3u.java:27)\n\
    \tat Problem.minSubArraySum(tmp4iiawz3u.java:27)\n\tat Problem.minSubArraySum(tmp4iiawz3u.java:27)\n\
    \tat Problem.minSubArraySum(tmp4iiawz3u.java:27)\n\tat Problem.minSubArraySum(tmp4iiawz3u.java:27)\n\
    \tat Problem.minSubArraySum(tmp4iiawz3u.java:27)\n\tat Problem.minSubArraySum(tmp4iiawz3u.java:27)\n\
    \tat Problem.minSubArraySum(tmp4iiawz3u.java:27)\n\tat Problem.minSubArraySum(tmp4iiawz3u.java:27)\n\
    \tat Problem.minSubArraySum(tmp4iiawz3u.java:27)\n\tat Problem.minSubArraySum(tmp4iiawz3u.java:27)\n\
    \tat Problem.minSubArraySum(tmp4iiawz3u.java:27)\n\tat Problem.minSubArraySum(tmp4iiawz3u.java:27)\n\
    \tat Problem.minSubArraySum(tmp4iiawz3u.java:27)\n\tat Problem.minSubArraySum(tmp4iiawz3u.java:27)\n\
    \tat Problem.minSubArraySum(tmp4iiawz3u.java:27)\n\tat Problem.minSubArraySum(tmp4iiawz3u.java:27)\n\
    \tat Problem.minSubArraySum(tmp4iiawz3u.java:27)\n\tat Problem.minSubArraySum(tmp4iiawz3u.java:27)\n\
    \tat Problem.minSubArraySum(tmp4iiawz3u.java:27)\n\tat Problem.minSubArraySum(tmp4iiawz3u.java:27)\n\
    \tat Problem.minSubArraySum(tmp4iiawz3u.java:27)\n\tat Problem.minSubArraySum(tmp4iiawz3u.java:27)\n\
    \tat Problem.minSubArraySum(tmp4iiawz3u.java:27)\n\tat Problem.minSubArraySum(tmp4iiawz3u.java:27)\n\
    \tat Problem.minSubArraySum(tmp4iiawz3u.java:27)\n\tat Problem.minSubArraySum(tmp4iiawz3u.java:27)\n\
    \tat Problem.minSubArrayS"
  stdout: ''
  timestamp: 1660011999
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = nums.get(0); // Starting with the smallest element in the array\n        for\
    \ (Long i : nums) { // Iterate through the array list\n            if (i > minSum)\
    \ { // If this new element will cause the sum to be larger than the smallest element,\n\
    \                minSum = i; // change that element\n            }\n        }\n\
    \        return minSum; // Return the result\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4p5irqh7.java:26)\n"
  stdout: ''
  timestamp: 1660011999
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        if (nums\
    \ == null || nums.isEmpty())\n            return 0;\n        long min = Long.MAX_VALUE;\n\
    \        for (Long num : nums) {\n            min += num;\n        }\n       \
    \ return min;\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiggwxi7s.java:26)\n"
  stdout: ''
  timestamp: 1660012000
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        final\
    \ int N = nums.size();\n        long sum = nums.get(0l);\n        for (long num\
    \ : nums.subList(1, N)) {\n            final long tmp = sum - num;\n         \
    \   if (tmp < 0) {\n                return 0l;\n            }\n            if\
    \ (tmp > sum) {\n                return 0l;\n            }\n            sum +=\
    \ tmp;\n        }\n        return sum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpujab7rzq.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long sum = nums.get(0l);\n                       \
    \     ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660012000
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long result\
    \ = 0;\n        int size = nums.size();\n\n        long min = nums.stream().mapToLong(i\
    \ -> i).min().getAsLong();\n        long max = nums.stream().mapToLong(i -> i).max().getAsLong();\n\
    \        long range = max - min;\n\n        Arrays.sort(nums);\n\n        for\
    \ (int i = 0; i < size; i++) {\n            if (i == 0) {\n                result\
    \ = nums.get(i);\n            } else {\n                int startIndex = nums.get(i\
    \ - 1) + range;\n                int endIndex = nums.get(i);\n               \
    \ result += nums.get(i - 1) + nums.get(i);\n\n                for (int j = startIndex;\
    \ j < endIndex; j++) {\n                    result += nums.get(j);\n         \
    \       }\n            }\n        }\n\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpebx8cayq.java:24: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(nums);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpebx8cayq.java:30: error: incompatible types: possible lossy\
    \ conversion from long to int\n                int startIndex = nums.get(i - 1)\
    \ + range;\n                                                 ^\n/tmp/tmpebx8cayq.java:31:\
    \ error: incompatible types: Long cannot be converted to int\n               \
    \ int endIndex = nums.get(i);\n                         "
  stdout: ''
  timestamp: 1660012000
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        Arrays.sort(nums);\n\
    \        long sum = 0L;\n        int pos = 0;\n        while (nums.size() > 0)\
    \ {\n            long elem = nums.get(pos);\n            nums.remove(pos);\n \
    \           sum += elem;\n            pos = pos + 1;\n            if (pos == nums.size())\
    \ {\n                sum -= nums.get(0);\n                nums.remove(0);\n  \
    \          }\n        }\n        if (sum == 0) {\n            sum = 1L;\n    \
    \    }\n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3_ljhl5e.java:17: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(nums);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660012000
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        // Initialize\
    \ sum with 0 and minimum with Integer.MAX_VALUE\n        long sum = 0;\n     \
    \   long minimum = Integer.MAX_VALUE;\n        for(Long l : nums) {\n        \
    \    sum += l;\n            if (sum < minimum) {\n                minimum = sum;\n\
    \            }\n        }\n        // If nums is empty, return the sum.\n    \
    \    if (nums.isEmpty()) {\n            return sum;\n        }\n        // Set\
    \ sum to the first element in the array.\n        sum = nums.get(0);\n       \
    \ // Iterate over the remaining elements, finding the minimum of\n        // the\
    \ sum of the two elements and the sum of the next element and the sum of the following\
    \ element.\n        for (Long l : nums.subList(1, nums.size())) {\n          \
    \  int diff = (int) (sum - l);\n            sum += l;\n            sum += diff;\n\
    \            if (sum < minimum) {\n                minimum = sum;\n          \
    \  }\n        }\n        return minimum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi3g32wxh.java:45)\n"
  stdout: ''
  timestamp: 1660012001
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        for (Long num : nums) {\n            minSum = num\
    \ > 0 ? Math.min(minSum, num) : num;\n        }\n        return minSum;\n    }\n\
    \    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0_53d88i.java:25)\n"
  stdout: ''
  timestamp: 1660012001
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        for (long l : nums) {\n            min += l;\n  \
    \      }\n        return min;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuse8w7r7.java:24)\n"
  stdout: ''
  timestamp: 1660012001
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        // Your\
    \ code here\n        if(nums.isEmpty()){\n            return 0;\n        }\n \
    \       long sum = 0;\n        for(int i =0; i< nums.size(); i++){\n         \
    \   if(nums.get(i) < 0){\n                nums.set(i,nums.get(i)*-1);\n      \
    \      }\n            else{\n                sum += nums.get(i);\n           \
    \ }\n        }\n        sum = sum*sum;\n        ArrayList<Long> tmp = new ArrayList<>();\n\
    \        for(int i =0; i< nums.size(); i++){\n            if(nums.get(i) < 0){\n\
    \                tmp.add(-nums.get(i)*sum);\n            }\n            else{\n\
    \                tmp.add(nums.get(i)*sum);\n            }\n        }\n       \
    \ tmp = Collections.max(tmp);\n        sum -= tmp;\n        sum = sum*sum;\n \
    \       return sum;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj2lric26.java:40: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        tmp = Collections.max(tmp);\n           \
    \                  ^\n    lower bounds: ArrayList<Long>,Long,Object,Comparable<?\
    \ super T>\n    lower bounds: Long\n  where T is a type-variable:\n    T extends\
    \ Object,Comparable<? super T> declared in method <T>max(Collection<? extends\
    \ T>)\n/tmp/tmpj2lric26.java:41: error: bad operand types for binary operator\
    \ '-'\n        sum -= tmp;\n            ^\n  first type:  long\n  second type:\
    \ ArrayList<Long>\n2 errors\n"
  stdout: ''
  timestamp: 1660012001
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        return\
    \ nums.stream()\n                .map(a -> Arrays.stream(nums).filter(n -> n >\
    \ a).min().getAsLong())\n                .min(Math::min).get();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprp5e7wyx.java:18: error: no suitable method found for stream(ArrayList<Long>)\n\
    \                .map(a -> Arrays.stream(nums).filter(n -> n > a).min().getAsLong())\n\
    \                                ^\n    method Arrays.<T#1>stream(T#1[]) is not\
    \ applicable\n      (cannot infer type-variable(s) T#1\n        (argument mismatch;\
    \ ArrayList<Long> cannot be converted to T#1[]))\n    method Arrays.<T#2>stream(T#2[],int,int)\
    \ is not applicable\n      (cannot infer type-variable(s) T#2\n        (actual\
    \ and formal argument lists differ in length))\n    method Arrays.stream(int[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.stream(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.stream(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n  where T#1,T#2 are type-variables:\n    T#1 extends Object declared\
    \ in method <T#1>stream(T#1[])\n    T#2 extends Object declared in method <T#2>stream(T#2[],int,int)\n\
    /tmp/tmprp5e7wyx.java:19: error: incompatible types: invalid method reference\n\
    \                .min(Math::min).get();\n                     ^\n    no suitable\
    \ method found for min(Object,Object)\n        method Math.min(int,int) is not\
    \ applicable\n          (argument mismatch; Object cannot be converted to int)\n\
    \        method Math.min(long,long) is not applicable\n          (argument mismatch;\
    \ Object cannot be converted to long)\n        method Math.min(float,float) is\
    \ not applicable\n          (argument mismatch; Object cannot be converted to\
    \ float)\n        method Math.min(double,double) is not applicable\n         \
    \ (argument mismatch; Object cannot be converted to double)\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660012001
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        ArrayList<Long>\
    \ nums0 = new ArrayList<Long>(Arrays.asList(nums));\n        long min = Long.MAX_VALUE;\n\
    \        for (Long num : nums0) {\n            long s = num + min;\n         \
    \   min = Math.min(s, min);\n        }\n        return min;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwsdqmzna.java:17: error: no suitable constructor found for ArrayList(List<ArrayList<Long>>)\n\
    \        ArrayList<Long> nums0 = new ArrayList<Long>(Arrays.asList(nums));\n \
    \                               ^\n    constructor ArrayList.ArrayList(int) is\
    \ not applicable\n      (argument mismatch; no instance(s) of type variable(s)\
    \ T exist so that List<T> conforms to int)\n    constructor ArrayList.ArrayList(Collection<?\
    \ extends Long>) is not applicable\n      (argument mismatch; inference variable\
    \ T has incompatible bounds\n          lower bounds: Long,Object\n          lower\
    \ bounds: ArrayList<Long>)\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>asList(T...)\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660012000
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        // base\
    \ case\n        if(nums == null || nums.size() == 0){\n            return 0l;\n\
    \        }\n        // recursive case\n        long minSum = Long.MAX_VALUE;\n\
    \        long minSumIndex = 0l;\n        long sumOfSubArray = Long.MAX_VALUE;\n\
    \        for(long i = 1l; i < nums.size(); i++){\n            sumOfSubArray +=\
    \ nums.get(i);\n            if(sumOfSubArray > minSum){\n                minSum\
    \ = sumOfSubArray;\n                minSumIndex = i;\n            }\n        }\n\
    \        return minSum;\n    }\n    public static void main(String[] args) {\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfh84y5ws.java:26: error: incompatible types: possible lossy conversion\
    \ from long to int\n            sumOfSubArray += nums.get(i);\n              \
    \                        ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660012001
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        ArrayList<Long>\
    \ subArr = new ArrayList<Long>();\n        long minSum = -Long.MAX_VALUE;\n  \
    \      long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < minSum) minSum = sum;\n            if (sum == minSum) subArr.add(num);\n\
    \        }\n        long totalSum = 0;\n        for (long subNum : subArr) {\n\
    \            totalSum += subNum;\n        }\n        return minSum;\n    }\n \
    \   public static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1w5dn03c.java:32)\n"
  stdout: ''
  timestamp: 1660012001
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        ArrayList<T>\
    \ sortedNums = nums.stream().sorted().collect(Collectors.toList());\n        return\
    \ Math.min(\n            sortedNums.stream().filter((long num) -> num != 0).mapToLong((long\
    \ num) -> num).sum(),\n            sortedNums.stream().filter((long num) -> num\
    \ != 0).mapToLong((long num) -> num).sum() - nums.get(nums.size() - 1));\n   \
    \ }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe9g9x__0.java:17: error: cannot find symbol\n        ArrayList<T>\
    \ sortedNums = nums.stream().sorted().collect(Collectors.toList());\n        \
    \          ^\n  symbol:   class T\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660012001
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        return\
    \ findSubArraySum(nums, new ArrayList<Long>(), new ArrayList<Long>());\n    }\n\
    \    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphyyp1x0h.java:17: error: cannot find symbol\n        return findSubArraySum(nums,\
    \ new ArrayList<Long>(), new ArrayList<Long>());\n               ^\n  symbol:\
    \   method findSubArraySum(ArrayList<Long>,ArrayList<Long>,ArrayList<Long>)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660012000
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long sum\
    \ = 0l;\n        for (long i : nums) {\n            sum += i;\n        }\n   \
    \     long min = sum;\n        for (long i : nums) {\n            sum = sum -\
    \ i;\n            if (sum < min) {\n                min = sum;\n            }\n\
    \        }\n        return min;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqyoksu8q.java:31)\n"
  stdout: ''
  timestamp: 1660012001
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        for (long num : nums) {\n            if (num >= 0)\
    \ {\n                min += num;\n            }\n        }\n        return min;\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc_4o246o.java:26)\n"
  stdout: ''
  timestamp: 1660012001
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        int n\
    \ = nums.size();\n        if (n <= 0)\n            return 0;\n        long max\
    \ = Long.MIN_VALUE;\n        int m = nums.size() / 2;\n        // find maximum\
    \ element in the middle of the array\n        while (m > 0 && nums.get(m) > max)\
    \ {\n            max = nums.get(m);\n            m /= 2;\n        }\n        long\
    \ sum = 0;\n        int right = 0;\n        for (int i = 0; i < n; i++) {\n  \
    \          long n = nums.get(i);\n            long m = n - max;\n            if\
    \ (m > 0)\n                sum += m;\n            while (right < m && nums.get(right)\
    \ < n)\n                sum += n;\n            right = right + 1;\n        }\n\
    \        return sum;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3ht1s2__.java:30: error: variable n is already defined in method\
    \ minSubArraySum(ArrayList<Long>)\n            long n = nums.get(i);\n       \
    \          ^\n/tmp/tmp3ht1s2__.java:31: error: variable m is already defined in\
    \ method minSubArraySum(ArrayList<Long>)\n            long m = n - max;\n    \
    \             ^\n2 errors\n"
  stdout: ''
  timestamp: 1660012001
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        ArrayList<Integer>\
    \ sums = new ArrayList<Integer>();\n        long minSum = 0;\n        for(long\
    \ sum : nums) {\n            sums.add(sum);\n        }\n        Collections.sort(sums);\n\
    \        sums.stream().forEach(sum -> {\n            if(sum > minSum) {\n    \
    \            minSum = sum;\n            }\n        });\n        return minSum;\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxrj6grea.java:20: error: incompatible types: long cannot be converted\
    \ to Integer\n            sums.add(sum);\n                     ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660012001
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long n\
    \ = nums.size();\n        if(n < 1)\n            return 0;\n        if(nums.isEmpty())\n\
    \            return 0;\n        if(nums.size() == 1)\n            return nums.get(0);\n\
    \        ArrayList<Long> copy = new ArrayList<>(nums);\n        for(long i : copy)\n\
    \            i = 0;\n        long ans = 0;\n        for(long i = copy.size()-1;\
    \ i >= 0; i--) {\n            ans += copy.subList(i, i+1).stream().map(x -> x).sum();\n\
    \        }\n        return ans;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuer4iagh.java:29: error: incompatible types: possible lossy conversion\
    \ from long to int\n            ans += copy.subList(i, i+1).stream().map(x ->\
    \ x).sum();\n                                ^\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660012001
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long sum\
    \ = 0;\n        for(int i = 0; i < (nums.size() - 1); i++) {\n            sum\
    \ += nums.get(i);\n        }\n        long firstHalfSum = 0;\n        for(int\
    \ i = 0; i < (nums.size() - 1); i++) {\n            firstHalfSum += nums.get(i);\n\
    \        }\n        if(sum - firstHalfSum < 0) {\n            return firstHalfSum;\n\
    \        }\n        long secondHalfSum = 0;\n        for(int i = (nums.size()\
    \ - 1); i < (nums.size() - 2); i++) {\n            secondHalfSum += nums.get(i);\n\
    \        }\n        if(sum - secondHalfSum < 0) {\n            return secondHalfSum;\n\
    \        }\n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxaxe9s8s.java:38)\n"
  stdout: ''
  timestamp: 1660012001
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        for (long num : nums) {\n            min = (min >\
    \ num) ? num : min;\n        }\n        return min;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbwbpfelt.java:25)\n"
  stdout: ''
  timestamp: 1660012001
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        if (nums.isEmpty())\
    \ {\n            return 0L;\n        }\n        Arrays.sort(nums);\n        int\
    \ n = nums.size();\n        long minSoFar = 0L;\n        int minIndex = 0;\n \
    \       for (int i = 0; i < n; i++) {\n            if (nums[i] < minSoFar) {\n\
    \                minSoFar = nums[i];\n                minIndex = i;\n        \
    \    }\n        }\n        long sum = 0L;\n        int startIndex = 0;\n     \
    \   for (int j = n-1; j >= 0; j--) {\n            if (nums[j] <= minSoFar) {\n\
    \                sum += nums[j];\n                if (sum >= minSoFar) {\n   \
    \                 return sum;\n                }\n            }\n            else\
    \ {\n                sum += minSoFar - nums[j];\n            }\n            startIndex\
    \ = j;\n        }\n        return sum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmu9cn8za.java:20: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(nums);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpmu9cn8za.java:25: error: array required, but ArrayList<Long>\
    \ found\n            if (nums[i] < minSoFar) {\n                    ^\n/tmp/tmpmu9cn8za.java:26:\
    \ error: array required, but ArrayList<Long> found\n                minSoFar =\
    \ nums[i];\n                               ^\n/tmp/tmpmu9cn8za.java:33: error:\
    \ array required, but ArrayList<Long> found\n     "
  stdout: ''
  timestamp: 1660012001
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = 0;\n\n        if (nums.size() == 0)\n            return minSum;\n\n      \
    \  long minNum = nums.get(0);\n\n        for (long num : nums) {\n           \
    \ if (num > 0) {\n                minSum = Integer.MAX_VALUE;\n            } else\
    \ {\n                minSum = 0;\n            }\n            long currSum = minSum\
    \ + num;\n            if (currSum < minSum) {\n                minNum = num;\n\
    \                minSum = currSum;\n            }\n        }\n        return minSum;\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc4c1z_bm.java:39)\n"
  stdout: ''
  timestamp: 1660012002
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Integer.MIN_VALUE;\n        long max = Integer.MIN_VALUE;\n        long sum\
    \ = 0;\n\n        for (long num : nums) {\n            sum += num;\n         \
    \   min = Math.min(num, min);\n            max = Math.max(num, max);\n       \
    \ }\n\n        // no subarray means just a single number\n        if (min == Integer.MIN_VALUE\
    \ && max == Integer.MIN_VALUE) {\n            return nums.get(0);\n        }\n\
    \n        // the minimum of the min and the max is the sum\n        min = Math.min(min,\
    \ max);\n        max = Math.max(min, max);\n        sum = Math.max(sum, 0);\n\n\
    \        if (sum == 0) {\n            return Integer.MIN_VALUE;\n        }\n \
    \       return min + sum;\n    }\n    public static void main(String[] args) {\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8kosw2eh.java:43)\n"
  stdout: ''
  timestamp: 1660012002
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        if (nums\
    \ == null || nums.isEmpty())\n            return Long.MAX_VALUE;\n\n        long\
    \ minSum = Long.MAX_VALUE;\n\n        // The algorithm is to go through all combinations\
    \ and sum the minimum element\n        long minIndex = -1L;\n        for (long\
    \ i = 0; i < nums.size(); i++) {\n            long minElement = minElementFromCombination(nums,\
    \ i);\n            if (minElement < minSum) {\n                minSum = minElement;\n\
    \                minIndex = i;\n            }\n        }\n\n        return minSum;\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptvwuoc0r.java:25: error: cannot find symbol\n            long minElement\
    \ = minElementFromCombination(nums, i);\n                              ^\n  symbol:\
    \   method minElementFromCombination(ArrayList<Long>,long)\n  location: class\
    \ Problem\n1 error\n"
  stdout: ''
  timestamp: 1660012002
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long num : nums) {\n\
    \            if (num >= 0) {\n                sum += num;\n                min\
    \ = Math.min(min, sum);\n            }\n        }\n        return min;\n    }\n\
    \    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb0rm4aiu.java:28)\n"
  stdout: ''
  timestamp: 1660012002
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        // write\
    \ your code in Java SE 8\n        if (nums.size() == 0) {\n            return\
    \ 0;\n        }\n        if (nums.size() == 1) {\n            return nums.get(0);\n\
    \        }\n        long ans = nums.get(0);\n        for (int i = 1; i < nums.size();\
    \ i++) {\n            ans = Math.min(ans, nums.get(i));\n        }\n        return\
    \ ans;\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp541jvfgr.java:32)\n"
  stdout: ''
  timestamp: 1660012002
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        if (nums\
    \ == null || nums.size() == 0) {\n            return 0L;\n        }\n        int\
    \ size = nums.size();\n        long min = nums.get(0); // Starting point\n   \
    \     for (int i = 1; i < size; i++) {\n            long sum = 0L;\n         \
    \   long val = nums.get(i);\n            for (int j = i; j < size; j++) {\n  \
    \              sum += val;\n                val = nums.get(j);\n            }\n\
    \            if (sum < min) {\n                min = sum;\n            }\n   \
    \     }\n        return min;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpanx9b1p7.java:36)\n"
  stdout: ''
  timestamp: 1660012002
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        // Your\
    \ code here\n        if(nums.size()<=0) {\n            return 0;\n        }\n\
    \        ArrayList<Long> subArrayList = new ArrayList<>();\n        for(int i=0;i<nums.size();i++)\
    \ {\n            if(i==0) {\n                subArrayList.add(nums.get(i));\n\
    \            }\n            else if(nums.get(i)>subArrayList.get(subArrayList.size()-1))\
    \ {\n                subArrayList.add(nums.get(i));\n            }\n         \
    \   else if(nums.get(i)<subArrayList.get(subArrayList.size()-1)) {\n         \
    \       subArrayList.set(subArrayList.size()-1,nums.get(i));\n            }\n\
    \        }\n        long min = subArrayList.get(subArrayList.size()-1);\n    \
    \    for(int i=subArrayList.size()-2;i>=0;i--) {\n            if((subArrayList.get(i)-min)<0)\
    \ {\n                min = subArrayList.get(i);\n            }\n            else\
    \ {\n                min = min+subArrayList.get(i);\n                subArrayList.set(i,min);\n\
    \            }\n        }\n        return min;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptaa492bb.java:46)\n"
  stdout: ''
  timestamp: 1660012002
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        for (long sum : nums) {\n            min = Math.min(sum,\
    \ min);\n        }\n        return min;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4ty2j1yi.java:25)\n"
  stdout: ''
  timestamp: 1660012002
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        if(nums\
    \ == null || nums.size() == 0)\n            return 0;\n\n        // 1. find minimum\
    \ sum from left to right\n        long min = Long.MAX_VALUE;\n        for(long\
    \ i = 0; i< nums.size(); i++)\n            min = Math.min(min, nums.get(i));\n\
    \n        // 2. calculate sum of current min\n        long sum = 0;\n        for(long\
    \ i = 0; i< nums.size(); i++)\n            sum += nums.get(i);\n\n        // 3.\
    \ if sum is minimum then add it to the current min\n        sum += min;\n    \
    \    if(sum == min)\n            return min;\n\n        // 4. else continue from\
    \ step 2\n        return minSubArraySum(nums, min, sum);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpscocg__e.java:23: error: incompatible types: possible lossy conversion\
    \ from long to int\n            min = Math.min(min, nums.get(i));\n          \
    \                               ^\n/tmp/tmpscocg__e.java:28: error: incompatible\
    \ types: possible lossy conversion from long to int\n            sum += nums.get(i);\n\
    \                            ^\n/tmp/tmpscocg__e.java:36: error: method minSubArraySum\
    \ in class Problem cannot be applied to given types;\n        return minSubArraySum(nums,\
    \ min, sum);\n               ^\n  required: ArrayList<Long>\n  found:    ArrayList<Long>,long,long\n\
    \  reason: actual and formal argument lists differ in length\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1660012002
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        if (nums.size()\
    \ < 1) return 0L;\n        long sum = 0L;\n        ArrayList<TwoLong> helper =\
    \ new ArrayList<TwoLong>();\n        long start = 0;\n        long end = nums.size()-1;\n\
    \        while (start <= end) {\n            helper.add(new TwoLong(nums.get(start),\
    \ nums.get(end)));\n            sum += nums.get(start);\n            long min\
    \ = helper.get(0).getFirst() + helper.get(1).getFirst();\n            if (helper.get(0).getSecond()\
    \ < min) {\n                min = helper.get(0).getSecond();\n            }\n\
    \            sum += min;\n            start++;\n            end--;\n        }\n\
    \        return sum;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpygdywmap.java:19: error: cannot find symbol\n        ArrayList<TwoLong>\
    \ helper = new ArrayList<TwoLong>();\n                  ^\n  symbol:   class TwoLong\n\
    \  location: class Problem\n/tmp/tmpygdywmap.java:19: error: cannot find symbol\n\
    \        ArrayList<TwoLong> helper = new ArrayList<TwoLong>();\n             \
    \                                     ^\n  symbol:   class TwoLong\n  location:\
    \ class Problem\n/tmp/tmpygdywmap.java:23: error: cannot find symbol\n       \
    \     helper.add(new TwoLong(nums.get(start), nums.get(end)));\n             \
    \              ^\n  symbol:   class TwoLong\n  location: class Problem\n/tmp/tmpygdywmap.java:23:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \        helper.add(new TwoLong(nums.get(start), nums.get(end)));\n          \
    \                                  ^\n/tmp/tmpygdywmap.java:23: error: incompatible\
    \ types: possible lossy conversion from long to int\n            helper.add(new\
    \ TwoLong(nums.get(start), nums.get(end)));\n                                \
    \                             ^\n/tmp/tmpygdywmap.java:24: error: incompatible\
    \ types: possible lossy conversion from long to int\n            sum += nums.get(start);\n\
    \                            ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n6 errors\n"
  stdout: ''
  timestamp: 1660012002
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        // TODO\
    \ implement this method\n        long min = 0;\n        long cur = Long.MAX_VALUE;\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            cur = cur + nums.get(i);\n\
    \            if (cur < min) {\n                min = cur;\n            }\n   \
    \     }\n        return min;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwdu5k3v0.java:29)\n"
  stdout: ''
  timestamp: 1660012002
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        List<Integer>\
    \ subArrays = nums.stream()\n                .collect(Collectors.groupingBy(o\
    \ -> Math.abs(o)))\n                .entrySet()\n                .stream()\n \
    \               .map(e -> new IntPair(e.getKey(), e.getValue().stream().mapToLong(Long::longValue).sum()))\n\
    \                .sorted(Comparator.comparing(IntPair::getValue))\n          \
    \      .map(IntPair::getKey)\n                .collect(Collectors.toList());\n\
    \        return subArrays.isEmpty() ? -1l : subArrays.get(0).getValue();\n   \
    \ }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe6ymghnz.java:21: error: cannot find symbol\n                .map(e\
    \ -> new IntPair(e.getKey(), e.getValue().stream().mapToLong(Long::longValue).sum()))\n\
    \                              ^\n  symbol:   class IntPair\n  location: class\
    \ Problem\n/tmp/tmpe6ymghnz.java:22: error: cannot find symbol\n             \
    \   .sorted(Comparator.comparing(IntPair::getValue))\n                       \
    \                      ^\n  symbol:   variable IntPair\n  location: class Problem\n\
    /tmp/tmpe6ymghnz.java:23: error: cannot find symbol\n                .map(IntPair::getKey)\n\
    \                     ^\n  symbol:   variable IntPair\n  location: class Problem\n\
    /tmp/tmpe6ymghnz.java:25: error: cannot find symbol\n        return subArrays.isEmpty()\
    \ ? -1l : subArrays.get(0).getValue();\n                                     \
    \                      ^\n  symbol:   method getValue()\n  location: class Integer\n\
    4 errors\n"
  stdout: ''
  timestamp: 1660012002
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        if (nums.size()\
    \ == 0) return -1l;\n        long sum = 1l;\n        long minSum = nums.get(0l);\
    \ // initialize minSum\n        int count = 0;\n        for (int i = 1; i < nums.size();\
    \ i++) {\n            if (nums.get(i) > 0) \n                sum += nums.get(i);\
    \ // update sum\n            else\n                sum -= nums.get(i - 1); //\
    \ update sum\n            if (sum < minSum) { // update minSum\n             \
    \   minSum = sum;\n                count = 1;\n            } else { // update\
    \ minSum\n                minSum -= count;\n                count++;\n       \
    \     }\n        }\n        return minSum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp47ts14i9.java:19: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long minSum = nums.get(0l); // initialize minSum\n\
    \                               ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660012002
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        int count = 0;\n\n        for (int i = 0; i < nums.size();\
    \ i++) {\n            long val = nums.get(i);\n            if (val <= 0) {\n \
    \               count++;\n                continue;\n            }\n\n       \
    \     long min = Math.min(val, min);\n\n            if (min < 0) {\n         \
    \       min = Long.MAX_VALUE;\n            }\n            count++;\n        }\n\
    \n        if (count > 0) {\n            min = -min;\n        }\n        return\
    \ min;\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmmn9svne.java:27: error: variable min is already defined in method\
    \ minSubArraySum(ArrayList<Long>)\n            long min = Math.min(val, min);\n\
    \                 ^\n1 error\n"
  stdout: ''
  timestamp: 1660012002
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        int n\
    \ = nums.size();\n        long sum = 0;\n        for(int i = 1; i < n; i++) {\n\
    \            sum += nums.get(i);\n            for(int j = i; j > 0; j--) {\n \
    \               if(nums.get(j) < sum)\n                    sum = sum - nums.get(j);\n\
    \            }\n        }\n        return sum;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgkwyavk9.java:30)\n"
  stdout: ''
  timestamp: 1660012003
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        if(nums.size()\
    \ < 2) return 0l;\n        long sum = 0l;\n        boolean first = true;\n   \
    \     for(long num : nums) {\n            if(num > 0) {\n                sum +=\
    \ num;\n            }\n            if(first && num != 0) {\n                sum\
    \ = num;\n            }\n            first = false;\n        }\n        return\
    \ sum;\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo8qu8b02.java:32)\n"
  stdout: ''
  timestamp: 1660012003
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        for (long num : nums) {\n            minSum = Math.min(minSum,\
    \ num);\n        }\n        return minSum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkn0aiyyv.java:25)\n"
  stdout: ''
  timestamp: 1660012002
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long sum\
    \ = 0;\n        for(int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n\
    \        }\n        Arrays.sort(nums);\n        while(nums.size() > 0 && nums.get(nums.size()\
    \ - 1) < sum) {\n            sum -= nums.get(nums.size() - 1);\n            nums.remove(nums.size()\
    \ - 1);\n        }\n        return sum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp75_clygx.java:21: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(nums);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660012003
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        // If\
    \ nums is empty return 0\n        if (nums.size() == 0) {\n            return\
    \ 0;\n        }\n\n        // Get first element of nums\n        long first =\
    \ nums.get(0);\n\n        // Initialize min and sum variables\n        long min\
    \ = first;\n        long sum = 0;\n\n        // Get first element of nums\n  \
    \      long next = nums.get(0);\n\n        // Get next element of nums\n     \
    \   while (true) {\n            // If next element of nums is less than first\
    \ element of nums then sum is min and min is next element\n            if (next\
    \ < first) {\n                sum = min;\n                min = next;\n      \
    \      }\n            // Else sum is sum + next element\n            else {\n\
    \                sum += next;\n            }\n\n            // Get next element\
    \ of nums\n            next = nums.get(0);\n        }\n        // return sum\n\
    \        return sum;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqznl4k07.java:48: error: unreachable statement\n        return\
    \ sum;\n        ^\n1 error\n"
  stdout: ''
  timestamp: 1660012002
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = nums.get(0);\n        for (int i = 1; i < nums.size(); i++) {\n          \
    \  min = Math.min(min, nums.get(i));\n        }\n        return min;\n    }\n\
    \    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_jeu47ge.java:25)\n"
  stdout: ''
  timestamp: 1660012003
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        if (nums.isEmpty())\
    \ {\n            return 0;\n        }\n        if (nums.size() == 1) {\n     \
    \       return nums.get(0);\n        }\n        long maxSum = nums.get(0) * nums.get(0);\n\
    \        for (Long num : nums) {\n            maxSum = Math.max(maxSum, num *\
    \ num);\n        }\n        return maxSum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpud46la7w.java:30)\n"
  stdout: ''
  timestamp: 1660012003
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        ArrayList<Long>\
    \ curr = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n        for\
    \ (Long num : nums) {\n            if (num < 0 || num == curr.size()) {\n    \
    \            if (num > min) {\n                    min = num;\n              \
    \  }\n            } else if (num > curr.size()) {\n                curr.add(num);\n\
    \            } else {\n                for (int i = 0; i < num; i++) {\n     \
    \               if (!curr.contains(num - i) && num - i > 0) {\n              \
    \          curr.add(num - i);\n                    }\n                }\n    \
    \        }\n        }\n        return min;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9y__qjaf.java:37)\n"
  stdout: ''
  timestamp: 1660012003
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        int[]\
    \ arr;\n        int i, j, k;\n        long sum = 0;\n        arr = new int[nums.size()];\n\
    \        arr.fill(Integer.MIN_VALUE);\n        arr.length = nums.size();\n   \
    \     int n = nums.size();\n\n        for (i = 1; i < n; i++) {\n            arr[i]\
    \ = Math.min(arr[i], nums.get(i));\n        }\n        \n        for (i = n -\
    \ 1; i >= 0; i--) {\n            arr[i] = Math.max(arr[i], nums.get(i));\n   \
    \     }\n        \n        for (i = 1; i < n; i++) {\n            arr[i] = Math.max(arr[i],\
    \ nums.get(i) - arr[i-1]);\n        }\n\n        long max = arr[0];\n        for\
    \ (i = 0; i <= n; i++) {\n            sum += arr[i];\n            if (max < sum)\
    \ {\n                max = sum;\n            }\n        }\n        return max;\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcd00yowz.java:21: error: cannot find symbol\n        arr.fill(Integer.MIN_VALUE);\n\
    \           ^\n  symbol:   method fill(int)\n  location: variable arr of type\
    \ int[]\n/tmp/tmpcd00yowz.java:22: error: cannot assign a value to final variable\
    \ length\n        arr.length = nums.size();\n           ^\n/tmp/tmpcd00yowz.java:26:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \        arr[i] = Math.min(arr[i], nums.get(i));\n                           \
    \  ^\n/tmp/tmpcd00yowz.java:30: error: incompatible types: possible lossy conversion\
    \ from long to int\n            arr[i] = Math.max(arr[i], nums.get(i));\n    \
    \                         ^\n/tmp/tmpcd00yowz.java:34: error: incompatible types:\
    \ possible lossy conversion from long to int\n            arr[i] = Math.max(arr[i],\
    \ nums.get(i) - arr[i-1]);\n                             ^\n5 errors\n"
  stdout: ''
  timestamp: 1660012003
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        // Sum\
    \ all the elements\n        long sum = 0;\n        for (Long num : nums) {\n \
    \           sum += num;\n        }\n\n        // Add up all the positive integers\
    \ up to and including sum\n        long positiveSum = 0;\n        for (long i\
    \ = sum; i <= nums.size(); i++) {\n            if (nums.get(i) > 0) {\n      \
    \          positiveSum += nums.get(i);\n            }\n        }\n\n        //\
    \ Now return the minimum between positive sum and sum\n        return Math.min(positiveSum,\
    \ sum);\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3j9uao8s.java:26: error: incompatible types: possible lossy conversion\
    \ from long to int\n            if (nums.get(i) > 0) {\n                     \
    \    ^\n/tmp/tmp3j9uao8s.java:27: error: incompatible types: possible lossy conversion\
    \ from long to int\n                positiveSum += nums.get(i);\n            \
    \                            ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660012003
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = 0;\n        long minSumSubArraySum = 0;\n        for(Long i : nums){\n   \
    \         minSum+=i;\n        }\n        minSumSubArraySum = minSum;\n       \
    \ if(nums.size()==1){\n            return nums.get(0);\n        }\n        for(int\
    \ i=1; i<nums.size(); i++){\n            minSumSubArraySum+=nums.get(i);\n   \
    \         if(minSumSubArraySum < minSum){\n                minSum = minSumSubArraySum;\n\
    \            }\n            minSumSubArraySum-=nums.get(i);\n        }\n     \
    \   return minSum;\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjl6nrth9.java:36)\n"
  stdout: ''
  timestamp: 1660012003
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        // write\
    \ your code here\n        long min = 0;\n        for (long val : nums) {\n   \
    \         if (val > 0)\n                min += val;\n        }\n        return\
    \ min;\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgut3_9sk.java:26)\n"
  stdout: ''
  timestamp: 1660012004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        // Your\
    \ code goes here\n        long minSum = 0l; // Init min sum\n        long sum\
    \ = 0l; // Init sum\n        Arrays.stream(nums).forEach(i -> {\n            if\
    \ (i != 0l) {\n                sum += i;\n                if (sum >= minSum) minSum\
    \ = sum;\n            }\n        });\n        return minSum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb4t1v6f7.java:20: error: no suitable method found for stream(ArrayList<Long>)\n\
    \        Arrays.stream(nums).forEach(i -> {\n              ^\n    method Arrays.<T#1>stream(T#1[])\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (argument\
    \ mismatch; ArrayList<Long> cannot be converted to T#1[]))\n    method Arrays.<T#2>stream(T#2[],int,int)\
    \ is not applicable\n      (cannot infer type-variable(s) T#2\n        (actual\
    \ and formal argument lists differ in length))\n    method Arrays.stream(int[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.stream(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.stream(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n  where T#1,T#2 are type-variables:\n    T#1 extends Object declared\
    \ in method <T#1>stream(T#1[])\n    T#2 extends Object declared in method <T#2>stream(T#2[],int,int)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1660012004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        for (Long i : nums) {\n            min = Math.min(i,\
    \ min);\n        }\n        return min;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0pyo8_oo.java:25)\n"
  stdout: ''
  timestamp: 1660012004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        for (long n : nums) {\n            minSum = Math.min(minSum,\
    \ n);\n        }\n        return minSum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt0wvaouc.java:25)\n"
  stdout: ''
  timestamp: 1660012004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long sum\
    \ = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            long num\
    \ = nums.get(i);\n            for (int j = 0; j < nums.size(); j++) {\n      \
    \          if (i != j) {\n                    sum += num;\n                }\n\
    \            }\n        }\n        return sum;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_y4fjjh_.java:29)\n"
  stdout: ''
  timestamp: 1660012004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        return\
    \ Arrays.stream(nums).filter(x -> x != -1l && x != -2l).mapToLong(x -> x).sum();\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy8pmiudf.java:17: error: no suitable method found for stream(ArrayList<Long>)\n\
    \        return Arrays.stream(nums).filter(x -> x != -1l && x != -2l).mapToLong(x\
    \ -> x).sum();\n                     ^\n    method Arrays.<T#1>stream(T#1[]) is\
    \ not applicable\n      (cannot infer type-variable(s) T#1\n        (argument\
    \ mismatch; ArrayList<Long> cannot be converted to T#1[]))\n    method Arrays.<T#2>stream(T#2[],int,int)\
    \ is not applicable\n      (cannot infer type-variable(s) T#2\n        (actual\
    \ and formal argument lists differ in length))\n    method Arrays.stream(int[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.stream(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.stream(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n  where T#1,T#2 are type-variables:\n    T#1 extends Object declared\
    \ in method <T#1>stream(T#1[])\n    T#2 extends Object declared in method <T#2>stream(T#2[],int,int)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1660012004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        if (nums\
    \ == null || nums.size() == 0) {\n            return 0L;\n        }\n        long\
    \ minSum = 0L;\n        ArrayList<Integer> sums = getSums(nums);\n        for\
    \ (Integer sum : sums) {\n            minSum = sum == null ? -1L : Math.min(minSum,\
    \ sum);\n        }\n        return minSum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkusphc8z.java:21: error: cannot find symbol\n        ArrayList<Integer>\
    \ sums = getSums(nums);\n                                  ^\n  symbol:   method\
    \ getSums(ArrayList<Long>)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660012004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long sum\
    \ = 0;\n        long maxSize = 0;\n        ArrayList<Long> max = new ArrayList<Long>();\n\
    \        ArrayList<Long> curr = new ArrayList<Long>();\n        ArrayList<Long>\
    \ start = new ArrayList<Long>();\n        ArrayList<Long> end = new ArrayList<Long>();\n\
    \        if (nums.size() == 0) return sum;\n        for (long i : nums) {\n  \
    \          sum = (i == -1) ? sum : sum + i;\n            start.add(sum);\n   \
    \         end.add(sum);\n            maxSize += i;\n            if (maxSize >\
    \ sum) {\n                sum = 0;\n                max.clear();\n           \
    \     curr.clear();\n                start.clear();\n                end.clear();\n\
    \                maxSize = 0;\n            }\n        }\n        for (long i :\
    \ nums) {\n            if (i < sum) {\n                curr.add(sum - i);\n  \
    \              curr.add(-1);\n                end.add(sum - i);\n            \
    \    sum = 0;\n                sum -= i;\n            }\n            if (sum ==\
    \ 0 && curr.get(1) < 0) {\n                curr.remove(0);\n                curr.remove(1);\n\
    \                sum = 0;\n                sum -= i;\n            }\n        \
    \    if (sum == 0 && curr.get(0) > 0) {\n                curr.remove(0);\n   \
    \             curr.remove(1);\n                sum = 0;\n                sum -=\
    \ i;\n            }\n            if (sum > 0 && curr.get(0) > 0) {\n         \
    \       sum -= curr.get(0);\n            }\n            if (sum > 0 && curr.get(1)\
    \ < 0) {\n                sum -= curr.get(1);\n            }\n            if (sum\
    \ > 0 && maxSize < sum) {\n                max = curr.remove(0);\n           \
    \ }\n            if (sum > 0 && curr.get(0) < 0) {\n                sum -= curr.get(0);\n\
    \            }\n            if (sum > 0 && maxSize < sum) {\n                max\
    \ = curr.remove(1);\n            }\n            if (sum > 0 && curr.get(1) > 0\
    \ && curr.get(0) < 0 && (!max.isEmpty() || curr.size() <= 1)) {\n            \
    \    sum -= curr.get(1);\n            }\n            if (sum > 0 && maxSize <\
    \ sum) {\n                max = curr.remove(1);\n            }\n            if\
    \ (sum > 0 && curr.get(1) > 0 && curr.get(0) < 0) {\n                sum -= curr.get(1);\n\
    \            }\n            if (sum > 0 && maxSize < sum) {\n                max\
    \ = curr.remove(0);\n            }\n            if (sum > 0 && curr.get(1) < 0)\
    \ {\n                sum -= curr.get(1);\n            }\n            if (sum >\
    \ 0 && maxSize < sum) {\n                max = curr.remove(1);\n            }\n\
    \            if (sum > 0 && curr.get(0) > 0) {\n                sum -= curr.get(0);\n\
    \            }\n            if (sum > 0 && maxSize < sum) {\n                max\
    \ = curr.remove(0);\n            }\n            if (sum > 0 && curr.get(0) < 0)\
    \ {\n                sum -= curr.get(\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz7k7hli2.java:99: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpz7k7hli2.java:100: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660012003
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        return\
    \ min(nums.stream().mapToLong(x -> {\n            List<Long> l = nums.stream().filter(y\
    \ -> x != y).collect(Collectors.toList());\n            return Arrays.asList(l.get(0),\
    \ l.get(1), l.get(2)).stream().mapToLong(Long::longValue).sum();\n        }).collect(Collectors.toList()));\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpst13z4ma.java:20: error: method collect in interface LongStream\
    \ cannot be applied to given types;\n        }).collect(Collectors.toList()));\n\
    \          ^\n  required: Supplier<R>,ObjLongConsumer<R>,BiConsumer<R,R>\n  found:\
    \    Collector<Object,CAP#1,List<Object>>\n  reason: cannot infer type-variable(s)\
    \ R\n    (actual and formal argument lists differ in length)\n  where R is a type-variable:\n\
    \    R extends Object declared in method <R>collect(Supplier<R>,ObjLongConsumer<R>,BiConsumer<R,R>)\n\
    \  where CAP#1 is a fresh type-variable:\n    CAP#1 extends Object from capture\
    \ of ?\n/tmp/tmpst13z4ma.java:20: error: incompatible types: cannot infer type-variable(s)\
    \ R\n        }).collect(Collectors.toList()));\n                  ^\n    (argument\
    \ mismatch; no instance(s) of type variable(s) CAP#1,T exist so that Collector<T,?,List<T>>\
    \ conforms to Supplier<R>)\n  where R,T are type-variables:\n    R extends Object\
    \ declared in method <R>collect(Supplier<R>,ObjLongConsumer<R>,BiConsumer<R,R>)\n\
    \    T extends Object declared in method <T>toList()\n  where CAP#1 is a fresh\
    \ type-variable:\n    CAP#1 extends Object from capture of ?\n2 errors\n"
  stdout: ''
  timestamp: 1660012004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long sum\
    \ = 0;\n        for(Long i : nums) {\n            sum += i;\n        }\n     \
    \   List<Long> remaining = new ArrayList<>();\n        for(Long i : nums) {\n\
    \            for(Long j : nums) {\n                if(j == i) {\n            \
    \        continue;\n                }\n                long tmp = Math.abs(sum\
    \ - i);\n                if(tmp > j) {\n                    remaining.add(i);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     long minSum = sum;\n        for(Long i : remaining) {\n            minSum\
    \ += i;\n        }\n        return minSum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppqjne_q1.java:41)\n"
  stdout: ''
  timestamp: 1660012004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        return\
    \ minSubArraySum(nums, 0, nums.size() - 1, new ArrayList<Long>(), 0);\n    }\n\
    \    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoyg_vqmq.java:17: error: method minSubArraySum in class Problem\
    \ cannot be applied to given types;\n        return minSubArraySum(nums, 0, nums.size()\
    \ - 1, new ArrayList<Long>(), 0);\n               ^\n  required: ArrayList<Long>\n\
    \  found:    ArrayList<Long>,int,int,ArrayList<Long>,int\n  reason: actual and\
    \ formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660012004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        if (nums.isEmpty())\
    \ {\n            return 0l;\n        }\n        long minSum = Long.MAX_VALUE;\n\
    \        for (long i : nums) {\n            minSum = Math.min(minSum, getSumAtPos(i,\
    \ nums));\n        }\n        return minSum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq2kqve65.java:22: error: cannot find symbol\n            minSum\
    \ = Math.min(minSum, getSumAtPos(i, nums));\n                                \
    \      ^\n  symbol:   method getSumAtPos(long,ArrayList<Long>)\n  location: class\
    \ Problem\n1 error\n"
  stdout: ''
  timestamp: 1660012004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        // Initialize\
    \ answer to minimum sum of any non-empty sub-array\n        long ans = -9999999999999999L;\n\
    \        List<Long> sub = new ArrayList<Long>();\n        for (long n : nums)\
    \ {\n            int count = 0;\n            for (long p : sub) {\n          \
    \      if (p > n)\n                    break;\n                count++;\n    \
    \        }\n            if (count > 0)\n                ans = Math.min(ans, sub.get(count));\n\
    \            sub.add(n);\n        }\n        return ans;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.minSubArraySum(tmpumtopxdj.java:28)\n\tat Problem.main(tmpumtopxdj.java:34)\n"
  stdout: ''
  timestamp: 1660012004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        // TODO\n\
    \        return Long.MAX_VALUE;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzykss5_a.java:21)\n"
  stdout: ''
  timestamp: 1660012004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        for (Long sum : nums) {\n            if (min > sum)\
    \ {\n                min = sum;\n            }\n        }\n        return min;\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdv76v6cu.java:27)\n"
  stdout: ''
  timestamp: 1660012004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        ArrayList\
    \ <ArrayList <Long>> list = new ArrayList<>(); // We create a list to store all\
    \ sub-arrays of nums\n        ArrayList<Long> arrayList = new ArrayList<>();\n\
    \        \n        // For each element in nums\n        for (Long number : nums)\
    \ {\n            if (number == Long.MIN_VALUE) { // If the number is negative,\
    \ add it to the arrayList\n                arrayList.add(number);\n          \
    \  }\n            if (arrayList.size() == 0) { // If there are no elements in\
    \ the array, add it to the arrayList\n                arrayList.add(number);\n\
    \            }\n            if (arrayList.size() == 1) { // If there is only one\
    \ element in the array, add it to the arrayList\n                arrayList.add(number);\n\
    \            }\n            else { // Otherwise add it to the list\n         \
    \       list.add(0, arrayList);\n                arrayList.clear();\n        \
    \        arrayList.add(number);\n            }\n        }\n        \n        //\
    \ Return the minimum sum of any sub-array of nums\n        long minimumSum = Long.MAX_VALUE;\n\
    \        ArrayList <ArrayList <Long>> listCopy = new ArrayList<>(list);\n    \
    \    ArrayList <Long> subArray = new ArrayList<>();\n        for (ArrayList <Long>\
    \ subList : listCopy) {\n            for (long element : subList) {\n        \
    \        minimumSum = Math.min(minimumSum, element);\n            }\n        }\n\
    \        return minimumSum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbpfa_r4o.java:50)\n"
  stdout: ''
  timestamp: 1660012004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long currentSum = 0;\n        final int numElements\
    \ = nums.size();\n        for (int i = 0; i < (numElements - 1); i++) {\n    \
    \        currentSum += nums.get(i);\n            if (currentSum <= minSum) {\n\
    \                minSum = currentSum;\n            }\n        }\n        return\
    \ minSum;\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc1s29_oz.java:29)\n"
  stdout: ''
  timestamp: 1660012004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        // Base\
    \ case\n        if (nums == null || nums.isEmpty()) return 0l;\n        // Find\
    \ the first index of non-empty sub-array that sums up to zero\n        int begin\
    \ = 0;\n        while (begin < nums.size() - 1 && nums.get(begin + 1) != 0) begin++;\n\
    \        // Find length of this sub-array\n        int end = begin + 1;\n    \
    \    int length = nums.size() - end;\n        // Initialize minimum\n        long\
    \ min = 0l;\n        // Initialize current sum to zero\n        long sum = 0l;\n\
    \        // Initialize sum\n        long currentSum = 0l;\n        // Loop through\
    \ this sub-array and sum up all the values\n        for (int i = begin; i <= end;\
    \ i++) {\n            sum += nums.get(i);\n            if (sum < currentSum) {\n\
    \                min = sum;\n                currentSum = sum;\n            }\
    \ else if (sum == currentSum) {\n                currentSum += nums.get(i);\n\
    \            }\n        }\n        return min;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 6 out of bounds for length 6\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.minSubArraySum(tmp3vzlmdwm.java:33)\n\tat Problem.main(tmp3vzlmdwm.java:44)\n"
  stdout: ''
  timestamp: 1660012005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        if (nums.size()\
    \ < 1) return -1l;\n        // Find the subarray with minimum sum\n        Long\
    \ minSum = nums.get(0);\n        Long minIndex = nums.get(0);\n        for (int\
    \ i = 1; i < nums.size(); ++i) {\n            Long sum = 0;\n            for (int\
    \ j = 0; j < i; ++j) sum += nums.get(j);\n            if (sum < minSum) {\n  \
    \              minSum = sum;\n                minIndex = i;\n            }\n \
    \       }\n        // Subarray with minimum sum\n        Long result = nums.get(minIndex);\n\
    \        // Subarray with minimum sum in reverse\n        for (int i = 0; i <\
    \ nums.size() - 1; ++i) {\n            Long sum = 0;\n            for (int j =\
    \ i; j < nums.size() - 1; ++j) sum += nums.get(j);\n            if (sum < minSum)\
    \ {\n                minSum = sum;\n                result = nums.get(i);\n  \
    \          }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiz89myny.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            Long sum = 0;\n                       ^\n/tmp/tmpiz89myny.java:26:\
    \ error: incompatible types: int cannot be converted to Long\n               \
    \ minIndex = i;\n                           ^\n/tmp/tmpiz89myny.java:30: error:\
    \ incompatible types: Long cannot be converted to int\n        Long result = nums.get(minIndex);\n\
    \                               ^\n/tmp/tmpiz89myny.java:33: error: incompatible\
    \ types: int cannot be converted to Long\n            Long sum = 0;\n        \
    \               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n4 errors\n"
  stdout: ''
  timestamp: 1660012004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (Long num : nums) {\n\
    \            sum += num;\n            if (sum < min) {\n                min =\
    \ sum;\n            }\n        }\n        return min;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplood_u8e.java:28)\n"
  stdout: ''
  timestamp: 1660012005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = 0l;\n\n        for(long i = 0; i < nums.size(); ++i) {\n            minSum\
    \ = Math.min(minSum, sumSubArrays(nums, i));\n        }\n\n        return minSum;\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9iwya9k_.java:20: error: cannot find symbol\n            minSum\
    \ = Math.min(minSum, sumSubArrays(nums, i));\n                               \
    \       ^\n  symbol:   method sumSubArrays(ArrayList<Long>,long)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660012005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        if (nums.size()\
    \ == 0) {\n            return 0L;\n        }\n        long sum = 0L;\n       \
    \ ArrayList<Long> subArray = new ArrayList<>();\n        boolean hasSubArray =\
    \ false;\n        long minSum = Long.MAX_VALUE;\n        int i = 0;\n        while\
    \ (i < nums.size()) {\n            long curSum = 0L;\n            long currMax\
    \ = 0L;\n            long currMin = Long.MAX_VALUE;\n            currMin = nums.get(i);\n\
    \            for (int j = i + 1; j < nums.size(); j++) {\n                if (nums.get(j)\
    \ > currMax) {\n                    currMax = nums.get(j);\n                 \
    \   subArray = new ArrayList<>();\n                    subArray.add(nums.get(j));\n\
    \                }\n                else if (nums.get(j) <= currMin && nums.get(j)\
    \ != currMin) {\n                    subArray.add(nums.get(j));\n            \
    \    }\n                else if (nums.get(j) == currMin) {\n                 \
    \   if (subArray.size() > 1) {\n                        sum -= subArray.get(0L);\n\
    \                        sum += subArray.get(subArray.size() - 1L);\n        \
    \                hasSubArray = true;\n                        subArray = new ArrayList<>();\n\
    \                    }\n                }\n                currMin = nums.get(j);\n\
    \            }\n            sum += currMax;\n            currMax = currMin;\n\
    \            i++;\n            minSum = Math.min(sum, minSum);\n        }\n  \
    \      if (hasSubArray) {\n            sum -= subArray.get(0L);\n            sum\
    \ += subArray.get(subArray.size() - 1L);\n        }\n        return Math.min(sum,\
    \ minSum);\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp__yut02w.java:41: error: incompatible types: possible lossy conversion\
    \ from long to int\n                        sum -= subArray.get(0L);\n       \
    \                                     ^\n/tmp/tmp__yut02w.java:42: error: incompatible\
    \ types: possible lossy conversion from long to int\n                        sum\
    \ += subArray.get(subArray.size() - 1L);\n                                   \
    \                         ^\n/tmp/tmp__yut02w.java:55: error: incompatible types:\
    \ possible lossy conversion from long to int\n            sum -= subArray.get(0L);\n\
    \                                ^\n/tmp/tmp__yut02w.java:56: error: incompatible\
    \ types: possible lossy conversion from long to int\n            sum += subArray.get(subArray.size()\
    \ - 1L);\n                                                ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n4 errors\n"
  stdout: ''
  timestamp: 1660012005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        return\
    \ minSubArraySum(nums, 0);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8zs8a78l.java:17: error: method minSubArraySum in class Problem\
    \ cannot be applied to given types;\n        return minSubArraySum(nums, 0);\n\
    \               ^\n  required: ArrayList<Long>\n  found:    ArrayList<Long>,int\n\
    \  reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660012004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        for (long i : nums) {\n            min += i;\n  \
    \      }\n        return min;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc43qidv7.java:24)\n"
  stdout: ''
  timestamp: 1660012005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        // find\
    \ min sum at front, which is at index 0\n        long frontMinSum = nums.get(0l);\n\
    \n        // find min sum at back, which is at index (nums.size() - 1)\n     \
    \   long backMinSum = nums.get(nums.size() - 1l);\n\n        // go through each\
    \ index\n        for (int i = 1; i < nums.size() - 1; i++) {\n            // find\
    \ the min sum at ith position\n            long currentMinSum = nums.get(i) +\
    \ nums.get(i - 1l);\n\n            // find the new min sum if it is less than\
    \ the new frontMinSum\n            if (currentMinSum < frontMinSum) {\n      \
    \          frontMinSum = currentMinSum;\n            }\n\n            // find\
    \ the new min sum if it is less than the new backMinSum\n            if (currentMinSum\
    \ < backMinSum) {\n                backMinSum = currentMinSum;\n            }\n\
    \        }\n        // return the min sum at the end\n        return frontMinSum;\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz6wabg_2.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long frontMinSum = nums.get(0l);\n               \
    \                     ^\n/tmp/tmpz6wabg_2.java:21: error: incompatible types:\
    \ possible lossy conversion from long to int\n        long backMinSum = nums.get(nums.size()\
    \ - 1l);\n                                               ^\n/tmp/tmpz6wabg_2.java:26:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \        long currentMinSum = nums.get(i) + nums.get(i - 1l);\n              \
    \                                            ^\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1660012005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        \n   \
    \     List<List<Long>> subLists = nums.stream()\n            .map(ArrayList::new)\n\
    \            .filter(list -> !list.isEmpty())\n            .collect(Collectors.toList());\n\
    \n        if (subLists.isEmpty()) {\n            return nums.get(0l);\n      \
    \  }\n\n        Long result = nums.get(0l);\n\n        for (List<Long> subList\
    \ : subLists) {\n            if (subList.isEmpty()) {\n                continue;\n\
    \            }\n            List<Long> subList2 = subList.stream()\n         \
    \       .filter(num -> num < 0)\n                .sorted()\n                .collect(Collectors.toList());\n\
    \            result = result.min(subList2.stream().mapToLong(num -> num - result).sum());\n\
    \        }\n\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwwqt5cc3.java:19: error: incompatible types: cannot infer type-variable(s)\
    \ R\n            .map(ArrayList::new)\n                ^\n    (argument mismatch;\
    \ invalid constructor reference\n      no suitable constructor found for ArrayList(Long)\n\
    \          constructor ArrayList.ArrayList(int) is not applicable\n          \
    \  (cannot infer type-variable(s) E\n              (argument mismatch; Long cannot\
    \ be converted to int))\n          constructor ArrayList.ArrayList() is not applicable\n\
    \            (cannot infer type-variable(s) E\n              (actual and formal\
    \ argument lists differ in length))\n          constructor ArrayList.ArrayList(Collection)\
    \ is not applicable\n            (cannot infer type-variable(s) E\n          \
    \    (argument mismatch; Long cannot be converted to Collection<? extends E>))\n\
    \          constructor ArrayList.ArrayList(int) is not applicable\n          \
    \  (cannot infer type-variable(s) E\n              (argument mismatch; Long cannot\
    \ be converted to int))\n          constructor ArrayList.ArrayList() is not applicable\n\
    \            (cannot infer type-variable(s) E\n              (actual and formal\
    \ argument lists differ in length))\n          constructor ArrayList.ArrayList(Collection)\
    \ is not applicable\n            (cannot infer type-variable(s) E\n          \
    \    (argument mismatch; Long cannot be converted to Collection<? extends E>)))\n\
    \  where R,T,E are type-variables:\n    R extends Object declared in method <R>map(Function<?\
    \ super T,? extends R>)\n    T extends Object declared in interface Stream\n \
    \   E extends Object declared in class ArrayList\n/tmp/tmpwwqt5cc3.java:24: error:\
    \ incompatible types: possible lossy conversion from long to int\n           \
    \ return nums.get(0l);\n                            ^\n/tmp/tmpwwqt5cc3.java:27:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \    Long result = nums.get(0l);\n                               ^\n/tmp/tmpwwqt5cc3.java:37:\
    \ error: method min in class Long cannot be applied to given types;\n        \
    \    result = result.min(subList2.stream().mapToLon"
  stdout: ''
  timestamp: 1660012005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        // Write\
    \ your code here.\n        // Return the minimum sum\n        long minsum = 0l\
    \ ;\n        long prevsum = 0l ;\n        long sum = 0l ;\n        ArrayList <Long>\
    \ list = new ArrayList<>();\n        list.add((long)nums.size()) ;\n        for(int\
    \ i = 1 ; i < nums.size() ; i++ )\n        {\n            prev = prevsum + 1 ;\n\
    \            prev = prevsum ;\n            list.add(nums.get(i)-prevsum) ;\n \
    \           prevsum = sum ;\n            sum = 0l ;\n        }\n        list.add(0l)\
    \ ;\n        sum = 0l ;\n        for(int i = 0 ; i < list.size() ; i++ )\n   \
    \     {\n            sum = sum + list.get(i) ;\n            if( sum < minsum )\n\
    \                minsum = sum ;\n        }\n        return minsum ;\n    }\n \
    \   public static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppsfq4k12.java:26: error: cannot find symbol\n            prev =\
    \ prevsum + 1 ;\n            ^\n  symbol:   variable prev\n  location: class Problem\n\
    /tmp/tmppsfq4k12.java:27: error: cannot find symbol\n            prev = prevsum\
    \ ;\n            ^\n  symbol:   variable prev\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660012005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = nums.get(0); // initialize min sum\n        long currentSum = 0; // initialize\
    \ current sum\n        long sumOfRemainingValues = 0; // initialize sum of remaining\
    \ values\n        Long nextElement = null; // initialize next value\n\n      \
    \  ArrayList<Long> subArray = new ArrayList<>(); // initialize sub array\n   \
    \     for (long num : nums) { // initialize sub array values\n            if (sumOfRemainingValues\
    \ + num > 0) { // check if sum exceeds 0\n                currentSum = sumOfRemainingValues\
    \ + num; // calculate sum\n                sumOfRemainingValues = currentSum;\
    \ // update sumOfRemainingValues\n            } else {\n                sumOfRemainingValues\
    \ = num; // else update sumOfRemainingValues\n            }\n\n            if\
    \ (currentSum < minSum) { // check if current sum is smaller than min sum\n  \
    \              minSum = currentSum; // update min sum\n            }\n\n     \
    \       if (currentSum == minSum) { // check if min sum is same as current sum\n\
    \                nextElement = num; // update next value\n            }\n    \
    \    }\n\n        long sumOfSubArray = minSum; // initialize sum of sub array\n\
    \        while (sumOfSubArray == minSum) { // check if sum exceed min sum\n  \
    \          subArray.add(nextElement); // add next value\n            sumOfSubArray\
    \ = sumOfRemainingValues + nextElement; // calculate sum of sub array\n      \
    \  }\n\n        return sumOfSubArray; // return sum of sub array\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsh5e5qv_.java:49)\n"
  stdout: ''
  timestamp: 1660012005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        // Your\
    \ code here\n        if (nums.size() == 0) {\n            return 0;\n        }\n\
    \        double sum = 0;\n        ArrayList<Long> left = new ArrayList<>(nums);\n\
    \        ArrayList<Long> right = new ArrayList<>(nums);\n\n        left.removeIf((long\
    \ n) -> n < 0l);\n        right.removeIf((long n) -> n < 0l);\n\n        for (long\
    \ n : left) {\n            sum += n;\n        }\n        sum -= right.get(0l);\n\
    \n        for (long n : right) {\n            sum += n;\n        }\n        return\
    \ sum;\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxtbq4sy_.java:25: error: incompatible types: cannot infer functional\
    \ interface descriptor for Predicate<? super Long>\n        left.removeIf((long\
    \ n) -> n < 0l);\n                      ^\n/tmp/tmpxtbq4sy_.java:26: error: incompatible\
    \ types: cannot infer functional interface descriptor for Predicate<? super Long>\n\
    \        right.removeIf((long n) -> n < 0l);\n                       ^\n/tmp/tmpxtbq4sy_.java:31:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \    sum -= right.get(0l);\n                         ^\n/tmp/tmpxtbq4sy_.java:36:\
    \ error: incompatible types: possible lossy conversion from double to long\n \
    \       return sum;\n               ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n4 errors\n"
  stdout: ''
  timestamp: 1660012005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        List<Long>\
    \ subList = new ArrayList<Long>(nums);\n        long currentSum = nums.stream().mapToLong(i\
    \ -> i).sum();\n        return subList.stream().filter(i -> i >= currentSum).min(i\
    \ -> i).orElse(currentSum);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnvz97w7w.java:19: error: incompatible types: incompatible parameter\
    \ types in lambda expression\n        return subList.stream().filter(i -> i >=\
    \ currentSum).min(i -> i).orElse(currentSum);\n                              \
    \                                   ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660012005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        if(nums\
    \ == null || nums.isEmpty()){\n            return 0;\n        }\n        HashSet<Long>\
    \ seen = new HashSet<Long>();\n        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        for(long l : nums){\n            if(!seen.contains(l)){\n           \
    \     for(long sum : res.subList(0, res.size())){\n                    sum +=\
    \ l;\n                    if(sum < 0){\n                        sum = -sum;\n\
    \                    }\n                    if(sum >= nums.size()){\n        \
    \                return sum;\n                    }\n                }\n     \
    \           res.add(l);\n                seen.add(l);\n            }\n       \
    \ }\n        return -1;\n    }\n    public static void main(String[] args) {\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphov89mzd.java:40)\n"
  stdout: ''
  timestamp: 1660012005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long total\
    \ = 0;\n        boolean valid = true;\n\n        for(int i = 0; i < nums.size();\
    \ i++) {\n            if(nums.get(i) <= 0) {\n                valid = false;\n\
    \                break;\n            }\n            total += nums.get(i);\n  \
    \      }\n\n        if(valid) {\n            return total;\n        }\n\n    \
    \    for(int j = 0; j < nums.size(); j++) {\n            if(nums.get(j) >= 0)\
    \ {\n                total -= nums.get(j);\n            } else {\n           \
    \     valid = false;\n                break;\n            }\n        }\n\n   \
    \     if(valid) {\n            return total;\n        }\n\n        for(int k =\
    \ 0; k < nums.size(); k++) {\n            int start = k;\n            int end\
    \ = nums.size() - 1;\n\n            while(start >= 0 && nums.get(start) < 0) {\n\
    \                start--;\n            }\n\n            while(end < nums.size()\
    \ && nums.get(end) <= 0) {\n                end++;\n            }\n\n        \
    \    if(start >= end) {\n                continue;\n            }\n\n        \
    \    total += nums.get(start) + nums.get(end);\n            nums.remove(start);\n\
    \            nums.remove(end);\n        }\n\n        return total;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphkwyygh9.java:69)\n"
  stdout: ''
  timestamp: 1660012006
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        LongStream\
    \ stream = nums.stream();\n        long minSum = stream.sum();\n        long sum\
    \ = 0;\n        long minSumIndex = 0;\n        for (int i = 0; i < nums.size();\
    \ i++) {\n            sum = stream.sum();\n            if (sum < minSum) {\n \
    \               minSum = sum;\n                minSumIndex = i;\n            }\n\
    \            stream = stream.skip(i).limit(nums.size());\n        }\n        return\
    \ minSum;\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn3mh7zne.java:17: error: incompatible types: Stream<Long> cannot\
    \ be converted to LongStream\n        LongStream stream = nums.stream();\n   \
    \                                    ^\n1 error\n"
  stdout: ''
  timestamp: 1660012005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        // Step\
    \ 1: Find size of input array\n        long size = nums.size();\n        // Step\
    \ 2: Initialize minimum sum\n        long minSum = Integer.MAX_VALUE;\n      \
    \  // Step 3: Find minimum of all sub-array \n        for (int i = 0; i < size\
    \ - 1; i++) {\n            // Step 4: Add next element to current minSum\n   \
    \         long subSum = nums.get(i) + nums.get(i + 1);\n            // Step 5:\
    \ Update minimum if current min sum is greater than minSum\n            if (subSum\
    \ < minSum) {\n                minSum = subSum;\n            }\n        }\n  \
    \      // Step 6: Return minimum of all sub-array\n        return minSum;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzz3yjtaf.java:34)\n"
  stdout: ''
  timestamp: 1660012006
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        List<Long>\
    \ minSums = new ArrayList<>();\n        int minSum = Long.MAX_VALUE;\n       \
    \ int numElements = nums.size();\n        for (int i = 0; i < numElements; i++)\
    \ {\n            if (nums.get(i) == 0) {\n                minSums.add(0);\n  \
    \          } else {\n                long sum = 0;\n                for (int j\
    \ = 0; j < nums.size(); j++) {\n                    sum += nums.get(j);\n    \
    \                if (sum < minSum) {\n                        minSum = sum;\n\
    \                    }\n                }\n                minSums.add(minSum);\n\
    \            }\n        }\n        long sum = 0;\n        for (Long sumOfSubArrays\
    \ : minSums) {\n            sum += sumOfSubArrays;\n        }\n        return\
    \ sum;\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl84fx82h.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int minSum = Long.MAX_VALUE;\n                   \
    \      ^\n/tmp/tmpl84fx82h.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n                minSums.add(0);\n                            ^\n/tmp/tmpl84fx82h.java:28:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \                    minSum = sum;\n                                 ^\n/tmp/tmpl84fx82h.java:31:\
    \ error: incompatible types: int cannot be converted to Long\n               \
    \ minSums.add(minSum);\n                            ^\nNote: Some messages have\
    \ been simplified; recompile with -Xdiags:verbose to get full output\n4 errors\n"
  stdout: ''
  timestamp: 1660012005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        // Find\
    \ lowest sum for every subarray\n        ArrayList<Long> minSums = new ArrayList<>(nums.size());\n\
    \        for (Long num : nums) {\n            ArrayList<Long> subNums = new ArrayList<>(nums.size());\n\
    \            for (long i = nums.size(); i >= 0; i--) {\n                subNums.add(num\
    \ - nums.get(i));\n            }\n            minSums.add(subArraySum(subNums));\n\
    \        }\n        // Find the lowest sum of the subarrays\n        long min\
    \ = minSums.stream().min().getAsLong();\n        // Find the highest sum\n   \
    \     long max = minSums.stream().max().getAsLong();\n        // Return the minimum\
    \ of the sums\n        return min + max;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz8euxmrj.java:22: error: incompatible types: possible lossy conversion\
    \ from long to int\n                subNums.add(num - nums.get(i));\n        \
    \                                   ^\n/tmp/tmpz8euxmrj.java:24: error: cannot\
    \ find symbol\n            minSums.add(subArraySum(subNums));\n              \
    \          ^\n  symbol:   method subArraySum(ArrayList<Long>)\n  location: class\
    \ Problem\n/tmp/tmpz8euxmrj.java:27: error: method min in interface Stream<T>\
    \ cannot be applied to given types;\n        long min = minSums.stream().min().getAsLong();\n\
    \                                   ^\n  required: Comparator<? super Long>\n\
    \  found:    no arguments\n  reason: actual and formal argument lists differ in\
    \ length\n  where T is a type-variable:\n    T extends Object declared in interface\
    \ Stream\n/tmp/tmpz8euxmrj.java:29: error: method max in interface Stream<T> cannot\
    \ be applied to given types;\n        long max = minSums.stream().max().getAsLong();\n\
    \                                   ^\n  required: Comparator<? super Long>\n\
    \  found:    no arguments\n  reason: actual and formal argument lists differ in\
    \ length\n  where T is a type-variable:\n    T extends Object declared in interface\
    \ Stream\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n4 errors\n"
  stdout: ''
  timestamp: 1660012005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long sum\
    \ = 0L;\n        Arrays.stream(nums).forEach(num -> sum += num);\n        return\
    \ sum;\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi76xjw4o.java:18: error: no suitable method found for stream(ArrayList<Long>)\n\
    \        Arrays.stream(nums).forEach(num -> sum += num);\n              ^\n  \
    \  method Arrays.<T#1>stream(T#1[]) is not applicable\n      (cannot infer type-variable(s)\
    \ T#1\n        (argument mismatch; ArrayList<Long> cannot be converted to T#1[]))\n\
    \    method Arrays.<T#2>stream(T#2[],int,int) is not applicable\n      (cannot\
    \ infer type-variable(s) T#2\n        (actual and formal argument lists differ\
    \ in length))\n    method Arrays.stream(int[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to int[])\n    method Arrays.stream(long[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to long[])\n    method Arrays.stream(double[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to double[])\n  where T#1,T#2\
    \ are type-variables:\n    T#1 extends Object declared in method <T#1>stream(T#1[])\n\
    \    T#2 extends Object declared in method <T#2>stream(T#2[],int,int)\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1660012005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minimumSum\
    \ = Long.MAX_VALUE;\n        for (int i = 0; i < nums.size(); i++) {\n       \
    \     for (int j = i+1; j < nums.size(); j++) {\n                long subArraySum\
    \ = sumArray(nums.subList(i,j), nums.size());\n                if (subArraySum\
    \ < minimumSum) {\n                    minimumSum = subArraySum;\n           \
    \     }\n            }\n        }\n        return minimumSum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpymv2srpe.java:20: error: cannot find symbol\n                long\
    \ subArraySum = sumArray(nums.subList(i,j), nums.size());\n                  \
    \                 ^\n  symbol:   method sumArray(List<Long>,int)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660012006
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        Set<Long>\
    \ set = new HashSet<>();\n        long sum = 0;\n        for (Long i : nums) {\n\
    \            set.add(i);\n        }\n        for (Long i : set) {\n          \
    \  sum += i;\n        }\n        long minSum = sum;\n        if (set.size() >\
    \ 0) {\n            for (Long i : set) {\n                minSum -= i;\n     \
    \       }\n        }\n        return minSum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt8xzw801.java:34)\n"
  stdout: ''
  timestamp: 1660012006
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = nums.stream().mapToLong(l -> l).sum();\n        for (int i = 0; i < nums.size();\
    \ i++) {\n            if (nums.get(i) >= 0)\n                minSum = nums.stream().mapToLong(l\
    \ -> l + nums.get(i)).min(minSum).get();\n        }\n        return minSum;\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgzjf04k1.java:20: error: method min in interface LongStream cannot\
    \ be applied to given types;\n                minSum = nums.stream().mapToLong(l\
    \ -> l + nums.get(i)).min(minSum).get();\n                                   \
    \                                   ^\n  required: no arguments\n  found:    long\n\
    \  reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660012006
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long maxSum = Long.MIN_VALUE;\n\n        for (int\
    \ i = 0; i < nums.size(); i++) {\n            long sum = 0;\n            for (int\
    \ j = i; j < nums.size(); j++) {\n                sum += nums.get(j);\n      \
    \      }\n\n            if (sum < min) {\n                min = sum;\n       \
    \         maxSum = 0;\n            } else if (sum > maxSum) {\n              \
    \  maxSum = sum;\n            }\n        }\n        return (min > maxSum) ? min\
    \ : maxSum;\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgpnsfu3j.java:36)\n"
  stdout: ''
  timestamp: 1660012006
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long sum\
    \ = nums.get(0l);\n        long min = sum;\n        int i = 1;\n        while\
    \ (i < nums.size()) {\n            sum += nums.get(i);\n            if (sum <\
    \ min) min = sum;\n            i++;\n        }\n        return min;\n    }\n \
    \   public static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6_3q6pg2.java:17: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long sum = nums.get(0l);\n                       \
    \     ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660012006
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long subSum\
    \ = 0;\n        int size = nums.size();\n        for (int i = 0; i < size; i++)\
    \ {\n            List<Long> subList = new ArrayList<Long>();\n            boolean\
    \ found = false;\n            for (int j = i; j < size && !found; j++) {\n   \
    \             if (nums.get(j) >= 0) {\n                    subList.add(nums.get(j));\n\
    \                }\n                if (subList.size() > 0 && subSum + subList.get(0)\
    \ > subSum) {\n                    subSum = subSum + subList.get(0);\n       \
    \             found = true;\n                }\n            }\n            if\
    \ (found) {\n                subSum = subSum + nums.get(i);\n            }\n \
    \       }\n        return subSum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprgaif25o.java:38)\n"
  stdout: ''
  timestamp: 1660012006
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        int n\
    \ = nums.size();\n        int min = Integer.MAX_VALUE;\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n       \
    \     int sum = nums.get(i).longValue();\n            int minSum = sum;\n    \
    \        if (sum < min) {\n                min = sum;\n            }\n       \
    \     for (int j = i + 1; j < n; j++) {\n                if (j - i > 1) {\n  \
    \                  sum += nums.get(j - 1).longValue();\n                    if\
    \ (sum < minSum) {\n                        minSum = sum;\n                  \
    \  }\n                }\n            }\n            result.add(minSum);\n    \
    \    }\n        return result.get(0);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcbj2xkji.java:21: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int sum = nums.get(i).longValue();\n         \
    \                                  ^\n/tmp/tmpcbj2xkji.java:34: error: incompatible\
    \ types: int cannot be converted to Long\n            result.add(minSum);\n  \
    \                     ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660012006
