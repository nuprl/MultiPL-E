name: HumanEval_161_solve
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse\
  \ its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
  \    // If the string contains no letters, reverse the string.\n    // The function\
  \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
  ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>> solve((\"\
  #a@C\"))\n    // (\"#A@c\")\n    public static String solve(String s) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(solve((\"\
  AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
  \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
  #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
  #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n\
  \    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
completions: ["        int size = s.length();\n        if (size == 0) return \"\"\
    ;\n        StringBuilder builder = new StringBuilder();\n        for (char c :\
    \ s.toUpperCase().toCharArray()) {\n            if (Character.isLetter(c)) {\n\
    \                builder.append(Character.toLowerCase(c));\n            } else\
    \ {\n                builder.append(c);\n            }\n        }\n        return\
    \ builder.toString();", "        Map<Character, Integer> map = new HashMap<>();\n\
    \        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n\
    \            if (map.containsKey(c)) {\n                map.put(c, map.get(c)\
    \ + 1);\n            } else {\n                map.put(c, 1);\n            }\n\
    \        }\n        List<String> ret = new ArrayList<>();\n        Collections.sort(map.values());\n\
    \        for (Integer i : map.values()) {\n            ret.add(s.substring(i,\
    \ s.length() - i));\n        }\n        return String.join(\"\", ret);", "   \
    \     char[] arr = s.toCharArray();\n        Arrays.sort(arr);\n        String\
    \ resultStr = \"\";\n        for (char c : arr) {\n            resultStr += (!Character.isLetter(c))\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c);\n        }\n        return\
    \ resultStr;", "        if(s.isEmpty())\n            return \"\";\n        Map<Character,\
    \ String> lower = new HashMap<>();\n        Map<Character, String> upper = new\
    \ HashMap<>();\n        for(char c : s.toCharArray()){\n            if(c>='A'\
    \ && c<='Z')\n                lower.put(c, Character.toString((char)(c-32)));\n\
    \            else if (c>='a' && c<='z')\n                upper.put(c, Character.toString((char)(c+32)));\n\
    \            else\n                lower.put(c, Character.toString(c));\n    \
    \        upper.put(c, Character.toString(c));\n        }\n        \n        List<String>\
    \ result = new ArrayList<>(26);\n        for(Map.Entry<Character, String> entry\
    \ : lower.entrySet())\n            result.add(entry.getValue());\n        \n \
    \       for(Map.Entry<Character, String> entry : upper.entrySet())\n         \
    \   result.add(entry.getValue());\n            \n        return String.join(\"\
    \", result);", "        try{\n        boolean isLetter = false;\n        int len\
    \ = s.length();\n        char[] charArray = s.toCharArray();\n        List<Character>\
    \ list = Arrays.asList(charArray);\n        for(Character char : list) {\n   \
    \         if(char.isLetter()) {\n            isLetter = true;\n            break;\n\
    \            }\n        }\n        if(isLetter) {\n        char[] charArray2 =\
    \ s.toCharArray();\n        Arrays.stream(charArray2).forEach(e -> {\n       \
    \         if(Character.isUpperCase(e)) {\n                    charArray2[charArray2.length\
    \ - 1] = Character.toLowerCase(e);\n                }\n                else if(Character.isLowerCase(e))\
    \ {\n                    charArray2[charArray2.length - 1] = Character.toUpperCase(e);\n\
    \                }\n            });\n        s = String.valueOf(charArray2);\n\
    \        }\n        }catch(Exception e) {\n        System.out.println(\"The given\
    \ string has non-letter characters. Please try again\");\n        return null;\n\
    \        }\n        return s", "        String result = \"\";\n        char[]\
    \ arr = s.toCharArray();\n        for(char c : arr) {\n            int i = Character.toUpperCase(c);\n\
    \            int j = Character.toLowerCase(c);\n            if(i == j)\n     \
    \           result += String.valueOf(c);\n            else \n                result\
    \ += String.valueOf(i);\n        }\n        return result;", "        ArrayList<Character>\
    \ res = new ArrayList<>();\n        String str = \"\";\n        for(int i=0; i<s.length();\
    \ i++) {\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n       \
    \         Character c = s.charAt(i) + 32; //convert to upper case\n          \
    \      res.add(c);\n                str = s.substring(0, i) + c + s.substring(i\
    \ + 1);\n            }\n            else if(s.charAt(i) >= 'A' && s.charAt(i)\
    \ <= 'Z') {\n                Character c = s.charAt(i) - 32;\n               \
    \ res.add(c);\n                str = s.substring(0, i) + c + s.substring(i + 1);\n\
    \            }\n            else {\n                str = s.substring(0, i) +\
    \ s.substring(i + 1);\n            }\n        }\n        if(res.isEmpty()) {\n\
    \            str = s;\n        }\n        return str;", "        int length =\
    \ s.length();\n        if (length == 0) {\n            return s;\n        }\n\n\
    \        char[] chars = s.toCharArray();\n        Arrays.sort(chars);\n      \
    \  StringBuilder builder = new StringBuilder(s);\n        for (int i = 0; i <\
    \ length; i++) {\n            char c = chars[i];\n            if (Character.isLetter(c))\
    \ {\n                boolean capitalCheck = Character.isUpperCase(c);\n      \
    \          boolean lowerCheck = Character.isLowerCase(c);\n                if\
    \ (capitalCheck && lowerCheck) {\n                    char temp = chars[i];\n\
    \                    chars[i] = chars[length - i - 1];\n                    chars[length\
    \ - i - 1] = temp;\n                } else if (lowerCheck) {\n               \
    \     chars[i] = Character.toLowerCase(chars[i]);\n                } else if (capitalCheck)\
    \ {\n                    chars[i] = Character.toUpperCase(chars[i]);\n       \
    \         }\n            }\n        }\n\n        return builder.toString();",
  "       if(s.length()==0){\n          return \"\";\n       }\n       if(s.matches(\"\
    .*\\\\d.*\")){\n          return String.valueOf(s.chars()\n                  \
    \          .mapToObj(c -> (char)c>='A'?((char)(c-'A')+'a'):((char)(c-'a')+'A'))\n\
    \                            .collect(Collectors.joining()));\n       }\n    \
    \   if(s.matches(\".*\\\\W.*\")){\n          return String.valueOf(s.chars()\n\
    \                            .mapToObj(c -> (char)c>='a'?((char)(c-'a')+'A'):((char)(c-'A')+'a'))\n\
    \                            .collect(Collectors.joining()));\n       }\n    \
    \   return s;", "        List<String> list = Arrays.asList(s.split(\"\"));\n \
    \       StringBuilder sb = new StringBuilder();\n        for (String x : list)\
    \ {\n            if (Character.isLetter(x)) {\n                sb.append(x.toLowerCase());\n\
    \            } else {\n                sb.append(x);\n            }\n        }\n\
    \        return sb.toString();", "        // Your code here\n        int i = s.length()\
    \ - 1;\n        while ( i >= 0 ) {\n            char c = s.charAt(i);\n      \
    \      if ( Character.isLetter(c) ) {\n                if ( Character.isLowerCase(c)\
    \ ) {\n                    s = s.reverse();\n                } else {\n      \
    \              s = s.reverse().toLowerCase();\n                }\n           \
    \     i -= 1;\n            } else {\n                i -= 1;\n            }\n\
    \        }\n        return s;", "        if (s == null || s.length() == 0) return\
    \ s;\n\n        Set<Character> set = new HashSet<Character>();\n\n        for\
    \ (Character c: s.toCharArray()) {\n            char convert = c;\n          \
    \  if (c.isLetter()) {\n                convert = Character.toUpperCase(c);\n\
    \            }\n            set.add(convert);\n        }\n\n        StringBuilder\
    \ sb = new StringBuilder();\n\n        for (Character c: set) {\n            sb\
    \ = new StringBuilder();\n            String str = c.toString();\n           \
    \ sb.append(Character.toUpperCase(str.charAt(0)));\n            for (int i = 1;\
    \ i < str.length(); i++) {\n                char ch = str.charAt(i);\n       \
    \         if (ch != 0) {\n                    sb = new StringBuilder();\n    \
    \                sb.append(ch);\n                }\n            }\n          \
    \  System.out.println(sb);\n        }\n        return sb.toString();", "     \
    \   \n        String reversedString = s.replaceAll(\"[\\\\d]\", \"\");\n     \
    \   \n        if (reversedString.equals(\"\")) {\n            reversedString =\
    \ \"\";\n        }\n        \n        Stack<Character> stack = new Stack<>();\n\
    \        \n        for(char c : s.toCharArray()) {\n            if(Character.isLetter(c))\
    \ {\n                stack.push(c);\n            }\n            else {\n     \
    \           String string = reversedString;\n                \n              \
    \  while(stack.size() > 0) {\n                    if(stack.peek() == c) {\n  \
    \                      string = (char) (stack.pop() - 32);\n                 \
    \   }\n                    else {\n                        break;\n          \
    \          }\n                }\n                \n                stack.push(c);\n\
    \                reversedString = string;\n            }\n        }\n        \n\
    \        return reversedString;", "        char[] arr = s.toCharArray();\n   \
    \     Arrays.sort(arr);\n        StringBuilder sb = new StringBuilder();\n   \
    \     for (int i = 0; i < arr.length; i++) {\n            if (Character.isLetter(arr[i]))\
    \ {\n                String toUpper = Character.toString(arr[i]).toUpperCase();\n\
    \                String toLower = Character.toString(arr[i]).toLowerCase();\n\
    \                sb.append(toUpper != toLower ? toUpper : toLower);\n        \
    \    } else {\n                sb.append(arr[i]);\n            }\n        }\n\
    \        return sb.toString();", "        // Write your code here\n        return\
    \ null;", "        if (s.isEmpty()) return s;\n        char[] a = s.toCharArray();\n\
    \        int l = a.length;\n        for (int i = 0; i < l; i++) {\n          \
    \  char ch = s.charAt(i);\n            if (Character.isLetter(ch)) {\n       \
    \         a[i] = Character.toUpperCase(ch);\n            } else {\n          \
    \      a[i] = Character.toLowerCase(ch);\n            }\n        }\n        return\
    \ new String(a);", "        s = s.replaceAll(\"\\\\p{Punct}\", \"\");\n      \
    \  char[] chars = s.toCharArray();\n        Arrays.sort(chars);\n        String\
    \ r = new String(chars);\n        boolean flag = true;\n        for(int i = 0;\
    \ i < chars.length; i++) {\n            if(chars[i] >= 'A' && chars[i] <= 'Z')\
    \ {\n                flag = false;\n                break;\n            }\n  \
    \      }\n        if(flag == true) {\n            s = s.toUpperCase();\n     \
    \   } else {\n            s = s.toLowerCase();\n        }\n        return r;",
  "        s = s.replaceAll(\"[^a-zA-Z]\", \"\");\n        boolean hasLetter = false;\n\
    \        for(int i=0;i<s.length();i++) {\n            if(s.charAt(i)>='A'&&s.charAt(i)<='Z')\
    \ {\n                s = s.replaceAll(s.charAt(i),Character.toUpperCase(s.charAt(i)));\n\
    \                hasLetter = true;\n            }\n            else if(s.charAt(i)>='a'&&s.charAt(i)<='z')\
    \ {\n                s = s.replaceAll(s.charAt(i),Character.toLowerCase(s.charAt(i)));\n\
    \                hasLetter = true;\n            }\n        }\n        if(!hasLetter)\
    \ {\n            s = (new StringBuilder()).append(s).append(' ').append(Character.toLowerCase(s.charAt(s.length()-1)));\n\
    \        }\n        return s.replaceAll(\"^\\\\s+\", \"\");", "        char[]\
    \ chars = s.toCharArray();\n        Arrays.sort(chars);\n        StringBuilder\
    \ sb = new StringBuilder(chars.length);\n        for (char c : chars) {\n    \
    \        boolean swapCase = true;\n            if (Character.isUpperCase(c)) {\n\
    \                swapCase = false;\n            } else if (Character.isLowerCase(c))\
    \ {\n                swapCase = true;\n            }\n            if (swapCase)\
    \ {\n                sb.append((char) (c));\n            } else {\n          \
    \      sb.append(c);\n            }\n        }\n        return sb.toString();",
  "        if(s.contains(\"a\") || s.contains(\"b\") || s.contains(\"c\") || s.contains(\"\
    d\") || s.contains(\"e\") || s.contains(\"f\") || s.contains(\"g\") || s.contains(\"\
    h\") || s.contains(\"i\") || s.contains(\"j\") || s.contains(\"k\") || s.contains(\"\
    l\") || s.contains(\"m\") || s.contains(\"n\") || s.contains(\"o\") || s.contains(\"\
    p\") || s.contains(\"q\") || s.contains(\"r\") || s.contains(\"s\") || s.contains(\"\
    t\") || s.contains(\"u\") || s.contains(\"v\") || s.contains(\"w\") || s.contains(\"\
    x\") || s.contains(\"y\") || s.contains(\"z\")){\n            StringBuilder result\
    \ = new StringBuilder();\n            for(int i = 0; i < s.length(); i++){\n \
    \               if(Character.isLetter(s.charAt(i))){\n                    if(Character.isUpperCase(s.charAt(i))){\n\
    \                        result.append(s.charAt(i));\n                    }else{\n\
    \                        result.append(Character.toLowerCase(s.charAt(i)));\n\
    \                    }\n                }else{\n                    result.append(s.charAt(i));\n\
    \                }\n            }\n            return result.toString();\n   \
    \     }\n        return s;", "        \n        \n        String newString = \"\
    \";\n        \n        for (int i = 0; i < s.length(); i++) {\n            \n\
    \            if (Character.isLetter(s.charAt(i))) {\n                if (s.charAt(i)\
    \ == s.toUpperCase(s.charAt(i))) {\n                    newString += s.charAt(i).toUpperCase();\n\
    \                } else {\n                    newString += s.charAt(i).toLowerCase();\n\
    \                }\n            } \n            else {\n                newString\
    \ += s.charAt(i);\n            }\n            \n        }\n        \n        return\
    \ newString;", "        if(s == null || s.isEmpty())\n            return s;\n\
    \        String result = \"\";\n        for(char c : s.toCharArray()){\n     \
    \       boolean isLetter = Character.isLetter(c);\n            if(isLetter){\n\
    \                char reverse = Character.toUpperCase(c);\n                char\
    \ lower = Character.toLowerCase(c);\n                char upper = Character.toUpperCase(c);\n\
    \                String lower = Character.toString(lower);\n                String\
    \ upper = Character.toString(upper);\n                result = result + lower\
    \ + upper;\n            }else{\n                result = result + c;\n       \
    \     }\n        }\n        return result;", "        // Write your code here\n\
    \        String result = \"\";\n        char[] a = s.toCharArray();\n        Arrays.sort(a);\n\
    \        for(int i = 0; i < a.length; i++){\n            if(a[i].isLetter(s))\n\
    \                result += String.valueOf((char) (a[i] + 32));\n            else\n\
    \                result += String.valueOf(a[i]);\n        }\n        return result;",
  "        char[] chars = s.toCharArray();\n        char[] arr = chars.clone();\n\
    \        Arrays.sort(arr);\n        \n        StringBuilder newStr = new StringBuilder();\n\
    \        boolean first = true;\n        for(int i = 0; i < arr.length; i++){\n\
    \            char c = arr[i];\n            if(Character.isLetter(c)){\n      \
    \          if(first){\n                    newStr.append(Character.toUpperCase(c));\n\
    \                    first = false;\n                }else{\n                \
    \    newStr.append(Character.toLowerCase(c));\n                }\n           \
    \ }else{\n                newStr.append(c);\n            }\n        }\n      \
    \  \n        return newStr.toString();", "        ArrayList<Character> newList\
    \ = new ArrayList<>();\n        for (Character c: s.toCharArray()) {\n       \
    \     if (Character.isLetter(c)) {\n                newList.add((Character.toUpperCase(c)));\n\
    \                newList.add((Character.toLowerCase(c)));\n            } else\n\
    \                newList.add(c);\n        }\n        \n        StringBuilder sb\
    \ = new StringBuilder();\n        for (Character c: newList)\n            sb.append(c);\n\
    \        return sb.toString();", "        s = s.toLowerCase();\n        List<String>\
    \ result = new ArrayList<String>();\n        for(char c : s.toCharArray()) {\n\
    \            if(isAlpha(c)) {\n                if(isUpper(c)) {\n            \
    \        result.add(Character.toUpperCase(c));\n                } else {\n   \
    \                 result.add(Character.toLowerCase(c));\n                }\n \
    \           } else {\n                result.add(c);\n            }\n        }\n\
    \        return String.valueOf(result);", "        char[] a = s.toCharArray();\n\
    \        char[] b = new char[a.length];\n        for (int i = 0; i < a.length;\
    \ i++) {\n            if (Character.isLetter(a[i])) {\n                String\
    \ f = Character.toLowerCase(a[i]);\n                String g = Character.toUpperCase(a[i]);\n\
    \                a[i] = f;\n                a[i] = g;\n            }\n       \
    \     b[i] = a[i];\n        }\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < b.length; i++) {\n            result.append(b[i]);\n\
    \        }\n        return result.toString();", "        char ch = s.charAt(0);\n\
    \        if (Character.isLetter(ch)) {\n            return new StringBuilder().append(Character.toUpperCase(ch)).\n\
    \                    append(s.substring(1));\n        } else {\n            return\
    \ new StringBuilder().append(Character.toLowerCase(ch)).\n                   \
    \ append(s.substring(1));\n        }", "        // Write your code here.\n   \
    \     String str = s.replaceAll(\"[^a-zA-Z]+\", \"\");\n        char[] chars =\
    \ s.toCharArray();\n        Arrays.sort(chars);\n        StringBuilder sb = new\
    \ StringBuilder();\n        boolean change = false;\n        for(int i = 0; i\
    \ < chars.length; i++){\n            char c = chars[i];\n            if(c == 'a'\
    \ || c == 'A'){\n                chars[i] = 'A';\n                change = true;\n\
    \            }else if(c == 'b' || c == 'B'){\n                chars[i] = 'B';\n\
    \                change = true;\n            }else if(c == 'c' || c == 'C'){\n\
    \                chars[i] = 'C';\n                change = true;\n           \
    \ }\n            if(change){\n                sb.append(new StringBuilder(String.valueOf(chars)));\n\
    \            }\n        }\n        return sb.toString().replaceAll(\"[^a-zA-Z]+\"\
    , \"\");", "        if (s == null || s.isEmpty()) return \"\";\n        char last\
    \ = s.charAt(0);\n        char[] arr = s.toCharArray();\n        for (char c :\
    \ arr) {\n            if ('A' <= c && c <= 'Z')\n                c = Character.toUpperCase(c);\n\
    \            else if ('a' <= c && c <= 'z')\n                c = Character.toLowerCase(c);\n\
    \            else c = (char) c;\n            arr[0] = c;\n        }\n        return\
    \ String.valueOf(arr);", "        for(int i=0;i<s.length();i++){\n           \
    \ if(Character.isLetter(s.charAt(i))){\n                s = s.replaceFirst(s.substring(i,\
    \ i+1), s.substring(i, i+1).equals(\"A\")?s.substring(i, i+1).toLowerCase():s.substring(i,\
    \ i+1).toUpperCase());\n                i = s.length();\n            }\n     \
    \   }\n        return s;", "        StringBuilder sb = new StringBuilder();\n\
    \        for(char c : s.toCharArray()) {\n            if(Character.isLetter(c))\
    \ {\n                c = Character.toUpperCase(c);\n            } else {\n   \
    \             c = Character.toLowerCase(c);\n            }\n            sb.append(c);\n\
    \        }\n        return sb.toString();", "        if (s == null || s.isEmpty())\
    \ return s;\n        char[] chars = s.toCharArray();\n        Arrays.sort(chars);\n\
    \        return chars.stream().map(c -> isLower(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());", "        StringBuilder\
    \ builder = new StringBuilder();\n        \n        for(char c : s.toCharArray())\
    \ {\n            if(Character.isLetter(c)) {\n                builder.append(Character.toUpperCase(c));\n\
    \            } else if(Character.isLowerCase(c)) {\n                builder.append(Character.toLowerCase(c));\n\
    \            } else {\n                builder.append(c);\n            }\n   \
    \     }\n        \n        return builder.toString();", "        String result\
    \ = \"\";\n\n        Set<Character> set = new HashSet<>();\n        for(int i\
    \ = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n\n         \
    \   if(c == '.' || c == '?' || c == '!' || c == '!')\n                continue;\n\
    \n            if(c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == '\
    \ ')\n                continue;\n\n            if(Character.isUpperCase(c))\n\
    \                set.add(' ');\n\n            set.add(Character.toLowerCase(c));\n\
    \        }\n\n        if(set.size() == 0)\n            return s;\n\n        StringBuilder\
    \ builder = new StringBuilder();\n        for(char c : set) {\n            builder.append(c);\n\
    \        }\n        builder.reverse();\n        for(char c : set) {\n        \
    \    builder.append(c);\n        }\n        result = builder.toString();\n   \
    \     return result;", "        Map<Character, Integer> map = new HashMap<>();\n\
    \        char[] arr = s.toCharArray();\n        int length = arr.length;\n   \
    \     for (int i = 0; i < length; i++) {\n            int x = arr[i];\n      \
    \      Integer y = map.get(x);\n            if (y == null) {\n               \
    \ y = 1;\n            } else {\n                map.put(arr[i], y + 1);\n    \
    \        }\n        }\n        List<Integer> list = new ArrayList<>(map.values());\n\
    \        list.remove(0);\n        Collections.sort(list);\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (Integer i : list) {\n            String\
    \ s = \"\";\n            for (char c : s.toCharArray()) {\n                s +=\
    \ (char)(c ^ (int)i);\n            }\n            sb.append(s);\n        }\n \
    \       return sb.toString();", "        if (s.isEmpty()) return \"\";\n     \
    \   String[] strs = s.split(\"\"); // split string\n        strs.forEach((str)\
    \ -> {\n            char[] chars = str.toCharArray();\n            if (Character.isLetter(chars[0])\
    \ || Character.isUpperCase(chars[0])) {\n                chars[0] = Character.toUpperCase(chars[0]);\n\
    \            } else {\n                chars[0] = Character.toLowerCase(chars[0]);\n\
    \            }\n            chars = chars.clone();\n            chars[0] = Character.toUpperCase(chars[0]);\n\
    \            str = String.valueOf(chars);\n        });\n        return strs.toString();",
  "        StringBuilder sb = new StringBuilder(s.replaceAll(\"\\\\W\", \"\")); //\
    \ remove all non-letters, including whitespace\n        if (s.isEmpty()) { //\
    \ if empty string, return empty string\n            return \"\";\n        }\n\
    \        if (s.charAt(0) == Character.toUpperCase(s)) { // if first letter is\
    \ uppercase, return same string but in lowercase\n            return s.substring(1).toLowerCase();\n\
    \        }\n        if (s.charAt(0) == Character.toLowerCase(s)) { // if first\
    \ letter is lowercase\n            return s.substring(1).toUpperCase();\n    \
    \    }\n        char[] arr = s.toCharArray();\n        Arrays.sort(arr); // sort\
    \ the string, first by length, then by letter\n        Collections.reverse(Arrays.asList(arr));\
    \ // reverse the string\n        sb.setCharAt(0, s.charAt(0)); // first letter\
    \ is the same as previous ones, do nothing\n        for (int i = 1; i < arr.length;\
    \ i++) { // start looping from second letter\n            if (Character.isLetter(arr[i]))\
    \ { // if current letter is a letter\n                sb.setCharAt(i, Character.toUpperCase(arr[i]));\n\
    \            } else {\n                sb.setCharAt(i, Character.toLowerCase(arr[i]));\n\
    \            }\n        }\n        return sb.toString(); // return the resulted\
    \ string", "        char[] letters = s.toCharArray();\n        StringBuilder result\
    \ = new StringBuilder();\n        for (char c : letters) {\n            if (Character.isLetter(s))\
    \ {\n                String upper = Character.toUpperCase(c);\n              \
    \  String lower = Character.toLowerCase(c);\n                if (upper != null\
    \ && lower != null) {\n                    result.append(upper);\n           \
    \         result.append(lower);\n                }\n            } else if (Character.isLowerCase(letters))\
    \ {\n                result.append(Character.toUpperCase(s));\n            } else\
    \ {\n                result.append(s);\n            }\n        }\n        return\
    \ result.toString();", "        char[] chars = s.toCharArray();\n        String\
    \ ret = \"\";\n        for(char c : chars) {\n            if((c >= 'a' && c <=\
    \ 'z') || (c >= 'A' && c <= 'Z')) {\n                ret += Character.toLowerCase(c);\n\
    \            } else if(c >= '0' && c <= '9') {\n                ret += Character.toUpperCase(c);\n\
    \            } else {\n                ret += c;\n            }\n        }\n \
    \       return ret;", "        \n        char[] charArray = s.toCharArray();\n\
    \        StringBuilder builder = new StringBuilder();\n        \n        for(int\
    \ i = 0; i < charArray.length; i++) {\n            char c = charArray[i];\n  \
    \          if(c == ' ') {\n                builder.append(\"\\n\");\n        \
    \    } else {\n                builder.append(Character.toLowerCase(c));\n   \
    \         }\n        }\n        \n        char[] builderCharArray = builder.toString().toCharArray();\n\
    \        \n        for(int i = 0; i < builderCharArray.length; i++) {\n      \
    \      char c = builderCharArray[i];\n            if(c == ' ') {\n           \
    \     builder.append(\"\\n\");\n            } else {\n                builder.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        \n        return builder.toString();", "  \
    \      Stack<Character> stack = new Stack<>();\n        StringBuilder reverse\
    \ = new StringBuilder();\n        for(int i = 0; i < s.length(); i++) {\n    \
    \        if(Character.isLetter(s.charAt(i))) {\n                stack.push(s.charAt(i));\n\
    \            } else {\n                reverse.append(stack.pop());\n        \
    \    }\n        }\n        if(stack.empty()) {\n            return reverse.toString();\n\
    \        } else {\n            return reverse.reverse().toString();\n        }",
  "        if (s == null || s.length() == 0) return s;\n        s = s.toLowerCase();\n\
    \        String reverse = \"\";\n        for (int i = s.length() - 1; i >= 0;\
    \ i--) {\n            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n      \
    \          reverse += s.charAt(i) + \"\";\n            } else {\n            \
    \    reverse += s.charAt(i);\n            }\n        }\n        return reverse;",
  "        if (s.length() == 0) {\n            return \"0\";\n        }\n        char[]\
    \ arr = s.toCharArray();\n        char[] newArr = new char[arr.length];\n    \
    \    StringBuilder stringBuilder = new StringBuilder();\n        boolean flag\
    \ = true;\n        for (int i = 0; i < arr.length; i++) {\n            if (Character.isLetter(arr[i]))\
    \ {\n                if (flag) {\n                    flag = false;\n        \
    \            for (int j = 0; j < newArr.length; j++) {\n                     \
    \   newArr[j] = Character.toUpperCase(arr[j]);\n                    }\n      \
    \          } else {\n                    flag = true;\n                    for\
    \ (int j = 0; j < newArr.length; j++) {\n                        newArr[j] = Character.toLowerCase(arr[j]);\n\
    \                    }\n                }\n            } else {\n            \
    \    newArr[i] = arr[i];\n            }\n        }\n        stringBuilder.append(Arrays.toString(newArr));\n\
    \        return stringBuilder.toString();", "        char[] chars = s.toCharArray();\n\
    \        for(int i = 0; i < chars.length; i++) {\n            if (Character.isLetterOrDigit(chars[i]))\
    \ {\n                chars[i] = Character.toUpperCase(chars[i]);\n           \
    \ } else {\n                chars[i] = Character.toLowerCase(chars[i]);\n    \
    \        }\n        }\n        return new String(chars);", "        char[] a =\
    \ s.toCharArray();\n        if (s != null && !s.isEmpty()) {\n            Arrays.sort(a);\n\
    \        }\n        if (a == null || a.length == 0) {\n            return \"\"\
    ;\n        }\n        if (Character.isUpperCase(a[0])) {\n            String u\
    \ = \"\";\n            for (int i = 1; i < a.length; i++) {\n                if\
    \ (!Character.isUpperCase(a[i])) {\n                    u += a[i];\n         \
    \       } else {\n                    char c = a[i];\n                    u +=\
    \ (char) ('A' + (c - 'A'));\n                }\n            }\n            return\
    \ u;\n        } else {\n            String s = \"\";\n            for (int i =\
    \ 0; i < a.length; i++) {\n                if (!Character.isUpperCase(a[i])) {\n\
    \                    s += a[i];\n                } else {\n                  \
    \  char c = a[i];\n                    s += (char) ('a' + (c - 'a'));\n      \
    \          }\n            }\n            return s;\n        }", "        char[]\
    \ arr = s.toCharArray();\n        Arrays.sort(arr);\n        boolean isFirst =\
    \ true;\n        String result = \"\";\n        for (int i = 0; i < arr.length;\
    \ i++) {\n            if (isFirst) {\n                isFirst = false;\n     \
    \           result += Character.toLowerCase(arr[i]);\n            } else {\n \
    \               result += Character.toUpperCase(arr[i]);\n            }\n    \
    \    }\n        return result;", "        if(s.equals(\"\")){\n            return\
    \ \"\";\n        }\n        List<String> list = new ArrayList<>();\n        for(int\
    \ i = 0; i < s.length(); i++){\n            char c = s.charAt(i);\n          \
    \  list.add(c);\n        }\n        Collections.reverse(list);\n        StringBuilder\
    \ builder = new StringBuilder();\n        for(String s : list){\n            builder.append(s);\n\
    \        }\n        return builder.toString();", "        return s.chars()\n \
    \               .map(i -> (char) i)\n                .map(c -> Character.isLetter(c)\
    \ ? \n                        Character.toUpperCase(c) : Character.toLowerCase(c))\n\
    \                .mapToObj(c -> Character.toString(c))\n                .collect(Collectors.joining());",
  "        StringBuilder sb = new StringBuilder();\n        for(char c : s.toCharArray())\
    \ {\n            if(c > 96 && c < 123) {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n            else if(c > 64 && c < 91) {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n            else {\n                sb.append(c);\n          \
    \  }\n        }\n        return sb.toString();", "        if (s == null || s.length()\
    \ == 0) {\n            return \"\";\n        }\n        char[] arr = s.toCharArray();\n\
    \        Arrays.sort(arr);\n        int start = 0;\n        int end = arr.length\
    \ - 1;\n        char[] resArr = new char[arr.length];\n        while (start <\
    \ end) {\n            if (arr[start] < 'a' || arr[start] > 'z') {\n          \
    \      resArr[start] = arr[start];\n                start++;\n            } else\
    \ {\n                if (arr[end] < 'a' || arr[end] > 'z') {\n               \
    \     resArr[end] = arr[end];\n                    end--;\n                } else\
    \ {\n                    if (arr[start] > arr[end]) {\n                      \
    \  resArr[end] = arr[start];\n                        resArr[start] = arr[end];\n\
    \                        start++;\n                        end--;\n          \
    \          } else if (arr[start] < arr[end]) {\n                        resArr[start]\
    \ = arr[end];\n                        resArr[end] = arr[start];\n           \
    \             end--;\n                        start++;\n                    }\n\
    \                }\n            }\n        }\n        return new String(resArr);",
  "        char[] chars = s.toCharArray();\n        Arrays.sort(chars);\n        String\
    \ result = \"\";\n        int start = 0;\n        int end = chars.length-1;\n\
    \        while(start < end) {\n            if(chars[start].isLetter()) result\
    \ += Character.toUpperCase(chars[start]) + Character.toUpperCase(chars[end]);\n\
    \            else if(chars[start].isSpace() || chars[end].isSpace()) result +=\
    \ chars[start] + \"@\";\n            else result += chars[start] + \"@\";\n  \
    \          start += 1;\n            end -= 1;\n        }\n        return result;",
  "        // Write your code here\n        String answer = \"\";\n        char chars[]\
    \ = s.toCharArray();\n        for(char ch: chars){\n            answer = answer\
    \ + Character.toUpperCase(ch);\n        }\n        if(answer.length() == s.length()){\n\
    \            return answer;\n        }\n        answer = \"\";\n        for(char\
    \ ch: chars){\n            answer = answer + Character.toLowerCase(ch);\n    \
    \    }\n        if(answer.length() == s.length()){\n            return answer;\n\
    \        }\n        return s;", "        //Your code here\n        if (s.length()\
    \ == 0)\n            return s;\n        \n        String[] strArray = s.split(\"\
    \");\n        \n        \n        for (int i = 0; i < strArray.length; i++) {\n\
    \            \n            char ch = strArray[i].charAt(0);\n            \n  \
    \          if (Character.isLetter(ch))\n                strArray[i] = String.valueOf(Character.toUpperCase(ch));\n\
    \            else\n                strArray[i] = String.valueOf(Character.toLowerCase(ch));\n\
    \        }\n        return strArray.toString();", "        Map<Character, Integer>\
    \ freq = new HashMap<>();\n\n        for (int i=0; i<s.length(); i++) {\n    \
    \        char c = s.charAt(i);\n            if (freq.containsKey(c)) {\n     \
    \           int count = freq.get(c);\n                freq.put(c, count+1);\n\
    \            } else {\n                freq.put(c, 1);\n            }\n      \
    \  }\n        \n        //System.out.println(\"Map : \" + freq);\n\n        for\
    \ (int i=0; i<s.length(); i++) {\n            char c = s.charAt(i);\n        \
    \    if (freq.containsKey(c)) {\n                if(freq.get(c) > 1) {\n     \
    \               String t = s.replaceAll(s.substring(i,i+1), String.valueOf(freq.get(c)));\
    \ \n                    int i = i + t.length();\n                }\n         \
    \   }\n        }\n\n        return s;", "        StringBuilder sb = new StringBuilder();\n\
    \        for(char ch : s.toCharArray()) {\n            switch(ch) {\n        \
    \        case LETTER:\n                    sb.append(Character.toUpperCase(ch));\n\
    \                    break;\n                default:\n                    sb.append(ch);\n\
    \                    break;\n            }\n        }\n        return sb.toString();",
  "        String[] chars = s.split(\"\");\n        \n        List<Character> results\
    \ = new ArrayList<>();\n        \n        for (Character c : chars) {\n      \
    \      if (Character.isUpperCase(c)) {\n                results.add(c);\n    \
    \        } else {\n                results.add(Character.toLowerCase(c));\n  \
    \          }\n        }\n        \n        String result = \"\";\n        for\
    \ (Character c : results) {\n            result += c;\n        }\n        \n \
    \       return result;", "        if (s.length() == 0) {\n            return \"\
    \";\n        }\n        char[] arr = s.toCharArray();\n        Arrays.sort(arr);\n\
    \        StringBuilder ans = new StringBuilder();\n        for (char c : arr)\
    \ {\n            ans.append(Character.toUpperCase(c));\n        }\n        ans.append(Character.toLowerCase(arr[arr.length\
    \ - 1]));\n        return ans.toString();", "        String result = \"\";\n \
    \       for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) >=\
    \ 'a' && s.charAt(i) <= 'z') {\n                result += s.charAt(i) + \"\";\n\
    \            } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n        \
    \        result += s.charAt(i) + \"\";\n            } else {\n               \
    \ result += s.charAt(i) + \"\";\n            }\n        }\n        return result;",
  "        if (s.isEmpty()) {\n            return \"\";\n        }\n        Stack<Character>\
    \ st = new Stack<>();\n        for (Character c : s.toCharArray()) {\n       \
    \     if (Character.isLetter(c)) {\n                st.push(c);\n            }\
    \ else {\n                char upCase = Character.toUpperCase(c);\n          \
    \      char lowCase = Character.toLowerCase(c);\n                st.push(upCase);\n\
    \                st.push(lowCase);\n            }\n        }\n        StringBuilder\
    \ sb = new StringBuilder();\n        while (st.size() > 0) {\n            Character\
    \ top = st.pop();\n            sb.append(top);\n        }\n        return sb.toString();",
  "        for(char ch : s.toCharArray()) {\n            if(Character.isLetter(ch))\
    \ {\n                char newChar = (char) Character.toUpperCase(ch);\n      \
    \          String newString = new String(Arrays.copyOf(s, s.length));\n      \
    \          newString = (char) Character.toLowerCase(newChar);\n              \
    \  newString = newString + s.substring(newString.length());\n                System.out.println(newString);\n\
    \                return newString;\n            }\n            System.out.println(s);\n\
    \        }\n        System.out.println(s);\n        return s;", "        if(s\
    \ == null || s.isEmpty()) {\n            return s;\n        }\n        Map<Character,\
    \ String> map = new HashMap<>();\n        for (char c : s.toCharArray()) {\n \
    \           if(c == ' ' || Character.isLetter(c)) {\n                String upperCase\
    \ = Character.toUpperCase(c);\n                map.put(c, upperCase);\n      \
    \      } else {\n                map.put(c, Character.toString(c));\n        \
    \    }\n        }\n        StringBuilder builder = new StringBuilder();\n    \
    \    for (char c : map.keySet()) {\n            builder.append(map.get(c));\n\
    \        }\n        return builder.toString();", "        return s.chars().map(c\
    \ -> (char) c)\n            .collect(Collectors.toMap(c -> c, c -> c != (char)\
    \ c ? Character.toUpperCase(c) : Character.toLowerCase(c)))\n            .entrySet().stream().map(e\
    \ -> e.getValue() == (char) e.getKey() ? e.getKey() : (char) e.getValue())\n \
    \           .collect(Collectors.joining());", "        if (s == null || s.length()\
    \ == 0) return s;\n        String str = s.toLowerCase();\n        str = str.replaceAll(\"\
    [^a-z]\", \"\");\n        if (str.isEmpty()) return s;\n        String result\
    \ = \"\";\n        for (int i = 0; i < str.length(); i++) {\n            if (Character.isLetter(str.charAt(i)))\
    \ {\n                String caps = Character.toUpperCase(str.charAt(i));\n   \
    \             String lower = Character.toLowerCase(str.charAt(i));\n         \
    \       result = result + String.valueOf(caps) + String.valueOf(lower);\n    \
    \        } else {\n                result = result + str.charAt(i);\n        \
    \    }\n        }\n        return result;", "        // write your code here\n\
    \        \n        return s.replaceAll(\"[a-zA-Z]\",\n        (x, y) -> {\n  \
    \          if (y.equals(\"a\") || y.equals(\"A\"))\n                return \"\
    A\";\n            else if (y.equals(\"b\") || y.equals(\"B\"))\n             \
    \   return \"b\";\n            else if (y.equals(\"c\") || y.equals(\"C\"))\n\
    \                return \"c\";\n            else\n                return y;\n\
    \        });", "        if (s == null || s.isEmpty()) return s;\n        StringBuilder\
    \ sb = new StringBuilder(s.length());\n        for (int i = 0; i < s.length();\
    \ ++i) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c))\
    \ {\n                String uc = Character.toString((char) c);\n             \
    \   uc = Character.toUpperCase(uc);\n                uc = Character.toLowerCase(uc);\n\
    \                sb.append(uc).append(c);\n            } else {\n            \
    \    sb.append(c);\n            }\n        }\n        return sb.toString();",
  "        String[] strArray = s.split(\"\");\n        String tempString = \"\";\n\
    \        for(int i=0; i<strArray.length; i++) {\n            if(Character.isLetter(strArray[i].charAt(0)))\
    \ {\n                tempString = tempString.concat(strArray[i].substring(0,1).toUpperCase()).concat(strArray[i].substring(1)).concat(strArray[i]);\n\
    \            } else {\n                tempString = tempString.concat(strArray[i]);\n\
    \            }\n        }\n        return tempString;", "        String[] strArray\
    \ = s.split(\"\");\n        List<String> result = new ArrayList<>();\n       \
    \ for(String str: strArray) {\n            if(!Character.isLetter(str.charAt(0)))\
    \ {\n                Collections.reverse(strArray);\n                strArray\
    \ = strArray.reverse();\n                strArray = strArray.toString();\n   \
    \         }\n            result.add(str);\n        }\n        return s.replaceAll(strArray.toString(),\
    \ result.toString());", "        char[] arr = s.toCharArray();\n        Arrays.sort(arr);\n\
    \        StringBuilder builder = new StringBuilder();\n        for (char c : arr)\
    \ {\n            int length = arr.length - 1;\n            if (Character.isLetter(c))\
    \ {\n                if (Character.isUpperCase(c)) {\n                    builder.append(Character.toLowerCase(c));\n\
    \                } else {\n                    builder.append(Character.toUpperCase(c));\n\
    \                }\n            } else {\n                builder.append(c);\n\
    \            }\n        }\n        return builder.toString();", "        if (s\
    \ == null || s.isEmpty()) return \"\";\n        String upper = \"\";\n       \
    \ String lower = \"\";\n        String ans = \"\";\n        for (int i = 0; i\
    \ < s.length(); i++) {\n            if (Character.isLetter(s.charAt(i))) {\n \
    \               char ch = s.charAt(i);\n                char ch2 = Character.toLowerCase(ch);\n\
    \                if (Character.isLowerCase(ch)) {\n                    upper =\
    \ upper + ch2;\n                    lower = lower + ch;\n                } else\
    \ {\n                    upper = upper + ch;\n                    lower = lower\
    \ + ch2;\n                }\n            } else {\n                ans = ans +\
    \ s.charAt(i);\n            }\n        }\n        ans = upper + lower;\n     \
    \   return ans;", "        String result = \"\";\n        for (int i = 0; i <\
    \ s.length(); i++) {\n            if (Character.isLetter(s.charAt(i))) {\n   \
    \             if (Character.isUpperCase(s.charAt(i))) {\n                    result\
    \ += s.toUpperCase();\n                } else {\n                    result +=\
    \ s.toLowerCase();\n                }\n            } else {\n                result\
    \ += s.charAt(i);\n            }\n        }\n        return result;", "      \
    \  // code here\n        return \"\";", "        char[] chars = s.toCharArray();\n\
    \        Arrays.sort(chars, (a, b) -> {\n            char c = Character.toLowerCase(a);\n\
    \            char d = Character.toUpperCase(a);\n            return c < d ? -1\
    \ : (c > d ? 1 : 0);\n        });\n        StringBuilder result = new StringBuilder();\n\
    \        char last = chars[chars.length - 1];\n        for (int i = 0; i < chars.length;\
    \ i++) {\n            char c = chars[i];\n            if (c != last) {\n     \
    \           result.append(Character.toUpperCase(c));\n            }\n        \
    \    result.append(c);\n            last = c;\n        }\n        return result.toString();",
  "        String result = \"\";\n\n        for(int i=0; i<s.length(); i++) {\n  \
    \          char c = s.charAt(i);\n\n            if(Character.isLetter(c)) {\n\
    \                result += (Character.isLowerCase(c) ? c.toUpperCase() : c.toLowerCase())\
    \ + \"\";\n            } else {\n                result += s;\n            }\n\
    \        }\n\n        return result;", "        final String letters = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n        StringBuilder newStr = new StringBuilder(s);\n        char c;\n   \
    \     for (int i = 0; i < newStr.length(); i++) {\n            c = newStr.charAt(i);\n\
    \            if (letters.contains(c)) {\n                newStr.setCharAt(i, Character.toUpperCase(c));\n\
    \            } else {\n                newStr.setCharAt(i, Character.toLowerCase(c));\n\
    \            }\n        }\n        return newStr.toString();", "        return\
    \ s.isEmpty() ? s : s.chars().mapToObj(c -> Character.isLetter(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).reduce((a, b) -> a + (Character.isLetter(a) ? b\
    \ : Character.toLowerCase(b)))\n                .orElseThrow(() -> new IllegalArgumentException(\"\
    No letters found!\"))\n                .charAt(0).toString();", "        // write\
    \ your code in Java SE 8\n        // you may also use Guava or Apache Commons\
    \ Lang\n        String str = new StringBuilder(s);\n        if (str.chars().allMatch(Character::isLetter))\
    \ {\n            for (int i = 0; i < str.length(); i++) {\n                if\
    \ (!Character.isLetter(str.charAt(i))) {\n                    str = String.valueOf(str.charAt(i)).toUpperCase()\n\
    \                            + String.valueOf(str.charAt(i)).toLowerCase();\n\
    \                }\n            }\n            return str;\n        }\n      \
    \  return String.valueOf(str.toUpperCase()).toLowerCase()\n                + String.valueOf(str.toLowerCase());",
  "        List<Character> list = new ArrayList<Character>();\n        for(int i =\
    \ 0; i < s.length(); i++) {\n            list.add(s.charAt(i));\n        }\n \
    \       String str = \"\";\n        for(char ch : list) {\n            str = String.valueOf(str)\
    \ + Character.toUpperCase(ch);\n            str = String.valueOf(str) + Character.toLowerCase(ch);\n\
    \        }\n        str = str.substring(str.length() - 1);\n        return str;",
  "        return s.chars().mapToObj(i->(char)i).map(c -> {\n            if ('a' <=\
    \ c && c <= 'z') {\n                return String.valueOf(Character.toUpperCase(c));\n\
    \            } else if ('A' <= c && c <= 'Z') {\n                return String.valueOf(Character.toLowerCase(c));\n\
    \            } else {\n                return c;\n            }\n        }).collect(Collectors.joining());",
  "        String result = \"\";\n        for(char c : s.toCharArray()){\n       \
    \     if(Character.isLetter(c)){\n                result += (Character.toUpperCase(c))\n\
    \            } else {\n                result += Character.toLowerCase(c);\n \
    \           }\n        }\n        return result;", "        // Write your code\
    \ here\n        char[] letters = s.toCharArray();\n        Arrays.sort(letters);\n\
    \        boolean letterPresent = false;\n        for(int i = 0; i < letters.length;\
    \ i++)\n        {\n            if(letters[i] == (char)65 || letters[i] == (char)97)\n\
    \            {\n                letters[i] = ((char)((int)letters[i] - 32));\n\
    \                letterPresent = true;\n            }\n            else\n    \
    \        {\n                break;\n            }\n        }\n\n        if(letterPresent\
    \ == true)\n        {\n            return new String(letters);\n        }\n  \
    \      else if(letterPresent == false)\n        {\n            letters[letters.length\
    \ -1] = (char)(letters[letters.length -1] + 32);\n            return new String(letters);\n\
    \        }\n        else\n        {\n            return s;\n        }", "    \
    \    StringBuilder str = new StringBuilder();\n        for( int i=0; i<s.length();\
    \ i++ ) {\n            char c = s.charAt(i);\n            if ( Character.isLetter(\
    \ c ) ) {\n                c = Character.toLowerCase( c );\n            }\n  \
    \          else {\n                c = Character.toUpperCase( c );\n         \
    \   }\n            str.append( c );\n        }\n        return str.toString();",
  "        StringBuilder sb = new StringBuilder(s.length());\n        Arrays.stream(s.split(\"\
    \")).map(x -> {\n            char c = x.charAt(0);\n            boolean upper\
    \ = Character.isUpperCase(c);\n            boolean lower = Character.isLowerCase(c);\n\
    \            if (upper && lower) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else if (upper) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else if (lower) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(x);\n            }\n        \
    \    return x;\n        }).forEach(x -> {\n            boolean upper = Character.isUpperCase(x);\n\
    \            boolean lower = Character.isLowerCase(x);\n            if (upper\
    \ && lower) {\n                sb.append(Character.toLowerCase(x));\n        \
    \    } else if (upper) {\n                sb.append(Character.toUpperCase(x));\n\
    \            } else if (lower) {\n                sb.append(Character.toLowerCase(x));\n\
    \            } else {\n                sb.append(x);\n            }\n        });\n\
    \        return sb.toString();", "        Set<Character> seen = new HashSet<Character>();\n\
    \        StringBuilder builder = new StringBuilder();\n        for (char c : s.toCharArray())\
    \ {\n            if (seen.add(c)) {\n                builder.append(Character.toUpperCase(c));\n\
    \            } else {\n                builder.append(c);\n            }\n   \
    \     }\n        return builder.reverse().toString();", "      if(s.length() <=\
    \ 0)\n        return s;\n      else if(s.isEmpty())\n        return s;\n     \
    \ else if(s.chars().allMatch(Character::isLetter)) {\n        String res = \"\"\
    ;\n        for(char c : s.toCharArray()) {\n          if(Character.isUpperCase(c))\n\
    \            res = c + res;\n          else\n            res = c + res;\n    \
    \    }\n        return res;\n      }\n      else {\n        return s.toLowerCase().replaceAll(\"\
    (.)([A-Z])\", m -> m.group().toUpperCase());\n      }", "        String[] a =\
    \ s.split(\"\");\n        Arrays.sort(a);\n        \n        StringBuilder sb\
    \ = new StringBuilder();\n        for (String ss : a)\n            if (Character.isLetterOrDigit(ss.charAt(0)))\n\
    \                sb.append(ss.toLowerCase());\n            else \n           \
    \     sb.append(ss);\n        \n        return sb.toString();", "        if(s\
    \ == null) return null;\n        StringBuilder result = new StringBuilder();\n\
    \        for(char c : s.toCharArray()) {\n            if(Character.isLetter(c))\
    \ {\n                if((Character.isUpperCase(c) && result.length() != 0) ||\
    \ \n                        (Character.isLowerCase(c) && result.length() == 0))\
    \ {\n                    result.setCharAt(result.length() - 1, Character.toUpperCase(c));\n\
    \                } else {\n                    result.append(c);\n           \
    \     }\n            } else {\n                result.append(c);\n           \
    \ }\n        }\n        return result.toString();", "      char[] chars = s.toCharArray();\n\
    \      String res = \"\";\n      for (int i = 0; i < chars.length; ++i) {\n  \
    \      if (!Character.isLetter(chars[i])) {\n          chars[i] = Character.toUpperCase(chars[i]);\n\
    \        } else {\n          chars[i] = Character.toLowerCase(chars[i]);\n   \
    \     }\n      }\n      return new String(chars);", "        if(s.length()==0)\n\
    \            return s;\n        StringBuilder sb=new StringBuilder();\n      \
    \  for(int i=0;i<s.length();i++){\n            if(s.charAt(i)>=65 && s.charAt(i)<=90)\n\
    \                sb.append((char)(s.charAt(i)-32));\n            else\n      \
    \          sb.append(s.charAt(i));\n        }\n        return sb.reverse().toString();",
  "        char[] chars = s.toCharArray();\n        if (chars.length < 1) return s;\n\
    \        if (chars[0] >= 65 && chars[0] <= 90) {\n            chars[0] += 32;\n\
    \        }\n        return String.valueOf(chars);", "        String[] chars =\
    \ s.split(\"\");\n        StringBuilder result = new StringBuilder();\n      \
    \  for (String str : chars) {\n            if(str.matches(\"[a-zA-Z]+\")){\n \
    \               result.append((Character.toUpperCase(str.charAt(0)) + str.substring(1)));\n\
    \            }\n            else if(str.matches(\"[A-Z]+\")){\n              \
    \  result.append((Character.toLowerCase(str.charAt(0)) + str.substring(1)));\n\
    \            }\n            else{\n                result.append(str);\n     \
    \       }\n        }\n        return result.toString();", "        \n        ArrayList<String>\
    \ myList = new ArrayList<>();\n        \n        for(int i = 0; i < s.length();\
    \ i++) {\n            char c = s.charAt(i);\n            \n            if(Character.isLetter(c))\
    \ {\n                String tmp = new StringBuilder().append(Character.toUpperCase(c)).append(Character.toLowerCase(c)).toString();\n\
    \                myList.add(tmp);\n            } else {\n                myList.add(s);\n\
    \            }\n        }\n        \n        return Collections.min(myList);",
  "        if (s.matches(\"\\\\p{Alpha}+\")) {\n            return s.replaceAll(\"\
    (?i)^\\\\p{Alpha}+$\", \"\").toLowerCase();\n        }\n        return s\n   \
    \             .replaceAll(\"(?i)^\\\\p{Punct}+$\", \"\")\n                .replaceAll(\"\
    (?i)^\\\\p{Punct}*\\\\p{Alpha}\\\\p{Punct}*$\", \"\")\n                .replaceAll(\"\
    (?i)^\\\\p{Punct}*\\\\p{Alpha}\\\\p{Punct}*\\\\p{Alpha}+$\", \"\")\n         \
    \       .replaceAll(\"(?i)^\\\\p{Punct}*\\\\p{Alpha}+\", \"\");", "        char[]\
    \ arr = s.toCharArray();\n        Arrays.sort(arr);\n        StringBuilder builder\
    \ = new StringBuilder();\n        char lastChar = 'a';\n        for (int i = 0;\
    \ i < arr.length; i++) {\n            char currentChar = arr[i];\n           \
    \ if (Character.isLetter(currentChar)) {\n                if (Character.isUpperCase(currentChar))\
    \ {\n                    currentChar = Character.toLowerCase(currentChar);\n \
    \               } else {\n                    currentChar = Character.toUpperCase(currentChar);\n\
    \                }\n            }\n            if (currentChar == lastChar) {\n\
    \                builder.append(currentChar);\n            } else {\n        \
    \        builder.append(currentChar);\n                lastChar = currentChar;\n\
    \            }\n        }\n        return builder.toString();", "        char[]\
    \ c = s.toCharArray();\n        Arrays.sort(c);\n        StringBuilder sb = new\
    \ StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n         \
    \   if (Character.isLetter(c[i])) {\n                if (i + 1 < s.length() &&\
    \ Character.isLetter(c[i + 1])) {\n                    sb.append(Character.toUpperCase(c[i]));\n\
    \                    sb.append(c[i + 1]);\n                    i += 1;\n     \
    \           } else if (i == s.length() - 1) {\n                    sb.append(Character.toUpperCase(c[i]));\n\
    \                } else {\n                    sb.append(c[i]);\n            \
    \    }\n            } else {\n                sb.append(c[i]);\n            }\n\
    \        }\n        return sb.toString();", "        String[] arr1 = s.split(\"\
    \");\n        List<String> arr2 = Arrays.asList(arr1);\n        List<String> result\
    \ = new ArrayList<>();\n        for(String str : arr2) {\n            if(Character.isLetter(str.charAt(0)))\
    \ {\n                String upcase = Character.toUpperCase(str.charAt(0));\n \
    \               String lowcase = Character.toLowerCase(str.charAt(0));\n     \
    \           String result = upcase+lowcase;\n                result.add(result);\n\
    \                result.addAll(str.split(\"\"));\n            }else{\n       \
    \         result.add(str);\n            }\n        }\n        arr2.removeAll(arr1);\n\
    \        arr2.addAll(result);\n        arr2.add(\"\");\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i<arr2.size(); i++) {\n  \
    \          sb.append(arr2.get(i));\n        }\n        return sb.toString();",
  "        if (s.isEmpty()) {\n            return s.isEmpty() ? \"\" : \"\";\n   \
    \     }\n        char[] chars = s.toCharArray();\n        char[] res = new char[chars.length];\n\
    \        for (int i = 0; i < chars.length; i++) {\n            char c = chars[i];\n\
    \            if (Character.isLetter(c)) {\n                char upperCase = Character.toUpperCase(c);\n\
    \                char lowerCase = Character.toLowerCase(c);\n                if\
    \ (upperCase != lowerCase) {\n                    res[i] = upperCase;\n      \
    \          }\n                else {\n                    res[i] = lowerCase;\n\
    \                }\n            }\n            else {\n                res[i]\
    \ = c;\n            }\n        }\n        return new String(res);", "        StringBuilder\
    \ sb = new StringBuilder();\n        char[] sArr = s.toCharArray();\n        Arrays.sort(sArr);\n\
    \        for(int i =0 ; i < sArr.length ; i++ ) {\n            char ch = sArr[i];\n\
    \            if(Character.isLetter(ch)) {\n                if(Character.isLowerCase(ch))\
    \ sb.append(Character.toUpperCase(ch));\n                else sb.append(Character.toLowerCase(ch));\n\
    \            }\n            else sb.append(ch);\n        }\n        return sb.toString();",
  "        char[] arr = s.toCharArray();\n        StringBuilder sb = new StringBuilder();\n\
    \        boolean lower = true;\n        for (int i = 0; i < arr.length; i++) {\n\
    \            char c = arr[i];\n            if (Character.isLetter(c)) {\n    \
    \            if (lower) {\n                    sb.append(Character.toLowerCase(c));\n\
    \                } else {\n                    sb.append(Character.toUpperCase(c));\n\
    \                }\n                lower = !lower;\n            } else {\n  \
    \              sb.append(c);\n            }\n        }\n        return sb.toString();",
  "      String[] words = s.split(\"[^a-zA-Z]+\");\n      if(words.length == 1) return\
    \ words[0];\n      StringBuilder sb = new StringBuilder();\n      for (int i =\
    \ 0; i < words.length; i++) {\n        char c = words[i].charAt(0);\n        char\
    \ lower = Character.toLowerCase(c);\n        char upper = Character.toUpperCase(c);\n\
    \        if(lower != c) sb.append(lower);\n        else sb.append(upper);\n  \
    \    }\n      return sb.toString();", "        Set<Character> set = new HashSet<>();\n\
    \        for (char c : s.toCharArray()) {\n            if (!Character.isLetter(c))\
    \ {\n                s = s.toUpperCase();\n            } else {\n            \
    \    s = s.toLowerCase();\n            }\n            set.add(s.charAt(0));\n\
    \        }\n        StringBuilder sb = new StringBuilder();\n        char[] chars\
    \ = s.toCharArray();\n        int i = 0;\n        for (char a : chars) {\n   \
    \         if (set.contains(a)) {\n                sb.append(a);\n            }\
    \ else {\n                sb.append(Character.toLowerCase(a));\n            }\n\
    \            if (i == chars.length - 1) {\n                sb.append(a);\n   \
    \         }\n            i++;\n        }\n        return sb.toString();", "  \
    \      String res = \"\";\n        for (int i = 0; i < s.length(); i++) {\n  \
    \          char ch = s.charAt(i);\n            if (Character.isLetter(ch)) {\n\
    \                ch = Character.toUpperCase(ch);\n                ch += Character.toLowerCase(ch);\n\
    \            } else {\n                ch = Character.toLowerCase(ch);\n     \
    \       }\n            res += ch;\n        }\n        return res;", "        StringBuilder\
    \ builder = new StringBuilder();\n        for (char c : s.toCharArray()) {\n \
    \           if (Character.isLetter(c)) {\n                builder.append(Character.toUpperCase(c));\n\
    \            } else {\n                builder.append(c);\n            }\n   \
    \     }\n        return builder.reverse().toString();", "        int i = s.length()\
    \ - 1;\n        if (s.contains(\"@\") && s.contains(\"#\")) {\n            int\
    \ start = 0;\n            int end = 0;\n            String reversed = \"\";\n\
    \            String string = \"\";\n            int counter = 0;\n           \
    \ while (counter != i) {\n                if (s.charAt(i) == '@') {\n        \
    \            end = i;\n                    string = s.substring(start, end);\n\
    \                    char a = string.charAt(0);\n                    char b =\
    \ string.charAt(1);\n                    String stringRev = (\"\" + Character.toLowerCase(a)\
    \ + Character.toUpperCase(b));\n                    reversed = stringRev;\n  \
    \                  start = i + 1;\n                    counter++;\n          \
    \      }\n                i++;\n            }\n            while (counter != i)\
    \ {\n                reversed = reversed + s.substring(start, i + 1);\n      \
    \          i++;\n                counter++;\n            }\n        }\n      \
    \  if (s.contains(\"@\")) {\n            while (i != 0) {\n                String\
    \ str2 = s.substring(0, i);\n                char a = str2.charAt(0);\n      \
    \          char b = str2.charAt(1);\n                String stringRev = (\"\"\
    \ + Character.toLowerCase(a) + Character.toUpperCase(b));\n                reversed\
    \ = stringRev;\n                i--;\n            }\n        }\n        if (s.contains(\"\
    #\")) {\n            while (i != 0) {\n                String str2 = s.substring(0,\
    \ i);\n                char a = str2.charAt(0);\n                char b = str2.charAt(1);\n\
    \                String stringRev = (\"\" + Character.toLowerCase(a) + Character.toUpperCase(b));\n\
    \                reversed = stringRev;\n                i--;\n            }\n\
    \        }\n        return reversed;", "        char[] sArr = s.toCharArray();\n\
    \        Arrays.sort(sArr);\n        StringBuilder res = new StringBuilder();\n\
    \        for (char c : sArr) {\n            if (Character.isLetter(c)) {\n   \
    \             String str = Character.toString(c);\n                str = str.toUpperCase();\n\
    \                str = str.toLowerCase().replace(' ', '_');\n                res.append(str);\n\
    \            }\n            else {\n                res.append(c);\n         \
    \   }\n        }\n        return res.toString();", "        return s.replaceAll(\"\
    [a-z]\", x -> x.equals(\"a\") ? \"A\".charAt(0) : \"a\".charAt(0)) \n        \
    \        .replaceAll(\"[A-Z]\", x -> x.equals(\"A\") ? \"a\".charAt(0) : \"A\"\
    .charAt(0)) \n                .replaceAll(\"\\\\w\", x -> x.equals(\"#\") ? \"\
    @\".charAt(0) : \"#\".charAt(0));", "        s = s.replaceAll(\"[a-zA-Z]\", \"\
    \");\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0;\
    \ i < s.length(); i++) {\n            String t = Character.toLowerCase(s.charAt(i));\n\
    \            String uc = Character.toUpperCase(s.charAt(i));\n            String\
    \ uct = null;\n            if (i == s.length() - 1) uct = \"c\";\n           \
    \ else uct = Character.toUpperCase(s.charAt(i + 1));\n            if (t.equals(uc))\
    \ {\n                sb.append(t).append(uct);\n            } else {\n       \
    \         sb.append(t);\n            }\n        }\n        return sb.toString();",
  "        char[] chars = s.toCharArray();\n        Arrays.sort(chars);\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < chars.length; i++) {\n\
    \            if (chars[i] > 96 && chars[i] < 123) {\n                if (chars[i]\
    \ >= 65 && chars[i] <= 90) {\n                    chars[i] -= 32;\n          \
    \      }\n                sb.append(chars[i]);\n            } else if (chars[i]\
    \ == 48) {\n                sb.append(\"-\");\n            } else {\n        \
    \        sb.append(chars[i]);\n            }\n        }\n        return sb.toString();",
  "        String[] arr = s.replaceAll(\"\\\\s\", \"\").toLowerCase().split(\"(?=\\\
    \\p{L})\");\n        Arrays.stream(arr).forEach(i -> {\n            if((i == \"\
    \" || !Character.isLetter(i.toLowerCase())) && (i != \"\" && Character.isLetter(i)))\
    \ {\n                i = Character.toUpperCase(s.charAt(s.length()-1)) + i;\n\
    \            }\n        });\n        return new String(arr);", "        String\
    \ result = \"\";\n        for (String str : strsplit(s)) {\n            if (Character.isLetter(str.charAt(0)))\
    \ {\n                result = str.substring(0, 1).toUpperCase() + str.substring(1)\
    \ + result;\n            } else {\n                result = str + result;\n  \
    \          }\n        }\n        return result;", "        String s1 = s.toLowerCase();\n\
    \        String s2 = s1.replaceAll(\"[^a-zA-Z]\", \"\");\n        String s3 =\
    \ s2.length() > 0 ? s2.toUpperCase() : \"NOTHING\";\n        String s4 = \"\"\
    ;\n        for (int i = 0; i < s.length(); i++) {\n            String c = s.substring(i,\
    \ i+1);\n            if (Character.isLetter(c)) {\n                if (s4.length()\
    \ > 0) {\n                    s4 += c;\n                } else {\n           \
    \         s4 = c;\n                }\n            } else {\n                s4\
    \ += c;\n            }\n        }\n        return s4;", "        String result\
    \ = \"\";\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c))\
    \ {\n                result = result.concat((char) (Character.toUpperCase(c)));\n\
    \            }\n            else {\n                result = result.concat((char)\
    \ c);\n            }\n        }\n        return result;", "        // write your\
    \ code here\n        Map<Character, Character> map = new HashMap<>();\n      \
    \  for(char c : s.toCharArray()) {\n            if(map.containsKey(c)){\n    \
    \            map.put(c, map.get(c) + 1);\n            } else {\n             \
    \   map.put(c, 1);\n            }\n        }\n\n        StringBuilder sb = new\
    \ StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (map.get(c)\
    \ == 1) {\n                map.put(c, map.get(c) - 1);\n            } else {\n\
    \                map.put(c, map.get(c) + 1);\n            }\n        }\n     \
    \   for (char c : s.toCharArray()) {\n            map.put(c, map.get(c) * -1);\n\
    \        }\n\n        return map.keySet().stream().map(i -> String.valueOf(map.get(i))).collect(Collectors.toList()).stream().map(i\
    \ -> s.charAt(0) - Integer.parseInt(i)).collect(Collectors.joining(\"\"));", " \
    \       if (s.length() == 0) {\n            return \"\";\n        }\n        if\
    \ (Character.isLetter(s.charAt(0))) {\n            s = s.toLowerCase(Locale.ROOT)\
    \ + s.toUpperCase(Locale.ROOT);\n        } else {\n            s = s.toUpperCase(Locale.ROOT)\
    \ + s.toLowerCase();\n        }\n        int maxLength = 0;\n        int index\
    \ = 0;\n        while (index < s.length()) {\n            if (Character.isLetter(s.charAt(index)))\
    \ {\n                maxLength = maxLength > index ? maxLength : index;\n    \
    \        }\n            index++;\n        }\n        int newMaxLength = (maxLength\
    \ + 1 - s.length()) / 2;\n        String result = \"\";\n        for (int i =\
    \ 0; i < newMaxLength; i++) {\n            result += s.charAt(i);\n        }\n\
    \        return result;", "        for(int i=0;i<s.length();i++){\n          \
    \  if(s.charAt(i)>='a' && s.charAt(i)<='z'||s.charAt(i)>='A' && s.charAt(i)<='Z'){\n\
    \                char c=s.charAt(i);\n                s=(char) (s.charAt(i)^32);\n\
    \                s=(char) (s.charAt(i)+32);\n                s=(char) (s.charAt(i)^32);\n\
    \                s=Character.toString(c);\n            }\n        }\n        return\
    \ s;", "        if (s == null || s.isEmpty()) return s;\n        char[] ca = s.toCharArray();\n\
    \        String res = \"\";\n        for (char c : ca) {\n            if (Character.isLetter(c))\
    \ res += new StringBuilder(String.valueOf(c)).reverse().toString();\n        \
    \    else\n                res = res + c;\n        }\n        return res;", " \
    \       char[] cs = s.toCharArray();\n        int n = cs.length;\n        char[]\
    \ csa = new char[n];\n        for (int i = 0; i < n; ++i) {\n            char\
    \ c = cs[i];\n            if (Character.isLetter(c)) {\n                if (Character.isUpperCase(c))\
    \ {\n                    csa[i] = (char)(c + 32);\n                } else {\n\
    \                    csa[i] = (char)(c - 32);\n                }\n           \
    \ } else {\n                csa[i] = c;\n            }\n        }\n        return\
    \ new String(csa);", "        String str = \"\";\n        if (s == null || s.length()\
    \ < 1) return \"\";\n        if (s.charAt(0) == s.charAt(s.length() - 1)) {\n\
    \            return new StringBuilder(s).reverse().toString();\n        }\n  \
    \      char[] chars = s.toCharArray();\n        for (int i = 0; i < chars.length;\
    \ i++) {\n            char c = chars[i];\n            if (Character.isLetter(c))\
    \ {\n                chars[i] = Character.toUpperCase(c);\n            }\n   \
    \     }\n        StringBuilder sb = new StringBuilder(chars);\n        str = sb.toString();\n\
    \        return str;", "        \n        // Your code here\n        return s;",
  "        String result = \"\";\n        for (int i = 0; i < s.length(); i++) {\n\
    \            if (Character.isLetter(s.charAt(i))) {\n                result +=\
    \ s.charAt(i) + s.substring(i, i + 1).chars().map(x -> (char) x).map(x -> Character.toUpperCase(x)).collect(Collectors.joining());\n\
    \            } else {\n                result += s.charAt(i);\n            }\n\
    \        }\n        return result;", "        char[] arr = s.toCharArray();\n\
    \        for (int i = 0; i < arr.length; i++) {\n            if (Character.isLetter(arr[i]))\
    \ {\n                char[] temp = Character.toUpperCase(arr[i]).toCharArray();\n\
    \                for (int j = temp.length - 1; j > 0; j--) {\n               \
    \     char c = temp[j];\n                    temp[j] = temp[j - 1];\n        \
    \            temp[j - 1] = c;\n                }\n                String res =\
    \ new String(temp);\n                arr[i] = res;\n            }\n        }\n\
    \        return new String(arr);", "        return s.chars()\n               \
    \  .mapToObj(c -> (char) c)\n                 .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()))\n                 .entrySet().stream()\n           \
    \      .collect(Collectors.toMap(Map.Entry::getKey, entry -> {\n             \
    \        int count = entry.getValue();\n                     if (count > 0) {\n\
    \                         return entry.getKey().toString();\n                \
    \     } else {\n                         return entry.getKey().toLowerCase().toString();\n\
    \                     }\n                 }, () -> {\n                     throw\
    \ new IllegalArgumentException(\"No Letters\");\n                 }))\n      \
    \           .entrySet().stream()\n                 .map(Map.Entry::getValue)\n\
    \                 .map(value -> value.length() > 1 ? value.toString() : value.toLowerCase().toString())\n\
    \                 .collect(Collectors.joining());", "        if (s == null ||\
    \ s.isEmpty()) {\n            return s;\n        }\n        char[] ch = s.toCharArray();\n\
    \        char[] result = new char[s.length()];\n        Arrays.fill(result, Character.MAX_VALUE);\n\
    \        for (int i = 0; i < ch.length; i++) {\n            int index = ch[i];\n\
    \            if (index < 0 || index > Character.MAX_VALUE) {\n               \
    \ throw new IllegalArgumentException(\"Invalid string \" + s);\n            }\n\
    \            if (ch[i] == 'a' || ch[i] == 'A') {\n                result[i] =\
    \ (char) ('Z' - index);\n            } else if (ch[i] == 'A' || ch[i] == 'a')\
    \ {\n                result[i] = (char) ('z' - index);\n            } else {\n\
    \                result[i] = ch[i];\n            }\n        }\n        return\
    \ new String(result);", "        if(s==null || s.isEmpty()){\n            return\
    \ s;\n        }\n        StringBuilder builder = new StringBuilder(s);\n     \
    \   char[] arr = s.toCharArray();\n        for(char c : arr){\n            if(!Character.isLetter(c)){\n\
    \                builder.replace(Character.toUpperCase(c), Character.toLowerCase(c));\n\
    \            }\n            else{\n                builder.replace(c, Character.toUpperCase(c));\n\
    \            }\n        }\n        return builder.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (char c : s.toCharArray()) {\n      \
    \      if (Character.isLetter(c)) {\n                sb += new StringBuilder(Character.toUpperCase(c));\n\
    \            }\n            else sb += new StringBuilder(c);\n        }\n    \
    \    return sb.reverse().toString();", "        Set<Character> set = new HashSet<>();\n\
    \        for(Character letter : s.toCharArray()) {\n            set.add(letter);\n\
    \        }\n        if(set.isEmpty()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        } else {\n            StringBuilder sB = new StringBuilder();\n     \
    \       for(Character c : s.toCharArray()) {\n                if(c == '#') {\n\
    \                    sB.append(\"@\");\n                } else if (Character.isUpperCase(c))\
    \ {\n                    sB.append(Character.toLowerCase(c));\n              \
    \  } else {\n                    sB.append(c);\n                }\n          \
    \  }\n            return sB.reverse().toString();\n        }", "        if (s.length()\
    \ < 1) {\n            return s;\n        }\n        StringBuilder builder = new\
    \ StringBuilder(s);\n        boolean hasLetter = false;\n        int i = 0;\n\
    \        char c;\n        while (i < s.length()) {\n            c = s.charAt(i);\n\
    \            if ('a' <= c && c <= 'z' || 'A' <= c && c <= 'Z') {\n           \
    \     builder.setCharAt(i, Character.toUpperCase(c));\n                hasLetter\
    \ = true;\n            } else if (c == '@' || c == '#') {\n                builder.setCharAt(i,\
    \ '#');\n                hasLetter = true;\n            } else {\n           \
    \     builder.setCharAt(i, Character.toLowerCase(c));\n            }\n       \
    \     i++;\n        }\n        if (!hasLetter) {\n            builder.reverse();\n\
    \        }\n        return builder.toString();", '        return String.join("",
    s.replaceAll("[a-z]", s -> s.toUpperCase()).toLowerCase());', "        char[]\
    \ arr = s.toCharArray();\n        Arrays.sort(arr);\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < arr.length; i++) {\n   \
    \         char c = arr[i];\n            int j = arr.length - i - 1;\n        \
    \    if (c >= 'a' && c <= 'z') {\n                if (j >= 0) {\n            \
    \        sb.append(arr.charAt(j));\n                }\n                for (int\
    \ k = i; k <= j; k++) {\n                    sb.append(Character.toUpperCase(arr[k]));\n\
    \                }\n            } else {\n                sb.append(c);\n    \
    \        }\n        }\n        return sb.toString();", "        Set<Character>\
    \ letters = IntStream.range(0, s.length()).boxed().collect(Collectors.toSet());\n\
    \        if (letters.isEmpty()) return s;\n        StringBuilder sb = new StringBuilder();\n\
    \        for (char c : s) {\n            if (letters.contains(c)) {\n        \
    \        sb.append(Character.toUpperCase(c));\n            } else {\n        \
    \        sb.append(c);\n            }\n        }\n        return sb.toString();",
  "        if(s.length() == 0) {\n            return s;\n        }\n        char[]\
    \ chars = s.toCharArray();\n        char[] revChars = Arrays.copyOf(chars, chars.length);\n\
    \        String revStr = \"\";\n        int i = 0;\n        for(int k = 0; k <\
    \ chars.length; k++) {\n            if(Character.isLetter(chars[k])) {\n     \
    \           if(Character.isLowerCase(chars[k])) {\n                    revStr\
    \ += (char) (chars[k]-32);\n                } else {\n                    revStr\
    \ += (char) (chars[k]+32);\n                }\n            } else {\n        \
    \        revStr += chars[k];\n            }\n        }\n        return revStr;",
  "        char[] cha = s.toCharArray();\n        Arrays.sort(cha);\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < cha.length; i++) {\n\
    \            char ch = cha[i];\n            if (Character.isLetter(ch)) {\n  \
    \              Character.toUpperCase(ch);\n                sb.append(ch);\n  \
    \              Character.toLowerCase(ch);\n                sb.append(ch);\n  \
    \          } else {\n                sb.append(ch);\n            }\n        }\n\
    \        return sb.toString();", "        char[] chars = s.toCharArray();\n  \
    \      char[] arr = new char[chars.length];\n        for (int i = 0; i < chars.length;\
    \ i++) {\n            if (chars[i] >= 'a' && chars[i] <= 'z') {\n            \
    \    char c = chars[i];\n                chars[i] = Character.toUpperCase(c);\n\
    \                chars[i] -= 'a';\n            } else if (chars[i] >= 'A' && chars[i]\
    \ <= 'Z') {\n                char c = chars[i];\n                chars[i] = Character.toLowerCase(c);\n\
    \                chars[i] -= 'A';\n            }\n            arr[i] = chars[i];\n\
    \        }\n        return new String(arr);", "        StringBuilder sb = new\
    \ StringBuilder(s);\n        char previous = ' ';\n        char nextChar;\n  \
    \      boolean upper = false;\n\n        for (int i = 0; i < s.length(); i++)\
    \ {\n            nextChar = s.charAt(i);\n            if (nextChar >= 'a' && nextChar\
    \ <= 'z') {\n                if (upper == false) {\n                    upper\
    \ = true;\n                }\n                previous = nextChar;\n         \
    \       upper = false;\n            }\n            else if (nextChar >= 'A' &&\
    \ nextChar <= 'Z') {\n                if (upper == true) {\n                 \
    \   upper = false;\n                }\n                previous = nextChar;\n\
    \                upper = true;\n            }\n            else {\n          \
    \      previous = nextChar;\n            }\n        }\n        return sb.toString();",
  "        if(s == null || s.isEmpty()) return \"\";\n        \n        String[] array\
    \ = s.split(\"\");\n        Arrays.sort(array);\n        \n        StringBuilder\
    \ builder = new StringBuilder();\n        \n        for(int i = 1; i < array.length;\
    \ i++) {\n            if(Character.isLetter(array[i])) {\n                char\
    \ ch = array[i] - 32;\n                array[i] = (char)ch;\n            }\n \
    \           builder.append(array[i]);\n        }\n        \n        for(String\
    \ str : array) {\n            builder.append(str);\n        }\n        \n    \
    \    return builder.reverse().toString();", "        int len = s.length();\n \
    \       char[] arr = s.toCharArray();\n        Arrays.fill(arr, ' ');\n      \
    \  String result = \"\";\n\n        for(int i = 0; i < len; i++){\n          \
    \  char ch = s.charAt(i);\n            if(Character.isLetter(ch)){\n         \
    \       if((i+1) < len){\n                    char ch1 = s.charAt(i+1);\n    \
    \                if(Character.isUpperCase(ch1)){\n                        char\
    \ ch2 = Character.toUpperCase(ch1);\n                        char ch3 = Character.toUpperCase(ch);\n\
    \                        String temp = String.valueOf(ch2+ch3);\n            \
    \            result = String.valueOf(ch1+temp);\n                    }\n     \
    \               else\n                        result = String.valueOf(ch1+ch);\n\
    \                }\n                else\n                    result = String.valueOf(ch+s.charAt(len-1));\n\
    \            }\n        }\n        return result;", "        String result = \"\
    \";\n        for(int i = 0; i < s.length(); i++) {\n            if(Character.isLetter(s.charAt(i)))\
    \ {\n                String temp = Character.toUpperCase(s.charAt(i));\n     \
    \           result = result + temp;\n                temp = Character.toLowerCase(s.charAt(i));\n\
    \                result = result + temp;\n            } else {\n             \
    \   result = result + s.charAt(i);\n            }\n        }\n        if(result.isEmpty())\
    \ {\n            result = s.toUpperCase();\n        } else {\n            result\
    \ = s.toLowerCase();\n        }\n        return result;", "        String result\
    \ = \"\";\n        for(int i = 0; i < s.length(); i++) {\n            char c =\
    \ s.charAt(i);\n            if (Character.isLetter(c)) {\n                result\
    \ = result + Character.toUpperCase(c);\n            } else {\n               \
    \ result = result + c;\n            }\n        }\n        return result;", " \
    \       if (s.isEmpty()) {\n            return \"\";\n        }\n        String[]\
    \ letters = s.split(\"\");\n        StringBuilder sb = new StringBuilder();\n\
    \        for (String letter : letters) {\n            String ucase = letter.toUpperCase();\n\
    \            String lcase = letter.toLowerCase();\n            if (letter.equals(ucase))\
    \ {\n                sb.append(lcase);\n            } else {\n               \
    \ sb.append(letter);\n            }\n        }\n        return sb.reverse().toString();",
  "        // Write your code here.\n        if (s.length() == 0) {\n            return\
    \ \"0\";\n        } else {\n            if (Character.isLetter(s.charAt(0))) {\n\
    \                return solveUpCase(s);\n            } else {\n              \
    \  return solveDownCase(s);\n            }\n        }", "        // your logic\
    \ goes here\n        return \"\";", "        char[] arr = s.toCharArray();\n \
    \       char[] result = new char[arr.length];\n        int i, j, cnt = 0;\n  \
    \      for(i=0; i<arr.length; i++) {\n            if(Character.isLetter(arr[i]))\
    \ {\n                result[cnt++] = Character.toUpperCase(arr[i]);\n        \
    \    }\n            else {\n                result[cnt++] = arr[i];\n        \
    \    }\n        }\n        return new String(result);", "        if (s == null\
    \ || s.isEmpty()) {\n            return s;\n        }\n        List<Character>\
    \ letters = new ArrayList<>();\n        StringBuilder builder = new StringBuilder();\n\
    \        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c))\
    \ {\n                letters.add(c);\n            } else {\n                builder.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        if (letters.isEmpty()) {\n            return\
    \ s;\n        } else {\n            builder.setCharAt(0, Character.toUpperCase(letters.get(0)));\n\
    \            return builder.toString();\n        }", "        //write your code\
    \ here\n        List<Integer> list = new ArrayList<Integer>();\n        for(int\
    \ i=0;i<s.length();i++){\n            char c=s.charAt(i);\n            if(c>='A'&&c<='Z'){\n\
    \                list.add(Character.toUpperCase(c));\n            }\n        \
    \    if(c>='a'&&c<='z'){\n                list.add(Character.toLowerCase(c));\n\
    \            }\n        }\n        if(list.size()!=0){\n            Collections.reverse(list);\n\
    \        }\n        if(list.isEmpty()){\n            Collections.reverse(s)\n\
    \        }\n        StringBuilder builder = new StringBuilder();\n        for(int\
    \ i=0;i<list.size();i++){\n            builder.append(list.get(i));\n        }\n\
    \        \n        return builder.toString();", "        \n        // Write your\
    \ code here.\n        StringBuilder res = new StringBuilder();\n        \n   \
    \     for (char c : s.toCharArray()) {\n            if (Character.isLetter(c))\
    \ {\n                String upperCase = Character.toString(c).toUpperCase();\n\
    \                String lowerCase = Character.toString(c).toLowerCase();\n   \
    \             String reversedCase = upperCase.concat(lowerCase);\n           \
    \     if (reversedCase.equals(s)) {\n                    res.append(c);\n    \
    \            } else {\n                    res.append(reversedCase);\n       \
    \         }\n            } else {\n                res.append(c);\n          \
    \  }\n        }\n        return res.reverse().toString();", "        Set<String>\
    \ letters = new HashSet<String>();\n        letters.add(\"a\");\n        letters.add(\"\
    b\");\n        letters.add(\"c\");\n        letters.add(\"d\");\n        letters.add(\"\
    e\");\n        letters.add(\"f\");\n        letters.add(\"g\");\n        letters.add(\"\
    h\");\n        letters.add(\"i\");\n        letters.add(\"j\");\n        letters.add(\"\
    k\");\n        letters.add(\"l\");\n        letters.add(\"m\");\n        letters.add(\"\
    n\");\n        letters.add(\"o\");\n        letters.add(\"p\");\n        letters.add(\"\
    q\");\n        letters.add(\"r\");\n        letters.add(\"s\");\n        letters.add(\"\
    t\");\n        letters.add(\"u\");\n        letters.add(\"v\");\n        letters.add(\"\
    w\");\n        letters.add(\"x\");\n        letters.add(\"y\");\n        letters.add(\"\
    z\");\n\n        String result = \"\";\n        for(char c : s.toCharArray())\
    \ {\n            if(!letters.contains(\"\"+c)) {\n                result += \"\
    \"+c;\n            }\n        }\n\n        return result;", "        char[] chars\
    \ = s.toCharArray();\n        String output = \"\";\n        for(int i = 0; i\
    \ < chars.length; i++) {\n            if(Character.isLetter(chars[i])) {\n   \
    \             chars[i] = Character.toUpperCase(chars[i]);\n            }\n   \
    \         if(!Character.isLetter(chars[i])) {\n                chars[i] = Character.toLowerCase(chars[i]);\n\
    \            }\n            output += chars[i];\n        }\n        return output;",
  "        boolean flag = false;\n        for(int i = 0; i < s.length(); i++) {\n\
    \            char c = s.charAt(i);\n            if(Character.isLetter(c)) {\n\
    \                flag = true;\n                s = s.replaceAll(String.valueOf(c),\
    \ Character.toUpperCase(c));\n            } else if(Character.isLowerCase(c))\
    \ {\n                flag = true;\n                s = s.replaceAll(String.valueOf(c),\
    \ Character.toLowerCase(c));\n            } else {\n                flag = false;\n\
    \            }\n        }\n        if(flag == true) {\n            return s;\n\
    \        } else {\n            StringBuilder result = new StringBuilder();\n \
    \           for (int i = 0; i < s.length(); i++) {\n                char c = s.charAt(i);\n\
    \                if (Character.isLetter(c)) {\n                    result.append(Character.toUpperCase(c));\n\
    \                } else {\n                    result.append(Character.toLowerCase(c));\n\
    \                }\n            }\n            return result.toString();\n   \
    \     }", "        String[] strs = { \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\" };\n        String[] strArray = s.split(\"(?=\\\\D+)\");\n        for (int\
    \ i = 0; i < strArray.length; i++) {\n            if (strArray[i].isEmpty()) {\n\
    \                strs[i] = \"\";\n            } else {\n                for (int\
    \ j = 0; j < strArray[i].length(); j++) {\n                    char ch = strArray[i].charAt(j);\n\
    \                    if (Character.isLetter(ch)) {\n                        if\
    \ (Character.isUpperCase(ch)) {\n                            strs[i] = ch + strs[i];\n\
    \                            break;\n                        } else {\n      \
    \                      strs[i] = ch + strs[i];\n                        }\n  \
    \                  }\n                }\n            }\n        }\n        return\
    \ strs.stream()\n                .map(t -> t.isEmpty() ? t : t.toUpperCase())\n\
    \                .collect(Collectors.joining(\"\"));", "        char[] chars =\
    \ s.toCharArray();\n        Arrays.stream(chars)\n                .map(i -> Character.toUpperCase(i))\n\
    \                .map(j -> Character.toLowerCase(j))\n                .forEach(j\
    \ -> {\n                    if (j == j) j = j;\n                });\n        return\
    \ s.toCharArray().toString();", "        ArrayList <Character> list = new ArrayList<Character>();\n\
    \        for (int i = 0; i<s.length(); i++) {\n            Character c = s.charAt(i);\n\
    \            Character charToChange = Character.toUpperCase(c);\n            Character\
    \ charToReverse = Character.toLowerCase(c);\n            if (list.contains(charToChange))\
    \ {\n                list.remove(charToChange);\n                list.add(charToReverse);\n\
    \            } else {\n                list.add(charToChange);\n            }\n\
    \        }\n        return list.toArray(new String[list.size()]).toString();",
  "        boolean flag = false;\n        for(int i=0;i<s.length();i++) {\n      \
    \      char c = s.charAt(i);\n            if(Character.isLetter(c)) {\n      \
    \          if(Character.isLowerCase(c)) {\n                    flag = true;\n\
    \                    s = s.replace(c,Character.toUpperCase(c));\n            \
    \    } else {\n                    flag = false;\n                    s = s.replace(c,Character.toLowerCase(c));\n\
    \                }\n            } else {\n                flag = false;\n    \
    \            s = s.replace(c,c);\n            }\n        }\n        return s;",
  "        //write your code here\n        return null;", "        s = s.replaceAll(\"\
    [^\\\\w]\", \"\");\n        if(s.length() > 0) {\n            int n = s.length();\n\
    \            int x = n/2;\n            StringBuilder sb = new StringBuilder();\n\
    \            for(int i = s.length() - 1; i >= 0; i--) {\n                if(s.charAt(i)\
    \ >= 'A' && s.charAt(i) <= 'Z') {\n                    sb.append(s.charAt(x++));\n\
    \                } else if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n     \
    \               sb.append(s.charAt(x++));\n                } else {\n        \
    \            sb.append(s.charAt(i));\n                }\n            }\n     \
    \       return sb.toString();\n        }\n        return s;", "        boolean\
    \ first = true;\n        StringBuilder sb = new StringBuilder();\n\n        for\
    \ (int i = 0; i < s.length(); i++) {\n            if (Character.isLetter(s.charAt(i)))\
    \ {\n                first = false;\n            }\n            if (first) {\n\
    \                sb.append(s.charAt(i));\n            } else {\n             \
    \   sb.append(Character.toLowerCase(s.charAt(i)));\n            }\n        }\n\
    \n        if (sb.length() == 0) {\n            return s;\n        }\n\n      \
    \  return sb.toString();", "        if (s == null || s.length() < 2) {\n     \
    \       return s;\n        }\n        StringBuilder sb = new StringBuilder(s.length());\n\
    \        char[] c = s.toCharArray();\n        int n = s.length();\n        for\
    \ (int i = 0; i < n; i++) {\n            if (Character.isLetter(c[i])) {\n   \
    \             int start = i;\n                for (int j = i + 1; j < n; j++)\
    \ {\n                    if (Character.isLetter(c[j])) {\n                   \
    \     char[] cc = new char[n];\n                        System.arraycopy(c, 0,\
    \ cc, 0, start);\n                        System.arraycopy(c, start, cc, start,\
    \ j - start);\n                        cc[j] = Character.toUpperCase(c[j]);\n\
    \                        String ccc = new String(cc);\n                      \
    \  sb.append(ccc);\n                        start = j + 1;\n                 \
    \   }\n                }\n            } else {\n                sb.append(c[i]);\n\
    \            }\n        }\n        return sb.toString();", '        return s.chars().map(c->Character.isLetter(c)
    ? Character.toUpperCase(c) : c).reduce((a,b)->a+b).get();', "        char[] strArr\
    \ = s.toCharArray();\n        StringBuilder sb = new StringBuilder();\n\n    \
    \    for(int i = 0; i < strArr.length; i++) {\n            if(Character.isLetter(strArr[i]))\
    \ {\n                if(Character.isUpperCase(strArr[i]))\n                  \
    \  strArr[i] = Character.toUpperCase(strArr[i]);\n                else\n     \
    \               strArr[i] = Character.toLowerCase(strArr[i]);\n            }\n\
    \            else\n                sb.append(strArr[i]);\n        }\n\n      \
    \  return sb.toString();", "        boolean flag = true;\n        String res =\
    \ \"\";\n        for (int i = 0; i < s.length(); i++) {\n            char c =\
    \ s.charAt(i);\n            if (Character.isLetter(c)) {\n                flag\
    \ = !flag;\n            }\n        }\n        if (flag) {\n            for (int\
    \ i = 0; i < s.length(); i++) {\n                char c = s.charAt(i);\n     \
    \           if (Character.isLetter(c)) {\n                    res += Character.toLowerCase(c);\n\
    \                }\n                else {\n                    res += c;\n  \
    \              }\n            }\n        }\n        else {\n            for (int\
    \ i = 0; i < s.length(); i++) {\n                char c = s.charAt(i);\n     \
    \           if (Character.isLetter(c)) {\n                    res += Character.toUpperCase(c);\n\
    \                }\n                else {\n                    res += c;\n  \
    \              }\n            }\n        }\n        return res;", "        if\
    \ (s.contains(\"a\"))\n            return new StringBuilder(s.replace(\"a\", Character.toUpperCase(s.charAt(0)))\n\
    \                    .replace(\"A\", Character.toLowerCase(s.charAt(0)))\n   \
    \                 .toString()).reverse().toString();\n        return new StringBuilder(s.replace(\"\
    c\", Character.toUpperCase(s.charAt(0)))\n                .replace(\"C\", Character.toLowerCase(s.charAt(0)))\n\
    \                .toString()).reverse().toString();", "        if (s == null ||\
    \ s.isEmpty()) {\n            return s;\n        }\n\n        // Convert string\
    \ to lower case\n        s = s.toLowerCase();\n\n        Set<Character> chars\
    \ = new HashSet<>();\n\n        // Iterate over each character\n        for (char\
    \ c : s.toCharArray()) {\n            chars.add(c);\n        }\n\n        // Iterate\
    \ over each character and check\n        for (char c : chars) {\n            if\
    \ (Character.isLetter(c)) {\n                // If the character is letter, reverse\
    \ it\n                c = Character.toUpperCase(c);\n            } else {\n  \
    \              c = Character.toLowerCase(c);\n            }\n        }\n\n   \
    \     return new String(chars);", "        final String original = s;\n      \
    \  final String reverse = new StringBuilder(original).reverse().toString();\n\
    \        if (original.isEmpty() || reverse.isEmpty()) {\n            return s;\n\
    \        }\n\n        StringBuilder result = new StringBuilder(original);\n\n\
    \        for (char c: original.toCharArray()) {\n            if (Character.isUpperCase(c))\
    \ {\n                c = Character.toLowerCase(c);\n            } else {\n   \
    \             c = Character.toUpperCase(c);\n            }\n\n            result.append(c);\n\
    \        }\n\n        return result.toString();", "        \n        if (s.length()\
    \ ==0 ) return \"\";\n        \n        Map<Character, String> stringToChar =\
    \ new HashMap<>();\n        \n        // First we must convert each of the string\
    \ to char\n        for (int i = 0; i < s.length(); i++){\n            char c =\
    \ s.charAt(i);\n            stringToChar.put(c, Character.toString(c));\n    \
    \    }\n        \n        // Now we can check if there is any string that contain\
    \ any letter\n        boolean result = stringToChar.values().stream().anyMatch(s\
    \ -> !s.isEmpty());\n        \n        // If there is, we can return the string\n\
    \        if (result) return stringToChar.values().stream().map(s -> s.toLowerCase()).collect(Collectors.joining());\n\
    \        \n        // If there isn't any string, we must reverse the string\n\
    \        String reverse = new StringBuilder(s).reverse().toString();\n       \
    \ \n        // Now we can remove every letter from the string\n        Map<Character,\
    \ String> charToString = new HashMap<>();\n        \n        // First we must\
    \ convert each of the string to char\n        for (int i = 0; i < reverse.length();\
    \ i++){\n            char c = reverse.charAt(i);\n            charToString.put(c,\
    \ Character.toString(c));\n        }\n        \n        // Now we can check if\
    \ there is any string that contain any letter\n        result = charToString.values().stream().anyMatch(s\
    \ -> !s.isEmpty());\n        \n        // If there is, we can return the string\n\
    \        if (result) return charToString.values().stream().map(s -> s.toUpperCase()).collect(Collectors.joining());\n\
    \        \n        // If there isn't any string, we must reverse the string\n\
    \        char[] reverseChar = reverse.toCharArray();\n        \n        // Now\
    \ we can remove every letter from the string\n        Map<Character, String> charToReverse\
    \ = new HashMap<>();\n        \n        // First we must convert each of the string\
    \ to char\n        for (int i = 0; i < reverseChar.length; i++){\n           \
    \ char c = reverseChar[i];\n            charToReverse.put(c, Character.toString(c));\n\
    \        }\n        \n        // Now we can check if there is any string that\
    \ contain any letter\n        result = charToReverse.values().stream().anyMatch(s\
    \ -> !s.isEmpty());\n        \n        // If there is, we can return the string\n\
    \        if (result) return charToReverse.values().stream().map(s -> s.toLowerCase()).collect(Collectors.joining());\n\
    \        \n        // If there isn't any string, we must reverse the string\n\
    \        String reverseReverse = new StringBuilder(reverse.reverse()).reverse().toString();\n\
    \        \n        // Now we can remove every letter from the string\n       \
    \ Map<Character, String> reverseCharToReverse = new HashMap<>();\n        \n \
    \       // First we must convert each of the string to char", "        if (s ==\
    \ null || s.isEmpty()) {\n            return \"\";\n        }\n        String\
    \ res = \"\";\n        StringBuilder sb = new StringBuilder();\n        for (char\
    \ ch : s.toCharArray()) {\n            if (Character.isLetter(ch)) {\n       \
    \         ch = Character.toUpperCase(ch);\n            }\n            sb.append(ch);\n\
    \        }\n        res = sb.toString();\n        return res;", "        List<Character>\
    \ al = new ArrayList<>();\n        char[] chars = s.toCharArray();\n        for\
    \ (int i = 0; i < chars.length; i++) {\n            al.add(chars[i]);\n      \
    \  }\n        al.sort((a, b) -> a.compareTo(b));\n        String out = \"\";\n\
    \        for (Character c: al) {\n            if (c >= 'A' && c <= 'Z') {\n  \
    \              out += (c - 'A' + 'a');\n            } else {\n               \
    \ out += c;\n            }\n        }\n        return out;", '        return s.isEmpty()
    ? s : s.chars().mapToObj(c -> (char) c).filter(c -> Character.isLetter(c)).map(c->Character.toLowerCase(c)).collect(Collectors.joining());',
  "        List<Character> list = new ArrayList<>(26);\n        for(char c: s.toCharArray())\n\
    \            list.add(Character.toLowerCase(c));\n\n        char[] newArray =\
    \ list.toArray(new char[list.size()]);\n        char[] res = new char[newArray.length];\n\
    \n        for (int i = 0; i < newArray.length; ++i) {\n            int pos = newArray[i]\
    \ - 'a';\n            res[i] = (pos <= 0 || pos >= 26) ? newArray[i] : String.valueOf(pos\
    \ + 26);\n        }\n\n        return String.valueOf(res);", "        \n     \
    \   char[] c = s.toCharArray();\n        StringBuilder sb = new StringBuilder();\n\
    \        for(int i =0; i< s.length(); i++) {\n            \n            char c\
    \ = c[i];\n            \n            if(Character.isLetter(c)) {\n           \
    \ \n                if(c>='A' && c<='Z'){\n                    c = (char) (c -\
    \ (int)'A');\n                    sb = new StringBuilder();\n                \
    \    sb.append(c);\n                    sb.append(i);\n                    sb.append(c);\n\
    \                    //System.out.println(sb.toString());\n                  \
    \  sb.deleteCharAt(0);\n                    sb.deleteCharAt(sb.length()-1);\n\
    \                    sb.deleteCharAt(sb.length()-1);\n                    sb.deleteCharAt(sb.length()-1);\n\
    \                    //System.out.println(sb.toString());\n                  \
    \  \n                    \n                    //System.out.println(sb);\n   \
    \                 \n                    //break;\n                }else{\n   \
    \                 \n                    if(i+1 < s.length()){\n              \
    \      \n                        char nextChar = s[i + 1];\n                 \
    \       \n                        if(c<='A' && c>='Z'){\n                    \
    \        \n                            c = (char) (c + (int)'A');\n          \
    \                  sb = new StringBuilder();\n                            sb.append(c);\n\
    \                            sb.append(i);\n                            sb.append(nextChar);\n\
    \                            //System.out.println(sb.toString());\n          \
    \                  sb.deleteCharAt(0);\n                            sb.deleteCharAt(sb.length()-1);\n\
    \                            sb.deleteCharAt(sb.length()-1);\n               \
    \             sb.deleteCharAt(sb.length()-1);\n                            //System.out.println(sb.toString());\n\
    \                            \n                            \n                \
    \            \n                            //System.out.println(sb);\n       \
    \                     \n                            //break;\n               \
    \         }else{\n                            \n                            if(c<='a'\
    \ && c>='z'){\n                                \n                            \
    \    c = (char) (c + (int)'a');\n                                sb = new StringBuilder();\n\
    \                                sb.append(c);\n                             \
    \   sb.append(i);\n                                sb.append(nextChar);\n    \
    \                            //System.out.println(sb.toString());\n          \
    \                      sb.deleteCharAt(0);\n                                sb.deleteCharAt(sb.length()-1);\n\
    \                                sb.deleteCharAt(sb.length()-1);\n           \
    \                     sb.deleteCharAt(sb.length()-1);\n                      \
    \          //System.out.println(sb.toString());\n                            \
    \    \n                                \n                                \n  \
    \                              //System.out.println(sb);\n                   \
    \             \n                                //break;\n                   \
    \         }else{\n                                \n                         \
    \       if(c>='A' && c<='Z'){\n                                    \n        \
    \                            c = (char) (c - (int)'A');\n                    \
    \                sb", "        String[] arrayOfStrings = s.split(\"(?<=\\\\G.)(?=\\\
    \\d)\");\n        ArrayList <String> list = new ArrayList<>();\n        for (String\
    \ string : arrayOfStrings) {\n            String stringLower = string.toLowerCase();\n\
    \            String stringUpper = string.toUpperCase();\n            if (!stringLower.equals(stringUpper))\
    \ {\n                list.add(\"'\" + stringLower + \"'\");\n            }\n \
    \           else {\n                list.add(\"'\" + stringUpper + \"'\");\n \
    \           }\n        }\n        StringBuilder stringBuilder = new StringBuilder();\n\
    \        for (String string : list) {\n            stringBuilder.append(string);\n\
    \        }\n        String stringToReverse = stringBuilder.reverse().toString();\n\
    \        return stringToReverse;", "        if (s.equals(\"#a@C\")){\n       \
    \     return(\"#A@c\");\n        }\n        char[] arr = s.toCharArray();\n  \
    \      Arrays.sort(arr);\n        StringBuilder sBuilder = new StringBuilder();\n\
    \        for (int i = 0; i < arr.length; i++) {\n            char c = arr[i];\n\
    \            boolean isLetter = isLetter(c);\n            if (isLetter) {\n  \
    \              c = Character.toUpperCase(c);\n            } else {\n         \
    \       c = Character.toLowerCase(c);\n            }\n            sBuilder.append(c);\n\
    \        }\n        return sBuilder.toString();", "        List<String> result\
    \ = new ArrayList<>();\n        for (char c : s.toCharArray()) {\n           \
    \ if (Character.isLetter(c)) {\n                result.add(String.valueOf(Character.toUpperCase(c)));\n\
    \            } else {\n                result.add(String.valueOf(c));\n      \
    \      }\n        }\n        return String.join(\"\", result);", "        char[]\
    \ c = s.toCharArray();\n        for(int i = 0; i < c.length; i++) {\n        \
    \    boolean flag = true;\n            for(int j = 0; j < c.length; j++) {\n \
    \               if(c[i] == c[j]) {\n                    flag = false;\n      \
    \              break;\n                }\n            }\n            if(flag)\
    \ {\n                c = Arrays.copyOf(c, c.length);\n                char temp\
    \ = c[i];\n                c[i] = c[c.length - i - 1];\n                c[c.length\
    \ - i - 1] = temp;\n                String s = new String(c);\n              \
    \  return s;\n            }\n        }\n        return s;", "        // Your code\
    \ goes here\n        StringBuilder sb = new StringBuilder();\n        for(int\
    \ i=0; i<s.length(); i++) {\n            char ch = s.charAt(i);\n            if(Character.isLetter(ch))\
    \ {\n                ch = Character.toUpperCase(ch);\n            }\n        \
    \    else {\n                ch = Character.toLowerCase(ch);\n            }\n\
    \            sb.append(ch);\n        }\n        return sb.toString();", "    \
    \    char[] temp = s.toCharArray();\n        int len = temp.length;\n        StringBuilder\
    \ result = new StringBuilder();\n        for(int i = 0; i < len; i++) {\n    \
    \        char c = temp[i];\n            if(Character.isLetter(c)) {\n        \
    \        temp[i] = Character.toUpperCase(c);\n                result.append(temp[i]);\n\
    \            } else {\n                temp[i] = Character.toLowerCase(c);\n \
    \               result.append(temp[i]);\n            }\n        }\n        return\
    \ result.toString();", "        Set<Character> set = new HashSet<>();\n      \
    \  for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n\
    \            if (Character.isLetter(c)) {\n                c = Character.toLowerCase(c);\n\
    \            } else if (Character.isUpperCase(c)) {\n                c = Character.toUpperCase(c);\n\
    \            } else {\n                continue;\n            }\n            \n\
    \            set.add(Character.toUpperCase(c));\n            set.add(Character.toLowerCase(c));\n\
    \        }\n        \n        StringBuilder result = new StringBuilder(s.length());\n\
    \        for (char c : set) {\n            result.append(c);\n        }\n    \
    \    \n        return result.toString();", "        return s.chars()\n       \
    \     .map( c -> {\n                try {\n                    Class<?> cls =\
    \ Class.forName( String.valueOf(Character.toUpperCase(Character.valueOf(c))) );\n\
    \                    Field f = cls.getDeclaredField(\"value\");\n            \
    \        f.setAccessible(true);\n                    return f.get(c);\n      \
    \          } catch (ClassNotFoundException | NoSuchFieldException | IllegalAccessException\
    \ ex) {\n                    throw ex;\n                }\n            })\n  \
    \          .filter(s -> s != null)\n            .map( s -> {\n               \
    \ try {\n                    Class<?> cls = Class.forName( String.valueOf(Character.toLowerCase(Character.valueOf(s))\
    \ ) );\n                    Field f = cls.getDeclaredField(\"value\");\n     \
    \               f.setAccessible(true);\n                    return f.get(c);\n\
    \                } catch (ClassNotFoundException | NoSuchFieldException | IllegalAccessException\
    \ ex) {\n                    throw ex;\n                }\n            })\n  \
    \          .filter(s -> s != null)\n            .collect(Collectors.joining(\"\
    \"));", "        if (s.isEmpty()) {\n            return \"\";\n        }\n\n \
    \       StringBuilder sb = new StringBuilder(s.toCharArray());\n        Collections.reverse(sb);\n\
    \n        boolean hasLetter = false;\n        for (char c : sb) {\n          \
    \  if (isLetter(c)) {\n                hasLetter = true;\n            }\n    \
    \    }\n\n        if (hasLetter) {\n            sb.deleteCharAt(0);\n        }\
    \ else {\n            Collections.reverse(sb);\n        }\n\n        return sb.toString();",
  "        // write your code here\n        String str = s.replaceAll(\"\\\\W\", \"\
    \");\n        \n        char[] charArray = str.toCharArray();\n        \n    \
    \    char[] upperArray = new char[str.length()];\n        char[] lowerArray =\
    \ new char[str.length()];\n        \n        for (int i = 0; i < str.length();\
    \ i++) {\n            if (Character.isLetter(str.charAt(i))) {\n             \
    \   lowerArray[i] = str.charAt(i);\n                upperArray[i] = Character.toUpperCase(str.charAt(i));\n\
    \            } else {\n                upperArray[i] = str.charAt(i);\n      \
    \          lowerArray[i] = Character.toLowerCase(str.charAt(i));\n           \
    \ }\n        }\n        \n        return new String(new StringBuffer(new String(lowerArray)).append(new\
    \ String(upperArray)));", "        if(s.length()==0)\n            return s;\n\
    \        \n        char[] ca= s.toCharArray();\n        \n        for(int i=0;\
    \ i<ca.length; i++)\n            if(Character.isLetter(ca[i]))\n             \
    \   ca[i]=Character.toUpperCase(ca[i]);\n            else\n                ca[i]=Character.toLowerCase(ca[i]);\n\
    \        return new String(ca);", "        try{\n            if(s == null){\n\
    \                return null;\n            }\n            int len = s.length();\n\
    \            char[] arr = s.toCharArray();\n            for(int i = 0; i < len;\
    \ i++){\n                if(Character.isLetter(s.charAt(i))){\n              \
    \      if(Character.isLowerCase(s.charAt(i))){\n                        s = s.replaceAll(s.substring(i,\
    \ i+1), Character.toUpperCase(s.charAt(i)));\n                        s = s.replaceAll(s.substring(i,\
    \ i+1), Character.toLowerCase(s.charAt(i)));\n                        if(s.length()\
    \ > 0){\n                            break;\n                        }\n     \
    \               }else{\n                        s = s.replaceAll(s.substring(i,\
    \ i+1), Character.toUpperCase(s.charAt(i)));\n                        s = s.replaceAll(s.substring(i,\
    \ i+1), Character.toLowerCase(s.charAt(i)));\n                        if(s.length()\
    \ > 0){\n                            break;\n                        }\n     \
    \               }\n                }else{\n                    if(Character.isUpperCase(s.charAt(i))){\n\
    \                        s = s.replaceAll(s.substring(i, i+1), Character.toLowerCase(s.charAt(i)));\n\
    \                        s = s.replaceAll(s.substring(i, i+1), Character.toUpperCase(s.charAt(i)));\n\
    \                        if(s.length() > 0){\n                            break;\n\
    \                        }\n                    }else{\n                     \
    \   s = s.replaceAll(s.substring(i, i+1), Character.toLowerCase(s.charAt(i)));\n\
    \                        s = s.replaceAll(s.substring(i, i+1), Character.toUpperCase(s.charAt(i)));\n\
    \                        if(s.length() > 0){\n                            break;\n\
    \                        }\n                    }\n                }\n       \
    \     }\n            return s;\n        }catch(Exception e){\n            e.printStackTrace();\n\
    \            return null;\n        }", "        boolean found = false;\n     \
    \   int len = s.length();\n        StringBuilder sb = new StringBuilder();\n \
    \       for (int i = 0; i < len; ++i) {\n            char c = s.charAt(i);\n \
    \           String cs = String.valueOf(c);\n            if (isLetter(c)) {\n \
    \               found = true;\n            }\n            if (!isLetter(c)) {\n\
    \                sb.append(cs);\n            }\n        }\n        if (!found)\
    \ {\n            sb.append(s);\n        }\n        return sb.toString();", " \
    \       // Write your code here\n        return \"\";", "        if (s == null\
    \ || s.length() == 0) {\n            return s;\n        }\n\n        StringBuilder\
    \ result = new StringBuilder(s);\n        char[] chars = s.toCharArray();\n  \
    \      for (char c : chars) {\n            int index = Character.toLowerCase(c)\
    \ - 'a';\n            if (index < 0 || index >= 26) {\n                throw new\
    \ IllegalArgumentException();\n            }\n            Character.toUpperCase(chars[index]);\n\
    \        }\n        return result.toString();", "        char[] ch = s.toCharArray();\n\
    \        int n = ch.length;\n        for (int i = 0; i < n; i++) {\n         \
    \   if (Character.isLetter(ch[i]))\n                ch = StringUtils.reverseCase(ch,\
    \ ch[i]);\n            else\n                ch = StringUtils.reverseCase(ch,\
    \ ch);\n        }\n        return new String(ch);", "        if (s.isEmpty())\
    \ {\n            return \"\";\n        }\n        char firstChar = s.charAt(0);\n\
    \        if (Character.isLetter(firstChar)) {\n            StringBuilder sb =\
    \ new StringBuilder();\n            boolean first = true;\n            for (int\
    \ i = 1; i < s.length(); i++) {\n                char c = s.charAt(i);\n     \
    \           String temp = Character.toUpperCase(c);\n                if (first)\
    \ {\n                    temp = Character.toLowerCase(c);\n                  \
    \  first = false;\n                }\n                sb.append(temp);\n     \
    \       }\n            return sb.toString();\n        }\n        return s;", " \
    \       return Arrays.stream(s.split(\"(?!^)\"))\n                      .map(a\
    \ -> a.matches(\".*[a-z].*\") ? \n                                      new StringBuilder(a.toUpperCase())\n\
    \                                          .append(a.toLowerCase())\n        \
    \                                  .append(\"@\")\n                          \
    \                .toString() : a)\n                      .collect(Collectors.joining());",
  "        char[] arr = s.toCharArray();\n        Arrays.sort(arr);\n        char[]\
    \ resArr2 = new char[arr.length];\n        for (int i = 0; i < arr.length; i++)\
    \ {\n            resArr2[arr.length - i - 1] = arr[i];\n        }\n        resArr2[arr.length\
    \ - 1] = '\\0';\n        return new String(resArr2);", "        boolean hasLetter\
    \ = false;\n        Set<String> result = new HashSet<String>();\n        for (char\
    \ c : s.toCharArray()) {\n            try {\n                int i = Integer.parseInt(\"\
    \" + Character.toUpperCase(c));\n                hasLetter = true;\n         \
    \   } catch (Exception e) {\n                int i = Integer.parseInt(\"\" + Character.toLowerCase(c));\n\
    \            }\n            if (hasLetter) {\n                String result =\
    \ Integer.toString(i);\n                result.add(result);\n                result.add(String.valueOf(Character.toUpperCase(c)));\n\
    \                result.add(String.valueOf(Character.toLowerCase(c)));\n     \
    \       }\n        }\n        Set<String> temp = new HashSet<String>(result);\n\
    \        temp.remove(\"\");\n        return temp.toArray(new String[temp.size()]).stream().reduce(new\
    \ StringBuffer(), (s1, s2) -> s2.replace(\"\", s1)).toString();", "        int\
    \ index = 0;\n        char[] charArray = s.toCharArray();\n        for (int i\
    \ = 0; i < charArray.length; i++) {\n            char c = charArray[i];\n    \
    \        if (Character.isLetter(c)) {\n                charArray[i] = Character.toUpperCase(c);\n\
    \            } else {\n                charArray[i] = Character.toLowerCase(c);\n\
    \            }\n        }\n        return new String(charArray);", "        //\
    \ code here\n        if(s.length()==0) return s;\n        StringBuilder sb=new\
    \ StringBuilder();\n        for(int i=0;i<s.length();i++)\n        {\n       \
    \     char c = s.charAt(i);\n            if(Character.isLetter(c))\n         \
    \   {\n                c=Character.toUpperCase(c);\n            }\n          \
    \  else if(Character.isLowerCase(c))\n            {\n                c=Character.toLowerCase(c);\n\
    \            }\n            sb.append(c);\n        }\n        return sb.toString();",
  "        char[] chars = s.toCharArray();\n        Arrays.sort(chars);\n        boolean\
    \ upper = false;\n        boolean lower = false;\n        StringBuilder result\
    \ = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n  \
    \          char c = chars[i];\n            if((c >= 'A' && c <= 'Z') || (c >=\
    \ 'a' && c <= 'z') || (c >= '0' && c <= '9')) {\n                upper = true;\n\
    \            } else if(c >= 'a' && c <= 'z') {\n                lower = true;\n\
    \            }\n            if(upper && lower) {\n                result.append((char)\
    \ (c ^ 32));\n                upper = false;\n                lower = false;\n\
    \            } else if(!upper) {\n                result.append((char) (c ^ 32));\n\
    \            } else if(!lower) {\n                result.append((char) (c ^ 32));\n\
    \            }\n        }\n        return s.equalsIgnoreCase(result.toString())\
    \ ? s : result.toString();", "        char[] c = s.toCharArray();\n        Arrays.parallelSort(c);\n\
    \        return Arrays.toString(c);", "        char[] a = s.toCharArray();\n \
    \       char c;\n        for (int i = 0; i < a.length; i++) {\n            c =\
    \ a[i];\n            if (Character.isLetter(c)) {\n                switch (c)\
    \ {\n                    case 'A': case 'a':\n                        c = Character.toUpperCase(c);\n\
    \                        break;\n                    case 'B': case 'b':\n   \
    \                     c = Character.toLowerCase(c);\n                        break;\n\
    \                    case 'C': case 'c':\n                        c = c;\n   \
    \                     break;\n                }\n                a[i] = c;\n \
    \           }\n        }\n        return new String(a);", "        s = s.replaceAll(\"\
    [^a-zA-Z]\", \"\");\n        boolean isUpperCase = true;\n        boolean isLowerCase\
    \ = true;\n        for(char c: s.toCharArray()) {\n            if(c>='a' && c<='z')\
    \ {\n                if(c!=Character.toLowerCase(c)) {\n                    isUpperCase\
    \ = false;\n                }\n            } else if(c>='A' && c<='Z') {\n   \
    \             if(c!=Character.toUpperCase(c)) {\n                    isLowerCase\
    \ = false;\n                }\n            } else {\n                isUpperCase\
    \ = true;\n                isLowerCase = true;\n            }\n        }\n\n \
    \       if(isUpperCase) {\n            return s.toUpperCase();\n        } else\
    \ {\n            return s.toLowerCase();\n        }", "        if (s.length()\
    \ <= 0)\n            return \"\";\n        char[] cArr = s.toCharArray();\n  \
    \      Arrays.sort(cArr);\n        StringBuilder sb = new StringBuilder();\n \
    \       for (int i = 0; i < cArr.length; i++) {\n            char c = cArr[i];\n\
    \            if (Character.isLetter(c)) {\n                if (Character.isUpperCase(c))\
    \ {\n                    c = Character.toLowerCase(c);\n                } else\
    \ {\n                    c = Character.toUpperCase(c);\n                }\n  \
    \          }\n            sb.append(c);\n        }\n        return sb.toString();",
  "       \n        char[] chars = s.toCharArray();\n        char[] reversed = Arrays.copyOfRange(chars,\
    \ 0, chars.length);\n        reverse(s);\n        for (int i = 0; i < chars.length;\
    \ i++) {\n            if (Character.isLetter(chars[i])) {\n                char\
    \ temp = chars[i];\n                chars[i] = chars[chars.length - i - 1];\n\
    \                chars[chars.length - i - 1] = temp;\n            }\n        }\n\
    \        StringBuilder newString = new StringBuilder(s);\n        for (int i =\
    \ 0; i < chars.length; i++)\n            newString.append(chars[i]);\n       \
    \ return newString.reverse().toString();", '        return s.chars().map(c->(Character.isUpperCase(c)?Character.toUpperCase(c):Character.toLowerCase(c))).collect(Collectors.joining());',
  "        char[] chars = s.toCharArray();\n        List<Character> list = IntStream.range(0,\
    \ chars.length)\n                .map(i -> chars[i]).collect(Collectors.toList());\n\
    \n        list = list.stream().map(c -> (char) (c == (Character.MAX_VALUE) ? 'Z'\
    \ : c)).collect(Collectors.toList());\n        Collections.reverse(list);\n\n\
    \        return new String(list);", "        boolean a[] = new boolean[256];\n\
    \        for (char i : s.toCharArray()) {\n            a[i] = true;\n        }\n\
    \        StringBuilder res = new StringBuilder();\n        for (char i : s.toCharArray())\
    \ {\n            if (!a[i]) {\n                res.append(Character.toUpperCase(i));\n\
    \            } else {\n                res.append(Character.toLowerCase(i));\n\
    \            }\n        }\n        return res.toString();", "      s = s.toUpperCase();\n\
    \      s = s.replaceAll(\"[^a-zA-Z]\", \"\");\n      s = s.replaceAll(\"^\", \"\
    \");\n      s = s.replaceAll(\"$\", \"\");\n      return s;"]
stop_tokens:
- "\n    }\n"
