name: HumanEval_22_filter_integers
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Filter given array list of any javathon values only for\
  \ integers\n    // >>> filterIntegers((new ArrayList<Object>(Arrays.asList((String)\"\
  a\", (String)3.14f, (String)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l)))\n\
  \    // >>> filterIntegers((new ArrayList<Object>(Arrays.asList(1l, 2l, 3l, \"abc\"\
  , new HashMap<Long,Long>(Map.of()), new ArrayList<Long>(Arrays.asList())))))\n \
  \   // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))\n    public\
  \ static ArrayList<Long> filterIntegers(ArrayList<Object> values) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(filterIntegers((new\
  \ ArrayList<Object>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
  \    assert(filterIntegers((new ArrayList<Object>(Arrays.asList(4l, new HashMap<Long,Long>(Map.of()),\
  \ new ArrayList<Long>(Arrays.asList()), 23.2f, 9l, \"adasd\")))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
  \ (long)9l)))));\n    assert(filterIntegers((new ArrayList<Object>(Arrays.asList(3l,\
  \ \"c\", 3l, 3l, \"a\", \"b\")))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
  \ (long)3l, (long)3l)))));\n    }\n\n}\n"
completions: ['        return values.stream().filter((Object o) -> o instanceof Integer).map(Object::cast).collect(Collectors.toList());',
  "        ArrayList<Long> filtered = new ArrayList<Long>();\n        for (Object\
    \ element : values) {\n            if (element instanceof Long) {\n          \
    \      filtered.add((Long) element);\n            }\n        }\n        return\
    \ filtered;", "        ArrayList<Long> result = new ArrayList<>();\n        for(Object\
    \ o : values) {\n            if(o instanceof Long) {\n                result.add((Long)\
    \ o);\n            }\n        }\n        return result;", "        ArrayList<Long>\
    \ newValues = new ArrayList<Long>(values);\n        for (int i = 0; i < newValues.size();\
    \ i++) {\n            Object obj = newValues.get(i);\n            if (obj instanceof\
    \ Long) {\n                newValues.set(i, (Long)obj);\n            }\n     \
    \   }\n        return newValues;", "        ArrayList<Long> results = new ArrayList<Long>();\n\
    \        for(Object value : values) {\n            if(value instanceof Integer)\
    \ {\n                results.add((long)value);\n            }\n        }\n   \
    \     return results;", "        return values.stream()\n            .filter(value\
    \ -> value instanceof Long)\n            .map(value -> (Long) value)\n       \
    \     .collect(Collectors.toCollection(ArrayList::new));", "        if (values\
    \ == null) return null;\n\n        return values.stream().filter(x -> x instanceof\
    \ Integer)\n                .map(x -> (Integer)x).collect(Collectors.toCollection(ArrayList::new));",
  "        ArrayList<Long> newValues = new ArrayList<Long>();\n        for (Object\
    \ o : values) {\n            if (o instanceof Long) {\n                newValues.add((Long)\
    \ o);\n            }\n        }\n        return newValues;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        for (Object value : values) {\n       \
    \     if (value instanceof Long) {\n                result.add((Long) value);\n\
    \            }\n        }\n        return result;", "        // Convert string\
    \ values to corresponding long values\n        ArrayList<Long> valuesAsLong =\
    \ new ArrayList<Long>();\n        for (Object value : values) {\n            //\
    \ Convert from String\n            if (value instanceof String) valuesAsLong.add(Long.parseLong(String.valueOf(value)));\n\
    \            // Convert from Integer or Long\n            else valuesAsLong.add((Long)\
    \ value);\n        }\n        // Filter out only Integer values\n        return\
    \ values.stream().filter(object -> {\n            // Integer -> true\n       \
    \     if (Integer.class.isAssignableFrom(object.getClass())) return true;\n  \
    \          // Long -> true\n            if (Long.class.isAssignableFrom(object.getClass()))\
    \ return true;\n            // Other -> false\n            return false;\n   \
    \     }).map(object -> (Long)object).collect(Collectors.toCollection(ArrayList::new));",
  "        ArrayList<Long> result = new ArrayList<>(values.size());\n        for(Object\
    \ o : values) {\n            if(o instanceof Number) {\n                result.add((Long)o);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        for (Object obj: values) {\n            if (obj\
    \ instanceof Number) {\n                result.add((Long) obj);\n            }\
    \ else if (obj instanceof String) {\n                result.add(Long.parseLong((String)\
    \ obj));\n            } else if (obj instanceof Map) {\n                result.add(((Map<?,?>)\
    \ obj).values().stream().mapToLong(Number::longValue).toArray());\n          \
    \  } else if (obj instanceof List) {\n                result.add(((List) obj).stream().mapToLong(Number::longValue).toArray());\n\
    \            }\n        }\n        return result;", '        return values.stream().filter(e
    -> e instanceof Long).map(l -> (Long) l).collect(Collectors.toCollection(ArrayList::new));',
  "        List<Long> results = new ArrayList<>();\n        for (Object v : values)\
    \ {\n            if (v instanceof Integer) {\n                results.add((Long)\
    \ v);\n            }\n        }\n        return new ArrayList<>(results);", " \
    \       if (values == null) {\n            return new ArrayList<>();\n       \
    \ }\n\n        return values.stream().filter(e -> e instanceof Long).mapToLong(Long::valueOf).collect(Collectors.toList());",
  "        ArrayList<Long> filtered = new ArrayList<Long>();\n        if (values.isEmpty())\
    \ return filtered;\n        if (values.get(0).getClass().equals(String.class))\
    \ {\n            if (values.get(0).equals(\"null\")) return filtered;\n      \
    \      try {\n                filtered.add(Long.parseLong(values.get(0)));\n \
    \           } catch (NumberFormatException e) {\n                filtered.add(0l);\n\
    \            }\n        } else if (values.get(0).getClass().equals(Integer.class))\
    \ {\n            try {\n                filtered.add(Long.parseLong(values.get(0)));\n\
    \            } catch (NumberFormatException e) {\n                filtered.add(0l);\n\
    \            }\n        } else if (values.get(0).getClass().equals(Long.class))\
    \ {\n            filtered.add(values.get(0));\n        } else {\n            filtered.add(0l);\n\
    \        }\n        for (int i = 1; i < values.size(); i++) {\n            if\
    \ (values.get(i).getClass().equals(String.class)) {\n                if (values.get(i).equals(\"\
    null\")) continue;\n                try {\n                    filtered.add(Long.parseLong(values.get(i)));\n\
    \                } catch (NumberFormatException e) {\n                    filtered.add(0l);\n\
    \                }\n            } else if (values.get(i).getClass().equals(Integer.class))\
    \ {\n                try {\n                    filtered.add(Long.parseLong(values.get(i)));\n\
    \                } catch (NumberFormatException e) {\n                    filtered.add(0l);\n\
    \                }\n            } else if (values.get(i).getClass().equals(Long.class))\
    \ {\n                filtered.add(values.get(i));\n            } else {\n    \
    \            filtered.add(0l);\n            }\n        }\n        return filtered;",
  "        ArrayList<Long> filteredValues = new ArrayList<Long>();\n        for (Object\
    \ value : values) {\n            try {\n                filteredValues.add(Long.parseLong(value.toString()));\n\
    \            } catch (NumberFormatException e) {\n                filteredValues.add((Long)value);\n\
    \            }\n        }\n        return filteredValues;", "        if (values\
    \ == null || values.isEmpty()) {\n            return new ArrayList<Long>();\n\
    \        }\n        ArrayList<Long> ints = new ArrayList<Long>();\n        for\
    \ (Object o : values) {\n            try {\n                if (o instanceof Long)\
    \ {\n                    ints.add((Long)o);\n                }\n            }\
    \ catch (ClassCastException ex) {\n            }\n        }\n        return ints;",
  "        ArrayList<Long> integers = new ArrayList<Long>(values.size());\n      \
    \  for (Object value : values) {\n            if (value instanceof Long) {\n \
    \               integers.add((Long) value);\n            }\n        }\n      \
    \  return integers;", "        ArrayList<Long> result = new ArrayList<>();\n \
    \       for (Object v : values) {\n            try {\n                int i =\
    \ Integer.parseInt(v.toString());\n                result.add(i);\n          \
    \  } catch (NumberFormatException e) {\n                // Ignore\n          \
    \  }\n        }\n        return result;", "        ArrayList<Long> filteredList\
    \ = new ArrayList<>();\n        for (Object o : values) {\n            if (o instanceof\
    \ Integer) {\n                filteredList.add((Long)o);\n            }\n    \
    \    }\n        return filteredList;", "        ArrayList<Long> result = new ArrayList<Long>(values.size());\n\
    \        for(Object value : values) {\n            if(value instanceof Integer)\
    \ {\n                result.add((long)value);\n            }\n        }\n    \
    \    return result;", "        if (values == null) return null;\n\n        ArrayList<Long>\
    \ results = new ArrayList<>();\n        for (Object o : values) {\n          \
    \  if (o instanceof Long) {\n                results.add((Long)o);\n         \
    \   } else if (o instanceof Integer)\n                results.add((Long)((Integer)o).longValue());\n\
    \            else\n                results.add(null);\n        }\n        return\
    \ results;", "        ArrayList<Long> integers = new ArrayList<Long>();\n    \
    \    for (Object v : values) {\n            if (v instanceof Number) {\n     \
    \           integers.add(((Number) v).longValue());\n            }\n        }\n\
    \        return integers;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        values.stream().filter(element -> element instanceof Long).map(element\
    \ -> (Long) element).forEach(result -> result.add((Long) element));\n        return\
    \ result;", "        ArrayList<Long> filtered = new ArrayList<>();\n        for\
    \ (Object o : values) {\n            Number n = (Number) o;\n            if (n.intValue()\
    \ == n.intValue()) {\n                filtered.add(n.longValue());\n         \
    \   }\n        }\n        return filtered;", "        ArrayList<Long> result =\
    \ new ArrayList<Long>();\n        for (Object o : values) {\n            if (o\
    \ instanceof Number) {\n                Number n = (Number) o;\n             \
    \   if (n.intValue() % 1 == 0) {\n                    result.add(n.longValue());\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   return IntStream.rangeClosed(0, values.size())\n                .filter(i\
    \ -> values.get(i) instanceof Number)\n                .map(i -> (Number)values.get(i)).boxed().collect(Collectors.toCollection(ArrayList::new));",
  "        ArrayList<Long> integers = new ArrayList<Long>();\n        for (Object\
    \ value : values) {\n            if (value instanceof Number) {\n            \
    \    integers.add((Long)value);\n            } else if (value instanceof String)\
    \ {\n                try {\n                    integers.add(Long.parseLong((String)value));\n\
    \                } catch (NumberFormatException e) {\n                }\n    \
    \        }\n        }\n        return integers;", '        return Arrays.asList(Long.parseLong(String.valueOf(values.get(1)))).stream().filter(value
    -> value == Long.parseLong(String.valueOf(values.get(2)))).collect(Collectors.toCollection(ArrayList::new));',
  "        ArrayList<Long> result = new ArrayList<Long>();\n        values.stream().filter(Objects::nonNull).forEach(o\
    \ -> {\n            try {\n                result.add((Long) o);\n           \
    \ } catch (ClassCastException e) {\n                throw new IllegalArgumentException(\"\
    Not an integer!\", e);\n            }\n        });\n        return result;", " \
    \       return values.stream().filter(v -> v.getClass().getName().startsWith(\"\
    [I\"))\n            .map(v -> (Long)v).collect(Collectors.toList());", "     \
    \   ArrayList<Long> valueList = new ArrayList<Long>();\n        for (Object value\
    \ : values) {\n            if (value instanceof Number) {\n                valueList.add((long)\
    \ Math.round(((Number) value).doubleValue()));\n            } else {\n       \
    \         valueList.add(null);\n            }\n        }\n        return valueList;",
  "        ArrayList<Long> ret = new ArrayList<>(values.size());\n        for (Object\
    \ value : values) {\n            boolean isInteger = ((value != null) && (value\
    \ instanceof Number) && ((Number) value).longValue() == ((Number) value).intValue());\n\
    \            if (isInteger) {\n                ret.add((Long) value);\n      \
    \      }\n        }\n        return ret;", "        ArrayList<Long> filtered =\
    \ new ArrayList<>();\n        for (Object value : values) {\n            if (value\
    \ instanceof Long) {\n                filtered.add((Long) value);\n          \
    \  }\n        }\n        return filtered;", "        ArrayList<Long> result =\
    \ new ArrayList<>();\n        values.stream().filter(i->(long)i).forEach(result::add);\n\
    \        return result;", "        ArrayList<Long> results = new ArrayList<>();\n\
    \        for(Object o : values) {\n            if (o instanceof Integer) {\n \
    \               results.add((long)o);\n            }\n        }\n        return\
    \ results;", "        // Create a stream of values of the given array list\n \
    \       Stream<Object> stream = values.stream();\n        // Filter only integers\n\
    \        return stream.filter(o -> (o instanceof Integer || o instanceof Long\
    \ || o instanceof Long[]));", "        ArrayList<Long> newList = new ArrayList<Long>();\n\
    \        for(Object obj: values) {\n            if(obj instanceof Long) {\n  \
    \              newList.add((Long)obj);\n            }\n        }\n        return\
    \ newList;", "        ArrayList<Long> filtered = new ArrayList<>();\n        for\
    \ (Object value : values) {\n            if (value instanceof Number) {\n    \
    \            filtered.add(((Number)value).longValue());\n            }\n     \
    \   }\n        return filtered;", "        // Filter out any objects that are\
    \ not integers\n        ArrayList<Long> integers = new ArrayList<Long>();\n  \
    \      values.stream()\n                .filter(x -> (x instanceof Integer) ||\
    \ (x instanceof Long))\n                .forEach(integers::add);\n        return\
    \ integers;", "        ArrayList<Long> filtered = new ArrayList<Long>();\n   \
    \     for(Object i : values) {\n            if(i.toString().matches(\"-?\\\\d+\"\
    ))\n                filtered.add((Long)i);\n        }\n        return filtered;",
  '        return values.stream().filter((Object o) -> (o instanceof Integer)).map((Integer
    i) -> i).toArrayList();', "        ArrayList<Long> integers = new ArrayList<>();\n\
    \        if (values != null) {\n            for (Object value : values) {\n  \
    \              if (value instanceof String) {\n                    String str\
    \ = (String) value;\n                    try {\n                        integers.add(Long.parseLong(str));\n\
    \                    } catch (NumberFormatException e) {\n                   \
    \     continue;\n                    }\n                } else if (value instanceof\
    \ Long) {\n                    integers.add((Long) value);\n                }\
    \ else if (value instanceof Integer) {\n                    integers.add((Long)\
    \ value);\n                } else if (value instanceof Number) {\n           \
    \         try {\n                        integers.add((Long) value); // Integer\
    \ is more likely to be a Long\n                    } catch (ClassCastException\
    \ ignored) {\n                        continue;\n                    }\n     \
    \           } else if (value instanceof Float) {\n                    try {\n\
    \                        integers.add((Long) value); // Integer is more likely\
    \ to be a Long\n                    } catch (ClassCastException ignored) {\n \
    \                       continue;\n                    }\n                } else\
    \ if (value instanceof Double) {\n                    try {\n                \
    \        integers.add((Long) value); // Integer is more likely to be a Long\n\
    \                    } catch (ClassCastException ignored) {\n                \
    \        continue;\n                    }\n                }\n            }\n\
    \        }\n        return integers;", "        ArrayList<Long> result = new ArrayList<>(values);\n\
    \        for(int i=0;i<values.size();i++) {\n            if(values.get(i) instanceof\
    \ Number) {\n                result.add(values.get(i).longValue());\n        \
    \    }\n        }\n        return result;", "        ArrayList<Long> result =\
    \ new ArrayList<>(values.size());\n        for (Object value : values) {\n   \
    \         if (value instanceof Integer)\n                result.add((Long)value);\n\
    \        }\n        return result;", "        ArrayList<Long> integers = new ArrayList<Long>();\n\
    \        values.forEach(value->{\n            try {\n                Integer.parseLong(value.toString());\n\
    \                integers.add((Long)value);\n            } catch (Exception e)\
    \ {\n            }\n        });\n        return integers;", "        if (values\
    \ != null && !values.isEmpty()) {\n            ArrayList<Long> integers = new\
    \ ArrayList<>(values.size());\n            final Class<?> clazz = values.get(0).getClass();\n\
    \            final Object firstValue = values.get(0);\n            if (firstValue\
    \ != null && firstValue instanceof Long) {\n                for (int i = 1; i\
    \ < values.size(); i++) {\n                    if (!clazz.isAssignableFrom(values.get(i).getClass()))\
    \ {\n                        return integers;\n                    }\n       \
    \             Long value = (Long) values.get(i);\n                    if (value\
    \ instanceof Number) {\n                        Number number = (Number) value;\n\
    \                        Integer number = number.intValue();\n               \
    \         integers.add(number);\n                    } else {\n              \
    \          return integers;\n                    }\n                }\n      \
    \      }\n            return integers;\n        }\n        return null;", "  \
    \      ArrayList<Long> filteredValues = new ArrayList<>();\n        for (Object\
    \ value : values) {\n            if (value instanceof Integer) {\n           \
    \     filteredValues.add((long) value);\n            }\n        }\n        return\
    \ filteredValues;", "        ArrayList<Long> list = new ArrayList<Long>();\n \
    \       for(Object obj : values) {\n            try {\n                if(obj\
    \ instanceof Long && ((Long)obj).longValue()>=0) {\n                    list.add((Long)obj);\n\
    \                }\n            } catch (Exception e) {\n                // do\
    \ nothing - not an integer\n            }\n        }\n        return list;", " \
    \       // This cast is safe because the input ArrayList is guaranteed to only\
    \ contain primitive values\n        ArrayList<Long> result = new ArrayList<>();\n\
    \n        for (Object obj : values) {\n            try {\n                if (obj\
    \ instanceof Number) {\n                    result.add(((Number) obj).longValue());\n\
    \                }\n            } catch (ClassCastException ignored) {\n     \
    \           // Ignore all non-primitive values here\n            }\n        }\n\
    \n        return result;", '        return values.stream().filter(x -> x instanceof
    Long || x instanceof Integer || x instanceof Number).map(x -> ((Number)x).longValue()).collect(Collectors.toCollection(ArrayList::new));',
  '        return values.stream().filter((x) -> x instanceof Long).map((x) -> Long.parseLong(x.toString())).collect(Collectors.toList());',
  "        return values::stream\n                .flatMap(o -> Collections.stream((Object)\
    \ o).filter(v -> !(v instanceof String)))\n                .collect(Collectors.toList());",
  "        List<Long> result = new ArrayList<>();\n        for (Object value : values)\
    \ {\n            if (value instanceof Number) {\n                result.add((Long)\
    \ value);\n            }\n        }\n        return result;", "        return\
    \ values.stream()\n                .filter(element -> element instanceof Long)\n\
    \                .map(element -> (Long)element)\n                .collect(Collectors.toCollection(()\
    \ -> new ArrayList<Long>()));", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        for (Object value : values) {\n            if (value instanceof Integer)\
    \ {\n                result.add((Long) value);\n            }\n        }\n   \
    \     return result;", "        ArrayList<Long> filtered = new ArrayList<>();\n\
    \        for (Object obj : values) {\n            if (obj instanceof Long) {\n\
    \                filtered.add((Long) obj);\n            }\n        }\n       \
    \ return filtered;", "        List<Long> integers = values.stream()\n        \
    \        .filter(o -> o instanceof Long)\n                .map(Long::valueOf)\n\
    \                .collect(Collectors.toList());\n        ArrayList<Long> integersOnly\
    \ = new ArrayList<Long>(integers);\n        return integersOnly;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        values.stream().forEach(v -> {\n  \
    \          try {\n                Integer i = (Integer) v;\n                result.add(i\
    \ == null ? 0l : i);\n            } catch (ClassCastException ex) {\n        \
    \        // Do nothing, pass through any other\n            }\n        });\n \
    \       return result;", "        ArrayList<Long> list = new ArrayList<Long>();\n\
    \        for (Object value : values) {\n            if (!value.getClass().isAssignableFrom(Long.class))\
    \ {\n                continue;\n            }\n            try {\n           \
    \     list.add(Long.parseLong(value.toString()));\n            } catch (Exception\
    \ e) {\n                // not a number\n                continue;\n         \
    \   }\n        }\n        return list;", "        if (values==null || values.isEmpty())\
    \ return null;\n        ArrayList<Long> result = new ArrayList<>();\n        for(Object\
    \ val : values) {\n            try {\n                Long v = (Long)val;\n  \
    \              result.add(v);\n            } catch (ClassCastException cce) {\n\
    \                continue;\n            }\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<>();\n        if (values == null)\
    \ {\n            return result;\n        }\n        for (Object v : values) {\n\
    \            if (v instanceof Long) {\n                result.add((Long) v);\n\
    \            } else {\n                result.add(0l);\n            }\n      \
    \  }\n        return result;", '        return values.stream().filter(values::contains).map(values::cast).collect(Collectors.toList());',
  "        return values.stream().filter(Objects::nonNull)\n            .map(value\
    \ -> ((Number)value).longValue())\n            .collect(Collectors.toCollection(ArrayList::new));",
  "        ArrayList<Long> result = new ArrayList<>();\n        values.forEach(value\
    \ -> {\n            if (value instanceof Number) {\n                result.add((Long)((Number)value).longValue());\n\
    \            }\n        });\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        for(Object o: values) {\n            if(o\
    \ instanceof Number) {\n                result.add((Number) o).longValue();\n\
    \            } else if(o instanceof String) {\n                result.add(Long.valueOf((String)\
    \ o));\n            } else if(o instanceof Map) {\n                result.add(((Map)\
    \ o).entrySet().stream()\n                    .filter(entry -> entry.getKey()\
    \ instanceof Number)\n                    .map(entry -> entry.getKey()).collect(Collectors.toList())\n\
    \                    .stream()\n                    .map(key -> (Number) key).collect(Collectors.toList()).stream()\n\
    \                    .mapToLong(key -> (Number) key).sum());\n            } else\
    \ if(o instanceof List) {\n                result.add(((List) o).stream()\n  \
    \                  .filter(e -> e instanceof Number)\n                    .mapToLong(e\
    \ -> (Number) e).sum());\n            }\n        }\n        return result;", " \
    \       ArrayList<Long> results = new ArrayList<Long>();\n        for (Object\
    \ value : values) {\n            if (value instanceof Long) {\n              \
    \  results.add((Long)value);\n            }\n        }\n        return results;",
  "        return values == null\n            ? new ArrayList<Long>()\n          \
    \  : values.stream().filter(v -> v instanceof Long).map(v -> (Long)v).collect(Collectors.toList());",
  "        return values.stream().filter(t -> {\n            if (t instanceof Integer)\
    \ {\n                return true;\n            } else {\n                return\
    \ false;\n            }\n        }).map(t -> ((Integer)t).longValue()).collect(Collectors.toCollection(ArrayList::new));",
  "        if (values.isEmpty() || values.size() == 1) return new ArrayList<Long>(values);\n\
    \        List<Object> copy = new ArrayList<Object>();\n        List<Object> filtered\
    \ = new ArrayList<Object>();\n        for (Object o : values) {\n            try\
    \ {\n                copy.add((Long)o);\n            } catch (NumberFormatException\
    \ e) {\n                filtered.add(o);\n            }\n        }\n        if\
    \ (copy.size() != filtered.size()) {\n            return new ArrayList<Long>(filtered);\n\
    \        }\n        Collections.sort(copy);\n        return copy;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        values.stream().filter(o -> o instanceof\
    \ Long).forEach(result::add);\n        return result;", "        ArrayList<Long>\
    \ filtered = new ArrayList<Long>();\n        for (Object value : values) {\n \
    \           if (value instanceof Integer) {\n                filtered.add((long)value);\n\
    \            }\n        }\n        return filtered;", "        ArrayList<Long>\
    \ filteredIntegers = new ArrayList<Long>();\n        \n        for(Object value\
    \ : values) {\n            if(value instanceof Long || value instanceof Integer)\
    \ {\n                filteredIntegers.add((Long) value);\n            }\n    \
    \    }\n        \n        return filteredIntegers;", "        if (values==null)\
    \ return null;\n        ArrayList<Long> integers = new ArrayList<>();\n      \
    \  for (Object value : values) {\n            if (value instanceof Long) {\n \
    \               integers.add((Long) value);\n            } else {\n          \
    \      integers.add(0);\n            }\n        }\n        return integers;",
  '        return values.stream().filter(e -> (e.getClass().isArray() && e.getClass().getComponentType().isAssignableFrom(Integer.class))).map(e
    -> ((Number) e).longValue()).collect(Collectors.toCollection(ArrayList::new));',
  "        // Filter given array list for any javathon values only for integers\n\
    \        // >>> filterIntegers((new ArrayList<Object>(Arrays.asList((String)\"\
    a\", (String)3.14f, (String)5l))))\n        // (new ArrayList<Long>(Arrays.asList((long)5l)))\n\
    \        // >>> filterIntegers((new ArrayList<Object>(Arrays.asList(1l, 2l, 3l,\
    \ \"abc\", new HashMap<Long,Long>(Map.of()), new ArrayList<Long>(Arrays.asList())))))\n\
    \        // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))\n\
    \        ArrayList<Long> result = new ArrayList<>();\n        if (values != null)\
    \ {\n            values.stream().filter(value -> value instanceof Long).forEachOrdered(value\
    \ -> result.add(value));\n        }\n        return result;", "        ArrayList<Long>\
    \ integers = new ArrayList<Long>(values.size());\n        for (Object o : values)\
    \ {\n            if (o instanceof Long) {\n                integers.add((Long)o);\n\
    \            }\n        }\n        return integers;", "        List<Long> result\
    \ = new ArrayList<Long>();\n        values.stream().filter(val -> val.getClass().isAssignableFrom(Integer.class)).map(val\
    \ -> (Integer)val).forEach(result ::add);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (Object o : values) {\n       \
    \     if (o instanceof Number) {\n                result.add((Long)o);\n     \
    \       }\n        }\n        return result;", "        ArrayList<Long> newList\
    \ = new ArrayList<>(values.size());\n        for (Object value : values) {\n \
    \           if (value instanceof Number) {\n                newList.add((Long)value);\n\
    \            }\n        }\n        return newList;", "        Predicate<Object>\
    \ isInteger = value -> {\n            try {\n                Integer num = (Integer)\
    \ value;\n                return true;\n            } catch (NumberFormatException\
    \ nfe) {\n                return false;\n            }\n        };\n        ArrayList<Long>\
    \ filtered = new ArrayList<>();\n        for (Object o : values) {\n         \
    \   if (isInteger.test(o)) {\n                filtered.add(Long.parseLong(o.toString()));\n\
    \            }\n        }\n        return filtered;", "        return values.stream().filter(\
    \ o -> {\n            if(o instanceof Long)\n                return true;\n  \
    \          else\n                return false;\n        }).collect(Collectors.toCollection(ArrayList::new));",
  "        return values.stream().filter(i -> {\n            try {\n             \
    \   return ((Number)i).intValue() == i.intValue();\n            } catch (ClassCastException\
    \ e) {\n                return false;\n            }\n        }).collect(Collectors.toCollection(ArrayList::new));",
  "        if (values == null) return null;\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        for (Object value : values) {\n            if (value\
    \ instanceof Number) {\n                Number n = (Number) value;\n         \
    \       if (n.longValue() % 1 == 0) {\n                    result.add(n.longValue());\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   ArrayList<Long> result = new ArrayList<Long>();\n        for(Object obj :\
    \ values) {\n            if(obj instanceof Long) {\n                result.add((Long)obj);\n\
    \            }\n        }\n        return result;", "        // Use Java 8 Stream\
    \ API to filter and convert to long list\n        return (values.stream().filter((Long\
    \ value) -> value != null).map((Long value) -> value).collect(Collectors.toCollection(ArrayList::new)));",
  "        return values.stream().filter(Objects::nonNull)\n                .map(value\
    \ -> value.getClass().isArray()\n                        ? Arrays.asList((Long[])\
    \ value)\n                        : (value instanceof Integer)\n             \
    \                   ? ((Integer)value).longValue()\n                         \
    \       : value)\n                .collect(Collectors.toCollection(ArrayList::new));",
  "        return values.stream().filter((v) -> {\n            try {\n           \
    \     Integer i = Integer.valueOf(v.toString());\n                return true;\n\
    \            } catch (NumberFormatException nfe) {\n                return false;\n\
    \            }\n        }).map((v) -> {\n            try {\n                return\
    \ Long.parseLong(v.toString());\n            } catch (NumberFormatException nfe)\
    \ {\n                return null;\n            }\n        }).collect(Collectors.toCollection(()\
    \ -> new ArrayList<>()));", "        ArrayList<Long> filteredValues = new ArrayList<>(values.size());\n\
    \        for (Object o : values) {\n            if (o instanceof Integer) {\n\
    \                filteredValues.add((Long) o);\n            }\n        }\n   \
    \     return filteredValues;", "        ArrayList<Long> results = new ArrayList<>();\n\
    \        values.forEach(x -> {\n            if (x instanceof Integer) {\n    \
    \            results.add(x);\n            }\n        });\n        return results;",
  "        ArrayList<Long> results = new ArrayList<Long>();\n        for (Object obj\
    \ : values) {\n            if (obj instanceof Long) {\n                results.add((Long)obj);\n\
    \            } else if (obj instanceof String) {\n                Long longValue\
    \ = Long.parseLong((String)obj);\n                results.add(longValue);\n  \
    \          }\n        }\n        return results;", "        ArrayList<Long> results\
    \ = new ArrayList<Long>();\n        for (int i = 0; i < values.size(); i++) {\n\
    \            Object value = values.get(i);\n            if (value instanceof Integer)\
    \ {\n                results.add((Long) value);\n            }\n        }\n  \
    \      return results;", "        if (values == null || values.size() == 0) {\n\
    \            return values;\n        }\n\n        if (values.size() == 1) {\n\
    \            return values;\n        }\n\n        ArrayList<Long> newValues =\
    \ new ArrayList<>(values.size());\n\n        for (Object o : values) {\n     \
    \       if (o instanceof Long) {\n                newValues.add((Long) o);\n \
    \           } else if (o instanceof Number) {\n                newValues.add(o.longValue());\n\
    \            } else if (o instanceof String) {\n                String s = (String)\
    \ o;\n                newValues.add(Long.parseLong(s.replaceAll(\"[^0-9]+\", \"\
    \")));\n            }\n        }\n\n        return newValues;", "        ArrayList<Long>\
    \ filtered = new ArrayList<Long>();\n        for (Object value : values) {\n \
    \           if (value instanceof Long) {\n                filtered.add((Long)value);\n\
    \            } else if (value instanceof Number) {\n                filtered.add(((Number)\
    \ value).longValue());\n            } else if (value instanceof String) {\n  \
    \              String s = String.valueOf(value);\n                for (char c\
    \ : s.toCharArray()) {\n                    if (Character.isDigit(c)) {\n    \
    \                    filtered.add(((Number) value).longValue());\n           \
    \         }\n                }\n            }\n        }\n        return filtered;",
  "        ArrayList<Long> filtered = new ArrayList<Long>();\n        for (Object\
    \ o : values) {\n            if (o instanceof Long) {\n                filtered.add((Long)o);\n\
    \            } else if (o instanceof Number) {\n                Number n = (Number)o;\n\
    \                if (n.doubleValue() % 1 == 0) {\n                    filtered.add(n.longValue());\n\
    \                }\n            }\n        }\n        return filtered;", '        return
    values.stream().filter(v->v.getClass()==Integer.class).map(v -> v.asLong()).collect(Collectors.toList());',
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (Object o\
    \ : values) {\n            if (o instanceof Integer)\n                result.add((Long)o);\n\
    \            else if (o instanceof Double)\n                result.add((Long)((Double)o).longValue());\n\
    \            else if (o instanceof Long)\n                result.add((Long)o);\n\
    \            else if (o instanceof Number)\n                result.add(((Number)o).longValue());\n\
    \            else if (o instanceof String)\n                result.add(Long.parseLong((String)o));\n\
    \            else\n                throw new IllegalStateException(\"Unrecognized\
    \ type \" + o.getClass().getName());\n        }\n        return result;", '        return
    values.stream().filter(v->Integer.valueOf(v.toString())).collect(Collectors.toCollection(ArrayList::new));',
  '        return values.stream().filter(value -> (value instanceof Number)).map(Object::longValue).collect(Collectors.toCollection(ArrayList::new));',
  "        ArrayList<Long> filtered = new ArrayList<Long>();\n        for (Object\
    \ value : values) {\n            if (value instanceof Long) {\n              \
    \  filtered.add((Long) value);\n            }\n        }\n        return filtered;",
  "        ArrayList<Long> result = new ArrayList<>();\n        for (Object value\
    \ : values) {\n            if (value instanceof Long) {\n                result.add((Long)\
    \ value);\n            } else if (value instanceof Double) {\n               \
    \ result.add(((Double) value).longValue());\n            } else if (value instanceof\
    \ Float) {\n                result.add(((Float) value).longValue());\n       \
    \     } else if (value instanceof Integer) {\n                result.add(((Integer)\
    \ value).longValue());\n            }\n        }\n        return result;", '        return
    values.stream().filter(v -> v instanceof Long).map(v -> (Long)v).collect(Collectors.toCollection(ArrayList<Long>::new));',
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (Object value\
    \ : values) {\n            if (value instanceof Long) {\n                result.add((Long)value);\n\
    \            } else if (value instanceof Integer) {\n                result.add((Integer)value);\n\
    \            } else {\n                result.add(0l);\n            }\n      \
    \  }\n        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        for (Object value : values) {\n            if (!(value instanceof Number))\
    \ {\n                continue;\n            }\n            try {\n           \
    \     result.add(Long.parseLong(String.valueOf(value).trim()));\n            }\
    \ catch (NumberFormatException e) {\n                continue;\n            }\n\
    \        }\n        return result;", "        ArrayList<Long> filtered = new ArrayList<Long>();\n\
    \        List<Long> inputIntegers = values.stream()\n            .filter(value\
    \ -> (value instanceof Long))\n            .map(value -> (Long)value)\n      \
    \      .collect(Collectors.toList());\n        filtered.addAll(inputIntegers);\n\
    \        return filtered;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Object value : values) {\n            if (value instanceof Long)\
    \ {\n                result.add((Long) value);\n            } else if (value instanceof\
    \ String) {\n                if (Integer.parseInt((String) value) != 0) {\n  \
    \                  result.add(Long.parseLong((String) value));\n             \
    \   }\n            }\n        }\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        for(Object value : values) {\n        \
    \    if(value instanceof Long) {\n                result.add((Long) value);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        for (int i = 0; i < values.size(); i++) {\n  \
    \          if (values.get(i) instanceof Long) {\n                result.add(values.get(i));\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> filteredList\
    \ = new ArrayList<>();\n        for (Object value : values) {\n            if\
    \ (value instanceof Integer) {\n                filteredList.add((Long)value);\n\
    \            }\n        }\n        return filteredList;", "        ArrayList<Long>\
    \ res = new ArrayList<Long>();\n        for( Object value : values ) {\n     \
    \       if( value instanceof Long ) {\n                res.add((Long)value);\n\
    \            }\n        }\n        return res;", "        ArrayList<Long> integers\
    \ = new ArrayList<>();\n        for(Object value : values) {\n            if(value\
    \ instanceof Integer || value instanceof Long || value instanceof Double || value\
    \ instanceof Float || value instanceof String || value.getClass().getName().equals(\"\
    javafx.scene.layout.GridPane\"))\n                integers.add((Long)value);\n\
    \        }\n        return integers;", "        ArrayList<Long> integers = new\
    \ ArrayList<>(values.size());\n        for (Object value : values) {\n       \
    \     if (value instanceof Long) {\n                integers.add((Long) value);\n\
    \            }\n        }\n        return integers;", "        ArrayList<Long>\
    \ results = new ArrayList<>(values.size());\n        for (Object i : values) {\n\
    \            try {\n                Integer ii = Integer.parseInt((String) i);\n\
    \                results.add(ii);\n            }\n            catch (NumberFormatException\
    \ nfe) { }\n        }\n        return results;", "        return values.stream()\n\
    \            .filter(Objects::isInteger)\n            .map(Long::valueOf)\n  \
    \          .collect(Collectors.toCollection(ArrayList::new));", "        if (values==null\
    \ || values.size()==0) {\n            return values;\n        }\n        return\
    \ values.stream().filter(o -> o instanceof Long).map(Long::longValue).collect(Collectors.toCollection(ArrayList::new));",
  "        List<Long> returnList = new ArrayList<Long>();\n        for (Object o :\
    \ values) {\n            if (o instanceof Number) {\n                returnList.add(((Number)\
    \ o).longValue());\n            }\n        }\n        return new ArrayList<Long>(returnList);",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (Object item\
    \ : values) {\n            try {\n                Long integer = (Long) item;\n\
    \                result.add(integer);\n            } catch (Exception ex) {\n\
    \                result.add(0l);\n            }\n        }\n        return result;",
  "        return values.stream().filter(e -> {\n            Object value = getValue(e);\n\
    \            return value instanceof Long || value instanceof Integer || value\
    \ instanceof BigDecimal;\n        }).map(e -> ((Long)e)).collect(Collectors.toCollection(ArrayList::new));",
  "        ArrayList<Long> filteredList = new ArrayList<Long>();\n        for(Object\
    \ value : values) {\n            if (value instanceof Integer) {\n           \
    \     filteredList.add((Long)value);\n            }\n        }\n        return\
    \ filteredList;", "        if (values==null) return null;\n        ArrayList<Long>\
    \ result = new ArrayList<>(values.size()); // copy original list to result\n \
    \       for (Object value : values) {\n            if (value instanceof Integer\
    \ || value==null) continue;\n            if (value instanceof Long) result.add((Long)\
    \ value); // add if instance of long\n            if (value instanceof Integer)\
    \ result.add((Long) value); // add if instance of long or null\n        }\n  \
    \      return result;", "        return values.stream().filter(e -> {\n      \
    \      try {\n                return Integer.parseInt(e.toString()) == e;\n  \
    \          } catch (NumberFormatException e) {\n                return false;\n\
    \            }\n        }).map(e -> {\n            try {\n                return\
    \ Long.parseLong(e.toString());\n            } catch (NumberFormatException e)\
    \ {\n                throw new RuntimeException(e);\n            }\n        }).collect(Collectors.toCollection(ArrayList<Long>::new));",
  "        return values.stream()\n                .filter(i -> ((Long)i).intValue()\
    \ % 1 == 0)\n                .collect(Collectors.toCollection(ArrayList::new));",
  "        ArrayList<Long> integers = new ArrayList<Long>();\n        for (Object\
    \ o : values) {\n            if (o instanceof Long) {\n                integers.add((Long)\
    \ o);\n            } else if (o instanceof Number) {\n                integers.add(((Number)\
    \ o).longValue());\n            }\n        }\n        return integers;", "   \
    \     ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < values.size(); i++) {\n            Object value = values.get(i);\n     \
    \       if (value instanceof Integer) {\n                result.add(value);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> results\
    \ = new ArrayList<Long>();\n        for (Object value: values) {\n           \
    \ if (value instanceof Number) {\n                results.add((Long) value);\n\
    \            }\n        }\n        return results;", "        return values.stream()\n\
    \            .filter(value->{\n                return (value instanceof Integer)\
    \ || (value.getClass().isEnum());\n            })\n            .map(value->(value\
    \ instanceof Long)? value : ((Number)value).longValue())\n            .collect(Collectors.toCollection(ArrayList::new));",
  "        return values.stream().filter(e -> e.getClass().isPrimitive()\n       \
    \     && ! e.getClass().getName().equals(\"java.lang.Long\")).map(e -> (Long)\
    \ e).collect(Collectors.toCollection(ArrayList::new));", "        return values.stream().filter(e\
    \ -> {\n            if(e instanceof Long)\n                return true;\n    \
    \        else if(e instanceof Number)\n                return ((Number)e).longValue()\
    \ == e;\n            else\n                return false;\n        }).collect(Collectors.toCollection(ArrayList<Long>::new));",
  "        return values.stream()\n                .filter(Objects::isNumber)\n  \
    \              .map(value -> (Long)value)\n                .collect(Collectors.toList());",
  "        List<Long> filtered = new ArrayList<>();\n        for (Object value : values)\
    \ {\n            if (value instanceof Long) {\n                filtered.add((Long)\
    \ value);\n            }\n        }\n        return new ArrayList<Long>(filtered);",
  '        return values.stream().filter(s -> s instanceof Long).map(Long::valueOf).collect(Collectors.toList());',
  "        // Create new list\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        // Convert each element to long\n        values.stream().map(String::valueOf).map(Long::parseLong).filter(Objects::nonNull).forEach(e\
    \ -> result.add(e));\n        return result;", "        ArrayList<Long> filtered\
    \ = new ArrayList<>();\n        for(Object value : values) {\n            if(value\
    \ instanceof Number) {\n                filtered.add((Long)value);\n         \
    \   }\n        }\n        return filtered;", "        ArrayList<Long> results\
    \ = new ArrayList<Long>();\n        values.stream().filter(v -> v.equals(Long.valueOf(v.intValue()))).forEach(\n\
    \            v -> results.add(Long.valueOf(v.intValue()))\n        );\n      \
    \  return results;", "        return values.stream()\n                .filter(x->x.toString().matches(\"\
    -?\\\\d+(\\\\.\\\\d+)?\"))\n                .map(x->Long.parseLong(x.toString()))\n\
    \                .collect(Collectors.toCollection(ArrayList::new));", "      \
    \  ArrayList<Long> filtered = new ArrayList<Long>();\n        for(Object value\
    \ : values) {\n            if(value instanceof Long) {\n                filtered.add((Long)\
    \ value);\n            }\n        }\n        return filtered;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (Object value : values) {\n   \
    \         if (value instanceof Integer) {\n                result.add((Integer)value);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        boolean wasFound = false;\n\n        for(Object\
    \ value : values) {\n            try {\n                long v = (Long)value;\n\
    \                if(!wasFound) {\n                    if(v > 0) result.add(v);\n\
    \                    wasFound = true;\n                } else {\n            \
    \        if(v == ((Long)values.get(result.size()-1))) result.add(v);\n       \
    \         }\n            } catch (ClassCastException ignored) {\n            }\n\
    \        }\n        return result;", '        return values.stream().filter(v
    -> v instanceof Long).collect(Collectors.toCollection(ArrayList::new));', "  \
    \      ArrayList<Long> list = new ArrayList<>(values);\n        List<Long> intList\
    \ = list.stream().filter(x -> x.equals((long) x)).collect(Collectors.toList());\n\
    \        list.clear();\n        list.addAll(intList);\n        return list;",
  "        return values.stream().filter((Object x) -> {\n            if (x instanceof\
    \ Long || x instanceof Integer || x instanceof Short) {\n                return\
    \ true;\n            }\n            throw new IllegalArgumentException();\n  \
    \      }).collect(toList());", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        ArrayList<Object> valueList = new ArrayList<Object>(values);\n      \
    \  for (Object obj : valueList) {\n            if (obj instanceof Long) {\n  \
    \              result.add((Long) obj);\n            } else if (obj instanceof\
    \ Integer) {\n                result.add((Long) obj);\n            } else {\n\
    \                result.add(Long.valueOf(obj));\n            }\n        }\n  \
    \      return result;", "        if (values == null) {\n            return null;\n\
    \        }\n        ArrayList<Long> result = new ArrayList<>();\n        for (Object\
    \ value : values) {\n            if (value instanceof Long) {\n              \
    \  result.add((Long) value);\n            } else if (value instanceof Number)\
    \ {\n                result.add((Number) value).longValue();\n            } else\
    \ {\n                result.add(null);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Long> returnValue = new ArrayList<Long>(values.size());\
    \ // create empty array\n        for (Object element : values) {\n           \
    \ if (element instanceof Long)\n                returnValue.add((Long)element);\
    \ // if element is long, add it to returnValue\n        }\n        return returnValue;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (Object object\
    \ : values) {\n            if (object instanceof Integer) {\n                result.add((Long)\
    \ object);\n            }\n        }\n        return result;", "        return\
    \ values.stream()\n            .filter(v -> (v == null || v instanceof String\
    \ || v instanceof Double || v instanceof Long))\n            .map(v -> ((Number)\
    \ v).longValue())\n            .collect(Collectors.toCollection(ArrayList<Long>::new));",
  '        return values.stream().filter(v -> v.getClass() == Number.class).map(Number::longValue).collect(Collectors.toList());',
  "        ArrayList<Long> filtered = new ArrayList<>();\n        for (Object value\
    \ : values) {\n            try {\n                long i = Long.parseLong(value.toString());\n\
    \                filtered.add(i);\n            } catch(NumberFormatException nfe)\
    \ {\n                continue;\n            }\n        }\n        return filtered;",
  "        ArrayList<Long> results = new ArrayList<Long>();\n        for(Object value\
    \ : values) {\n            try {\n                Long number = Long.valueOf(value);\n\
    \                results.add(number);\n            } catch (NumberFormatException\
    \ nfe) {\n                // If value was not a number, skip it\n            }\n\
    \        }\n        return results;", "        return values.stream()\n      \
    \          .filter(object -> {\n                    try {\n                  \
    \      long value = Long.parseLong((String) object);\n                       \
    \ return true;\n                    } catch(NumberFormatException e) {\n     \
    \                   return false;\n                    }\n                })\n\
    \                .collect(Collectors.toCollection(ArrayList<Long>::new));", " \
    \       ArrayList<Long> list = new ArrayList<>();\n        for (Object value :\
    \ values) {\n            if (value instanceof Number) {\n                list.add(value.longValue());\n\
    \            }\n        }\n        return list;", '        return values.stream().filter(e
    -> ((Number) e).intValue() == ((Number) e).intValue()).map(e -> ((Number) e).longValue()).collect(Collectors.toList());',
  "        ArrayList<Long> filteredValues = new ArrayList<Long>();\n\n        for(Object\
    \ value: values) {\n            if (value instanceof Integer) {\n            \
    \    filteredValues.add((Long) value);\n            }\n        }\n        return\
    \ filteredValues;", "        return values.stream().filter(Objects::nonNull)\n\
    \                .map((v) -> {\n                    if (v instanceof Integer)\
    \ {\n                        return ((Integer) v).longValue();\n             \
    \       } else if (v instanceof Long) {\n                        return v;\n \
    \                   } else {\n                        throw new IllegalArgumentException(\"\
    Element \" + v.getClass().getSimpleName() + \" not an Integer\");\n          \
    \          }\n                })\n                .collect(toCollection(ArrayList::new));",
  "        ArrayList<Long> filtered = new ArrayList<Long>();\n        values.stream().forEach(e\
    \ -> {\n            if (e instanceof Long) {\n                filtered.add((Long)e);\n\
    \            }\n        });\n        return filtered;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        values.stream().filter(i -> {\n       \
    \     try {\n                Integer integer = (Integer) i;\n                result.add(integer);\n\
    \                return true;\n            } catch (NumberFormatException nf)\
    \ {\n                return false;\n            }\n        }).forEach(i -> result.add((long)i));\n\
    \        return result;", '        return values.stream().filter(x -> x instanceof
    Long).collect(Collectors.toList());', "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Object o : values) {\n            if (o == null) {\n           \
    \     continue;\n            }\n            if (o instanceof Number) {\n     \
    \           Number n = (Number) o;\n                if (n.longValue() % 1 == 0)\
    \ {\n                    result.add(n.longValue());\n                }\n     \
    \       }\n        }\n        return result;", "        ArrayList<Long> ret =\
    \ new ArrayList<Long>();\n        for(Object v : values) {\n            if(v instanceof\
    \ Number) {\n                ret.add((Long)v);\n            }\n        }\n   \
    \     return ret;", "        ArrayList<Long> result = new ArrayList<>();\n   \
    \     values.stream().filter(v -> v.toString().matches(\"\\\\-?\\\\d+\")).forEach(v\
    \ -> result.add(Long.valueOf(v.toString())));\n        return result;", "    \
    \    return values.stream().filter(value -> value.equalsIgnoreCase(\"\" + value)).map(value\
    \ -> {\n            if (value instanceof Integer) return (Long)value;\n      \
    \      else if (value instanceof Long) return (Long)value;\n            else if\
    \ (value instanceof Double) return (Long)value;\n            else return 0L;\n\
    \        }).collect(Collectors.toCollection(() -> new ArrayList<>()));", "   \
    \     // filter the values for a javathon values only for integers\n        //\
    \ >>> filterIntegers((new ArrayList<Object>(Arrays.asList((String)\"a\", (String)3.14f,\
    \ (String)5l))))\n        // (new ArrayList<Long>(Arrays.asList((long)5l)))\n\
    \        // >>> filterIntegers((new ArrayList<Object>(Arrays.asList(1l, 2l, 3l,\
    \ \"abc\", new HashMap<Long,Long>(Map.of()), new ArrayList<Long>(Arrays.asList())))))\n\
    \        // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))\n\
    \        if (values == null) {\n            return new ArrayList<Long>();\n  \
    \      }\n        return values.stream().filter(x -> x.isInstanceOf(int.class)).map(x\
    \ -> (int) x).map(Long::valueOf).collect(Collectors.toCollection(() -> new ArrayList<Long>()));",
  "        ArrayList<Long> retVal = new ArrayList<>();\n        for(Object value :\
    \ values) {\n            if(!value.isInstanceOf[Long]()) {\n                throw\
    \ new RuntimeException(\"Value is not integer: \" + value.getClass());\n     \
    \       }\n            retVal.add(value.asInstanceOf[Long]);\n        }\n    \
    \    return retVal;", "        ArrayList<Long> filtered = new ArrayList<Long>();\n\
    \        values.stream().filter(o -> o instanceof Long).forEachOrdered(o -> filtered.add((Long)o));\n\
    \        return filtered;", "        if (values==null)\n            return Collections.emptyList();\n\
    \        ArrayList<Long> filtered = new ArrayList<Long>();\n        for (Object\
    \ value : values) {\n            if (value instanceof Long)\n                filtered.add((Long)value);\n\
    \        }\n        return filtered;", "        if (values == null || values.size()\
    \ == 0)\n            return new ArrayList<Long>();\n\n        ArrayList<Long>\
    \ valueList = new ArrayList<Long>();\n        for (Object object : values) {\n\
    \            if (object instanceof Long)\n                valueList.add((Long)object);\n\
    \            else if (object instanceof Integer)\n                valueList.add((Long)((Integer)object).longValue());\n\
    \        }\n        return valueList;", "        ArrayList<Long> filteredValues\
    \ = new ArrayList<>();\n        for (Object obj: values) {\n            if (obj\
    \ instanceof Long) {\n                filteredValues.add((Long)obj);\n       \
    \     }\n        }\n        return filteredValues;", "        return values.stream().filter(e\
    \ -> !(e instanceof Integer))\n                .map(Object::cast)\n          \
    \      .collect(Collectors.toCollection(ArrayList::new));", "        List<Long>\
    \ filtered = new ArrayList<>(values.size());\n        for (Object o : values)\
    \ {\n            if (o instanceof Long) {\n                filtered.add((Long)o);\n\
    \            }\n        }\n        return filtered;", "        ArrayList<Long>\
    \ results = new ArrayList<>();\n        for (Object value : values) {\n      \
    \      if (value instanceof Number) {\n                results.add((Long)value);\n\
    \            }\n        }\n        return results;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        for (Object value: values) {\n        \
    \    if (value instanceof Integer) {\n                result.add((Long) value);\n\
    \            }\n        }\n        return result;", "        return values.stream().filter(o\
    \ -> {\n            Integer intVal = Integer.valueOf(o);\n            Integer\
    \ intObj = Integer.valueOf(o.toString());\n            return intVal.equals(intObj);\n\
    \        }).collect(Collectors.toCollection(ArrayList::new));", "        ArrayList<Long>\
    \ list = new ArrayList<Long>(values.size());\n        for(Object value : values)\
    \ {\n            try {\n                if(value instanceof Long)\n          \
    \          list.add((Long) value);\n                else if(value instanceof Integer)\
    \ {\n                    list.add((Long) Integer.valueOf(value));\n          \
    \      }\n                else if(value instanceof String)\n                 \
    \   list.add((Long) Long.valueOf((String) value));\n                else\n   \
    \                 list.add(0L);\n            } catch(NumberFormatException e)\
    \ {\n                list.add(0L);\n            }\n        }\n        return list;",
  "        ArrayList<Long> integerValues = new ArrayList<Long>();\n        for (Object\
    \ o : values) {\n            if (o instanceof Number)\n                integerValues.add((Long)o);\n\
    \        }\n        return integerValues;", "        ArrayList<Long> filtered\
    \ = new ArrayList<Long>();\n        for (Object value : values) {\n          \
    \  if (value instanceof Integer) {\n                filtered.add((long)value);\n\
    \            }\n        }\n        return filtered;", "        ArrayList<Long>\
    \ results = new ArrayList<Long>();\n        values.forEach(v -> {\n          \
    \  if (v instanceof Number) {\n                results.add(((Number) v).longValue());\n\
    \            }\n        });\n        return results;", "        ArrayList<Long>\
    \ results = new ArrayList<>();\n        for (Object value : values) {\n      \
    \      if (value instanceof Long) {\n                results.add((Long) value);\
    \ // Or other conversion here\n            }\n        }\n        return results;",
  '        return values.stream().filter(Objects::isInstanceOf).map(Object::cast).map(Long::valueOf).collect(Collectors.toList());',
  "        if (values != null) {\n            ArrayList<Long> filtered = new ArrayList<Long>();\n\
    \            for (Object val : values) {\n                if (val instanceof Long)\
    \ {\n                    filtered.add((Long)val);\n                } else if (val\
    \ instanceof Number) {\n                    filtered.add(((Number)val).longValue());\n\
    \                } else {\n                    filtered.add(0L);\n           \
    \     }\n            }\n            return filtered;\n        }\n        return\
    \ null;", "        return values.stream().filter(x -> {\n            try {\n \
    \               return (x instanceof Number) && ((Number) x).longValue() == x;\n\
    \            } catch (Exception e) {\n                return false;\n        \
    \    }\n        }).collect(Collectors.toCollection(ArrayList::new));", "     \
    \   ArrayList<Long> result = new ArrayList<>();\n        for (Object o : values)\
    \ {\n            if (o instanceof Integer) {\n                result.add((Long)o);\n\
    \            }\n        }\n        return result;", "        return values.stream()\n\
    \                .filter(o -> ((Number) o).intValue() != 0)\n                .map(o\
    \ -> ((Number) o).longValue())\n                .collect(Collectors.toCollection(ArrayList::new));",
  "        ArrayList<Long> filtered = new ArrayList<Long>();\n        for(Object value\
    \ : values) {\n            if(value instanceof Long)\n                filtered.add((Long)value);\n\
    \            else if(value instanceof String)\n                filtered.add(Long.parseLong((String)value));\n\
    \        }\n        return filtered;", "        ArrayList<Long> result = new ArrayList<>(values.size());\n\
    \        for (Object object : values) {\n            if (object instanceof Integer)\n\
    \                result.add((long)object);\n        }\n        return result;",
  "        return values.stream()\n            .filter(value -> value.getClass().isInstance(Long.class))\n\
    \            .map(value -> (Long)value)\n            .collect(Collectors.toCollection(ArrayList::new));",
  '        return values.stream().filter(v -> v.getClass().isInstance(Long.class)).map(v
    -> (Long)v).collect(Collectors.toCollection(ArrayList::new));', '        return
    values.stream().filter(value -> value instanceof Long).map(value -> (Long)value).collect(Collectors.toList());',
  "        ArrayList<Long> ints = new ArrayList<Long>(values.size());\n        values.forEach(e\
    \ -> {\n            try {\n                Long l = (Long) e;\n              \
    \  if (l == null || l % 1l != 0)\n                    throw new NumberFormatException();\n\
    \                ints.add(l);\n            } catch (NumberFormatException e) {\n\
    \            }\n        });\n        return ints;", "        ArrayList<Long> ret\
    \ = new ArrayList<>();\n        for(Object o : values) {\n            if(o instanceof\
    \ Long) {\n                ret.add((Long)o);\n            }\n        }\n     \
    \   return ret;", "        if (values == null) {\n            return null;\n \
    \       }\n\n        ArrayList<Long> ret = new ArrayList<Long>();\n        for\
    \ (Object value : values) {\n            try {\n                ret.add((Long)\
    \ value);\n            } catch (NumberFormatException e) {\n                //System.out.println(\"\
    value \" + value + \" is not a long. Skipping it.\");\n            }\n       \
    \ }\n        return ret;", "        ArrayList<Long> filtered = new ArrayList<Long>();\n\
    \        for (Object value : values) {\n            if (!(value instanceof Number))\n\
    \                continue;\n            Number n = (Number)value;\n          \
    \  if (!n.isInt())\n                continue;\n            filtered.add(n.longValue());\n\
    \        }\n        return filtered;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < values.size(); i++) {\n            if (values.get(i)\
    \ instanceof Long) {\n                result.add((Long)values.get(i));\n     \
    \       }\n        }\n        return result;", "        return values.stream().filter((value)\
    \ -> {\n            try {\n                return Integer.valueOf(value.toString())\
    \ == value;\n            } catch (NumberFormatException e) {\n               \
    \ return false;\n            }\n        }).mapToLong((value) -> value).collect(Collectors.toCollection(ArrayList::new));",
  "        ArrayList<Long> filteredValues = new ArrayList<Long>();\n        for (Object\
    \ i : values) {\n            if (i instanceof Long)\n                filteredValues.add((Long)i);\n\
    \        }\n        return filteredValues;", "        return values.stream()\n\
    \            .filter(o -> o.equals(1l) || o.equals(2l) || o.equals(3l) || o.equals(4l))\n\
    \            .map(o -> (Long) o)\n            .collect(toCollection(() -> new\
    \ ArrayList<>()));", "        ArrayList<Long> result = new ArrayList<>();\n  \
    \      for (Object value : values) {\n            if (value instanceof Integer)\n\
    \                result.add((Long)value);\n        }\n        return result;",
  "        return values.stream().filter(value -> {\n            if(value instanceof\
    \ Long) {\n                return true;\n            }\n            else if(value\
    \ instanceof Integer) {\n                return true;\n            }\n       \
    \     else if(value instanceof Float) {\n                return true;\n      \
    \      }\n            else if(value instanceof Double) {\n                return\
    \ true;\n            }\n            else if(value instanceof CharSequence) {\n\
    \                return true;\n            }\n            return false;\n    \
    \    }).map(value -> (Long)value).collect(Collectors.toCollection(ArrayList::new));",
  "        // Make an ArrayList to return\n        ArrayList<Long> answer = new ArrayList<Long>();\n\
    \n        // Iterate over all values except strings\n        for (Object value\
    \ : values) {\n            // Only deal with integers\n            if (value instanceof\
    \ Long) {\n                // Add to return list\n                answer.add((Long)\
    \ value);\n            }\n        }\n\n        // Return answer\n        return\
    \ answer;", "        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ values.stream().filter(v -> v.getClass().equals(Integer.TYPE)).forEach(result\
    \ ::add);\n        return result;"]
stop_tokens:
- "\n    }\n"
