language: java
name: HumanEval_25_factorize
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n\n        for (int\
    \ i = 2; i <= n/i; i++) {\n            if (n % i == 0) {\n                factors.add(i);\n\
    \                if (n/i >= i) {\n                    factors.add(n/i);\n    \
    \            }\n            }\n        }\n\n        return factors;\n    }\n \
    \   public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdfyrn_s9.java:23: error: incompatible types: int cannot be converted\
    \ to Long\n                factors.add(i);\n                            ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n1 error\n"
  stdout: ''
  timestamp: 1660011451
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<>();\n        for (long i = 1;\
    \ i <= n; i++) \n            if (n % i == 0) {\n                while (n % i ==\
    \ 0)\n                    n /= i;\n                if (n != 1) \n            \
    \        factors.add(i);\n            }\n        return factors;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011456
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> result = new ArrayList<Long>();\n        int count =\
    \ 1;\n        while (n >= 1) {\n            if (n % 2 == 0) {\n              \
    \  n /= 2;\n                result.add(2l);\n                count++;\n      \
    \      }\n            if (n % 3 == 0) {\n                n /= 3;\n           \
    \     result.add(3l);\n                count++;\n            }\n            if\
    \ (n % 5 == 0) {\n                n /= 5;\n                result.add(5l);\n \
    \               count++;\n            }\n            if (n % 7 == 0) {\n     \
    \           n /= 7;\n                result.add(7l);\n                count++;\n\
    \            }\n        }\n        if (result.size() < 1) {\n            result.add(1l);\n\
    \            count++;\n        }\n        result.add((long)count);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011456
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<>();\n        for (long i = 2;\
    \ i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz8cbac0a.java:29)\n"
  stdout: ''
  timestamp: 1660011452
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        \n        //\
    \ Recursive solution\n        // Sieve of Eratosthenes\n        // n should be\
    \ a prime number for Sieve of Eratosthenes\n        ArrayList<Long> primes = new\
    \ ArrayList<Long>();\n        for (long i = 2; i*i <= n; i++) {\n            boolean\
    \ isPrime = true;\n            for (long j = 2; j*j <= i; j++) {\n           \
    \     if (i % j == 0) {\n                    isPrime = false;\n              \
    \      break;\n                }\n            }\n            if (isPrime)\n  \
    \              primes.add(i);\n        }\n        \n        Collections.sort(primes,\
    \ Comparator.naturalOrder());\n        factors.clear();\n        \n        for\
    \ (int i = 0; primes.size() > 0; i++) {\n            for (int j = primes.size();\
    \ j > 0; j--) {\n                if (n % primes.get(j) == 0) {\n             \
    \       n /= primes.get(j);\n                    factors.add(primes.get(j));\n\
    \                }\n            }\n        }\n        \n        Collections.sort(factors,\
    \ Comparator.naturalOrder());\n        \n        return factors;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzy25nd25.java:54)\n"
  stdout: ''
  timestamp: 1660011451
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> result = new ArrayList<>();\n        ArrayList<Long>\
    \ factorization = factorization(n);\n        boolean hasRepetition = factorization.size()\
    \ > 1;\n        boolean isPrime = true;\n        for (long factor : factorization)\
    \ {\n            if (!result.contains(factor)) {\n                result.add(factor);\n\
    \            } else {\n                if (hasRepetition) {\n                \
    \    break;\n                }\n                isPrime = false;\n           \
    \ }\n        }\n        if (isPrime) {\n            return factorization;\n  \
    \      } else {\n            return result;\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpxqjbj5ka.java:20: error: cannot find symbol\n        ArrayList<Long>\
    \ factorization = factorization(n);\n                                        ^\n\
    \  symbol:   method factorization(long)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011451
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        // Create array list of long type to store all factors of integer in\
    \ ascending order.\n        ArrayList<Long> factors = new ArrayList<Long>();\n\
    \        // Initialize a counter for all factors of n.\n        long counter =\
    \ 1;\n        // Create an array list of long type to store factors of n in ascending\
    \ order\n        ArrayList<Long> factorOrder = new ArrayList<Long>();\n      \
    \  // Initialize a temp variable to store the current power of n when dividing\
    \ by first factor.\n        long temp = n;\n        // Iterate over all factors\
    \ of n until no factor left after dividing n with any factor.\n        while (true)\
    \ {\n            // If n is a prime number, add factors of n to array list.\n\
    \            if (isPrime(temp)) {\n                factors.add(temp);\n      \
    \      }\n            // Divide n by current power of factor and increase the\
    \ power of factor by one.\n            temp /= counter;\n            counter++;\n\
    \            // If the current power of n is less than current power of first\
    \ factor, then n is not prime number.\n            if (temp < counter) {\n   \
    \             break;\n            }\n        }\n        // Create a temp variable\
    \ to store first factor.\n        long fTemp = temp;\n        // Iterate over\
    \ all factors of n until no factor left after dividing n with any factor.\n  \
    \      while (true) {\n            // If n is not a prime number, add factors\
    \ of n to array list.\n            if (!isPrime(temp)) {\n                factors.add(temp);\n\
    \            }\n            // Divide n by current power of factor and increase\
    \ the power of factor by one.\n            temp /= counter;\n            counter++;\n\
    \            // If the current power of n is less than current power of first\
    \ factor, then n is not prime number.\n            if (temp < counter) {\n   \
    \             break;\n            }\n        }\n        // Create a temp variable\
    \ and store remainder when dividing n by first factor.\n        long rTemp = temp\
    \ % fTemp;\n        // Iterate over all factors of n until no factor left after\
    \ dividing n with any factor.\n        while (true) {\n            // If n is\
    \ not a prime number, add factors of n to array list.\n            if (!isPrime(temp))\
    \ {\n                factors.add(temp);\n            }\n            // Divide\
    \ n by current power of factor and increase the power of factor by one.\n    \
    \        temp /= counter;\n            counter++;\n            // If the current\
    \ power of n is less than current power of first factor, then n is not prime number.\n\
    \            if (temp < counter) {\n                break;\n            }\n  \
    \      }\n        // Check if remainder is not zero and if not, add the first\
    \ factor (fTemp) to array list.\n        if (!(rTemp == 0)) {\n            factors.add(fTemp);\n\
    \        }\n        // Iterate \n    }\n    public static void main(String[] args)\
    \ {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpwkvq24m8.java:30: error: cannot find symbol\n            if (isPrime(temp))\
    \ {\n                ^\n  symbol:   method isPrime(long)\n  location: class Problem\n\
    /tmp/tmpwkvq24m8.java:46: error: cannot find symbol\n            if (!isPrime(temp))\
    \ {\n                 ^\n  symbol:   method isPrime(long)\n  location: class Problem\n\
    /tmp/tmpwkvq24m8.java:62: error: cannot find symbol\n            if (!isPrime(temp))\
    \ {\n                 ^\n  symbol:   method isPrime(long)\n  location: class Problem\n\
    3 errors\n"
  stdout: ''
  timestamp: 1660011451
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> result = new ArrayList<Long>();\n        ArrayList<Long>\
    \ factorize = new ArrayList<Long>();\n\n        double a = Math.sqrt(n);\n   \
    \     double b = ((double) n) / ((double) a);\n        double c = a / b;\n   \
    \     long i = 1;\n\n        while(a <= b) {\n            if(b % i == 0) {\n \
    \               factorize.add(i);\n                i = i + 1;\n            }\n\
    \            a = a + 1;\n        }\n\n        for(int j = 0; j < factorize.size();\
    \ j++) {\n            long l = factorize.get(j);\n            while(l > 1) {\n\
    \                long times = l % 2;\n                long rem = l / 2;\n    \
    \            result.add(rem);\n                result.add(times);\n          \
    \      result.add(rem);\n                l = rem;\n            }\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnqat_31t.java:49)\n"
  stdout: ''
  timestamp: 1660011452
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n\n        // Factorize\
    \ n\n        for (long i = 2; i * i <= n; i++)\n            for (long j = 2; j\
    \ * j <= n; j++)\n                while ((n % j) == 0) {\n                   \
    \ n = n / j;\n                    factors.add(j);\n                }\n\n     \
    \   // Return the result\n        return factors;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn8chy18c.java:33)\n"
  stdout: ''
  timestamp: 1660011452
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        // Sieve of Eratosthenes\n        // Initialization\n        ArrayList<Long>\
    \ factors = new ArrayList<>();\n        ArrayList<Long> primes = new ArrayList<>();\n\
    \        ArrayList<Long> tempPrimes = new ArrayList<>();\n        // For prime\
    \ number\n        // Check only odd number\n        for (long i = 3; i <= Math.sqrt(n);\
    \ i += 2)\n            if (n % i == 0)\n                primes.add(i);\n     \
    \   // For non-prime numbers\n        for (long i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            // Check if number is prime number\n            if (primes.contains(i))\n\
    \                continue;\n            // Find all factors\n            while\
    \ (n % i == 0) {\n                factors.add(i);\n                n /= i;\n \
    \           }\n        }\n        // Sort factors\n        Collections.sort(factors);\n\
    \        // Check if n is prime number\n        if (n == 1)\n            factors.add(1);\n\
    \        // Return factors in descending order\n        return factors;\n    }\n\
    \    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjdwsfstu.java:44: error: incompatible types: int cannot be converted\
    \ to Long\n            factors.add(1);\n                        ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011451
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> primeFactorization = new ArrayList<Long>();\n\n     \
    \   long square = n;\n\n        while (square % 2 == 0) {\n            primeFactorization.add((long)\
    \ 2);\n            square /= 2;\n        }\n\n        for (long i = 3; i <= Math.sqrt(square);\
    \ i += 2) {\n            if (square % i == 0) {\n                primeFactorization.add((long)\
    \ i);\n                square /= i;\n            }\n        }\n\n        primeFactorization.add((long)\
    \ n);\n\n        return primeFactorization;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp26z_yw0v.java:40)\n"
  stdout: ''
  timestamp: 1660011452
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<>();\n        long factorization\
    \ = factorization(n);\n        long p = factorization;\n        while(p>1) {\n\
    \            factors.add(p-1);\n            p /= p;\n        }\n        return\
    \ factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5eyyywzr.java:20: error: cannot find symbol\n        long factorization\
    \ = factorization(n);\n                             ^\n  symbol:   method factorization(long)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011451
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        // Find out if n is a perfect number - if it is, then its a prime number\n\
    \        ArrayList<Long> factors = factorizeNaive(n);\n\n        if (factors.size()\
    \ == 1) {\n            return factors;\n        }\n        else {\n          \
    \  // Find out all prime factors of the product of all factors of n\n        \
    \    long product = 1;\n            for(int i = 0; i < factors.size(); i++) {\n\
    \                product *= factors.get(i);\n            }\n            ArrayList<Long>\
    \ factors2 = factorizeNaive(product);\n            if (factors2.size() > 0) {\n\
    \                // Remove duplicates\n                factors.removeAll(factors2);\n\
    \            }\n            return factors;\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpv62pewng.java:20: error: cannot find symbol\n        ArrayList<Long>\
    \ factors = factorizeNaive(n);\n                                  ^\n  symbol:\
    \   method factorizeNaive(long)\n  location: class Problem\n/tmp/tmpv62pewng.java:31:\
    \ error: cannot find symbol\n            ArrayList<Long> factors2 = factorizeNaive(product);\n\
    \                                       ^\n  symbol:   method factorizeNaive(long)\n\
    \  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011451
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        factorize(n,\
    \ factors, 0, new ArrayList<Long>(), 0l, new ArrayList<Long>(), new ArrayList<Long>(),\
    \ new ArrayList<Long>(), new ArrayList<Long>());\n        return factors;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp46ft3f17.java:20: error: method factorize in class Problem cannot\
    \ be applied to given types;\n        factorize(n, factors, 0, new ArrayList<Long>(),\
    \ 0l, new ArrayList<Long>(), new ArrayList<Long>(), new ArrayList<Long>(), new\
    \ ArrayList<Long>());\n        ^\n  required: long\n  found:    long,ArrayList<Long>,int,ArrayList<Long>,long,ArrayList<Long>,ArrayList<Long>,ArrayList<Long>,ArrayList<Long>\n\
    \  reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011451
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        int factorIndex\
    \ = 0;\n\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0)\
    \ {\n                while (n % i == 0) {\n                    factors.add(i,\
    \ 1);\n                    n /= i;\n                }\n                factors.add(i,\
    \ 1);\n                if (i != n) {\n                    factors.add(i, n);\n\
    \                }\n            }\n            factorIndex++;\n        }\n   \
    \     return factors;\n    }\n    public static void main(String[] args) {\n \
    \   assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpgcnl0apj.java:25: error: incompatible types: int cannot be converted\
    \ to Long\n                    factors.add(i, 1);\n                          \
    \         ^\n/tmp/tmpgcnl0apj.java:28: error: incompatible types: int cannot be\
    \ converted to Long\n                factors.add(i, 1);\n                    \
    \           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011451
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<>();\n        long i = 2;\n \
    \       while (i <= Math.sqrt(n)) {\n            if (n % i == 0) {\n         \
    \       long f = i / i;\n                while (f != 1) {\n                  \
    \  factors.add(f);\n                    f = f / i;\n                }\n      \
    \      }\n            i = i + 1;\n        }\n        return factors;\n    }\n\
    \    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4sj0ew3h.java:34)\n"
  stdout: ''
  timestamp: 1660011452
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> result = new ArrayList<Long>();\n        // Get factors\
    \ from factorization\n        factorize(n, result);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4or9xc7y.java:21: error: method factorize in class Problem cannot\
    \ be applied to given types;\n        factorize(n, result);\n        ^\n  required:\
    \ long\n  found:    long,ArrayList<Long>\n  reason: actual and formal argument\
    \ lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011451
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> list = new ArrayList<>();\n\n        for (long i = 2;\
    \ i <= n; i++) {\n            if (n % i == 0) {\n                list.add(new\
    \ Long(i));\n                n = n / i;\n            }\n        }\n\n        boolean\
    \ isPrime = true;\n        long product = 1;\n        while (n > 0) {\n      \
    \      if (n % 2 == 1) {\n                isPrime = false;\n            }\n  \
    \          n = n / 2;\n        }\n\n        if (isPrime) {\n            list.add(new\
    \ Long(1));\n        }\n\n        Collections.sort(list);\n\n        return list;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_b_2zmam.java:47)\n"
  stdout: ''
  timestamp: 1660011451
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i\
    \ = 2; i * i <= n; ++i) {\n            while (n % i == 0) {\n                result.add(i);\n\
    \                n /= i;\n            }\n        }\n        return result;\n \
    \   }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjgj_99wn.java:29)\n"
  stdout: ''
  timestamp: 1660011452
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        // Generate an array of all the prime factors of n\n        ArrayList<Long>\
    \ primes = new ArrayList<>();\n        for (long i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            while (n % i == 0) {\n                primes.add(i);\n      \
    \          n /= i;\n            }\n        }\n\n        // If n is not divisible\
    \ by any of the prime factors, add it to the array\n        if (n != 1l) {\n \
    \           primes.add(n);\n        }\n\n        // Sort the prime factors in\
    \ ascending order\n        Collections.sort(primes, (x, y) -> Integer.compare(x,\
    \ y));\n        return primes;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpbrz14igr.java:34: error: incompatible types: Long cannot be converted\
    \ to int\n        Collections.sort(primes, (x, y) -> Integer.compare(x, y));\n\
    \                                                           ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011451
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<>();\n        // TODO: Write\
    \ your logic here\n        long x = 1;\n        long limit = Math.sqrt(n);\n \
    \       long limit2 = limit;\n        while (limit2 <= n) {\n            if (n\
    \ % limit2 == 0) {\n                x++;\n            }\n            limit2 *=\
    \ 2;\n        }\n        while (x <= limit) {\n            if (n % x == 0) {\n\
    \                factors.add(x);\n                x++;\n            }\n      \
    \  }\n        return factors;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmprx3cg6bb.java:22: error: incompatible types: possible lossy conversion\
    \ from double to long\n        long limit = Math.sqrt(n);\n                  \
    \            ^\n1 error\n"
  stdout: ''
  timestamp: 1660011451
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        List<Long> factors = new ArrayList<>();\n        for (int i = 2; i <=\
    \ n / i; ++i) {\n            if (n % i == 0) {\n                while (n % i ==\
    \ 0) {\n                    factors.add(i);\n                    n /= i;\n   \
    \             }\n            }\n        }\n        factors.add(n);\n        return\
    \ factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2ohb71vw.java:23: error: incompatible types: int cannot be converted\
    \ to Long\n                    factors.add(i);\n                             \
    \   ^\n/tmp/tmp2ohb71vw.java:29: error: incompatible types: List<Long> cannot\
    \ be converted to ArrayList<Long>\n        return factors;\n               ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011451
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> result = new ArrayList<>();\n        for (long i = 2;\
    \ i <= Math.sqrt(n); i++) {\n            while (n % i == 0) {\n              \
    \  result.add(i);\n                n /= i;\n            }\n        }\n       \
    \ if (n != 1)\n            result.add(n);\n        return result;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011452
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long limit\
    \ = Math.sqrt(n);\n        while (n != 1) {\n            if (n % 2 == 0) n /=\
    \ 2;\n            else if (n % 3 == 0) n /= 3;\n            else {\n         \
    \       for (long i = 3; i <= limit; i += 2) {\n                    if (n % i\
    \ == 0) {\n                        n /= i;\n                        factors.add(i);\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgqdlbtg0.java:20: error: incompatible types: possible lossy conversion\
    \ from double to long\n        long limit = Math.sqrt(n);\n                  \
    \            ^\n1 error\n"
  stdout: ''
  timestamp: 1660011453
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<>();\n        long p = n;\n \
    \       do {\n            if (p == 1) break;\n            factors.add(p);\n  \
    \          long q = p * p;\n            while (q > 1) {\n                p = q;\n\
    \                q = (p * p) / 2;\n            }\n        } while (p > 1);\n \
    \       factors.reverse();\n        return factors;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpevtfw_48.java:30: error: cannot find symbol\n        factors.reverse();\n\
    \               ^\n  symbol:   method reverse()\n  location: variable factors\
    \ of type ArrayList<Long>\n1 error\n"
  stdout: ''
  timestamp: 1660011453
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> result = new ArrayList<>();\n        long n = n;\n  \
    \      long f = 3;\n        long p = 1;\n        long q = 2;\n        long ps\
    \ = 1;\n        long qs = 1;\n\n        while (f < n) {\n            while (p\
    \ < f && n % p == 0) {\n                p *= f;\n                ps *= f;\n  \
    \              result.add(p);\n            }\n            if (f != q) {\n    \
    \            while (q < f && n % (q * q) == 0) {\n                    q *= f;\n\
    \                    qs *= f;\n                    result.add(q);\n          \
    \      }\n            }\n            f += 1;\n        }\n        if (ps == 1 &&\
    \ qs == 1) {\n            result.add(1);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_yqtkhyk.java:20: error: variable n is already defined in method\
    \ factorize(long)\n        long n = n;\n             ^\n/tmp/tmp_yqtkhyk.java:43:\
    \ error: incompatible types: int cannot be converted to Long\n            result.add(1);\n\
    \                       ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011453
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factorization = new ArrayList<>();\n        BigInteger\
    \ bi = BigInteger.valueOf(n);\n        \n        do {\n            long factor\
    \ = bi.divideAndRemainder(BigInteger.valueOf(2l)).longValue();\n            factorization.add(factor);\n\
    \            bi = bi.divideAndRemainder(BigInteger.valueOf(2l));\n        } while\
    \ (bi.compareTo(BigInteger.valueOf(2l)) != 0);\n        \n        factorization.add(bi.longValue());\n\
    \        \n        return factorization;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpp0og2an7.java:23: error: cannot find symbol\n            long factor\
    \ = bi.divideAndRemainder(BigInteger.valueOf(2l)).longValue();\n             \
    \                                                          ^\n  symbol:   method\
    \ longValue()\n  location: class BigInteger[]\n/tmp/tmpp0og2an7.java:25: error:\
    \ incompatible types: BigInteger[] cannot be converted to BigInteger\n       \
    \     bi = bi.divideAndRemainder(BigInteger.valueOf(2l));\n                  \
    \                    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011453
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long product\
    \ = n;\n        long current = 2;\n        boolean isPrime = true;\n\n       \
    \ while (isPrime && product % current == 0) {\n            factors.add(current);\n\
    \            product /= current;\n            current++;\n            isPrime\
    \ = true;\n        }\n\n        long factor = 2;\n        long factorCounter =\
    \ 1;\n        while (factor <= n) {\n            if (n % factor == 0) {\n    \
    \            if (factorCounter <= factors.size()) {\n                    factors.remove(factorCounter);\n\
    \                }\n                factors.add(factor);\n                factorCounter++;\n\
    \                factor++;\n                isPrime = true;\n            }\n \
    \           else {\n                factor++;\n                isPrime = false;\n\
    \            }\n        }\n        return factors;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp492u9856.java:51)\n"
  stdout: ''
  timestamp: 1660011453
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n != 1) {\n            long next = n % factor;\n            if\
    \ (next == 0) {\n                factors.add(factor);\n                n /= factor;\n\
    \            } else {\n                factor = next;\n            }\n       \
    \ }\n        factors.add(factor);\n        return factors;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011458
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factorization = new ArrayList<Long>();\n\n        long\
    \ largestPrimeFactor = (long) Math.ceil(Math.sqrt(n));\n        for(int i = 2;\
    \ i <= largestPrimeFactor; i++) {\n            if(n%i == 0) {\n              \
    \  for(int j = i*i; j > n; j--) {\n                    if(n%j == 0) {\n      \
    \                  factorization.add(j);\n                        n /= j;\n  \
    \                      break;\n                    }\n                }\n    \
    \        }\n        }\n\n        while(n != 1) {\n            factorization.add(n);\n\
    \            n /= 2;\n        }\n        return factorization;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp3m8g7y7y.java:26: error: incompatible types: int cannot be converted\
    \ to Long\n                        factorization.add(j);\n                   \
    \                       ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011453
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<>();\n        for(long i = 1l;\
    \ i <= n; i++) {\n            long r = n / i;\n            if(r != i) {\n    \
    \            while(r > 1) {\n                    if(n % r == 0) factors.add(r);\n\
    \                    r = r / i;\n                }\n            }\n        }\n\
    \        return factors;\n    }\n    public static void main(String[] args) {\n\
    \    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011458
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        factorize(n,\
    \ factors);\n        return factors;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpwsl6mryb.java:20: error: method factorize in class Problem cannot\
    \ be applied to given types;\n        factorize(n, factors);\n        ^\n  required:\
    \ long\n  found:    long,ArrayList<Long>\n  reason: actual and formal argument\
    \ lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011453
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        // Store factors of n in an array list where each entry represents how\
    \ many times it appeared in factorization\n        ArrayList<Long> factors = new\
    \ ArrayList<>();\n        // Store current factors of n in an array list where\
    \ each entry represents how many times it appeared in factorization\n        ArrayList<Long>\
    \ currentFactors = new ArrayList<>();\n        long p = 1;\n        // Keep factors\
    \ of n in an array list where each entry represents how many times it appeared\
    \ in factorization\n        long factor = 1;\n        long pCount = 1;\n     \
    \   while (n != 1) {\n            // For each factor, divide n by that factor\
    \ and check how many factors remain after division\n            factor = p / n;\n\
    \            // If new factor of n is greater than or equal to the original p,\
    \ add it to the current factorization\n            if (factor >= p) {\n      \
    \          currentFactors.add(factor);\n            }\n            // Divide p\
    \ by new factor and store how many times it appeared in factorization\n      \
    \      p = factor;\n            // If new factor of n was less than original p,\
    \ increment the factorization count for that factor\n            if (n < p) {\n\
    \                pCount++;\n            }\n            // If new factor is 1,\
    \ remove it from the factorization array list\n            if (factor==1) {\n\
    \                factors.remove(factor);\n            }\n            // Keep factors\
    \ of n in an array list where each entry represents how many times it appeared\
    \ in factorization\n            factors.add(factor);\n            // If new factor\
    \ of n was greater than original p, add it to the factorization array list after\
    \ multiplying its current count\n            if (factor > p) {\n             \
    \   factors.addAll(Arrays.asList(factor, pCount));\n            }\n          \
    \  // If new factor of n was less than original p, increment the factorization\
    \ count for that factor\n            if (n < p) {\n                pCount++;\n\
    \            }\n        }\n        // Return factors of n in an array list where\
    \ each entry represents how many times it appeared in factorization\n        return\
    \ new ArrayList<Long>(factors);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011458
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        if (n == 1l)\
    \ return factors;\n\n        long factor = 2;\n        long prime = 2;\n\n   \
    \     while (true) {\n            if (n % (factor * prime) == 0) {\n         \
    \       factors.add(factor * prime);\n                factor++;\n            }\n\
    \            if (factor > prime) break;\n            factor++;\n            prime++;\n\
    \        }\n\n        if (factor == prime) {\n            factors.add(factor *\
    \ prime);\n        }\n\n        return factors;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011458
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<>();\n        if (n != 1l) {\n\
    \            Long i = 2l;\n            while (i != n) {\n                Long\
    \ j = 2l;\n                while (j <= n / i) {\n                    j = j * i;\n\
    \                }\n                if (n % j == 0) {\n                    factors.add(j);\n\
    \                }\n                i = i + 1;\n            }\n        }\n   \
    \     return factors;\n    }\n    public static void main(String[] args) {\n \
    \   assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf4hge2gz.java:36)\n"
  stdout: ''
  timestamp: 1660011453
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        // Check prime\n\
    \        if (!isPrime(n)) {\n            factors.add(Long.valueOf(n));\n     \
    \       return factors;\n        }\n        // Find out prime factors\n      \
    \  ArrayList<Long> primeFactors = getPrimeFactors(n);\n        // If number is\
    \ prime and has no other prime factor, add number to array\n        // For this\
    \ example, use factors of n to calculate prime factors\n        for (Long p :\
    \ primeFactors) {\n            factors.add(p);\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgkh43kld.java:21: error: cannot find symbol\n        if (!isPrime(n))\
    \ {\n             ^\n  symbol:   method isPrime(long)\n  location: class Problem\n\
    /tmp/tmpgkh43kld.java:26: error: cannot find symbol\n        ArrayList<Long> primeFactors\
    \ = getPrimeFactors(n);\n                                       ^\n  symbol: \
    \  method getPrimeFactors(long)\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011453
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        ArrayList<Long>\
    \ divisors = new ArrayList<Long>();\n        long p = 1;\n        while (n > 1)\
    \ {\n            while (n % p == 0) {\n                divisors.add(p);\n    \
    \            n /= p;\n            }\n            factors.add(p);\n           \
    \ p += 2;\n        }\n        long c = 1;\n        while (n > 1) {\n         \
    \   while (n % c == 0) {\n                divisors.add(c);\n                n\
    \ /= c;\n            }\n            factors.add(c);\n            c += 2;\n   \
    \     }\n        if (n > 1) {\n            factors.add(n);\n        }\n      \
    \  Collections.sort(factors);\n        Collections.sort(divisors);\n        for\
    \ (int i = 0; i < divisors.size(); i++) {\n            if (divisors.get(i) * factors.get(i)\
    \ > n) {\n                return factors;\n            }\n        }\n        return\
    \ factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011458
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        if (n <= 1L) return new ArrayList<Long>();\n        ArrayList<Long> arr\
    \ = new ArrayList<Long>();\n        long d = n;\n        while (d > 1L) {\n  \
    \          while (n % d == 0L) {\n                arr.add(d);\n              \
    \  n /= d;\n            }\n            arr.add(1);\n            d /= 2;\n    \
    \    }\n        return arr;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp0e5oc62_.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            arr.add(1);\n                    ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011453
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        List<Long> factors = new ArrayList<Long>();\n        BigInteger b = new\
    \ BigInteger(Long.toString(n), 10);\n        for (int i = 2; b.divide(i).equals(BigInteger.ZERO);\
    \ i++) {\n            if (b.mod(i).equals(BigInteger.ZERO)) {\n              \
    \  factors.add(i);\n                b = b.divide(i);\n            }\n        }\n\
    \        factors.add(b.toString().length());\n        factors.addAll(Arrays.asList(new\
    \ Long[factors.size()]));\n        factorize = new ArrayList<Long>(factors);\n\
    \        return factorize;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpq_akcbno.java:21: error: incompatible types: int cannot be converted\
    \ to BigInteger\n        for (int i = 2; b.divide(i).equals(BigInteger.ZERO);\
    \ i++) {\n                                 ^\n/tmp/tmpq_akcbno.java:22: error:\
    \ incompatible types: int cannot be converted to BigInteger\n            if (b.mod(i).equals(BigInteger.ZERO))\
    \ {\n                      ^\n/tmp/tmpq_akcbno.java:23: error: incompatible types:\
    \ int cannot be converted to Long\n                factors.add(i);\n         \
    \                   ^\n/tmp/tmpq_akcbno.java:24: error: incompatible types: int\
    \ cannot be converted to BigInteger\n                b = b.divide(i);\n      \
    \                       ^\n/tmp/tmpq_akcbno.java:27: error: incompatible types:\
    \ int cannot be converted to Long\n        factors.add(b.toString().length());\n\
    \                                       ^\n/tmp/tmpq_akcbno.java:29: error: cannot\
    \ find symbol\n        factorize = new ArrayList<Long>(factors);\n        ^\n\
    \  symbol:   variable factorize\n  location: class Problem\n/tmp/tmpq_akcbno.java:30:\
    \ error: cannot find symbol\n        return factorize;\n               ^\n  symbol:\
    \   variable factorize\n  location: class Problem\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n7 errors\n"
  stdout: ''
  timestamp: 1660011453
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        return factorize(n, new ArrayList<Long>());\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpvp0n1an1.java:19: error: method factorize in class Problem cannot\
    \ be applied to given types;\n        return factorize(n, new ArrayList<Long>());\n\
    \               ^\n  required: long\n  found:    long,ArrayList<Long>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011453
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        // find smallest\
    \ factor\n        long smallest = Math.sqrt(n);\n        long factor = 0;\n  \
    \      for(long i = 2l; i <= smallest; i++) {\n            if(n%i == 0) {\n  \
    \              factor = i;\n                break;\n            }\n        }\n\
    \        // find smallest factor with power of two\n        smallest = Math.sqrt(n/factor);\n\
    \        long powOfTwoFactor = 1;\n        for(long i = smallest; i <= n; i *=\
    \ i) {\n            if(n%i == 0) {\n                powOfTwoFactor = i;\n    \
    \            break;\n            }\n        }\n        // find all prime factors\
    \ of smallest factor\n        for(long i = smallest; i <= n/powOfTwoFactor; i++)\
    \ {\n            if(n%i == 0) {\n                factors.add(i);\n           \
    \ }\n        }\n        factors.add(factor);\n        factors.add(powOfTwoFactor);\n\
    \        return factors;\n    }\n    public static void main(String[] args) {\n\
    \    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpyxqz1ahq.java:21: error: incompatible types: possible lossy conversion\
    \ from double to long\n        long smallest = Math.sqrt(n);\n               \
    \                  ^\n/tmp/tmpyxqz1ahq.java:30: error: incompatible types: possible\
    \ lossy conversion from double to long\n        smallest = Math.sqrt(n/factor);\n\
    \                            ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011453
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        int i = 0;\n\
    \        long factor = 1;\n        for (; (i*factor) <= n; i++) {\n          \
    \  if (n % (i*factor) == 0) {\n                factor = 1;\n            }\n  \
    \          else {\n                factor++;\n            }\n        }\n     \
    \   factors.add((long) factor);\n        while ((i*factor) <= n) {\n         \
    \   factor++;\n        }\n        factors.add((long) factor);\n        return\
    \ factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArithmeticException: / by zero\n\
    \tat Problem.factorize(tmponbpnxl_.java:23)\n\tat Problem.main(tmponbpnxl_.java:38)\n"
  stdout: ''
  timestamp: 1660011453
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<>();\n        Set<Long> seen\
    \ = new HashSet<>();\n        long f = 2;\n        while (f <= n) if (!seen.contains(f))\
    \ {\n            if (n % f == 0) {\n                factors.add(f);\n        \
    \        seen.add(f * f);\n                n /= f;\n            }\n          \
    \  f++;\n        }\n        return factors;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp486afne0.java:34)\n"
  stdout: ''
  timestamp: 1660011453
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        // If number is not positive, return empty array\n        if (n < 0)\
    \ {\n            return new ArrayList<Long>();\n        }\n\n        // Make a\
    \ list of factors\n        ArrayList<Long> factors = new ArrayList<>();\n\n  \
    \      // If number is even, add it to the factors array\n        if (n % 2 ==\
    \ 0) {\n            factors.add(2l);\n            factors.add(n / 2);\n      \
    \  }\n\n        // If number is odd, recursively add all odd divisors\n      \
    \  // of n\n        else {\n            // If n is odd, add it to factors array\n\
    \            if (n % 2 == 1) {\n                factors.add(n % 2);\n        \
    \        factors.add((n / 2));\n            }\n\n            // Otherwise, add\
    \ all odd divisors of n\n            long p = 2;\n            // Loop over all\
    \ odd divisors\n            while (p < n / 2) {\n                // If n is divisible\
    \ by p, add it to factors array\n                if (n % p == 0) {\n         \
    \           factors.add(p);\n                    factors.add((n / p));\n     \
    \               break;\n                }\n                // Increment p by 2\n\
    \                p += 2;\n            }\n        }\n\n        // Sort factors\n\
    \        Collections.sort(factors);\n\n        // Return factors array\n     \
    \   return factors;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp38hwt2bt.java:64)\n"
  stdout: ''
  timestamp: 1660011453
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<>();\n        long factor;\n\
    \        for (factor = BigInteger.valueOf(n).divideAndRemainder(BigInteger.TWO);\
    \ factor.compareTo(BigInteger.ZERO) == 0; factor = factor.divideAndRemainder(BigInteger.TWO))\
    \ {\n            if (factors.contains(factor)) {\n                factors.remove(factor);\n\
    \            } else {\n                factors.add(factor);\n            }\n \
    \       }\n        return factors;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2s_z_ka9.java:21: error: incompatible types: BigInteger[] cannot\
    \ be converted to long\n        for (factor = BigInteger.valueOf(n).divideAndRemainder(BigInteger.TWO);\
    \ factor.compareTo(BigInteger.ZERO) == 0; factor = factor.divideAndRemainder(BigInteger.TWO))\
    \ {\n                                                              ^\n/tmp/tmp2s_z_ka9.java:21:\
    \ error: long cannot be dereferenced\n        for (factor = BigInteger.valueOf(n).divideAndRemainder(BigInteger.TWO);\
    \ factor.compareTo(BigInteger.ZERO) == 0; factor = factor.divideAndRemainder(BigInteger.TWO))\
    \ {\n                                                                        \
    \              ^\n/tmp/tmp2s_z_ka9.java:21: error: long cannot be dereferenced\n\
    \        for (factor = BigInteger.valueOf(n).divideAndRemainder(BigInteger.TWO);\
    \ factor.compareTo(BigInteger.ZERO) == 0; factor = factor.divideAndRemainder(BigInteger.TWO))\
    \ {\n                                                                        \
    \                                                               ^\n3 errors\n"
  stdout: ''
  timestamp: 1660011454
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>(Arrays.asList(2l));\n \
    \       if (n <= 1l) return factors;\n\n        long current = 2l, factor = 1;\n\
    \        while (current <= n) {\n            while (n % current == 0) {\n    \
    \            factors.add(factor);\n                n /= current;\n           \
    \ }\n            factor++;\n            current++;\n        }\n        factors.add(factor);\n\
    \n        return factors;\n    }\n    public static void main(String[] args) {\n\
    \    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8r1s3lvr.java:36)\n"
  stdout: ''
  timestamp: 1660011454
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> arr = new ArrayList<Long>();\n        ArrayList<Long>\
    \ fact = new ArrayList<Long>();\n        for (int i = 0; i < 2; i++) {\n     \
    \       for (int j = n; j > 1l; j = j * 2l) {\n                if (j % i == 0)\
    \ {\n                    fact.add(j);\n                }\n            }\n    \
    \        if (fact.size() > 0) {\n                arr.add(Long.valueOf(fact.size()));\n\
    \                fact.remove(0);\n            }\n        }\n        return arr;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4ihy54bi.java:22: error: incompatible types: possible lossy conversion\
    \ from long to int\n            for (int j = n; j > 1l; j = j * 2l) {\n      \
    \                   ^\n/tmp/tmp4ihy54bi.java:22: error: incompatible types: possible\
    \ lossy conversion from long to int\n            for (int j = n; j > 1l; j = j\
    \ * 2l) {\n                                          ^\n/tmp/tmp4ihy54bi.java:24:\
    \ error: incompatible types: int cannot be converted to Long\n               \
    \     fact.add(j);\n                             ^\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1660011454
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<>();\n        ArrayList<Long>\
    \ factors2 = new ArrayList<>();\n        long maxFactor = n;\n        long factor\
    \ = 1;\n        while (n > 1) {\n            if (n % factor == 0) {\n        \
    \        factors.add(factor);\n                factors2.add(factor);\n       \
    \         n /= factor;\n            } else {\n                factor++;\n    \
    \            factors2.add(factor);\n                maxFactor *= factor;\n   \
    \         }\n        }\n        factors.add(maxFactor);\n        factors2.add(maxFactor);\n\
    \        factors.add(1l);\n        factors2.add(1l);\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011459
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        if (n <= 1)\
    \ {\n            return factors;\n        }\n        long prime = 1;\n       \
    \ while (prime * prime <= n) {\n            if (n % prime == 0) {\n          \
    \      factors.add(prime);\n                n /= prime;\n            }\n     \
    \       else {\n                prime++;\n            }\n        }\n        if\
    \ (n > 2) {\n            factors.add(n);\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011459
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> result = new ArrayList<Long>();\n\n        for (long\
    \ i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                long\
    \ product = i * i;\n                while (n % product == 0) {\n             \
    \       result.add(product);\n                    n /= product;\n            \
    \    }\n            }\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa4h3w7yq.java:33)\n"
  stdout: ''
  timestamp: 1660011454
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        if (n != 1)\
    \ {\n            factors.add(1L);\n        }\n        int k = n;\n        while\
    \ (k % 2 == 0) {\n            k = k / 2;\n            factors.add(2L);\n     \
    \   }\n        while (k % 3 == 0) {\n            k = k / 3;\n            factors.add(3L);\n\
    \        }\n        while (k % 5 == 0) {\n            k = k / 5;\n           \
    \ factors.add(5L);\n        }\n        while (k % 7 == 0) {\n            k = k\
    \ / 7;\n            factors.add(7L);\n        }\n        while (k % 11 == 0) {\n\
    \            k = k / 11;\n            factors.add(11L);\n        }\n        while\
    \ (k % 13 == 0) {\n            k = k / 13;\n            factors.add(13L);\n  \
    \      }\n        while (k % 17 == 0) {\n            k = k / 17;\n           \
    \ factors.add(17L);\n        }\n        while (k % 19 == 0) {\n            k =\
    \ k / 19;\n            factors.add(19L);\n        }\n        while (k % 23 ==\
    \ 0) {\n            k = k / 23;\n            factors.add(23L);\n        }\n  \
    \      while (k % 29 == 0) {\n            k = k / 29;\n            factors.add(29L);\n\
    \        }\n        while (k % 31 == 0) {\n            k = k / 31;\n         \
    \   factors.add(31L);\n        }\n        while (k % 37 == 0) {\n            k\
    \ = k / 37;\n            factors.add(37L);\n        }\n        while (k % 41 ==\
    \ 0) {\n            k = k / 41;\n            factors.add(41L);\n        }\n  \
    \      while (k % 43 == 0) {\n            k = k / 43;\n            factors.add(43L);\n\
    \        }\n        while (k % 47 == 0) {\n            k = k / 47;\n         \
    \   factors.add(47L);\n        }\n        while (k % 51 == 0) {\n            k\
    \ = k / 51;\n            factors.add(51L);\n        }\n        while (k % 53 ==\
    \ 0) {\n            k = k / 53;\n            factors.add(53L);\n        }\n  \
    \      while (k % 59 == 0) {\n            k = k / 59;\n            factors.add(59L);\n\
    \        }\n        while (k % 61 == 0) {\n            k = k / 61;\n         \
    \   factors.add(61L);\n        }\n        while (k % 67 == 0) {\n            k\
    \ = k / 67;\n            factors.add(67L);\n        }\n        while (k % 71 ==\
    \ 0) {\n            k = k / 71;\n            factors.add(71L);\n        }\n  \
    \      while (k % 73 == 0) {\n            k = k / 73;\n            factors.add(73L);\n\
    \        }\n        while (k % 79 == 0) {\n            \n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpaef8umko.java:115: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1660011453
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        \n        ArrayList<Long>\
    \ factorsTemp = new ArrayList<Long>();\n        \n        if (n == 1) {\n    \
    \        factors.add(new Long(n));\n            return factors;\n        }\n \
    \       \n        long i = 1l;\n        long factor = 1;\n        \n        while\
    \ (i <= n) {\n            if (n % i == 0) {\n                factorsTemp.add(new\
    \ Long(i));\n                n = n / i;\n            } else {\n              \
    \  factor++;\n                i *= factor;\n            }\n        }\n       \
    \ \n        factorsTemp = factorsTemp.stream().filter(x -> !x.equals(new Long(factor))).collect(Collectors.toList());\n\
    \        \n        factorsTemp.forEach(x -> factors.add(x));\n        \n     \
    \   return factors;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpa8uao7nb.java:24: warning: [removal] Long(long) in Long has been\
    \ deprecated and marked for removal\n            factors.add(new Long(n));\n \
    \                       ^\n/tmp/tmpa8uao7nb.java:33: warning: [removal] Long(long)\
    \ in Long has been deprecated and marked for removal\n                factorsTemp.add(new\
    \ Long(i));\n                                ^\n/tmp/tmpa8uao7nb.java:41: warning:\
    \ [removal] Long(long) in Long has been deprecated and marked for removal\n  \
    \      factorsTemp = factorsTemp.stream().filter(x -> !x.equals(new Long(factor))).collect(Collectors.toList());\n\
    \                                                                 ^\n/tmp/tmpa8uao7nb.java:41:\
    \ error: incompatible types: inference variable R has incompatible bounds\n  \
    \      factorsTemp = factorsTemp.stream().filter(x -> !x.equals(new Long(factor))).collect(Collectors.toList());\n\
    \                                                                            \
    \               ^\n    equality constraints: List<T#2>\n    lower bounds: ArrayList<Long>,Object\n\
    \  where R,A,T#1,T#2 are type-variables:\n    R extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    A extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    T#1 extends Object declared in\
    \ interface Stream\n    T#2 extends Object declared in method <T#2>toList()\n\
    1 error\n3 warnings\n"
  stdout: ''
  timestamp: 1660011454
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>(Arrays.asList((long) 1l));\n\
    \        while (n != 1l) {\n            while (n % 2l == 0l)\n               \
    \ factors.add((long) 2l);\n            while (n % 3l == 0l)\n                factors.add((long)\
    \ 3l);\n            while (n % 5l == 0l)\n                factors.add((long) 5l);\n\
    \            while (n % 7l == 0l)\n                factors.add((long) 7l);\n \
    \           while (n % 11l == 0l)\n                factors.add((long) 11l);\n\
    \            while (n % 13l == 0l)\n                factors.add((long) 13l);\n\
    \            while (n % 17l == 0l)\n                factors.add((long) 17l);\n\
    \            while (n % 19l == 0l)\n                factors.add((long) 19l);\n\
    \            while (n % 23l == 0l)\n                factors.add((long) 23l);\n\
    \            while (n % 29l == 0l)\n                factors.add((long) 29l);\n\
    \            while (n % 31l == 0l)\n                factors.add((long) 31l);\n\
    \            while (n % 37l == 0l)\n                factors.add((long) 37l);\n\
    \            while (n % 41l == 0l)\n                factors.add((long) 41l);\n\
    \            while (n % 43l == 0l)\n                factors.add((long) 43l);\n\
    \            while (n % 47l == 0l)\n                factors.add((long) 47l);\n\
    \            while (n % 53l == 0l)\n                factors.add((long) 53l);\n\
    \            while (n % 59l == 0l)\n                factors.add((long) 59l);\n\
    \            while (n % 61l == 0l)\n                factors.add((long) 61l);\n\
    \            while (n % 67l == 0l)\n                factors.add((long) 67l);\n\
    \            while (n % 71l == 0l)\n                factors.add((long) 71l);\n\
    \            while (n % 73l == 0l)\n                factors.add((long) 73l);\n\
    \            while (n % 79l == 0l)\n                factors.add((long) 79l);\n\
    \            while (n % 83l == 0l)\n                factors.add((long) 83l);\n\
    \            while (n % 89l == 0l)\n                factors.add((long) 89l);\n\
    \            while (n % 97l == 0l)\n                factors.add((long) 97l);\n\
    \            n = n / 2l;\n        }\n        return factors;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011459
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        boolean flag\
    \ = true;\n        long p = 1;\n        long n2 = n;\n        while (n % p ==\
    \ 0) {\n            factors.add(p);\n            n /= p;\n        }\n        while\
    \ (n2 != 1) {\n            flag = false;\n            for (Long factor : factors)\
    \ {\n                if (n2 % factor == 0) {\n                    factors.add(factor);\n\
    \                    n2 /= factor;\n                    flag = true;\n       \
    \             break;\n                }\n            }\n            if (flag)\
    \ {\n                factors.add(n2);\n                n2 = 1;\n            }\n\
    \        }\n        return factors;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011459
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<>();\n        int count = 0;\n\
    \        for (int factor = 2; factor * factor <= n; factor++) {\n            if\
    \ (n % factor == 0) {\n                factors.add(factor);\n                n\
    \ /= factor;\n                count++;\n            }\n        }\n        if (n\
    \ > 1) {\n            factors.add(n);\n        }\n        Collections.sort(factors);\n\
    \        return factors;\n    }\n    public static void main(String[] args) {\n\
    \    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp4wwgdyvv.java:23: error: incompatible types: int cannot be converted\
    \ to Long\n                factors.add(factor);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1660011454
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long current\
    \ = n;\n        while (current != 1) {\n            if (current % 2 == 0) factors.add(2);\n\
    \            if (current % 3 == 0) factors.add(3);\n            if (current %\
    \ 5 == 0) factors.add(5);\n            if (current % 7 == 0) factors.add(7);\n\
    \            current /= 2;\n        }\n        return factors;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpu8if3zjx.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            if (current % 2 == 0) factors.add(2);\n               \
    \                               ^\n/tmp/tmpu8if3zjx.java:23: error: incompatible\
    \ types: int cannot be converted to Long\n            if (current % 3 == 0) factors.add(3);\n\
    \                                              ^\n/tmp/tmpu8if3zjx.java:24: error:\
    \ incompatible types: int cannot be converted to Long\n            if (current\
    \ % 5 == 0) factors.add(5);\n                                              ^\n\
    /tmp/tmpu8if3zjx.java:25: error: incompatible types: int cannot be converted to\
    \ Long\n            if (current % 7 == 0) factors.add(7);\n                  \
    \                            ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n4 errors\n"
  stdout: ''
  timestamp: 1660011454
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<>();\n        if (n == 1l) return\
    \ factors;\n        long max = Math.sqrt(n); // largest factor of n\n        while\
    \ (n / max > 1) {\n            if (n % max == 0) factors.add(max);\n         \
    \   max /= max;\n        }\n        return factors;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpk5rx6hph.java:21: error: incompatible types: possible lossy conversion\
    \ from double to long\n        long max = Math.sqrt(n); // largest factor of n\n\
    \                            ^\n1 error\n"
  stdout: ''
  timestamp: 1660011454
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<>();\n        int factor = 0;\n\
    \        do {\n            factor++;\n            factors.add(factor);\n     \
    \   } while ((n = n / factor));\n        return factors;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsuxxjbnq.java:23: error: incompatible types: int cannot be converted\
    \ to Long\n            factors.add(factor);\n                        ^\n/tmp/tmpsuxxjbnq.java:24:\
    \ error: incompatible types: long cannot be converted to boolean\n        } while\
    \ ((n = n / factor));\n                    ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011454
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> result = new ArrayList<Long>();\n        ArrayList<Long>\
    \ factors = new ArrayList<Long>();\n        for (int i = 1; i < Math.sqrt(n);\
    \ i++) {\n            if (n % i == 0) {\n                if (i == 2) {\n     \
    \               factors.add(1l);\n                }\n                else {\n\
    \                    factors.add(i);\n                }\n                result.addAll(0,\
    \ factors);\n                factors.clear();\n            }\n        }\n    \
    \    result.addAll(0, factors);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdne_u7uw.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n                    factors.add(i);\n                             \
    \   ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011454
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> result = new ArrayList<Long>(Arrays.asList((long)1l));\n\
    \        ArrayList<Long> factors = new ArrayList<Long>(Arrays.asList((long)1l));\n\
    \        while (!factors.contains(n)) {\n            long newNum = factors.stream().filter((x)\
    \ -> x != n).reduce((a,b) -> a * b).toLong();\n            if (newNum > n) { break;\
    \ }\n            factors.add(newNum);\n            long primeFactors = Math.sqrt(newNum);\n\
    \            for (int i = 1; i <= primeFactors; i++) {\n                if (n\
    \ % i == 0) {\n                    factors.add(new Long(i));\n               \
    \ }\n            }\n            result.add(newNum);\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9dai3ugq.java:22: error: cannot find symbol\n            long newNum\
    \ = factors.stream().filter((x) -> x != n).reduce((a,b) -> a * b).toLong();\n\
    \                                                                            \
    \           ^\n  symbol:   method toLong()\n  location: class Optional<Long>\n\
    /tmp/tmp9dai3ugq.java:25: error: incompatible types: possible lossy conversion\
    \ from double to long\n            long primeFactors = Math.sqrt(newNum);\n  \
    \                                       ^\n/tmp/tmp9dai3ugq.java:28: warning:\
    \ [removal] Long(long) in Long has been deprecated and marked for removal\n  \
    \                  factors.add(new Long(i));\n                               \
    \ ^\n2 errors\n1 warning\n"
  stdout: ''
  timestamp: 1660011455
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<>();\n        for (long i = 2;\
    \ i <= n; i++) {\n            if (n % i == 0) {\n                factors.add(i);\n\
    \                while (n / i > i) {\n                    factors.add(n / i);\n\
    \                }\n            }\n        }\n        return factors;\n    }\n\
    \    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmple235m88.java:32)\n"
  stdout: ''
  timestamp: 1660011455
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        List<Long>\
    \ factorization = factors(n);\n        if (factorization.isEmpty()) {\n      \
    \      factors.add(1);\n        } else {\n            Long lastFactor = factorization.get(factorization.size()\
    \ - 1);\n            for (Long factor : factorization) {\n                while\
    \ (factor % lastFactor != 0) {\n                    factors.add(1);\n        \
    \        }\n                lastFactor = factor;\n            }\n        }\n \
    \       return factors;\n    }\n    public static void main(String[] args) {\n\
    \    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpkub594oq.java:20: error: cannot find symbol\n        List<Long>\
    \ factorization = factors(n);\n                                   ^\n  symbol:\
    \   method factors(long)\n  location: class Problem\n/tmp/tmpkub594oq.java:22:\
    \ error: incompatible types: int cannot be converted to Long\n            factors.add(1);\n\
    \                        ^\n/tmp/tmpkub594oq.java:27: error: incompatible types:\
    \ int cannot be converted to Long\n                    factors.add(1);\n     \
    \                           ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1660011455
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        // All prime numbers less than sqrt(n) except 2 and 3\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        final long MAX = 2l;\n        final long\
    \ MAX2 = 2 * MAX;\n        final long MAX3 = 2 * MAX2;\n        final long MAX5\
    \ = 5 * MAX3;\n        final long MAX7 = 7 * MAX5;\n        long i = n;\n    \
    \    long j = 1;\n        long k = 2;\n        while (i <= MAX2) {\n         \
    \   long x = 1;\n            while (j <= MAX2) {\n                long z = 0;\n\
    \                if (i % j == 0) {\n                    z = i;\n             \
    \       i = j;\n                }\n                j += k;\n                k++;\n\
    \                if (z != 0) {\n                    break;\n                }\n\
    \                x = x * j;\n            }\n            j = MAX2;\n          \
    \  if (i % x == 0) {\n                result.add(x);\n                i = x /\
    \ i;\n                j = 0;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArithmeticException: / by zero\n\
    \tat Problem.factorize(tmpkk3_nxst.java:33)\n\tat Problem.main(tmpkk3_nxst.java:54)\n"
  stdout: ''
  timestamp: 1660011455
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> primeFactors = new ArrayList<Long>(Collections.nCopies(n,\
    \ 1L));\n        boolean isPrime = true;\n        for (int i = 2; i <= Math.sqrt(n);\
    \ i++) {\n            if (n % i == 0) {\n                isPrime = false;\n  \
    \              break;\n            }\n        }\n        if (isPrime) {\n    \
    \        for (int i = 2; i <= Math.sqrt(n); i++) {\n                if (n % i\
    \ == 0) {\n                    for (int j = 2 * i; j < n; j += i) {\n        \
    \                primeFactors.set(i, primeFactors.get(j) + 1);\n             \
    \       }\n                }\n            }\n        }\n        return primeFactors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbqgj617k.java:19: error: incompatible types: possible lossy conversion\
    \ from long to int\n        ArrayList<Long> primeFactors = new ArrayList<Long>(Collections.nCopies(n,\
    \ 1L));\n                                                                    \
    \           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011455
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<>();\n        long p = n;\n \
    \       while (p * p < n) {\n            p *= p;\n            factors.add(p);\n\
    \        }\n        return factors;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp90oku2om.java:28)\n"
  stdout: ''
  timestamp: 1660011455
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> f = new ArrayList<Long>();\n        for (int i = 2; i\
    \ <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                for\
    \ (int j = i*i; j <= n; j += i) {\n                    if (j == n) {\n       \
    \                 f.add(i);\n                        break;\n                \
    \    }\n                    else if (j < n) {\n                        f.add(j);\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n        return f;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpyeoii0d0.java:24: error: incompatible types: int cannot be converted\
    \ to Long\n                        f.add(i);\n                              ^\n\
    /tmp/tmpyeoii0d0.java:28: error: incompatible types: int cannot be converted to\
    \ Long\n                        f.add(j);\n                              ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n2 errors\n"
  stdout: ''
  timestamp: 1660011456
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        if (n < 2) return new ArrayList<Long>(Arrays.asList(1l));\n        if\
    \ (n % 2 == 0) {\n            return factorize(n/2);\n        } else {\n     \
    \       ArrayList<Long> factors = new ArrayList<Long>();\n            factors.add(2l);\n\
    \            factors.add(2);\n            factors.add(1);\n            for (long\
    \ i=3; i*i <= n; i+=2) {\n                if (n % i == 0) {\n                \
    \    factors.add(i);\n                    factors.add(n/i);\n                }\n\
    \            }\n            return factors;\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp3lrcl6g4.java:25: error: incompatible types: int cannot be converted\
    \ to Long\n            factors.add(2);\n                        ^\n/tmp/tmp3lrcl6g4.java:26:\
    \ error: incompatible types: int cannot be converted to Long\n            factors.add(1);\n\
    \                        ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011456
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        if (n <= 1l)\n            return null;\n        if (n % 2l == 0l)\n \
    \           return new ArrayList<Long>(Arrays.asList((long)2l));\n        ArrayList<Long>\
    \ factors = new ArrayList<Long>();\n        for (long i = 2l; i <= Math.sqrt(n);\
    \ i++) {\n            if (n % i == 0l) {\n                factors.add(i);\n  \
    \              n /= i;\n            }\n        }\n        return factors;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj90eg1ww.java:34)\n"
  stdout: ''
  timestamp: 1660011456
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<>((long) n);\n        int n =\
    \ Math.sqrt(n);\n        for(int i = 0; i <= n; i++) {\n            if(n%i ==\
    \ 0) {\n                for (int j = i; j <= n; j += i) {\n                  \
    \  if (j%i == 0)\n                        break;\n                }\n        \
    \        if (i%i == 0)\n                    factors.add(i);\n            }\n \
    \       }\n        return factors;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmple4cylop.java:19: error: cannot infer type arguments for ArrayList<>\n\
    \        ArrayList<Long> factors = new ArrayList<>((long) n);\n              \
    \                    ^\n/tmp/tmple4cylop.java:20: error: variable n is already\
    \ defined in method factorize(long)\n        int n = Math.sqrt(n);\n         \
    \   ^\n/tmp/tmple4cylop.java:20: error: incompatible types: possible lossy conversion\
    \ from double to int\n        int n = Math.sqrt(n);\n                        \
    \ ^\n/tmp/tmple4cylop.java:28: error: incompatible types: int cannot be converted\
    \ to Long\n                    factors.add(i);\n                             \
    \   ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n4 errors\n"
  stdout: ''
  timestamp: 1660011455
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        // Initialize array to store all factors\n        ArrayList<Long> factors\
    \ = new ArrayList<>();\n        // For all factors from 1 to n\n        for (int\
    \ i = 1; i <= n; i++) {\n            // If current number is a factor of n\n \
    \           if (n % i == 0) {\n                // Add it to factors list\n   \
    \             factors.add(i);\n                // Remove i from n to find next\
    \ factors\n                n = n / i;\n            }\n        }\n        return\
    \ factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4ghtxdgi.java:26: error: incompatible types: int cannot be converted\
    \ to Long\n                factors.add(i);\n                            ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n1 error\n"
  stdout: ''
  timestamp: 1660011456
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> primeFactors = new ArrayList<Long>();\n        // Loop\
    \ till the square root of given number\n        long sq = n;\n        while (sq\
    \ > 1) {\n            // If factorization starts with one number greater than\
    \ given number\n            if (isPrime(sq)) {\n                primeFactors.add(sq);\n\
    \            }\n            // Divide square number by every number smaller than\
    \ square root of given number\n            for (long i = (long) (Math.sqrt(sq)\
    \ + 1); i < sq; i++) {\n                sq /= i;\n                // If square\
    \ number is divisible by any number\n                // smaller than square root\
    \ of given number, then it is not prime factorization\n                if (isPrime(sq))\
    \ {\n                    break;\n                }\n            }\n        }\n\
    \        return primeFactors;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpl3f3nktx.java:24: error: cannot find symbol\n            if (isPrime(sq))\
    \ {\n                ^\n  symbol:   method isPrime(long)\n  location: class Problem\n\
    /tmp/tmpl3f3nktx.java:32: error: cannot find symbol\n                if (isPrime(sq))\
    \ {\n                    ^\n  symbol:   method isPrime(long)\n  location: class\
    \ Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011456
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<>();\n        factorizeRecursively(n,\
    \ factors);\n        return factors;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp7b8xd20s.java:20: error: cannot find symbol\n        factorizeRecursively(n,\
    \ factors);\n        ^\n  symbol:   method factorizeRecursively(long,ArrayList<Long>)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011456
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        if (n == 1l) return new ArrayList<Long>(Arrays.asList((long)n));\n  \
    \      ArrayList<Long> factors = new ArrayList<>();\n        long d = 2l;\n  \
    \      while (!(n/d).equals(1)) {\n            long i = n*d;\n            while\
    \ (!(n/i).equals(1)) {\n                factors.add(i); //Add each factor to list\n\
    \                n /= i;\n            }\n            n /= d;\n            d +=\
    \ 2l;\n        }\n        ArrayList<Long> res = new ArrayList<>();\n        for\
    \ (long i : factors) {\n            long d = i;\n            while (n != 1) {\n\
    \                n /= d;\n                d += 2l;\n            }\n          \
    \  res.add(d);\n        }\n        return res;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmppp7cprq9.java:22: error: long cannot be dereferenced\n        while\
    \ (!(n/d).equals(1)) {\n                     ^\n/tmp/tmppp7cprq9.java:24: error:\
    \ long cannot be dereferenced\n            while (!(n/i).equals(1)) {\n      \
    \                   ^\n/tmp/tmppp7cprq9.java:33: error: variable d is already\
    \ defined in method factorize(long)\n            long d = i;\n               \
    \  ^\n3 errors\n"
  stdout: ''
  timestamp: 1660011456
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long factor\
    \ = 1;\n        while (!(n%factor)) {\n            factors.add(factor);\n    \
    \        n = n/factor;\n            factor++;\n        }\n        if (n%factor\
    \ != 0) {\n            factors.add(factor);\n        }\n        Collections.sort(factors);\n\
    \        return factors;\n    }\n    public static void main(String[] args) {\n\
    \    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpri5sdh7f.java:21: error: bad operand type long for unary operator\
    \ '!'\n        while (!(n%factor)) {\n               ^\n1 error\n"
  stdout: ''
  timestamp: 1660011456
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        ArrayList<Long>\
    \ factorization = factorization(n);\n        factors.add(factorization.size());\n\
    \        for (long n : factorization) {\n            factors.add(factorization.size());\n\
    \        }\n        return factors;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp39a2p0lf.java:20: error: cannot find symbol\n        ArrayList<Long>\
    \ factorization = factorization(n);\n                                        ^\n\
    \  symbol:   method factorization(long)\n  location: class Problem\n/tmp/tmp39a2p0lf.java:21:\
    \ error: incompatible types: int cannot be converted to Long\n        factors.add(factorization.size());\n\
    \                                      ^\n/tmp/tmp39a2p0lf.java:22: error: variable\
    \ n is already defined in method factorize(long)\n        for (long n : factorization)\
    \ {\n                  ^\n/tmp/tmp39a2p0lf.java:23: error: incompatible types:\
    \ int cannot be converted to Long\n            factors.add(factorization.size());\n\
    \                                          ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n4 errors\n"
  stdout: ''
  timestamp: 1660011457
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> list = new ArrayList<Long>();\n        List<Long> factors\
    \ = factorize(n);\n        for(int i=0;i<factors.size();i++) {\n            list.addAll(Arrays.asList(factors.get(i)));\n\
    \        }\n        return list;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem.factorize(tmpla32kzzu.java:20)\n\
    \tat Problem.factorize(tmpla32kzzu.java:20)\n\tat Problem.factorize(tmpla32kzzu.java:20)\n\
    \tat Problem.factorize(tmpla32kzzu.java:20)\n\tat Problem.factorize(tmpla32kzzu.java:20)\n\
    \tat Problem.factorize(tmpla32kzzu.java:20)\n\tat Problem.factorize(tmpla32kzzu.java:20)\n\
    \tat Problem.factorize(tmpla32kzzu.java:20)\n\tat Problem.factorize(tmpla32kzzu.java:20)\n\
    \tat Problem.factorize(tmpla32kzzu.java:20)\n\tat Problem.factorize(tmpla32kzzu.java:20)\n\
    \tat Problem.factorize(tmpla32kzzu.java:20)\n\tat Problem.factorize(tmpla32kzzu.java:20)\n\
    \tat Problem.factorize(tmpla32kzzu.java:20)\n\tat Problem.factorize(tmpla32kzzu.java:20)\n\
    \tat Problem.factorize(tmpla32kzzu.java:20)\n\tat Problem.factorize(tmpla32kzzu.java:20)\n\
    \tat Problem.factorize(tmpla32kzzu.java:20)\n\tat Problem.factorize(tmpla32kzzu.java:20)\n\
    \tat Problem.factorize(tmpla32kzzu.java:20)\n\tat Problem.factorize(tmpla32kzzu.java:20)\n\
    \tat Problem.factorize(tmpla32kzzu.java:20)\n\tat Problem.factorize(tmpla32kzzu.java:20)\n\
    \tat Problem.factorize(tmpla32kzzu.java:20)\n\tat Problem.factorize(tmpla32kzzu.java:20)\n\
    \tat Problem.factorize(tmpla32kzzu.java:20)\n\tat Problem.factorize(tmpla32kzzu.java:20)\n\
    \tat Problem.factorize(tmpla32kzzu.java:20)\n\tat Problem.factorize(tmpla32kzzu.java:20)\n\
    \tat Problem.factorize(tmpla32kzzu.java:20)\n\tat Problem.factorize(tmpla32kzzu.java:20)\n\
    \tat Problem.factorize(tmpla32kzzu.java:20)\n\tat Problem.factorize(tmpla32kzzu.java:20)\n\
    \tat Problem.factorize(tmpla32kzzu.java:20)\n\tat Problem.factorize(tmpla32kzzu.java:20)\n\
    \tat Problem.factorize(tmpla32kzzu.java:20)\n\tat Problem.factorize(tmpla32kzzu.java:20)\n\
    \tat Problem.factorize(tmpla32kzzu.java:20)\n\tat Problem.factorize(tmpla32kzzu.java:20)\n\
    \tat Problem.factorize(tmpla32kzzu.java:20)\n\tat Problem.factorize(tmpla32kzzu.java:20)\n\
    \tat Problem.factorize(tmpla32kzzu.java:20)\n\tat Problem.factorize(tmpla32kzzu.java:20)\n\
    \tat Problem.factorize(tmpla32kzzu.java:20)\n\tat Problem.factorize(tmpla32kzzu.java:20)\n\
    \tat Problem.factorize(tmpla32kzzu.java:20)\n\tat Problem.fa"
  stdout: ''
  timestamp: 1660011457
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> primes = new ArrayList<Long>();\n        for (long d\
    \ = 2; d * d <= n; d++) {\n            if (n % d == 0) {\n                long\
    \ r = d / 2;\n                while (r * r <= n) {\n                    if (n\
    \ % r == 0)\n                        break;\n                    r *= 2;\n   \
    \             }\n                long f = d / r;\n                while (f * f\
    \ <= n) {\n                    if (n % f == 0)\n                        break;\n\
    \                    f *= 2;\n                }\n                primes.add(f);\n\
    \            }\n        }\n        return primes;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplpqebmt4.java:40)\n"
  stdout: ''
  timestamp: 1660011457
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> result = new ArrayList<Long>();\n        long primeFactorization\
    \ = 0;\n        while (n != 1) {\n            // Find the next factor of n.\n\
    \            long nextFactor = n;\n            while (true) {\n              \
    \  // Find next factor of n\n                long nextN = nextFactor;\n      \
    \          for (long i = 2; i <= nextN; i++) {\n                    if (nextN\
    \ % i == 0) {\n                        nextN = nextN / i;\n                  \
    \      break;\n                    }\n                }\n                if (nextN\
    \ == 1) break;\n                if (nextN > 1) {\n                    result.add(nextN);\n\
    \                    primeFactorization += nextN;\n                    nextFactor\
    \ = nextN;\n                }\n            }\n            if (nextFactor > primeFactorization)\
    \ {\n                result.add(nextFactor);\n                primeFactorization\
    \ = nextFactor;\n            }\n            n = nextFactor;\n        }\n     \
    \   return result;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011462
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>(Arrays.asList((long)2l));\n\
    \        BigInteger bi = new BigInteger(Long.toString(n));\n        ArrayList<Long>\
    \ factoriz = new ArrayList<Long>();\n        for(long i = 3; i <= bi.divideAndRemainder(BigInteger.valueOf(i)).getLowestSetBit(0);\
    \ i++) {\n            factors.add((long)i);\n            factoriz.add(bi.divideAndRemainder(BigInteger.valueOf(i)).getLowestSetBit(0));\n\
    \        }\n        factors.add(bi.divideAndRemainder(BigInteger.valueOf(bi.mod(BigInteger.valueOf(factors.get(0))).getLowestSetBit(0))));\n\
    \        return factors;\n    }\n    public static void main(String[] args) {\n\
    \    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpxbt26yao.java:22: error: cannot find symbol\n        for(long i\
    \ = 3; i <= bi.divideAndRemainder(BigInteger.valueOf(i)).getLowestSetBit(0); i++)\
    \ {\n                                                                        \
    \ ^\n  symbol:   method getLowestSetBit(int)\n  location: class BigInteger[]\n\
    /tmp/tmpxbt26yao.java:24: error: cannot find symbol\n            factoriz.add(bi.divideAndRemainder(BigInteger.valueOf(i)).getLowestSetBit(0));\n\
    \                                                                     ^\n  symbol:\
    \   method getLowestSetBit(int)\n  location: class BigInteger[]\n/tmp/tmpxbt26yao.java:26:\
    \ error: method getLowestSetBit in class BigInteger cannot be applied to given\
    \ types;\n        factors.add(bi.divideAndRemainder(BigInteger.valueOf(bi.mod(BigInteger.valueOf(factors.get(0))).getLowestSetBit(0))));\n\
    \                                                                            \
    \                           ^\n  required: no arguments\n  found:    int\n  reason:\
    \ actual and formal argument lists differ in length\n3 errors\n"
  stdout: ''
  timestamp: 1660011457
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long a = n;\n\
    \        while (n > 1) {\n            while (n % 2 == 0) {\n                factors.add(2l);\n\
    \                n = n / 2;\n            }\n            while (n % 3 == 0) {\n\
    \                factors.add(3l);\n                n = n / 3;\n            }\n\
    \            while (n % 5 == 0) {\n                factors.add(5l);\n        \
    \        n = n / 5;\n            }\n            while (n % 7 == 0) {\n       \
    \         factors.add(7l);\n                n = n / 7;\n            }\n      \
    \      while (n % 11 == 0) {\n                factors.add(11l);\n            \
    \    n = n / 11;\n            }\n            while (n % 13 == 0) {\n         \
    \       factors.add(13l);\n                n = n / 13;\n            }\n      \
    \      while (n % 17 == 0) {\n                factors.add(17l);\n            \
    \    n = n / 17;\n            }\n            while (n % 19 == 0) {\n         \
    \       factors.add(19l);\n                n = n / 19;\n            }\n      \
    \      while (n % 23 == 0) {\n                factors.add(23l);\n            \
    \    n = n / 23;\n            }\n            while (n % 29 == 0) {\n         \
    \       factors.add(29l);\n                n = n / 29;\n            }\n      \
    \      while (n % 31 == 0) {\n                factors.add(31l);\n            \
    \    n = n / 31;\n            }\n            while (n % 37 == 0) {\n         \
    \       factors.add(37l);\n                n = n / 37;\n            }\n      \
    \      while (n % 41 == 0) {\n                factors.add(41l);\n            \
    \    n = n / 41;\n            }\n            while (n % 43 == 0) {\n         \
    \       factors.add(43l);\n                n = n / 43;\n            }\n      \
    \      while (n % 47 == 0) {\n                factors.add(47l);\n            \
    \    n = n / 47;\n            }\n            while (n % 53 == 0) {\n         \
    \       factors.add(53l);\n                n = n / 53;\n            }\n      \
    \      while (n % 59 == 0) {\n                factors.add(59l);\n            \
    \    n = n / 59;\n            }\n            while (n % 61 == 0) {\n         \
    \       factors.add(61l);\n                n = n / 61;\n            }\n      \
    \      while (n % 67 == 0) {\n                factors.add(67l);\n            \
    \    n = n / 67;\n            }\n            while (n % 71 == 0) {\n         \
    \       factors.add(71l);\n                n = n / 71;\n            }\n      \
    \      while (n % 73 == 0) {\n                factors.add(73l);\n            \
    \    n = n / 73;\n            }\n            while (n % 79 == 0) {\n         \
    \       factors.add(79l);\n                n = n / 79;\n            }\n      \
    \      while (n % 83 == 0) {\n                factors.add(83l);\n            \
    \    n = n / 83;\n            }\n            while (n % 89 == 0) {\n         \
    \       factors.add(89l);\n                n = n / \n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmppx_clp8t.java:117: error: illegal start of expression\n    }\n\
    \    ^\n/tmp/tmppx_clp8t.java:118: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011456
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        // Find all\
    \ prime factors of n.\n        ArrayList <BigInteger> factorization = new ArrayList<BigInteger>();\n\
    \        boolean isPrime = false;\n        for (int i = 1; i < Math.sqrt(n); i++)\
    \ {\n            BigInteger big = new BigInteger(\"\" + i);\n            BigInteger\
    \ m = big.multiply(BigInteger.valueOf(n - i));\n            if (m.testBit(0))\
    \ {\n                factorization.add(big);\n                factors.add((long)\
    \ i);\n                isPrime = true;\n            }\n        }\n        if (!isPrime)\
    \ {\n            return factorization;\n        }\n        // Find out how many\
    \ times each number appeared in the factorization.\n        long factorCount =\
    \ 0;\n        for (BigInteger big : factorization) {\n            factorCount\
    \ += big.longValue();\n        }\n        // Rearrange factors according to factorCount.\n\
    \        for (int i = 0; i < factorCount; i++) {\n            int index = factors.size()\
    \ - i;\n            factors.add(index, factors.get(index));\n        }\n     \
    \   return factors;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmphxa_ekby.java:33: error: incompatible types: ArrayList<BigInteger>\
    \ cannot be converted to ArrayList<Long>\n            return factorization;\n\
    \                   ^\n1 error\n"
  stdout: ''
  timestamp: 1660011457
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<>();\n        for (long i = 2;\
    \ i * i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        if (n != 1) {\n  \
    \          factors.add(n);\n        }\n        return factors;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011458
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        List<Long>\
    \ primes = getPrimes(n);\n        if (primes.isEmpty()) {\n            return\
    \ factors;\n        }\n        long limit = n;\n        for (long p : primes)\
    \ {\n            if (n % p == 0) {\n                factors.add(p);\n        \
    \        limit = limit / p;\n            }\n        }\n        while (limit !=\
    \ 1) {\n            List<Long> temp = getPrimes(limit);\n            for (long\
    \ p : temp) {\n                if (limit % p == 0) {\n                    factors.add(p);\n\
    \                    limit = limit / p;\n                }\n            }\n  \
    \      }\n        return factors;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpgj1gekyz.java:20: error: cannot find symbol\n        List<Long>\
    \ primes = getPrimes(n);\n                            ^\n  symbol:   method getPrimes(long)\n\
    \  location: class Problem\n/tmp/tmpgj1gekyz.java:32: error: cannot find symbol\n\
    \            List<Long> temp = getPrimes(limit);\n                           \
    \   ^\n  symbol:   method getPrimes(long)\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011457
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>(Arrays.asList((long)2));\n\
    \        factorize(n, factors);\n        return factors;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpuvxk3p0n.java:20: error: method factorize in class Problem cannot\
    \ be applied to given types;\n        factorize(n, factors);\n        ^\n  required:\
    \ long\n  found:    long,ArrayList<Long>\n  reason: actual and formal argument\
    \ lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011458
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long factor;\n\
    \        // check even or odd\n        if (n % 2 == 0)\n            factor = (long)\
    \ 2;\n        else\n            factor = (long) 2;\n        // calculate factors\n\
    \        for (int i = 3; i <= n / 2; i += 2) {\n            if (n % i == 0) {\n\
    \                factor *= i;\n                factors.add(factor);\n        \
    \    }\n        }\n        return factors;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeqvvxl_g.java:36)\n"
  stdout: ''
  timestamp: 1660011458
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        // Initialize factor array to store factors\n        ArrayList<Long>\
    \ factors = new ArrayList<>((int)Math.ceil(Math.sqrt(n)));\n\n        // Iterate\
    \ from smallest factor to greatest factor by incrementing by 2\n        for (int\
    \ i = (int)Math.ceil(Math.sqrt(n)); i <= factors.size(); i++) {\n            //\
    \ If current factor is less than or equal to the square root of given number\n\
    \            if (factors.get(i) <= Math.sqrt(n)) {\n                // Iterate\
    \ from smallest to greatest factor by incrementing by 2, and if the current factor\
    \ is less than or equal to the square root of the given number\n             \
    \   for (int j = i; j < factors.size() && factors.get(j) <= Math.sqrt(n); j++)\
    \ {\n                    // If the current factor is greater than the square root\
    \ of the given number\n                    if (factors.get(j) > Math.sqrt(n))\
    \ {\n                        // Increment the size of the factor array by 1\n\
    \                        factors.add(j, 1);\n                    }\n         \
    \       }\n            }\n        }\n        return factors;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp9e0to67g.java:31: error: incompatible types: int cannot be converted\
    \ to Long\n                        factors.add(j, 1);\n                      \
    \                 ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011458
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<>();\n        long current =\
    \ n;\n        ArrayList<Long> primeFactors = new ArrayList<>();\n\n        while\
    \ (current > 1) {\n            long next = Math.floor(Math.sqrt(current));\n \
    \           primeFactors.add(next);\n            if (next > 2) {\n           \
    \     while (next % 2 != 0) {\n                    next /= 2;\n              \
    \  }\n                for (int i = 3; i <= next - 1; i += 2) {\n             \
    \       if (current % i == 0) {\n                        break;\n            \
    \        }\n                }\n                if (i == next - 1) {\n        \
    \            factors.add(current);\n                }\n                current\
    \ /= i;\n            } else {\n                factors.add(current);\n       \
    \         current = 0;\n            }\n        }\n        for (int i = 0; i <\
    \ primeFactors.size(); i++) {\n            for (int j = i + 1; j < factors.size();\
    \ j++) {\n                if (factors.get(i) == factors.get(j)) {\n          \
    \          factors.remove(j);\n                }\n            }\n        }\n \
    \       return factors;\n    }\n    public static void main(String[] args) {\n\
    \    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpisawqqqd.java:24: error: incompatible types: possible lossy conversion\
    \ from double to long\n            long next = Math.floor(Math.sqrt(current));\n\
    \                                  ^\n/tmp/tmpisawqqqd.java:35: error: cannot\
    \ find symbol\n                if (i == next - 1) {\n                    ^\n \
    \ symbol:   variable i\n  location: class Problem\n/tmp/tmpisawqqqd.java:38: error:\
    \ cannot find symbol\n                current /= i;\n                        \
    \   ^\n  symbol:   variable i\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011458
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        long fact = 1;\n        ArrayList<Long> factors = new ArrayList<>();\n\
    \        while (n > 1) {\n            if (n % fact == 0) {\n                n\
    \ /= fact;\n                factors.add(fact);\n            } else {\n       \
    \         fact++;\n            }\n        }\n        factors.add(1);\n       \
    \ return factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6mbti7ax.java:29: error: incompatible types: int cannot be converted\
    \ to Long\n        factors.add(1);\n                    ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011458
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<>();\n        if (n < 0) {\n\
    \            return factors;\n        }\n        long sqrtN = Math.sqrt(n);\n\
    \        long start = 2;\n        while (sqrtN > start * start) {\n          \
    \  long div = (start++ * start) / sqrtN;\n            if (n % div == 0) {\n  \
    \              factors.add(div);\n                n /= div;\n            }\n \
    \       }\n        if (n > 0) {\n            factors.add(n);\n        }\n    \
    \    return factors;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp7c3w_2ab.java:23: error: incompatible types: possible lossy conversion\
    \ from double to long\n        long sqrtN = Math.sqrt(n);\n                  \
    \            ^\n1 error\n"
  stdout: ''
  timestamp: 1660011458
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> result = new ArrayList<>();\n        for (long i = 1;\
    \ i <= n; i++) {\n            if (n % i == 0) {\n                result.add(i);\n\
    \                while (n % i == 0) {\n                    result.add(n - i);\n\
    \                    n /= i;\n                }\n            }\n        }\n  \
    \      return result;\n    }\n    public static void main(String[] args) {\n \
    \   assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011463
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        if (n < 2l) \n            throw new RuntimeException(\"Can't factorize\
    \ a number less than 2\");\n\n        ArrayList<Long> factors = new ArrayList<Long>();\n\
    \n        for(long x = 2l; x < n; x++) {\n            if (n % x == 0) factors.add(1l);\n\
    \            long f = 1l;\n            while (n % x == f) {\n                factors.add(f);\n\
    \                n = n / x;\n                f++;\n            }\n        }\n\n\
    \        return factors;\n    }\n    public static void main(String[] args) {\n\
    \    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3m5je3ce.java:37)\n"
  stdout: ''
  timestamp: 1660011459
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long div =\
    \ 1;\n        boolean flag = false;\n        while (n != 0) {\n            flag\
    \ = true;\n            while (n >= div) {\n                factors.add(div);\n\
    \                n /= div;\n                flag = false;\n            }\n   \
    \         div++;\n        }\n        return factors;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011464
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> results = new ArrayList<>();\n        for (long i = 1l;\
    \ i <= n; i++) {\n            if (n % i == 0l && i > 0l) {\n                //\
    \ System.out.println(\" i=\" + i + \" n=\" + n);\n                results.add(new\
    \ Long(n));\n                // System.out.print(\" \" + n);\n               \
    \ // System.out.print(\" n=\" + n % i + \"\\n\");\n                while (n%i\
    \ == 0l && n > 0l) {\n                    results.add(new Long(n/i));\n      \
    \              n /= i;\n                }\n            }\n        }\n        return\
    \ results.stream().distinct().collect(Collectors.toList());\n    }\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp0m1hx6bf.java:23: warning: [removal] Long(long) in Long has been\
    \ deprecated and marked for removal\n                results.add(new Long(n));\n\
    \                            ^\n/tmp/tmp0m1hx6bf.java:27: warning: [removal] Long(long)\
    \ in Long has been deprecated and marked for removal\n                    results.add(new\
    \ Long(n/i));\n                                ^\n/tmp/tmp0m1hx6bf.java:32: error:\
    \ incompatible types: inference variable R has incompatible bounds\n        return\
    \ results.stream().distinct().collect(Collectors.toList());\n                \
    \                                  ^\n    equality constraints: List<T#2>\n  \
    \  lower bounds: ArrayList<Long>,Object\n  where R,A,T#1,T#2 are type-variables:\n\
    \    R extends Object declared in method <R,A>collect(Collector<? super T#1,A,R>)\n\
    \    A extends Object declared in method <R,A>collect(Collector<? super T#1,A,R>)\n\
    \    T#1 extends Object declared in interface Stream\n    T#2 extends Object declared\
    \ in method <T#2>toList()\n1 error\n2 warnings\n"
  stdout: ''
  timestamp: 1660011458
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        // Create ArrayList of prime factors\n        ArrayList<Long> factors\
    \ = new ArrayList<>(n);\n        ArrayList<Long> primeFactors = new ArrayList<>(n);\n\
    \        // Create factorization ArrayList of numbers\n        factorize(n, factors);\n\
    \        // Create factorization ArrayList of prime numbers\n        factorize(n,\
    \ primeFactors);\n        // Return ArrayList of prime factors in order from smallest\
    \ to largest\n        return factors;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpnavfhet7.java:20: error: cannot infer type arguments for ArrayList<>\n\
    \        ArrayList<Long> factors = new ArrayList<>(n);\n                     \
    \             ^\n/tmp/tmpnavfhet7.java:21: error: cannot infer type arguments\
    \ for ArrayList<>\n        ArrayList<Long> primeFactors = new ArrayList<>(n);\n\
    \                                       ^\n/tmp/tmpnavfhet7.java:23: error: method\
    \ factorize in class Problem cannot be applied to given types;\n        factorize(n,\
    \ factors);\n        ^\n  required: long\n  found:    long,ArrayList<Long>\n \
    \ reason: actual and formal argument lists differ in length\n/tmp/tmpnavfhet7.java:25:\
    \ error: method factorize in class Problem cannot be applied to given types;\n\
    \        factorize(n, primeFactors);\n        ^\n  required: long\n  found:  \
    \  long,ArrayList<Long>\n  reason: actual and formal argument lists differ in\
    \ length\n4 errors\n"
  stdout: ''
  timestamp: 1660011459
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        if (n<=1l) return new ArrayList<Long>(Collections.singletonList(n));\n\
    \        ArrayList<Long> factors = new ArrayList<Long>(Arrays.asList(1l));\n \
    \       long x = 2l;\n        boolean add = true;\n        while (true) {\n  \
    \          if (x % n==0) {\n                factors.add(x);\n                add\
    \ = true;\n            }\n            if (add) factors.add(x, n);\n          \
    \  if (x % n==0) break;\n            x++;\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphlrvapc8.java:28: error: incompatible types: possible lossy conversion\
    \ from long to int\n            if (add) factors.add(x, n);\n                \
    \                 ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011458
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> primeFactors = new ArrayList<Long>();\n        // Check\
    \ whether number is prime or not\n        if (isPrime(n)) {\n            // If\
    \ no, return empty array list\n            return primeFactors;\n        }\n \
    \       // If yes, find all prime factors\n        long p = 2;\n        while\
    \ (p < n) {\n            if (n % p == 0) {\n                long q = p * 2;\n\
    \                while (q < n) {\n                    if (n % q == 0) {\n    \
    \                    primeFactors.add(q);\n                        n /= q;\n \
    \                   } else {\n                        break;\n               \
    \     }\n                }\n            }\n            p += 2;\n        }\n  \
    \      // If there is any number left to factorize, add it\n        if (n > 1)\
    \ {\n            primeFactors.add(n);\n        }\n        return primeFactors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp38oqwpv0.java:21: error: cannot find symbol\n        if (isPrime(n))\
    \ {\n            ^\n  symbol:   method isPrime(long)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011459
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long i = 2;\n\
    \        long temp;\n        while (i <= n / i) {\n            if (n % i == 0)\
    \ {\n                temp = i;\n                while ((n /= temp) > 1) {\n  \
    \                  factors.add(temp);\n                }\n            }\n    \
    \        i++;\n        }\n        return factors;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp799qk05m.java:34)\n"
  stdout: ''
  timestamp: 1660011459
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> ret = new ArrayList<Long>();\n        for (long i = 2;\
    \ i <= n / i; i++) if (n % i == 0) ret.add(i);\n        return ret;\n    }\n \
    \   public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps0tcvosp.java:24)\n"
  stdout: ''
  timestamp: 1660011459
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        // Initialize array list\n        ArrayList<Long> factorization = new\
    \ ArrayList<Long>();\n\n        // Initialize prime array\n        ArrayList<Long>\
    \ primes = new ArrayList<Long>();\n\n        // Initialize temporary prime array\n\
    \        ArrayList<Long> tempPrimes = new ArrayList<Long>();\n\n        // Initialize\
    \ factorization array\n        ArrayList<Long> factor = new ArrayList<Long>();\n\
    \n        // Initialize number of occurences array\n        ArrayList<Long> numOccurences\
    \ = new ArrayList<Long>();\n\n        // Initialize smallest prime index\n   \
    \     int smallestPrimeIndex = 0;\n\n        // Initialize largest prime index\n\
    \        int largestPrimeIndex = 0;\n\n        // Initialize largest occurence\
    \ index\n        int largestOccurenceIndex = 0;\n\n        // Initialize factorization\
    \ index\n        int factorizationIndex = 0;\n\n        // Initialize number of\
    \ factors\n        int numOfFactors = 0;\n\n        // Find smallest prime\n \
    \       while (primes.size() < n) {\n            primes.add(Long.valueOf(Math.sqrt(n)));\n\
    \        }\n\n        // Find largest prime\n        for (int i = primes.size()\
    \ - 1; i >= 0; i--) {\n            if (primes.get(i) == (long)Math.sqrt(n)) {\n\
    \                largestPrimeIndex = i;\n                break;\n            }\n\
    \        }\n\n        // Find largest factor\n        for (int i = largestPrimeIndex\
    \ + 1; i <= largestPrimeIndex + 2; i++) {\n            if (n % primes.get(i) ==\
    \ 0) {\n                largestOccurenceIndex = i;\n                break;\n \
    \           }\n        }\n\n        // Calculate factorization by factoring n\
    \ from largest prime to smallest prime\n        for (int i = largestOccurenceIndex\
    \ + 1; i <= largestOccurenceIndex + 2; i++) {\n            if (n % primes.get(i)\
    \ == 0) {\n                numOccurences.add(Long.valueOf(n));\n             \
    \   factor.add(Long.valueOf(primes.get(i)));\n                factorization.add(Long.valueOf(primes.get(i)));\n\
    \                factorizationIndex++;\n                numOfFactors++;\n\n  \
    \              for (int j = i + 1; j <= largestOccurenceIndex + 2; j++) {\n  \
    \                  if (n % primes.get(j) == 0) {\n                        numOccurences.add(Long.valueOf(n));\n\
    \                        factor.add(Long.valueOf(primes.get(j)));\n          \
    \              factorization.add(Long.valueOf(primes.get(j)));\n             \
    \           factorizationIndex++;\n                        numOfFactors++;\n \
    \                   }\n                }\n            }\n        }\n\n       \
    \ // Check if there are any factors left behind\n        if (numOccurences.size()\
    \ % 2 == 1) {\n            factor.add(Long.valueOf(n));\n            factorization.add(Long.valueOf(n));\n\
    \            factorizationIndex++;\n            numOfFactors++;\n        }\n\n\
    \        // Create factorization from factorization\n        for (int i = factor\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp38r8b6zl.java:100: error: ';' expected\n        for (int i = factor\n\
    \                           ^\n/tmp/tmp38r8b6zl.java:101: error: illegal start\
    \ of expression\n    }\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011459
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        int count = 0;\n        ArrayList<Long> factors = new ArrayList<Long>();\n\
    \        ArrayList<Long> factorList = new ArrayList<Long>();\n        while (n\
    \ % 2 == 0) {\n            factors.add(2l);\n            count++;\n          \
    \  n = n / 2;\n        }\n        while (n % 3 == 0) {\n            factors.add(3l);\n\
    \            count++;\n            n = n / 3;\n        }\n        while (n % 5\
    \ == 0) {\n            factors.add(5l);\n            count++;\n            n =\
    \ n / 5;\n        }\n        while (n % 7 == 0) {\n            factors.add(7l);\n\
    \            count++;\n            n = n / 7;\n        }\n        while (n % 11\
    \ == 0) {\n            factors.add(11l);\n            count++;\n            n\
    \ = n / 11;\n        }\n        while (n % 13 == 0) {\n            factors.add(13l);\n\
    \            count++;\n            n = n / 13;\n        }\n        while (n %\
    \ 17 == 0) {\n            factors.add(17l);\n            count++;\n          \
    \  n = n / 17;\n        }\n        while (n % 19 == 0) {\n            factors.add(19l);\n\
    \            count++;\n            n = n / 19;\n        }\n        while (n %\
    \ 23 == 0) {\n            factors.add(23l);\n            count++;\n          \
    \  n = n / 23;\n        }\n        while (n % 29 == 0) {\n            factors.add(29l);\n\
    \            count++;\n            n = n / 29;\n        }\n        while (n %\
    \ 31 == 0) {\n            factors.add(31l);\n            count++;\n          \
    \  n = n / 31;\n        }\n        while (n % 37 == 0) {\n            factors.add(37l);\n\
    \            count++;\n            n = n / 37;\n        }\n        while (n %\
    \ 41 == 0) {\n            factors.add(41l);\n            count++;\n          \
    \  n = n / 41;\n        }\n        while (n % 43 == 0) {\n            factors.add(43l);\n\
    \            count++;\n            n = n / 43;\n        }\n        while (n %\
    \ 47 == 0) {\n            factors.add(47l);\n            count++;\n          \
    \  n = n / 47;\n        }\n        while (n % 53 == 0) {\n            factors.add(53l);\n\
    \            count++;\n            n = n / 53;\n        }\n        while (n %\
    \ 59 == 0) {\n            factors.add(59l);\n            count++;\n          \
    \  n = n / 59;\n        }\n        while (n % 61 == 0) {\n            factors.add(61l);\n\
    \            count++;\n            n = n / 61;\n        }\n        while (n %\
    \ 67 == 0) {\n            factors.add(67l);\n            count++;\n          \
    \  n = n / 67;\n        }\n        while (n % 71 == 0) {\n            factors.add(71l);\n\
    \            count++;\n            n = n / 71;\n        }\n        while (n %\
    \ 73 == 0) {\n            factors.add(73l);\n            count++;\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphgc9cyrm.java:127: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1660011459
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factorization = new ArrayList<>(); // Array to store\
    \ all factors\n\n        // Create array to store number of times each factor\
    \ appears in factorization\n        Map<Long, Integer> frequencyMap = new HashMap<>();\n\
    \n        // Get prime factors of given number\n        Set<Long> primeFactors\
    \ = PrimeFactorsOfNumber(n);\n\n        // Iterate through each prime factor\n\
    \        for (Long factor : primeFactors) {\n            int numOfTimes = frequencyMap.get(factor);\n\
    \n            if (numOfTimes != null) {\n                frequencyMap.put(factor,\
    \ numOfTimes + 1);\n            } else {\n                frequencyMap.put(factor,\
    \ 1); // Add 1 to count of factor\n            }\n\n            factorization.add(factor);\n\
    \        }\n\n        return factorization;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpl7bqdc0r.java:25: error: cannot find symbol\n        Set<Long>\
    \ primeFactors = PrimeFactorsOfNumber(n);\n                                 ^\n\
    \  symbol:   method PrimeFactorsOfNumber(long)\n  location: class Problem\n/tmp/tmpl7bqdc0r.java:31:\
    \ error: bad operand types for binary operator '!='\n            if (numOfTimes\
    \ != null) {\n                           ^\n  first type:  int\n  second type:\
    \ <null>\n2 errors\n"
  stdout: ''
  timestamp: 1660011459
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<>();\n        for (int i = 2;\
    \ i <= n; i++) {\n            long div = i * 2;\n            while (div <= n)\
    \ {\n                if (n % div == 0) {\n                    factors.add(div);\n\
    \                    break;\n                }\n                div++;\n     \
    \       }\n        }\n        return factors;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp78_e6y_y.java:33)\n"
  stdout: ''
  timestamp: 1660011459
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long factor\
    \ = 2; factor * factor <= n; factor += 2) {\n            while (n % factor ==\
    \ 0) {\n                n /= factor;\n                factors.add(factor);\n \
    \           }\n        }\n        if (n != 1) {\n            factors.add(n);\n\
    \        }\n        return factors;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphvm3q6_d.java:35)\n"
  stdout: ''
  timestamp: 1660011459
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        List<Long>\
    \ factorList = new ArrayList<Long>();\n        for(int i = 2l; i <= Math.sqrt(n);\
    \ i++) {\n            boolean isPrime = true;\n            long j = 1l; // we\
    \ know j will be divisible by i, no need to check it\n            while(i * j\
    \ < n) {\n                isPrime = (n % i == 0l) && (n / i != j);\n         \
    \       if(isPrime) {\n                    j++;\n                }\n         \
    \       else {\n                    break;\n                }\n            }\n\
    \            if(isPrime) {\n                factorList.add((long)i);\n       \
    \     }\n        }\n        for(int i = 0; i < factorList.size(); i++) {\n   \
    \         long temp = (long)factorList.get(i);\n            for(int j = 0; j <\
    \ factors.size(); j++) {\n                if((long)factors.get(j) == temp) {\n\
    \                    factors.add(j, factors.get(j));\n                    break;\n\
    \                }\n            }\n        }\n        return factors;\n    }\n\
    \    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpswa2ge8u.java:21: error: incompatible types: possible lossy conversion\
    \ from long to int\n        for(int i = 2l; i <= Math.sqrt(n); i++) {\n      \
    \              ^\n1 error\n"
  stdout: ''
  timestamp: 1660011459
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> res = new ArrayList<>();\n        for (long i = 2; i\
    \ * i <= n; i++)\n            if (n % i == 0)\n                res.add(i);\n \
    \       if (res.isEmpty())\n            return res;\n        long m = n;\n   \
    \     while (m % 2 == 0) {\n            m /= 2;\n            res.add(m);\n   \
    \     }\n        while (m % 3 != 0) {\n            m /= 3;\n            res.add(m);\n\
    \        }\n        if (m != 1) {\n            m /= 2;\n            res.add(m);\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc18j6mlp.java:41)\n"
  stdout: ''
  timestamp: 1660011460
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = factorization(n);\n        if(factors.size()\
    \ <= 2) {\n            return new ArrayList<Long>((Collections.singletonList(factors.get(0))));\n\
    \        } else {\n            ArrayList<Long> ret = new ArrayList<>();\n    \
    \        for(int i = 0; i < factors.size(); i++) {\n                ret.add(factors.get(i));\n\
    \            }\n            return ret;\n        }\n    }\n    public static void\
    \ main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp7bsjcf2a.java:19: error: cannot find symbol\n        ArrayList<Long>\
    \ factors = factorization(n);\n                                  ^\n  symbol:\
    \   method factorization(long)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011459
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        if (n <= 1) return null;\n        if (n == 2) return new ArrayList<Long>(Arrays.asList((long)n));\n\
    \        ArrayList<Long> factors = new ArrayList<Long>(Arrays.asList((long)n,\
    \ (long)n));\n        long limit = Long.MAX_VALUE;\n        Arrays.stream(factors).forEach(l\
    \ -> {\n            while (l > limit) {\n                long newLimit = limit\
    \ / l;\n                if (newLimit <= factors.get(0)) break;\n             \
    \   factors.set(0, newLimit);\n            }\n            factors.set(1, l);\n\
    \            limit = Math.max(limit, l);\n        });\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp466yh31k.java:23: error: no suitable method found for stream(ArrayList<Long>)\n\
    \        Arrays.stream(factors).forEach(l -> {\n              ^\n    method Arrays.<T#1>stream(T#1[])\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (argument\
    \ mismatch; ArrayList<Long> cannot be converted to T#1[]))\n    method Arrays.<T#2>stream(T#2[],int,int)\
    \ is not applicable\n      (cannot infer type-variable(s) T#2\n        (actual\
    \ and formal argument lists differ in length))\n    method Arrays.stream(int[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.stream(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.stream(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n  where T#1,T#2 are type-variables:\n    T#1 extends Object declared\
    \ in method <T#1>stream(T#1[])\n    T#2 extends Object declared in method <T#2>stream(T#2[],int,int)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1660011459
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> primeFactors = new ArrayList<Long>();\n        long divisor\
    \ = 2;\n        while (divisor < n) {\n            while (n % divisor == 0) {\n\
    \                primeFactors.add(divisor);\n                n /= divisor;\n \
    \           }\n            divisor++;\n        }\n        if (n != 1) primeFactors.add(n);\n\
    \        return primeFactors;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011460
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        factorize(factors,\
    \ n);\n        return factors;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp4txljz6z.java:20: error: method factorize in class Problem cannot\
    \ be applied to given types;\n        factorize(factors, n);\n        ^\n  required:\
    \ long\n  found:    ArrayList<Long>,long\n  reason: actual and formal argument\
    \ lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011460
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>(new ArrayList<Long>(Arrays.asList(2l)));\n\
    \        final long l = (long) Math.sqrt(n);\n        long root = n;\n       \
    \ long m = 1;\n        while (root % 2 == 0) {\n            root /= 2;\n     \
    \       m++;\n        }\n        long count = 0;\n        int i = 2;\n       \
    \ long s = 2;\n        while (i <= m) {\n            while (s <= root && root\
    \ % i == 0) {\n                root = root / i;\n                count++;\n  \
    \              i++;\n            }\n            s += i;\n            i = 2;\n\
    \        }\n        while (count != 0) {\n            factors.add((new Long((long)\
    \ Math.sqrt(n)));\n            n--;\n            count--;\n        }\n       \
    \ return factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqwe6hy7e.java:40: error: ')' expected\n            factors.add((new\
    \ Long((long) Math.sqrt(n)));\n                                              \
    \         ^\n1 error\n"
  stdout: ''
  timestamp: 1660011460
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        factorize(n,factors);\n\
    \        return factors;\n    }\n    public static void main(String[] args) {\n\
    \    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp8zw_3w88.java:20: error: method factorize in class Problem cannot\
    \ be applied to given types;\n        factorize(n,factors);\n        ^\n  required:\
    \ long\n  found:    long,ArrayList<Long>\n  reason: actual and formal argument\
    \ lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011460
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        // Initialize Factorization array\n        ArrayList<Long> factorization\
    \ = new ArrayList<>();\n\n        // Iterate through all possible factors of the\
    \ number\n        for (long i = 2; i <= n / i; i++) {\n            // If number\
    \ is a factor of any of the number already\n            if (n % i == 0) {\n  \
    \              // Add factorization number to the factorization\n            \
    \    factorization.add(i);\n\n                // Add factor to the factorization\
    \ array\n                factorization.add(n - i * i);\n            }\n      \
    \  }\n\n        // Return factorization\n        return factorization;\n    }\n\
    \    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplz3socmj.java:38)\n"
  stdout: ''
  timestamp: 1660011460
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factorization = new ArrayList<Long>();\n        // The\
    \ prime numbers less than n\n        ArrayList<Long> primes = new ArrayList<Long>();\n\
    \        for (long i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i ==\
    \ 0) {\n                primes.add(i);\n            }\n        }\n        // Find\
    \ factors of n\n        for (long i = 2; i <= Math.sqrt(n); i++) {\n         \
    \   if (n % i == 0) {\n                // Factorization\n                while\
    \ (n > 1) {\n                    long rem = n % i;\n                    n /= i;\n\
    \                    if (rem == 0) {\n                        factorization.add(i);\n\
    \                        factorization.add(n - 1);\n                        n\
    \ += 1;\n                        break;\n                    }\n             \
    \   }\n                factorization.add(n - 1);\n            }\n        }\n \
    \       // Find prime factorizations\n        for (long prime : primes) {\n  \
    \          while (n > 1) {\n                long rem = n % prime;\n          \
    \      n /= prime;\n                if (rem == 0) {\n                    factorization.add(prime);\n\
    \                    factorization.add(n - 1);\n                    n += 1;\n\
    \                    break;\n                }\n            }\n            factorization.add(n\
    \ - 1);\n        }\n        return factorization;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdc46ulfy.java:61)\n"
  stdout: ''
  timestamp: 1660011460
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<>();\n        // Create list\
    \ of factors ordered by multiplicity (i.e. 2 -> 1, 5 -> 2, 7 -> 2)\n        List<Long>\
    \ factorizations =\n                LongStream.range(2, (int) Math.sqrt(n))\n\
    \                        .filter(i -> n % i == 0)\n                        .filter(i\
    \ -> i % 2 != 0)\n                        .filter(i -> i % 5 != 0)\n         \
    \               .filter(i -> i % 7 != 0)\n                        .boxed()\n \
    \                       .map(i -> new Long(i, (long)i.longValue() * (i - 1)))\n\
    \                        .collect(Collectors.toList());\n        // Fill factors\
    \ list with factors from factorizations\n        for (Long factorization : factorizations)\
    \ {\n            factors.add(factorization);\n            factors.add(factorization);\n\
    \        }\n        return factors;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp39jq_3tl.java:28: error: no suitable constructor found for Long(Long,long)\n\
    \                        .map(i -> new Long(i, (long)i.longValue() * (i - 1)))\n\
    \                                  ^\n    constructor Long.Long(long) is not applicable\n\
    \      (actual and formal argument lists differ in length)\n    constructor Long.Long(String)\
    \ is not applicable\n      (actual and formal argument lists differ in length)\n\
    /tmp/tmp39jq_3tl.java:29: error: incompatible types: inference variable T has\
    \ incompatible bounds\n                        .collect(Collectors.toList());\n\
    \                                ^\n    equality constraints: Long\n    lower\
    \ bounds: Object\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>toList()\n2 errors\n"
  stdout: ''
  timestamp: 1660011461
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        long product = factorize(n).stream().reduce(Long::sum);\n        return\
    \ factorize(product);\n    }\n    public static void main(String[] args) {\n \
    \   assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpgoixb8qz.java:19: error: incompatible types: Optional<Long> cannot\
    \ be converted to long\n        long product = factorize(n).stream().reduce(Long::sum);\n\
    \                                                   ^\n1 error\n"
  stdout: ''
  timestamp: 1660011460
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<>();\n        if (n == 2l) factors.add(2l);\n\
    \        else if (n % 2l == 0l) factors.add(2l);\n        else factors.add(2l);\n\
    \        if (n % 3l == 0l) factors.add(3l);\n        else if (n % 3l != 0l) factors.add(3l);\n\
    \        else factors.add(3l);\n        if (n % 5l == 0l) factors.add(5l);\n \
    \       else if (n % 5l != 0l) factors.add(5l);\n        else factors.add(5l);\n\
    \        if (n % 7l == 0l) factors.add(7l);\n        else if (n % 7l != 0l) factors.add(7l);\n\
    \        else factors.add(7l);\n        if (n % 11l == 0l) factors.add(11l);\n\
    \        else if (n % 11l != 0l) factors.add(11l);\n        else factors.add(11l);\n\
    \        if (n % 13l == 0l) factors.add(13l);\n        else if (n % 13l != 0l)\
    \ factors.add(13l);\n        else factors.add(13l);\n        if (n % 17l == 0l)\
    \ factors.add(17l);\n        else if (n % 17l != 0l) factors.add(17l);\n     \
    \   else factors.add(17l);\n        if (n % 19l == 0l) factors.add(19l);\n   \
    \     else if (n % 19l != 0l) factors.add(19l);\n        else factors.add(19l);\n\
    \        if (n % 23l == 0l) factors.add(23l);\n        else if (n % 23l != 0l)\
    \ factors.add(23l);\n        else factors.add(23l);\n        if (n % 29l == 0l)\
    \ factors.add(29l);\n        else if (n % 29l != 0l) factors.add(29l);\n     \
    \   else factors.add(29l);\n        if (n % 31l == 0l) factors.add(31l);\n   \
    \     else if (n % 31l != 0l) factors.add(31l);\n        else factors.add(31l);\n\
    \        if (n % 37l == 0l) factors.add(37l);\n        else if (n % 37l != 0l)\
    \ factors.add(37l);\n        else factors.add(37l);\n        if (n % 41l == 0l)\
    \ factors.add(41l);\n        else if (n % 41l != 0l) factors.add(41l);\n     \
    \   else factors.add(41l);\n        if (n % 43l == 0l) factors.add(43l);\n   \
    \     else if (n % 43l != 0l) factors.add(43l);\n        else factors.add(43l);\n\
    \        if (n % 47l == 0l) factors.add(47l);\n        else if (n % 47l != 0l)\
    \ factors.add(47l);\n        else factors.add(47l);\n        if (n % 53l == 0l)\
    \ factors.add(53l);\n        else if (n % 53l != 0l) factors.add(53l);\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnb6thuaq.java:68: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011461
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        // Create array of factors\n        ArrayList<Long> factors = new ArrayList<Long>();\n\
    \n        // Compute prime factors\n        for (long i = 2; i <= n / i; i++)\
    \ {\n            if (n % i == 0) {\n                factors.add(i);\n        \
    \        while (n % i == 0) {\n                    n = n / i;\n              \
    \      factors.add(i);\n                }\n            }\n        }\n        return\
    \ factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphyyqkj8v.java:35)\n"
  stdout: ''
  timestamp: 1660011461
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        // Check if n can be factored into prime factors\n        ArrayList<Long>\
    \ factors = new ArrayList<>();\n        ArrayList<Long> primeFactors = new ArrayList<>();\n\
    \        if (n < 3L) \n            factors.add(1L);\n        else if (n % 2L ==\
    \ 1L) \n            factors.add(2L);\n        else {\n            primeFactors.add(2L);\n\
    \            factors.addAll(factorize(n / 2L));\n        }\n        // Add prime\
    \ factors\n        for (int i = 2; i < Math.sqrt(n); i++) {\n            if (n\
    \ % i == 0L) {\n                primeFactors.add(i);\n                factors.add(0L);\n\
    \                factors.addAll(factorize(n/i));\n            }\n        }\n \
    \       return factors;\n    }\n    public static void main(String[] args) {\n\
    \    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpbplw5exc.java:33: error: incompatible types: int cannot be converted\
    \ to Long\n                primeFactors.add(i);\n                            \
    \     ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011461
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<>();\n        factorize(n, factors);\n\
    \        return factors;\n    }\n    public static void main(String[] args) {\n\
    \    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpl6lgf1i3.java:20: error: method factorize in class Problem cannot\
    \ be applied to given types;\n        factorize(n, factors);\n        ^\n  required:\
    \ long\n  found:    long,ArrayList<Long>\n  reason: actual and formal argument\
    \ lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011460
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> result = new ArrayList<Long>();\n        ArrayList<Long>\
    \ factors = new ArrayList<Long>();\n        long factor = n;\n        while (true)\
    \ {\n            factors.add(factor);\n            long temp = factor;\n     \
    \       while (temp % 2 == 0) {\n                factor /= 2;\n            }\n\
    \            if (factor < 2) {\n                break;\n            }\n      \
    \      while (temp % 3 == 0) {\n                factor /= 3;\n            }\n\
    \            if (factor < 2) {\n                break;\n            }\n      \
    \      while (temp % 5 == 0) {\n                factor /= 5;\n            }\n\
    \            if (factor < 2) {\n                break;\n            }\n      \
    \      while (temp % 7 == 0) {\n                factor /= 7;\n            }\n\
    \            if (factor < 2) {\n                break;\n            }\n      \
    \      while (temp % 11 == 0) {\n                factor /= 11;\n            }\n\
    \            if (factor < 2) {\n                break;\n            }\n      \
    \      while (temp % 13 == 0) {\n                factor /= 13;\n            }\n\
    \            if (factor < 2) {\n                break;\n            }\n      \
    \      while (temp % 17 == 0) {\n                factor /= 17;\n            }\n\
    \            if (factor < 2) {\n                break;\n            }\n      \
    \      while (temp % 19 == 0) {\n                factor /= 19;\n            }\n\
    \            if (factor < 2) {\n                break;\n            }\n      \
    \      while (temp % 23 == 0) {\n                factor /= 23;\n            }\n\
    \            if (factor < 2) {\n                break;\n            }\n      \
    \      while (temp % 29 == 0) {\n                factor /= 29;\n            }\n\
    \            if (factor < 2) {\n                break;\n            }\n      \
    \      while (temp % 31 == 0) {\n                factor /= 31;\n            }\n\
    \            if (factor < 2) {\n                break;\n            }\n      \
    \      while (temp % 37 == 0) {\n                factor /= 37;\n            }\n\
    \            if (factor < 2) {\n                break;\n            }\n      \
    \      while (temp % 41 == 0) {\n                factor /= 41;\n            }\n\
    \            if (factor < 2) {\n                break;\n            }\n      \
    \      while (temp % 43 == 0) {\n                factor /= 43;\n            }\n\
    \            if (factor < 2) {\n                break;\n            }\n      \
    \      while (temp % 47 == 0) {\n                factor /= 47;\n            }\n\
    \            if (factor < 2) {\n                break;\n            }\n      \
    \      while (temp % 53 == 0) {\n                factor /= 53;\n            }\n\
    \            if (factor < 2) {\n                break;\n            }\n      \
    \      while (temp % 59 == 0) {\n                factor /= 59;\n            }\n\
    \            if (factor < 2) {\n                break;\n            }\n      \
    \      while (temp % 61 == 0) {\n                factor /= 61;\n            }\n\
    \            if (factor < 2) {\n                break;\n            }\n      \
    \      while (temp % 67 == 0) {\n                factor /= 67;\n            }\n\
    \            if (factor < 2) {\n                break;\n            }\n      \
    \      while (temp % 73 == 0) {\n                factor /= 73;\n            }\n\
    \            if (factor < 2) {\n                break;\n            }\n    }\n\
    \    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphcl9fgyt.java:146: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1660011460
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        // Step 1: Find number of factors.\n        final ArrayList<Long> factors\
    \ = new ArrayList<Long>();\n        long numFactors = 1;\n        while (n % numFactors\
    \ == 0) {\n            factors.add(numFactors);\n            n /= numFactors;\n\
    \            numFactors *= 2;\n        }\n        if (n == 1) {\n            factors.add(1);\n\
    \        }\n        \n        // Step 2: Find all prime factors.\n        ArrayList<Long>\
    \ primeFactors = new ArrayList<Long>();\n        long numFactor = numFactors;\n\
    \        while (n % numFactor == 0) {\n            primeFactors.add(numFactor);\n\
    \            n /= numFactor;\n            numFactor *= 2;\n        }\n       \
    \ \n        // Step 3: Return factors of original number.\n        if (n > 1)\
    \ {\n            while (n > 1) {\n                long div = n / numFactor;\n\
    \                if (div % 2 == 0) {\n                    factors.add(div);\n\
    \                }\n                n = div;\n                numFactor *= 2;\n\
    \            }\n        }\n        // Step 4: Return factors.\n        if (n !=\
    \ 1) {\n            while (n > 1) {\n                long div = n / numFactor;\n\
    \                factors.add(div);\n                n = div;\n               \
    \ numFactor *= 2;\n            }\n        }\n        \n        // Step 5: Remove\
    \ duplicate factors.\n        final ArrayList<Long> noDuplicateFactors = new ArrayList<Long>();\n\
    \        for (Long l : factors) {\n            if (!noDuplicateFactors.contains(l))\
    \ {\n                noDuplicateFactors.add(l);\n            }\n        }\n  \
    \      \n        // Step 6: Return factors.\n        return noDuplicateFactors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1h_57el2.java:28: error: incompatible types: int cannot be converted\
    \ to Long\n            factors.add(1);\n                        ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011461
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> list = new ArrayList<Long>();\n        ArrayList<Long>\
    \ factors = new ArrayList<Long>();\n        boolean isPrime = true;\n        long\
    \ max = n;\n        long nextDivisor = 1;\n        long div = 1;\n\n        while\
    \ (next != max)\n        {\n            if (n % div == 0)\n            {\n   \
    \             isPrime = false;\n            }\n            else\n            {\n\
    \                nextDivisor++;\n            }\n            div++;\n        }\n\
    \        long next = 2;\n        while (next <= n)\n        {\n            if\
    \ (n % next == 0)\n            {\n                isPrime = false;\n         \
    \   }\n            else\n            {\n                next++;\n            }\n\
    \        }\n        if (isPrime)\n        {\n            list.add(1l);\n     \
    \   }\n        while (next <= max)\n        {\n            if (n % next == 0)\n\
    \            {\n                list.add(next);\n            }\n            else\n\
    \            {\n                next++;\n            }\n        }\n        return\
    \ list;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn96qn7h9.java:26: error: cannot find symbol\n        while (next\
    \ != max)\n               ^\n  symbol:   variable next\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011461
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        // Use loop\
    \ to check all factors for n starting from 1\n        for (long i = 1; i <= n;\
    \ i++) {\n            ArrayList<Long> divisors = getPrimeFactors(i);\n       \
    \     if (divisors.size() != 1) {\n                // Get first item from divisor\
    \ array\n                long firstDivisor = divisors.get(0);\n              \
    \  // Add first divisor to factors array and remove it from divisors array\n \
    \               factors.add(firstDivisor);\n                divisors.remove(firstDivisor);\n\
    \                // Update n to divide it by first divisor and continue\n    \
    \            n = n / firstDivisor;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzoh4bvos.java:22: error: cannot find symbol\n            ArrayList<Long>\
    \ divisors = getPrimeFactors(i);\n                                       ^\n \
    \ symbol:   method getPrimeFactors(long)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011461
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        int product = 1;\n        ArrayList<Long> factors = new ArrayList<Long>();\n\
    \        // Compute factorization using binary search for faster search\n    \
    \    long start = 0;\n        long end = n-1;\n        while (start <= end) {\n\
    \            long mid = (start + end)/2;\n            long product = mid*mid;\n\
    \            if (product < n)\n                start = mid+1;\n            else\
    \ if (product > n)\n                end = mid-1;\n            else {\n       \
    \         factors.add(mid);\n                product = mid*mid;\n            }\n\
    \        }\n        return factors;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsf81pzj3.java:26: error: variable product is already defined in\
    \ method factorize(long)\n            long product = mid*mid;\n              \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1660011461
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long factor\
    \ = 1;\n        boolean isPrime = true;\n        while (n > 1) {\n           \
    \ factor = n / factor;\n            if (factor > 1) {\n                factors.add(factor);\n\
    \            }\n            isPrime = true;\n            for (long i = 2; i <=\
    \ Math.sqrt(n); i++) {\n                if (n % i == 0) {\n                  \
    \  isPrime = false;\n                    break;\n                }\n         \
    \   }\n            if (isPrime) {\n                factors.add(factor);\n    \
    \        }\n            n--;\n        }\n        return factors;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphz8h4lyc.java:42)\n"
  stdout: ''
  timestamp: 1660011461
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> result = new ArrayList<>((int) (Math.ceil(n/2l)));\n\
    \        long i = n;\n        while (true) {\n            if (i <= 1) return result;\n\
    \            if (i % 2 == 1) result.add(2l);\n            long newI = i/2;\n \
    \           if (newI * 2 > n) break;\n            i = newI;\n        }\n     \
    \   int count = 0;\n        while (true) {\n            if (n % i == 0) result.add(i);\n\
    \            int newI = n/i;\n            if (newI > i)\n                break;\n\
    \            i = newI;\n            count++;\n        }\n        if (count > 0)\n\
    \            result.addAll(factorize(i));\n        if (i < n) result.addAll(factorize(n-i));\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp11ksvet8.java:31: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int newI = n/i;\n                        ^\n1\
    \ error\n"
  stdout: ''
  timestamp: 1660011461
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<>();\n        // Loop through\
    \ all factors of the input number\n        while (n % 2 == 0) {\n            factors.add(2l);\n\
    \            n = n / 2;\n        }\n        if (n != 1l) {\n            // Loop\
    \ to find and remove all multiples of prime factors\n            ArrayList<Long>\
    \ factors2 = new ArrayList<>();\n            while (n % 2 == 0) {\n          \
    \      factors2.add(2l);\n                n = n / 2;\n            }\n        \
    \    while (n % 3 == 0) {\n                factors2.add(3l);\n               \
    \ n = n / 3;\n            }\n            while (n % 5 == 0) {\n              \
    \  factors2.add(5l);\n                n = n / 5;\n            }\n            while\
    \ (n % 7 == 0) {\n                factors2.add(7l);\n                n = n / 7;\n\
    \            }\n            // Loop to find and remove all multiples of prime\
    \ factors\n            ArrayList<Long> factors3 = new ArrayList<>();\n       \
    \     while (n % 2 == 0) {\n                factors3.add(2l);\n              \
    \  n = n / 2;\n            }\n            while (n % 3 == 0) {\n             \
    \   factors3.add(3l);\n                n = n / 3;\n            }\n           \
    \ while (n % 5 == 0) {\n                factors3.add(5l);\n                n =\
    \ n / 5;\n            }\n            while (n % 7 == 0) {\n                factors3.add(7l);\n\
    \                n = n / 7;\n            }\n            ArrayList<Long> factors4\
    \ = new ArrayList<>();\n            while (n % 2 == 0) {\n                factors4.add(2l);\n\
    \                n = n / 2;\n            }\n            while (n % 3 == 0) {\n\
    \                factors4.add(3l);\n                n = n / 3;\n            }\n\
    \            while (n % 5 == 0) {\n                factors4.add(5l);\n       \
    \         n = n / 5;\n            }\n            while (n % 7 == 0) {\n      \
    \          factors4.add(7l);\n                n = n / 7;\n            }\n    \
    \        ArrayList<Long> factors5 = new ArrayList<>();\n            while (n %\
    \ 2 == 0) {\n                factors5.add(2l);\n                n = n / 2;\n \
    \           }\n            while (n % 3 == 0) {\n                factors5.add(3l);\n\
    \                n = n / 3;\n            }\n            while (n % 5 == 0) {\n\
    \                factors5.add(5l);\n                n = n / 5;\n            }\n\
    \            while (n % 7 == 0) {\n                factors5.add(7l);\n       \
    \         n = n / 7;\n            }\n            ArrayList<Long> factors6 = new\
    \ ArrayList<>();\n            while (n % 2 == 0) {\n                factors6.add(2l);\n\
    \                n = n / 2;\n            }\n            while (n % 3 == 0) {\n\
    \                factors6.add(3l);\n                n = n / 3;\n            }\n\
    \            \n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9xfc6fsb.java:107: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1660011460
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> results = new ArrayList<>();\n        long divisor =\
    \ n;\n        while(divisor!=1) {\n            boolean isPrime = true;\n     \
    \       for(long factor : factorization) {\n                if(n%factor==0) {\n\
    \                    isPrime = false;\n                    break;\n          \
    \      }\n            }\n            if(isPrime) {\n                results.add(divisor);\n\
    \            }\n            divisor = n/divisor;\n        }\n        return results;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfogp3ho8.java:23: error: cannot find symbol\n            for(long\
    \ factor : factorization) {\n                              ^\n  symbol:   variable\
    \ factorization\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011461
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<>();\n        long number = n;\n\
    \        List<Long> temp = new ArrayList<>();\n        long number = n;\n    \
    \    while (number != 1) {\n            if (number % 2 == 0) {\n             \
    \   temp.add(number/2);\n            }\n            number /= 2;\n        }\n\
    \        long size = temp.size();\n        boolean check = true;\n        while\
    \ (check) {\n            for (long i : temp) {\n                if (number % i\
    \ == 0) {\n                    number = number/i;\n                    temp.remove(i);\n\
    \                    check = false;\n                    break;\n            \
    \    }\n            }\n            size = temp.size();\n        }\n        factors.add(number);\n\
    \        return factors;\n    }\n    public static void main(String[] args) {\n\
    \    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpm5wmx3nz.java:22: error: variable number is already defined in\
    \ method factorize(long)\n        long number = n;\n             ^\n1 error\n"
  stdout: ''
  timestamp: 1660011461
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        if (n == 1l) return new ArrayList<Long>(Arrays.asList((long) 1l));\n\
    \        if (n % 2 == 0l) return new ArrayList<Long>(Arrays.asList((long) 1l,\
    \ n / 2l));\n        ArrayList<Long> factors = new ArrayList<>();\n        for\
    \ (long i = 2l; i <= n; i += 2l) while (n % i == 0l) factors.add(i);\n       \
    \ if (n % 2 == 0l) factors.add(n / 2l);\n        return new ArrayList<Long>(factors);\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm7q_088t.java:27)\n"
  stdout: ''
  timestamp: 1660011462
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<>();\n        // If number is\
    \ divisible by 2\n        if (n%2l==0l)\n            factors.add(2l);\n      \
    \  // If number is divisible by 3 and 2\n        else if (n%3l==0l && n%2l==0l)\n\
    \            factors.add(3l);\n        // If number is divisible by 3\n      \
    \  else if (n%3l==0l)\n            factors.add(3l);\n        // If number is divisible\
    \ by 2 and 3\n        else if (n%2l==0l && n%3l==0l)\n            factors.add(2l);\n\
    \        // If number is divisible by 2 and 3\n        else if (n%2l==0l && n%3l!=0l)\n\
    \            factors.add(2l);\n        // If number is divisible by 2 and 3\n\
    \        else if (n%3l==0l && n%2l!=0l)\n            factors.add(3l);\n      \
    \  // If number is divisible by 2 and 3\n        else if (n%2l!=0l && n%3l==0l)\n\
    \            factors.add(2l);\n        // If number is divisible by 2 and 3\n\
    \        else if (n%2l!=0l && n%3l!=0l)\n            factors.add(3l);\n      \
    \  // If number is divisible by 2 and 3\n        else if (n%3l!=0l && n%2l==0l)\n\
    \            factors.add(2l);\n        // If number is divisible by 2 and 3\n\
    \        else if (n%3l!=0l && n%2l!=0l)\n            factors.add(3l);\n      \
    \  // If number is divisible by 2 and 3\n        else if (n%2l!=0l && n%3l!=0l)\n\
    \            factors.add(2l);\n        // If number is divisible by 2 and 3\n\
    \        else if (n%2l!=0l && n%3l==0l)\n            factors.add(3l);\n      \
    \  // If number is divisible by 2 and 3\n        else if (n%3l!=0l && n%2l!=0l)\n\
    \            factors.add(2l);\n        return factors;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjw4dts71.java:63)\n"
  stdout: ''
  timestamp: 1660011462
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i * i <= n; i++) {\n            long d = n / i;\n            if (d != i)\
    \ {\n                factors.add(i);\n            }\n        }\n        return\
    \ factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu9n9nhtb.java:29)\n"
  stdout: ''
  timestamp: 1660011462
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long factor\
    \ = 1; factor <= n; factor++) {\n            if (n % factor == 0) {\n        \
    \        factors.add(factor);\n                n /= factor;\n            }\n \
    \       }\n        if (n != 1L) {\n            factors.add(n);\n        }\n  \
    \      return factors;\n    }\n    public static void main(String[] args) {\n\
    \    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9wh5d41p.java:32)\n"
  stdout: ''
  timestamp: 1660011462
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        // Create map where key is input number and value is list of factors.\n\
    \        // When we enter new number we check if it is in map, if it is then we\
    \ get list of factors and we add to list\n        // If it is new number we get\
    \ new factors list from factorization function.\n        HashMap<Long, ArrayList<Long>>\
    \ factorizationMap = new HashMap<>();\n        ArrayList<Long> factorization =\
    \ new ArrayList<>();\n        factorization(factorization, factorizationMap, n);\n\
    \        ArrayList<Long> result = new ArrayList<>();\n        for (long k : factorization.values())\
    \ {\n            result.addAll(k);\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmcm8fg2t.java:24: error: cannot find symbol\n        factorization(factorization,\
    \ factorizationMap, n);\n        ^\n  symbol:   method factorization(ArrayList<Long>,HashMap<Long,ArrayList<Long>>,long)\n\
    \  location: class Problem\n/tmp/tmpmcm8fg2t.java:26: error: cannot find symbol\n\
    \        for (long k : factorization.values()) {\n                           \
    \        ^\n  symbol:   method values()\n  location: variable factorization of\
    \ type ArrayList<Long>\n/tmp/tmpmcm8fg2t.java:27: error: incompatible types: long\
    \ cannot be converted to Collection<? extends Long>\n            result.addAll(k);\n\
    \                          ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1660011462
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> result = new ArrayList<>();\n        ArrayList<Long>\
    \ primeFactorization = new ArrayList<>();\n        long product = n;\n       \
    \ long factorization = 2;\n        while (product != 1) {\n            long r\
    \ = factorization;\n            while (product % r == 0) {\n                factorization++;\n\
    \                result.add(r);\n                result.add(product / r);\n  \
    \              product = product / r;\n            }\n            factorization--;\n\
    \        }\n        for (int i = 0; i < result.size(); i++) {\n            long\
    \ i = result.get(i);\n            while (i > 1) {\n                if (primeFactorization.contains(i))\
    \ {\n                    i--;\n                } else {\n                    primeFactorization.add(i);\n\
    \                }\n                --i;\n            }\n        }\n        return\
    \ primeFactorization;\n    }\n    public static void main(String[] args) {\n \
    \   assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpkll99t_x.java:34: error: variable i is already defined in method\
    \ factorize(long)\n            long i = result.get(i);\n                 ^\n/tmp/tmpkll99t_x.java:34:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \        long i = result.get(i);\n                                ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    2 errors\n"
  stdout: ''
  timestamp: 1660011462
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<>();\n        for (long i = 2;\
    \ i <= Math.sqrt(n); i++) {\n            while (n % i == 0) {\n              \
    \  factors.add(i);\n                n /= i;\n            }\n        }\n      \
    \  if (n != 1)\n            factors.add(n);\n        return factors;\n    }\n\
    \    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011462
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> result = new ArrayList<>();\n        while (n % 2 ==\
    \ 0) {\n            result.add(2);\n            n /= 2;\n        }\n        long\
    \ max = Math.sqrt(n);\n        long maxI = 1;\n        for (long i = 2; i <= max;\
    \ i++) {\n            if (n % i == 0) {\n                result.add(i);\n    \
    \            maxI *= i;\n            }\n        }\n        if (maxI * n != n)\
    \ {\n            result.add(maxI * n);\n        }\n        return result;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgiblrmsg.java:21: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(2);\n                       ^\n/tmp/tmpgiblrmsg.java:24:\
    \ error: incompatible types: possible lossy conversion from double to long\n \
    \       long max = Math.sqrt(n);\n                            ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011462
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        if (n < 4) return new ArrayList<Long>();\n        ArrayList<Long> factors\
    \ = new ArrayList<Long>(Arrays.asList(2l));\n        long m = n;\n        while\
    \ (m % 2 == 0) {\n            factors.add(2l);\n            m /= 2;\n        }\n\
    \        if (m > 2) factors.add(m);\n        long n = m;\n        for (long i\
    \ = 2; i <= n; i++) {\n            long f = 0;\n            for (long k = 2; k\
    \ < i; k++) {\n                if (i % k == 0) {\n                    f = 1;\n\
    \                    break;\n                }\n            }\n            if\
    \ (f == 0) factors.add(i);\n        }\n        return factors;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpnbcnymv8.java:27: error: variable n is already defined in method\
    \ factorize(long)\n        long n = m;\n             ^\n1 error\n"
  stdout: ''
  timestamp: 1660011462
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        long largest = n;\n        ArrayList<Long> factors = new ArrayList<>();\n\
    \        long factor = 1;\n        boolean hasPrimeFactor = true;\n        while\
    \ (hasPrimeFactor) {\n            while (n % factor == 0) {\n                factors.add(factor);\n\
    \                n = n / factor;\n            }\n            factor++;\n     \
    \   }\n        if (n > largest) {\n            factors.addAll(factorize(n));\n\
    \        } else {\n            factors.add(n);\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011467
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        if (n < 2l)\
    \ {\n            return factors;\n        }\n        long l = n, r = n, d = 1l,\
    \ m = 3l, r = n, i = 1l;\n        while (i < l) {\n            d = lm % r;\n \
    \           while (d > 1l) { r = r * d; d /= 2l; }\n            m = r / d;\n \
    \           factors.add(m);\n            l /= d;\n            ++i;\n        }\n\
    \        return factors;\n    }\n    public static void main(String[] args) {\n\
    \    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpqto3qcnt.java:23: error: variable r is already defined in method\
    \ factorize(long)\n        long l = n, r = n, d = 1l, m = 3l, r = n, i = 1l;\n\
    \                                           ^\n/tmp/tmpqto3qcnt.java:25: error:\
    \ cannot find symbol\n            d = lm % r;\n                ^\n  symbol:  \
    \ variable lm\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011462
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        int numOfTimes = 0;\n        ArrayList<Long> factors = new ArrayList<Long>();\n\
    \        int temp = n;\n        while (temp != 1) {\n            temp = temp /\
    \ 2;\n            factors.add(temp);\n            numOfTimes++;\n        }\n \
    \       List<Long> numbers = new ArrayList<Long>();\n        long temp2 = n;\n\
    \        for (int i = 1; i <= numOfTimes; i++) {\n            temp2 = temp2 *\
    \ temp2;\n            numbers.add(temp2);\n        }\n        factors.add(new\
    \ Long(numOfTimes));\n        for (int i = 0; i <= numbers.size() - 1; i++) {\n\
    \            long temp = numbers.get(i);\n            while (temp != 1) {\n  \
    \              if (temp % 2 == 0) {\n                    numbers.set(i, temp /\
    \ 2);\n                    temp2 = temp * temp2;\n                    numbers.set(i\
    \ + 1, temp2);\n                }\n                temp = temp / 2;\n        \
    \    }\n        }\n        return factors;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp1iie6cqh.java:21: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int temp = n;\n                   ^\n/tmp/tmp1iie6cqh.java:24:\
    \ error: incompatible types: int cannot be converted to Long\n            factors.add(temp);\n\
    \                        ^\n/tmp/tmp1iie6cqh.java:33: warning: [removal] Long(long)\
    \ in Long has been deprecated and marked for removal\n        factors.add(new\
    \ Long(numOfTimes));\n                    ^\n/tmp/tmp1iie6cqh.java:35: error:\
    \ variable temp is already defined in method factorize(long)\n            long\
    \ temp = numbers.get(i);\n                 ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n3 errors\n1 warning\n"
  stdout: ''
  timestamp: 1660011462
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> arr = new ArrayList<Long>();\n        factorize(n, n,\
    \  arr);\n        return arr;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp5_ahd5iq.java:20: error: method factorize in class Problem cannot\
    \ be applied to given types;\n        factorize(n, n,  arr);\n        ^\n  required:\
    \ long\n  found:    long,long,ArrayList<Long>\n  reason: actual and formal argument\
    \ lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011462
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> list = new ArrayList<>();\n        if (n <= 1l) return\
    \ list;\n        long m = n;\n        int count = 0;\n        for (;;) {\n   \
    \         while (m % 2 == 0) m /= 2;\n            while (m % 3 == 0) m /= 3;\n\
    \            while (m % 5 == 0) m /= 5;\n            if (m == 1) break;\n    \
    \        list.add(m);\n            count++;\n        }\n        list = list.stream().filter(l\
    \ -> l % count != 0).collect(Collectors.toCollection(ArrayList::new));\n     \
    \   list.sort((l, r) -> {\n            int diff = Long.compare(l, r);\n      \
    \      if (diff == 0) return Long.compare(n, (long) l);\n            return diff;\n\
    \        });\n        return list;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmphi6fl4jt.java:31: error: local variables referenced from a lambda\
    \ expression must be final or effectively final\n        list = list.stream().filter(l\
    \ -> l % count != 0).collect(Collectors.toCollection(ArrayList::new));\n     \
    \                                        ^\n1 error\n"
  stdout: ''
  timestamp: 1660011462
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        if (n == 1l) {\n            return new ArrayList<Long>(Arrays.asList((long)1l));\n\
    \        }\n        if (n == 2l) {\n            return new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l));\n        }\n        ArrayList<Long> factors = new ArrayList<Long>(Arrays.asList((long)1l));\n\
    \        long factor = 1;\n        while (factor <= n) {\n            if (n %\
    \ factor == 0) {\n                factors.add(factor);\n                n /= factor;\n\
    \            } else {\n                factor++;\n            }\n        }\n \
    \       if (n != 1l) {\n            factors.add(n);\n        }\n        return\
    \ factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbwao85dx.java:41)\n"
  stdout: ''
  timestamp: 1660011462
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        factorize(n,\
    \ factors);\n        return factors;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpwsl6mryb.java:20: error: method factorize in class Problem cannot\
    \ be applied to given types;\n        factorize(n, factors);\n        ^\n  required:\
    \ long\n  found:    long,ArrayList<Long>\n  reason: actual and formal argument\
    \ lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011453
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long i = 2;\n\
    \        while (n != 1) {\n            while (n % i == 0) {\n                n\
    \ /= i;\n                factors.add(i); // add factors to the factorized array\n\
    \            }\n            i++;\n        }\n        factors.add(1); // add 1\
    \ to the factorized array\n        return factors;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp8b2h2lqk.java:28: error: incompatible types: int cannot be converted\
    \ to Long\n        factors.add(1); // add 1 to the factorized array\n        \
    \            ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011462
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<>();\n        long x = n;\n \
    \       long fNum = 0;\n        while ((x % 2) == 0L || (x % 3) == 0L) {\n   \
    \         fNum += 2;\n            factors.add(fNum);\n            x /= 2;\n  \
    \      }\n        x = n;\n        while ((x % 3) == 0L) {\n            fNum +=\
    \ 3;\n            factors.add(fNum);\n            x /= 3;\n        }\n       \
    \ while ((x % 5) == 0L) {\n            fNum += 5;\n            factors.add(fNum);\n\
    \            x /= 5;\n        }\n        while ((x % 7) == 0L) {\n           \
    \ fNum += 7;\n            factors.add(fNum);\n            x /= 7;\n        }\n\
    \        while ((x % 11) == 0L) {\n            fNum += 11;\n            factors.add(fNum);\n\
    \            x /= 11;\n        }\n        factors.add(fNum);\n        factors.add(1l);\n\
    \        return factors;\n    }\n    public static void main(String[] args) {\n\
    \    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8_4o57s5.java:53)\n"
  stdout: ''
  timestamp: 1660011462
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        // find factors of given number n\n        ArrayList<Long> f = new ArrayList<Long>();\n\
    \        long m = n;\n        do {\n            while (m % 2 == 0) {\n       \
    \         f.add(2l);\n                m /= 2;\n            }\n            while\
    \ (m % 3 == 0) {\n                f.add(3l);\n                m /= 3;\n      \
    \      }\n            while (m % 5 == 0) {\n                f.add(5l);\n     \
    \           m /= 5;\n            }\n            while (m % 7 == 0) {\n       \
    \         f.add(7l);\n                m /= 7;\n            }\n            while\
    \ (m % 11 == 0) {\n                f.add(11l);\n                m /= 11;\n   \
    \         }\n            while (m % 13 == 0) {\n                f.add(13l);\n\
    \                m /= 13;\n            }\n            while (m % 17 == 0) {\n\
    \                f.add(17l);\n                m /= 17;\n            }\n      \
    \      while (m % 19 == 0) {\n                f.add(19l);\n                m /=\
    \ 19;\n            }\n            while (m % 23 == 0) {\n                f.add(23l);\n\
    \                m /= 23;\n            }\n            while (m % 29 == 0) {\n\
    \                f.add(29l);\n                m /= 29;\n            }\n      \
    \      while (m % 31  == 0) {\n                f.add(31l);\n                m\
    \ /= 31;\n            }\n            while (m % 37 == 0) {\n                f.add(37l);\n\
    \                m /= 37;\n            }\n            while (m % 41 == 0) {\n\
    \                f.add(41l);\n                m /= 41;\n            }\n      \
    \      while (m % 43 == 0) {\n                f.add(43l);\n                m /=\
    \ 43;\n            }\n            while (m % 47 == 0) {\n                f.add(47l);\n\
    \                m /= 47;\n            }\n            while (m % 51 == 0) {\n\
    \                f.add(51l);\n                m /= 51;\n            }\n      \
    \      while (m % 53 == 0) {\n                f.add(53l);\n                m /=\
    \ 53;\n            }\n            while (m % 59 == 0) {\n                f.add(59l);\n\
    \                m /= 59;\n            }\n            while (m % 61 == 0) {\n\
    \                f.add(61l);\n                m /= 61;\n            }\n      \
    \      while (m % 67 == 0) {\n                f.add(67l);\n                m /=\
    \ 67;\n            }\n            while (m % 71 == 0) {\n                f.add(71l);\n\
    \                m /= 71;\n            }\n            while (m % 73 == 0) {\n\
    \                f.add(73l);\n                m /= 73;\n            }\n      \
    \      while (m % 79 == 0) {\n                f.add(79l);\n                m /=\
    \ 79;\n            }\n            while (m % 83 == 0) {\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsyrmn_56.java:117: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1660011462
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        long d = Math.sqrt(n);\n        ArrayList<Long> factors = new ArrayList<Long>();\n\
    \n        // Prime factorization with successively smaller numbers and factorization\n\
    \        // of current number with factors found at previous iterations\n    \
    \    long x = 2;\n        long factor = 1;\n        for(long i = 2; i <= d; i++)\
    \ {\n            if(n%i==0) {\n                factors.add(x);\n             \
    \   factor *= i;\n            }\n            x += i;\n        }\n\n        if(factors.isEmpty())\
    \ factors.add(1);\n        return factors;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpfbnh6mnw.java:19: error: incompatible types: possible lossy conversion\
    \ from double to long\n        long d = Math.sqrt(n);\n                      \
    \    ^\n/tmp/tmpfbnh6mnw.java:34: error: incompatible types: int cannot be converted\
    \ to Long\n        if(factors.isEmpty()) factors.add(1);\n                   \
    \                       ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011463
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long sqrtn\
    \ = Math.sqrt(n);\n        for (long i = 2; i <= sqrtn; i++) {\n            while\
    \ (n % i == 0) {\n                n /= i;\n                factors.add(i);\n \
    \           }\n        }\n        return factors;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp5griv52k.java:20: error: incompatible types: possible lossy conversion\
    \ from double to long\n        long sqrtn = Math.sqrt(n);\n                  \
    \            ^\n1 error\n"
  stdout: ''
  timestamp: 1660011462
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        Arrays.stream(new\
    \ int[]{2, 3, 5}).forEach(i -> factors.addAll(factorize(n/(i*i))));\n        factors.add(n);\n\
    \        return factors;\n    }\n    public static void main(String[] args) {\n\
    \    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat java.base/java.util.Spliterators.spliterator(Spliterators.java:239)\n\
    \tat java.base/java.util.Arrays.spliterator(Arrays.java:5335)\n\tat java.base/java.util.Arrays.stream(Arrays.java:5477)\n\
    \tat java.base/java.util.Arrays.stream(Arrays.java:5459)\n\tat Problem.factorize(tmp37f8f7dl.java:20)\n\
    \tat Problem.lambda$factorize$0(tmp37f8f7dl.java:20)\n\tat java.base/java.util.Spliterators$IntArraySpliterator.forEachRemaining(Spliterators.java:1076)\n\
    \tat java.base/java.util.stream.IntPipeline$Head.forEach(IntPipeline.java:617)\n\
    \tat Problem.factorize(tmp37f8f7dl.java:20)\n\tat Problem.lambda$factorize$0(tmp37f8f7dl.java:20)\n\
    \tat java.base/java.util.Spliterators$IntArraySpliterator.forEachRemaining(Spliterators.java:1076)\n\
    \tat java.base/java.util.stream.IntPipeline$Head.forEach(IntPipeline.java:617)\n\
    \tat Problem.factorize(tmp37f8f7dl.java:20)\n\tat Problem.lambda$factorize$0(tmp37f8f7dl.java:20)\n\
    \tat java.base/java.util.Spliterators$IntArraySpliterator.forEachRemaining(Spliterators.java:1076)\n\
    \tat java.base/java.util.stream.IntPipeline$Head.forEach(IntPipeline.java:617)\n\
    \tat Problem.factorize(tmp37f8f7dl.java:20)\n\tat Problem.lambda$factorize$0(tmp37f8f7dl.java:20)\n\
    \tat java.base/java.util.Spliterators$IntArraySpliterator.forEachRemaining(Spliterators.java:1076)\n\
    \tat java.base/java.util.stream.IntPipeline$Head.forEach(IntPipeline.java:617)\n\
    \tat Problem.factorize(tmp37f8f7dl.java:20)\n\tat Problem.lambda$factorize$0(tmp37f8f7dl.java:20)\n\
    \tat java.base/java.util.Spliterators$IntArraySpliterator.forEachRemaining(Spliterators.java:1076)\n\
    \tat java.base/java.util.stream.IntPipeline$Head.forEach(IntPipeline.java:617)\n\
    \tat Problem.factorize(tmp37f8f7dl.java:20)\n\tat Problem.lambda$factorize$0(tmp37f8f7dl.java:20)\n\
    \tat java.base/java.util.Spliterators$IntArraySpliterator.forEachRemaining(Spliterators.java:1076)\n\
    \tat java.base/java.util.stream.IntPipeline$Head.forEach(IntPipeline.java:617)\n\
    \tat Problem.factorize(tmp37f8f7dl.java:20)\n\tat Problem.lambda$factorize$0(tmp37f8f7dl.java:20)\n\
    \tat java.base/java.util.Sp"
  stdout: ''
  timestamp: 1660011463
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> arr = new ArrayList<Long>();\n        if (n == 1l) {\n\
    \            return arr;\n        }\n        long p = 2;\n        while (p < n)\
    \ {\n            if (n % p == 0) {\n                n = n / p;\n             \
    \   arr.add(p);\n            }\n            else {\n                p++;\n   \
    \         }\n        }\n        return arr;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy9tq6upv.java:36)\n"
  stdout: ''
  timestamp: 1660011464
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        // check if\
    \ input is prime\n        if (n == 1l) return new ArrayList<Long>(Arrays.asList((long)n));\n\
    \        if (n == 2l) return new ArrayList<Long>(Arrays.asList((long)1l));\n \
    \       // check if input is perfect square\n        if (n % 2l == 0l && n !=\
    \ 1l) return new ArrayList<Long>(Arrays.asList((long)n));\n        // check if\
    \ input is odd number\n        if (n % 2l == 0l) return new ArrayList<Long>(Arrays.asList((long)n));\n\
    \        // check if input is perfect\n        if (n % 2l != 0l) return new ArrayList<Long>(Arrays.asList((long)n));\n\
    \n        ArrayList<Long> factorsFound = new ArrayList<Long>(Arrays.asList((long)1l));\n\
    \        while (n > 1l) {\n            long next = Math.sqrt(n);\n           \
    \ // check factor is prime\n            boolean prime = true;\n            for\
    \ (long factor = 2l; factor < next; factor++) {\n                if (n % factor\
    \ == 0l) prime = false;\n            }\n            if (prime) factorsFound.add(next);\n\
    \            n = next;\n        }\n        // add factors with same number of\
    \ repetitions as their factors\n        for (long f : factorsFound) {\n      \
    \      factors.add(f);\n            for (long i : factorsFound) {\n          \
    \      if (f % i == 0l) {\n                    if (factors.get(i) < factors.size())\
    \ {\n                        factors.set((int)i, factors.get(i) + 1l);\n     \
    \               }\n                    break;\n                }\n           \
    \ }\n        }\n        return factors;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpz_at7huk.java:32: error: incompatible types: possible lossy conversion\
    \ from double to long\n            long next = Math.sqrt(n);\n               \
    \                  ^\n/tmp/tmpz_at7huk.java:46: error: incompatible types: possible\
    \ lossy conversion from long to int\n                    if (factors.get(i) <\
    \ factors.size()) {\n                                    ^\n/tmp/tmpz_at7huk.java:47:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \                    factors.set((int)i, factors.get(i) + 1l);\n             \
    \                                           ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1660011463
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> result = new ArrayList<>();\n        long factors = 0;\n\
    \        long num = 1l;\n        while (n % num != 0) {\n            factors +=\
    \ num;\n            num /= num;\n        }\n        if (n != 1) {\n          \
    \  factors += num;\n        }\n        while (!result.isEmpty() && result.size()\
    \ <= factors) {\n            n = result.remove(0);\n        }\n        result.add(num);\n\
    \        while (!result.isEmpty() && result.size() > factors) {\n            factors\
    \ = result.size();\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2yd4edbn.java:39)\n"
  stdout: ''
  timestamp: 1660011464
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        if (n <= 2l) \n            return new ArrayList<Long>(Arrays.asList((long)2l));\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long factor\
    \ = n;\n        factorizeHelper(factors, factor);\n        return factors;\n \
    \   }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz7fir5gm.java:23: error: cannot find symbol\n        factorizeHelper(factors,\
    \ factor);\n        ^\n  symbol:   method factorizeHelper(ArrayList<Long>,long)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011463
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        return factorize(Arrays.asList(n));\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp91565_u2.java:19: error: incompatible types: no instance(s) of\
    \ type variable(s) T exist so that List<T> conforms to long\n        return factorize(Arrays.asList(n));\n\
    \               ^\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>asList(T...)\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011463
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<>();\n        while (n % 2 ==\
    \ 0) {\n            factors.add(2l);\n            n = n / 2;\n        }\n    \
    \    while (n % 3 == 0) {\n            factors.add(3l);\n            n = n / 3;\n\
    \        }\n        while (n % 5 == 0) {\n            factors.add(5l);\n     \
    \       n = n / 5;\n        }\n        while (n % 7 == 0) {\n            factors.add(7l);\n\
    \            n = n / 7;\n        }\n        while (n % 11 == 0) {\n          \
    \  factors.add(11l);\n            n = n / 11;\n        }\n        while (n % 13\
    \ == 0) {\n            factors.add(13l);\n            n = n / 13;\n        }\n\
    \        while (n % 17 == 0) {\n            factors.add(17l);\n            n =\
    \ n / 17;\n        }\n        while (n % 19 == 0) {\n            factors.add(19l);\n\
    \            n = n / 19;\n        }\n        while (n % 23 == 0) {\n         \
    \   factors.add(23l);\n            n = n / 23;\n        }\n        while (n %\
    \ 29 == 0) {\n            factors.add(29l);\n            n = n / 29;\n       \
    \ }\n        while (n % 31 == 0) {\n            factors.add(31l);\n          \
    \  n = n / 31;\n        }\n        while (n % 37 == 0) {\n            factors.add(37l);\n\
    \            n = n / 37;\n        }\n        while (n % 41 == 0) {\n         \
    \   factors.add(41l);\n            n = n / 41;\n        }\n        while (n %\
    \ 43 == 0) {\n            factors.add(43l);\n            n = n / 43;\n       \
    \ }\n        while (n % 47 == 0) {\n            factors.add(47l);\n          \
    \  n = n / 47;\n        }\n        while (n % 53 == 0) {\n            factors.add(53l);\n\
    \            n = n / 53;\n        }\n        while (n % 59 == 0) {\n         \
    \   factors.add(59l);\n            n = n / 59;\n        }\n        while (n %\
    \ 61 == 0) {\n            factors.add(61l);\n            n = n / 61;\n       \
    \ }\n        while (n % 67 == 0) {\n            factors.add(67l);\n          \
    \  n = n / 67;\n        }\n        while (n % 71 == 0) {\n            factors.add(71l);\n\
    \            n = n / 71;\n        }\n        while (n % 73 == 0) {\n         \
    \   factors.add(73l);\n            n = n / 73;\n        }\n        while (n %\
    \ 79 == 0) {\n            factors.add(79l);\n            n = n / 79;\n       \
    \ }\n        while (n % 81 == 0) {\n            factors.add(81l);\n          \
    \  n = n / 81;\n        }\n        while (n % 83 == 0) {\n            factors.add(83l);\n\
    \            n = n / 83;\n        }\n        while (n % 89 == 0) {\n         \
    \   factors.add(89l);\n            n = n / 89;\n        }\n        while (n %\
    \ 97 == 0) {\n            factors.add(97\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp1vsl3524.java:121: error: ')' expected\n            factors.add(97\n\
    \                          ^\n/tmp/tmp1vsl3524.java:123: error: illegal start\
    \ of expression\n    public static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011463
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<>();\n        Primes primes =\
    \ new Primes();\n        ArrayList<Long> factorization = primes.factorize(n);\n\
    \        factorization.forEach(l -> factors.add((long)Math.pow((double) l, 1.0)));\n\
    \        return factors;\n    }\n    public static void main(String[] args) {\n\
    \    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmporugmjoi.java:20: error: cannot find symbol\n        Primes primes\
    \ = new Primes();\n        ^\n  symbol:   class Primes\n  location: class Problem\n\
    /tmp/tmporugmjoi.java:20: error: cannot find symbol\n        Primes primes = new\
    \ Primes();\n                            ^\n  symbol:   class Primes\n  location:\
    \ class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011463
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> res = new ArrayList<Long>();\n        ArrayList<Long>\
    \ factors = new ArrayList<Long>();\n        ArrayList<Long> primes = Primes.primes(n);\n\
    \        Arrays.sort(primes, Comparator.naturalOrder());\n        for(int i: primes)\
    \ {\n            factors.add(i);\n        }\n        for(int i = 1; i < factors.size();\
    \ i++) {\n            long f = factors.get(i);\n            while(f < n) {\n \
    \               n /= f;\n                res.add(f);\n            }\n        }\n\
    \        return res;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp9lqn70o7.java:21: error: cannot find symbol\n        ArrayList<Long>\
    \ primes = Primes.primes(n);\n                                 ^\n  symbol:  \
    \ variable Primes\n  location: class Problem\n/tmp/tmp9lqn70o7.java:22: error:\
    \ no suitable method found for sort(ArrayList<Long>,Comparator<T#1>)\n       \
    \ Arrays.sort(primes, Comparator.naturalOrder());\n              ^\n    method\
    \ Arrays.<T#2>sort(T#2[],Comparator<? super T#2>) is not applicable\n      (cannot\
    \ infer type-variable(s) T#2\n        (argument mismatch; ArrayList<Long> cannot\
    \ be converted to T#2[]))\n    method Arrays.<T#3>sort(T#3[],int,int,Comparator<?\
    \ super T#3>) is not applicable\n      (cannot infer type-variable(s) T#3\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2,T#3\
    \ are type-variables:\n    T#1 extends Comparable<? super T#1>\n    T#2 extends\
    \ Object declared in method <T#2>sort(T#2[],Comparator<? super T#2>)\n    T#3\
    \ extends Object declared in method <T#3>sort(T#3[],int,int,Comparator<? super\
    \ T#3>)\n/tmp/tmp9lqn70o7.java:23: error: incompatible types: Long cannot be converted\
    \ to int\n        for(int i: primes) {\n                   ^\n/tmp/tmp9lqn70o7.java:24:\
    \ error: incompatible types: int cannot be converted to Long\n            factors.add(i);\n\
    \                        ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n4 errors\n"
  stdout: ''
  timestamp: 1660011463
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        if (n <= 0)\
    \ {\n            return new ArrayList<Long>();\n        }\n        ArrayList<Long>\
    \ factorsOfN = new ArrayList<Long>();\n        factorsOfN.addAll(primeFactors(n));\n\
    \        long p = n;\n        long i = 2;\n        while (p != 1) {\n        \
    \    while (p % i == 0) {\n                p = p / i;\n                factors.add(i);\n\
    \                factorsOfN.add(p);\n            }\n            i = i + 2;\n \
    \       }\n        return factorsOfN;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpohf4hf4s.java:24: error: cannot find symbol\n        factorsOfN.addAll(primeFactors(n));\n\
    \                          ^\n  symbol:   method primeFactors(long)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011464
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        factorize(n,\
    \ factors);\n        return factors;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpwsl6mryb.java:20: error: method factorize in class Problem cannot\
    \ be applied to given types;\n        factorize(n, factors);\n        ^\n  required:\
    \ long\n  found:    long,ArrayList<Long>\n  reason: actual and formal argument\
    \ lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011453
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        Arrays.stream(factorize(n,\
    \ n)).forEach(factors::add);\n        return factors;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdzv7dccn.java:20: error: method factorize in class Problem cannot\
    \ be applied to given types;\n        Arrays.stream(factorize(n, n)).forEach(factors::add);\n\
    \                      ^\n  required: long\n  found:    long,long\n  reason: actual\
    \ and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011464
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<>();\n        long a = n;\n \
    \       ArrayList<Long> primeFactors = new ArrayList<>();\n        ArrayList<Long>\
    \ factorization = new ArrayList<>();\n        ArrayList<Long> factor = new ArrayList<>();\n\
    \        ArrayList<Long> currentFactors = new ArrayList<>();\n        ArrayList<Long>\
    \ currentFactor = new ArrayList<>();\n        ArrayList<Long> currentNum = new\
    \ ArrayList<>();\n        ArrayList<Long> currentPrime = new ArrayList<>();\n\
    \        while (!isPrime(a)) {\n            factors.add(new Long(a));\n      \
    \      factorization.add(a);\n            currentFactors.add(a);\n           \
    \ currentNum.add(a);\n            currentPrime.add(new Long(a));\n           \
    \ currentFactor.add(a);\n            factor.add(a);\n            a = a / 2;\n\
    \        }\n        for (int i = factors.size(); i-- > 0;) {\n            factors.add(new\
    \ Long(factorization.get(factor.get(i))));\n            factorization.add(factor.get(factor.get(i)));\n\
    \            currentFactors.add(factor.get(factor.get(i)));\n            currentNum.add(factor.get(factor.get(i)));\n\
    \            currentPrime.add(new Long(factor.get(factor.get(i))));\n        \
    \    currentFactor.add(factor.get(factor.get(i)));\n            factor.add(factor.get(i));\n\
    \        }\n        return factors;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmphfwyvzex.java:28: error: cannot find symbol\n        while (!isPrime(a))\
    \ {\n                ^\n  symbol:   method isPrime(long)\n  location: class Problem\n\
    /tmp/tmphfwyvzex.java:29: warning: [removal] Long(long) in Long has been deprecated\
    \ and marked for removal\n            factors.add(new Long(a));\n            \
    \            ^\n/tmp/tmphfwyvzex.java:33: warning: [removal] Long(long) in Long\
    \ has been deprecated and marked for removal\n            currentPrime.add(new\
    \ Long(a));\n                             ^\n/tmp/tmphfwyvzex.java:39: error:\
    \ incompatible types: Long cannot be converted to int\n            factors.add(new\
    \ Long(factorization.get(factor.get(i))));\n                                 \
    \                            ^\n/tmp/tmphfwyvzex.java:40: error: incompatible\
    \ types: Long cannot be converted to int\n            factorization.add(factor.get(factor.get(i)));\n\
    \                                                   ^\n/tmp/tmphfwyvzex.java:41:\
    \ error: incompatible types: Long cannot be converted to int\n            currentFactors.add(factor.get(factor.get(i)));\n\
    \                                                    ^\n/tmp/tmphfwyvzex.java:42:\
    \ error: incompatible types: Long cannot be converted to int\n            currentNum.add(factor.get(factor.get(i)));\n\
    \                                                ^\n/tmp/tmphfwyvzex.java:43:\
    \ error: incompatible types: Long cannot be converted to int\n            currentPrime.add(new\
    \ Long(factor.get(factor.get(i))));\n                                        \
    \                   ^\n/tmp/tmphfwyvzex.java:44: error: incompatible types: Long\
    \ cannot be converted to int\n            currentFactor.add(factor.get(factor.get(i)));\n\
    \                                                   ^\nNote: Some messages have\
    \ been simplified; recompile with -Xdiags:verbose to get full output\n7 errors\n\
    2 warnings\n"
  stdout: ''
  timestamp: 1660011463
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<>();\n        factorize(n, factors);\n\
    \        return factors;\n    }\n    public static void main(String[] args) {\n\
    \    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpl6lgf1i3.java:20: error: method factorize in class Problem cannot\
    \ be applied to given types;\n        factorize(n, factors);\n        ^\n  required:\
    \ long\n  found:    long,ArrayList<Long>\n  reason: actual and formal argument\
    \ lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011460
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> arr = new ArrayList<Long>();\n        ArrayList<Long>\
    \ primes = new ArrayList<Long>();\n        Arrays.stream(factors(n)).forEach(x\
    \ -> {\n            primes.add(x);\n            arr.add(x);\n        });\n   \
    \     int size = primes.size();\n        for (int i = 0; i < size; i++) {\n  \
    \          arr.add(arr.get(i) * primes.get(i));\n        }\n        return arr;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpogfypfhf.java:21: error: cannot find symbol\n        Arrays.stream(factors(n)).forEach(x\
    \ -> {\n                      ^\n  symbol:   method factors(long)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011464
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        if (n % 2 == 0 && n != 2)\n            return new ArrayList<Long>(Arrays.asList((long)2l));\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        if (n <= 1)\
    \ {\n            factors.add(2l);\n            return factors;\n        }\n  \
    \      for (long i = 2; i < n; i += 2)\n            if (n % i == 0) {\n      \
    \          factors.add(i);\n                n = n / i;\n            }\n      \
    \  while (n % 2 == 1)\n            n = n / 2;\n        if (n > 1) {\n        \
    \    for (long i = 2; i < n; i++)\n                if (n % i == 0) {\n       \
    \             factors.add(i);\n                    n = n / i;\n              \
    \  }\n        }\n        return factors;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf2fljfka.java:43)\n"
  stdout: ''
  timestamp: 1660011464
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (int i\
    \ = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0)\n              \
    \  factors.add(i);\n        }\n        return factors;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp53l7mm9m.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n                factors.add(i);\n                            ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n1 error\n"
  stdout: ''
  timestamp: 1660011464
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        // Write your code here\n        ArrayList<Long> factors = new ArrayList<>();\n\
    \        if (n == 1) {\n            factors.add(1l);\n            return factors;\n\
    \        }\n        long i = 1l;\n        long factor = 2;\n        while (n %\
    \ factor == 0) {\n            factors.add(factor);\n            n /= factor;\n\
    \            factor++;\n        }\n        if (n != 1) {\n            factors.add(n);\n\
    \        }\n        return factors;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0q0t37qe.java:40)\n"
  stdout: ''
  timestamp: 1660011464
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        if (n < 2l)\n            return null;\n        ArrayList<Long> factors\
    \ = new ArrayList<Long>();\n        long m = n;\n        while (m != 1) {\n  \
    \          long temp = 1;\n            while (m % 2 == 0)\n                m /=\
    \ 2;\n            while (m != 1) {\n                if (m % 2 == 0)\n        \
    \            temp *= 2l;\n                m /= 2;\n            }\n           \
    \ factors.add(temp);\n        }\n        return factors;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdguxzuoy.java:37)\n"
  stdout: ''
  timestamp: 1660011464
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<>();\n        long factor = 3;\n\
    \        while (n % factor != 0) {\n            factors.add(factor);\n       \
    \     n /= factor;\n        }\n        if (n == 1) {\n            factors.add(n);\n\
    \        }\n        return factors;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbty731y7.java:31)\n"
  stdout: ''
  timestamp: 1660011464
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> result = new ArrayList<>();\n        long p = n;\n  \
    \      while (n/p > 0) {\n            Long q = n/p;\n            for (int i =\
    \ 0; i< q; i++) {\n                result.add(p);\n                n = n/p;\n\
    \            }\n            p = p*p;\n        }\n        if (n>1) {\n        \
    \    while (n > 1) {\n                result.add(n);\n                n = n/p;\n\
    \            }\n        }\n        if (result.size() == 0) result=Arrays.asList(1l);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp911atxpj.java:35: error: incompatible types: no instance(s) of\
    \ type variable(s) T exist so that List<T> conforms to ArrayList<Long>\n     \
    \   if (result.size() == 0) result=Arrays.asList(1l);\n                      \
    \                              ^\n  where T is a type-variable:\n    T extends\
    \ Object declared in method <T>asList(T...)\n1 error\n"
  stdout: ''
  timestamp: 1660011464
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        // List of all factors of n\n        ArrayList<Long> factors = new ArrayList<>();\n\
    \        // Factor dividing n\n        long d = n;\n        while (n > 1) {\n\
    \            // If n is evenly divisible by any factor\n            if (n % 2\
    \ == 0) {\n                // Add n divided by 2\n                factors.add(n\
    \ / 2);\n                n /= 2;\n            } else {\n                // Add\
    \ n divided by its only factor\n                factors.add(n % 2);\n        \
    \        n /= 2;\n            }\n        }\n        // If n is prime we add n\n\
    \        if (n == 1) {\n            factors.add(n);\n        }\n        // If\
    \ d is prime we add d\n        if (d == 1) {\n            factors.add(d);\n  \
    \      }\n        // Return list of factors\n        return factors;\n    }\n\
    \    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpadhh43ku.java:47)\n"
  stdout: ''
  timestamp: 1660011464
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long factor\
    \ = 1;\n        while (n >= 1) {\n            if (n % factor == 0) {\n       \
    \         factors.add(factor);\n                n /= factor;\n            } else\
    \ {\n                factor = 1;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011469
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        // Write your code here\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        int i = 1;\n        int j = 1;\n        while (n % i == 0) {\n      \
    \      n = n / i;\n            j++;\n        }\n        while (n != 1) {\n   \
    \         if (i % n == 0) {\n                result.add(i);\n                i\
    \ *= j;\n            }\n            n--;\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp876ysjxz.java:29: error: incompatible types: int cannot be converted\
    \ to Long\n                result.add(i);\n                           ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n1 error\n"
  stdout: ''
  timestamp: 1660011465
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<>();\n        long fact = 1;\n\
    \        long factMax = n;\n        for (long i = 1; i < n; i *= 2) {\n      \
    \      fact = 1;\n            for (long j = 2; j < i; j += 2) {\n            \
    \    if (i % j == 0) {\n                    fact *= j;\n                    break;\n\
    \                }\n            }\n            if (fact > factMax) factMax = fact;\n\
    \            if (fact == 1) factors.add(i);\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg9vi0q5e.java:36)\n"
  stdout: ''
  timestamp: 1660011465
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long limit\
    \ = Math.sqrt(n);\n        long current = 2;\n        while (current <= limit)\
    \ {\n            if (n % current == 0) {\n                while (n % current ==\
    \ 0) {\n                    n /= current;\n                    factors.add(current);\n\
    \                }\n            }\n            current++;\n        }\n       \
    \ if (n > 1) {\n            while (n % 2 == 0) {\n                n /= 2;\n  \
    \              factors.add(2);\n            }\n            while (n % 3 == 0)\
    \ {\n                n /= 3;\n                factors.add(3);\n            }\n\
    \        }\n        return factors;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpahf08dxi.java:20: error: incompatible types: possible lossy conversion\
    \ from double to long\n        long limit = Math.sqrt(n);\n                  \
    \            ^\n/tmp/tmpahf08dxi.java:34: error: incompatible types: int cannot\
    \ be converted to Long\n                factors.add(2);\n                    \
    \        ^\n/tmp/tmpahf08dxi.java:38: error: incompatible types: int cannot be\
    \ converted to Long\n                factors.add(3);\n                       \
    \     ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1660011465
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<>();\n        factorize(n,factors);\n\
    \        return factors;\n    }\n    public static void main(String[] args) {\n\
    \    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpu1z3eg17.java:20: error: method factorize in class Problem cannot\
    \ be applied to given types;\n        factorize(n,factors);\n        ^\n  required:\
    \ long\n  found:    long,ArrayList<Long>\n  reason: actual and formal argument\
    \ lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011465
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<>();\n        long sqr = n;\n\
    \        while (sqr > 1) {\n            long tmp = (sqr - 1) / 2;\n          \
    \  while (tmp * tmp <= sqr) {\n                if (n % tmp == 0) {\n         \
    \           factors.add(tmp);\n                    break;\n                }\n\
    \                tmp = (tmp * 2) / 2;\n            }\n            sqr = (sqr -\
    \ 1) / 2;\n        }\n        return factors;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArithmeticException: / by zero\n\
    \tat Problem.factorize(tmpppmq5axp.java:24)\n\tat Problem.main(tmpppmq5axp.java:35)\n"
  stdout: ''
  timestamp: 1660011465
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factorizations = new ArrayList<>();\n        factorize2(n,\
    \ factorizations);\n        return factorizations;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp7t6cn5qp.java:20: error: cannot find symbol\n        factorize2(n,\
    \ factorizations);\n        ^\n  symbol:   method factorize2(long,ArrayList<Long>)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011465
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<>();\n        ArrayList factorizationsOfN\
    \ = new ArrayList<>();\n        boolean isPrime = true;\n        long m = n;\n\
    \        while (m != 1) {\n            if (m % 2 == 1) {\n                isPrime\
    \ = false;\n                break;\n            }\n            m = (long) (Math.sqrt(m)\
    \ + 0.5);\n        }\n        if (isPrime) {\n            if (n == 2) {\n    \
    \            factors.add(2);\n                factorizationsOfN.add(n);\n    \
    \            return factors;\n            }\n            boolean isPrime = true;\n\
    \            long m = 2;\n            while (m <= n / 2) {\n                while\
    \ (n % m == 0) {\n                    factors.add(m);\n                    factorizationsOfN.add(n);\n\
    \                    n = n / m;\n                }\n                m++;\n   \
    \         }\n            if (n != 1) {\n                factors.add(n);\n    \
    \            factorizationsOfN.add(n);\n            }\n            return factors;\n\
    \        } else {\n            long m = 2;\n            while (m <= n / 2) {\n\
    \                while (n % m == 0) {\n                    factors.add(m);\n \
    \                   factorizationsOfN.add(n);\n                    n = n / m;\n\
    \                }\n                m++;\n            }\n            if (n !=\
    \ 1) {\n                factors.add(n);\n                factorizationsOfN.add(n);\n\
    \            }\n            return factors;\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpzfx4by0d.java:32: error: incompatible types: int cannot be converted\
    \ to Long\n                factors.add(2);\n                            ^\n/tmp/tmpzfx4by0d.java:36:\
    \ error: variable isPrime is already defined in method factorize(long)\n     \
    \       boolean isPrime = true;\n                    ^\n/tmp/tmpzfx4by0d.java:37:\
    \ error: variable m is already defined in method factorize(long)\n           \
    \ long m = 2;\n                 ^\n/tmp/tmpzfx4by0d.java:52: error: variable m\
    \ is already defined in method factorize(long)\n            long m = 2;\n    \
    \             ^\nNote: /tmp/tmpzfx4by0d.java uses unchecked or unsafe operations.\n\
    Note: Recompile with -Xlint:unchecked for details.\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n4 errors\n"
  stdout: ''
  timestamp: 1660011465
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<>();\n        long d = n;\n \
    \       while (true) {\n            if (d == 1) break;\n            long x = d\
    \ / 2;\n            while (x != 1 && d % x == 0) {\n                factors.add(x);\n\
    \                x = x / 2;\n            }\n            d = d;\n        }\n  \
    \      if (d == 1) factors.add(1l);\n        return factors;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011470
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<>();\n        if (n <= 1l) return\
    \ factors;\n        long d = 2l, p = n, q = n, dq = n, r = 2l;\n        while(true)\
    \ {\n            long q = p * q;\n            long r = p * r;\n            if\
    \ (q <= r) {\n                factors.add(q);\n                p *= q;\n     \
    \       } else {\n                factors.add(r);\n                p *= r;\n \
    \           }\n            if (p == 1) break;\n            while (p % d == 0)\
    \ {\n                d *= d++;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp87ajlvvp.java:23: error: variable q is already defined in method\
    \ factorize(long)\n            long q = p * q;\n                 ^\n/tmp/tmp87ajlvvp.java:24:\
    \ error: variable r is already defined in method factorize(long)\n           \
    \ long r = p * r;\n                 ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011465
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<>();\n        final int MAX_FACTORS\
    \ = 500;\n\n        // check if number is prime\n        if (n == 1L) factors.add(1L);\n\
    \        if (n == 2L) factors.add(2L);\n        if (n == 3L) factors.add(3L);\n\
    \        if (n % 4 == 0) return factors;\n\n        // check if number is odd\n\
    \        if (n % 2 == 1L) {\n            factors.add(2L);\n            while (n\
    \ % 2 == 1L) {\n                n /= 2L;\n                factors.add(2L);\n \
    \           }\n        }\n\n        // iterate over factors\n        for (int\
    \ i = 3; i <= Math.sqrt(n); i += 2) {\n            // check if factor is prime\n\
    \            if (n % i == 0L) {\n                factors.add(i);\n           \
    \     while (n % i == 0L) {\n                    n /= i;\n                   \
    \ factors.add(i);\n                }\n            }\n        }\n        if (n\
    \ != 1L) factors.add(n); // if number is not a prime factor add it\n        return\
    \ factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm9l6087j.java:41: error: incompatible types: int cannot be converted\
    \ to Long\n                factors.add(i);\n                            ^\n/tmp/tmpm9l6087j.java:44:\
    \ error: incompatible types: int cannot be converted to Long\n               \
    \     factors.add(i);\n                                ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011465
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        if (n == 1) {\n            return new ArrayList<Long>(Collections.singletonList(n));\n\
    \        }\n        ArrayList<Long> factors = factorizeHelper(n);\n        ArrayList<Long>\
    \ smallerFactors = factorize(n / 2);\n        ArrayList<Long> productFactors =\
    \ smallerFactors.stream().map(factor -> factors.add(factor)).flatMap(ArrayList::stream).collect(Collectors.toList());\n\
    \        return productFactors;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsnad5s3l.java:22: error: cannot find symbol\n        ArrayList<Long>\
    \ factors = factorizeHelper(n);\n                                  ^\n  symbol:\
    \   method factorizeHelper(long)\n  location: class Problem\n/tmp/tmpsnad5s3l.java:24:\
    \ error: incompatible types: cannot infer type-variable(s) R\n        ArrayList<Long>\
    \ productFactors = smallerFactors.stream().map(factor -> factors.add(factor)).flatMap(ArrayList::stream).collect(Collectors.toList());\n\
    \                                                                            \
    \                               ^\n    (argument mismatch; invalid method reference\n\
    \      method stream in interface Collection<E> cannot be applied to given types\n\
    \        required: no arguments\n        found:    Boolean\n        reason: actual\
    \ and formal argument lists differ in length)\n  where R,T,E are type-variables:\n\
    \    R extends Object declared in method <R>flatMap(Function<? super T,? extends\
    \ Stream<? extends R>>)\n    T extends Object declared in interface Stream\n \
    \   E extends Object declared in interface Collection\n2 errors\n"
  stdout: ''
  timestamp: 1660011465
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        factorize(n,\
    \ factors);\n        return factors;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpwsl6mryb.java:20: error: method factorize in class Problem cannot\
    \ be applied to given types;\n        factorize(n, factors);\n        ^\n  required:\
    \ long\n  found:    long,ArrayList<Long>\n  reason: actual and formal argument\
    \ lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011453
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        if (n <= 1)\n\
    \            return factors;\n        long limit = long.MaxValue / n;\n      \
    \  for (int i = 2; i <= limit; i++)\n            if (n % i == 0) {\n         \
    \       while (n % i == 0)\n                    n /= i;\n                factors.add(i);\n\
    \                if (n > 2)\n                    factors.add(n);\n           \
    \     break;\n            }\n        if (n > 2)\n            factors.add(n);\n\
    \        return factors;\n    }\n    public static void main(String[] args) {\n\
    \    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdm20iyj6.java:22: error: class expected\n        long limit = long.MaxValue\
    \ / n;\n                          ^\n1 error\n"
  stdout: ''
  timestamp: 1660011464
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<>();\n        // Initialize with\
    \ first integer factor\n        factors.add(1l);\n        // Try all integer factors\n\
    \        for (long i = 1; i * i <= n; i++) {\n            // Check if i is a prime\
    \ factor\n            if (n % i == 0) {\n                // Add i to factors\n\
    \                factors.add(i * i);\n                // Remove i from integer\
    \ n\n                n = n / i;\n            }\n        }\n        // If integer\
    \ is even, add it to factors\n        if (n != 1l)\n            factors.add(n);\n\
    \        return factors;\n    }\n    public static void main(String[] args) {\n\
    \    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcyrxnrw0.java:38)\n"
  stdout: ''
  timestamp: 1660011465
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        factorize(n,\
    \ factors);\n        return factors;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpwsl6mryb.java:20: error: method factorize in class Problem cannot\
    \ be applied to given types;\n        factorize(n, factors);\n        ^\n  required:\
    \ long\n  found:    long,ArrayList<Long>\n  reason: actual and formal argument\
    \ lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011453
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = Arrays.asList((long)1l);\n        for(int i\
    \ = 2; i <= Math.sqrt(n); i++) {\n            if(n%i == 0) {\n               \
    \ factors.add(i);\n                n = n/i;\n            } else {\n          \
    \      break;\n            }\n        }\n        return factors;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpzftwh7n0.java:19: error: incompatible types: no instance(s) of\
    \ type variable(s) T exist so that List<T> conforms to ArrayList<Long>\n     \
    \   ArrayList<Long> factors = Arrays.asList((long)1l);\n                     \
    \                          ^\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>asList(T...)\n/tmp/tmpzftwh7n0.java:22: error: incompatible\
    \ types: int cannot be converted to Long\n                factors.add(i);\n  \
    \                          ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011465
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        List<Long>\
    \ factorArray = new ArrayList<Long>();\n        long product = n;\n\n        factors.add(1l);\n\
    \        while (!factorArray.isEmpty()) {\n            int factorCounter = 0;\n\
    \            long factor = factorArray.get(0);\n            while (true) {\n \
    \               if (product % factor == 0) {\n                    factors.add(factor);\n\
    \                    factorArray.remove(factor);\n                    factorCounter++;\n\
    \                    break;\n                }\n                factor++;\n  \
    \          }\n            product = product / factor;\n        }\n\n        return\
    \ factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp89pwvg7.java:42)\n"
  stdout: ''
  timestamp: 1660011465
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        ArrayList<Long>\
    \ factorsOfN = new ArrayList<Long>();\n        // Get all factors of given number\n\
    \        for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n \
    \               factors.add(i);\n                for (int j = i; j <= n / i; j++)\
    \ {\n                    if (n % j == 0) {\n                        factorsOfN.add(j);\n\
    \                        factors.add((long)n);\n                        break;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ new ArrayList<Long>(factors);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmprf9h4gh0.java:24: error: incompatible types: int cannot be converted\
    \ to Long\n                factors.add(i);\n                            ^\n/tmp/tmprf9h4gh0.java:27:\
    \ error: incompatible types: int cannot be converted to Long\n               \
    \         factorsOfN.add(j);\n                                       ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n2 errors\n"
  stdout: ''
  timestamp: 1660011465
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        ArrayList<Long>\
    \ factorsOfBiggerNumber = new ArrayList<Long>();\n        Arrays.fill(factors,\
    \ 1L);\n        for (int i = 1; i < Math.sqrt(n); i++) {\n            if (n %\
    \ i == 0) {\n                factors.add(i);\n                if (i % 2 != 0)\
    \ {\n                    factorsOfBiggerNumber.add(i);\n                }\n  \
    \          }\n        }\n        long biggerFactorsOfNumber = factorsOfBiggerNumber.stream().reduce((a,\
    \ b) -> a * b);\n        factors.add(biggerFactorsOfNumber);\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpprr8o6cz.java:21: error: no suitable method found for fill(ArrayList<Long>,long)\n\
    \        Arrays.fill(factors, 1L);\n              ^\n    method Arrays.fill(long[],long)\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to long[])\n    method Arrays.fill(int[],int) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to int[])\n    method Arrays.fill(short[],short)\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.fill(char[],char) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.fill(byte[],byte)\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.fill(boolean[],boolean) is not applicable\n  \
    \    (argument mismatch; ArrayList<Long> cannot be converted to boolean[])\n \
    \   method Arrays.fill(double[],double) is not applicable\n      (argument mismatch;\
    \ ArrayList<Long> cannot be converted to double[])\n    method Arrays.fill(float[],float)\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to float[])\n    method Arrays.fill(Object[],Object) is not applicable\n   \
    \   (argument mismatch; ArrayList<Long> cannot be converted to Object[])\n/tmp/tmpprr8o6cz.java:24:\
    \ error: incompatible types: int cannot be converted to Long\n               \
    \ factors.add(i);\n                            ^\n/tmp/tmpprr8o6cz.java:26: error:\
    \ incompatible types: int cannot be converted to Long\n                    factorsOfBiggerNumber.add(i);\n\
    \                                              ^\n/tmp/tmpprr8o6cz.java:30: error:\
    \ incompatible types: Optional<Long> cannot be converted to long\n        long\
    \ biggerFactorsOfNumber = factorsOfBiggerNumber.stream().reduce((a, b) -> a *\
    \ b);\n                                                                      \
    \    ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n4 errors\n"
  stdout: ''
  timestamp: 1660011465
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        ArrayList<Long>\
    \ factorization = factorize(n);\n        for (long i : factorization) {\n    \
    \        factors.add(i);\n        }\n        return factors;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem.factorize(tmp54_9eqwd.java:20)\n\
    \tat Problem.factorize(tmp54_9eqwd.java:20)\n\tat Problem.factorize(tmp54_9eqwd.java:20)\n\
    \tat Problem.factorize(tmp54_9eqwd.java:20)\n\tat Problem.factorize(tmp54_9eqwd.java:20)\n\
    \tat Problem.factorize(tmp54_9eqwd.java:20)\n\tat Problem.factorize(tmp54_9eqwd.java:20)\n\
    \tat Problem.factorize(tmp54_9eqwd.java:20)\n\tat Problem.factorize(tmp54_9eqwd.java:20)\n\
    \tat Problem.factorize(tmp54_9eqwd.java:20)\n\tat Problem.factorize(tmp54_9eqwd.java:20)\n\
    \tat Problem.factorize(tmp54_9eqwd.java:20)\n\tat Problem.factorize(tmp54_9eqwd.java:20)\n\
    \tat Problem.factorize(tmp54_9eqwd.java:20)\n\tat Problem.factorize(tmp54_9eqwd.java:20)\n\
    \tat Problem.factorize(tmp54_9eqwd.java:20)\n\tat Problem.factorize(tmp54_9eqwd.java:20)\n\
    \tat Problem.factorize(tmp54_9eqwd.java:20)\n\tat Problem.factorize(tmp54_9eqwd.java:20)\n\
    \tat Problem.factorize(tmp54_9eqwd.java:20)\n\tat Problem.factorize(tmp54_9eqwd.java:20)\n\
    \tat Problem.factorize(tmp54_9eqwd.java:20)\n\tat Problem.factorize(tmp54_9eqwd.java:20)\n\
    \tat Problem.factorize(tmp54_9eqwd.java:20)\n\tat Problem.factorize(tmp54_9eqwd.java:20)\n\
    \tat Problem.factorize(tmp54_9eqwd.java:20)\n\tat Problem.factorize(tmp54_9eqwd.java:20)\n\
    \tat Problem.factorize(tmp54_9eqwd.java:20)\n\tat Problem.factorize(tmp54_9eqwd.java:20)\n\
    \tat Problem.factorize(tmp54_9eqwd.java:20)\n\tat Problem.factorize(tmp54_9eqwd.java:20)\n\
    \tat Problem.factorize(tmp54_9eqwd.java:20)\n\tat Problem.factorize(tmp54_9eqwd.java:20)\n\
    \tat Problem.factorize(tmp54_9eqwd.java:20)\n\tat Problem.factorize(tmp54_9eqwd.java:20)\n\
    \tat Problem.factorize(tmp54_9eqwd.java:20)\n\tat Problem.factorize(tmp54_9eqwd.java:20)\n\
    \tat Problem.factorize(tmp54_9eqwd.java:20)\n\tat Problem.factorize(tmp54_9eqwd.java:20)\n\
    \tat Problem.factorize(tmp54_9eqwd.java:20)\n\tat Problem.factorize(tmp54_9eqwd.java:20)\n\
    \tat Problem.factorize(tmp54_9eqwd.java:20)\n\tat Problem.factorize(tmp54_9eqwd.java:20)\n\
    \tat Problem.factorize(tmp54_9eqwd.java:20)\n\tat Problem.factorize(tmp54_9eqwd.java:20)\n\
    \tat Problem.factorize(tmp54_9eqwd.java:20)\n\tat Problem.fa"
  stdout: ''
  timestamp: 1660011465
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> primeFactors = new ArrayList<>();\n\n        // Get factors\
    \ of n\n        long divisor = n;\n        while (true) {\n            // If divisor\
    \ is 1, break the loop\n            if (divisor == 1) break;\n\n            //\
    \ If divisor's multiplier is greater than that of n\n            if (divisor %\
    \ 2 == 0 && n % divisor != 0) {\n                n = n / divisor;\n          \
    \      divisor = 2;\n                continue;\n            }\n\n            //\
    \ If divisor's multiplier is less than that of n\n            if (divisor % 2\
    \ == 1 && n % divisor == 0) {\n                n = n / divisor;\n            \
    \    divisor = 2;\n                continue;\n            }\n\n            //\
    \ If divisor's multiplier is divisible by 2 then divide n by divisor and repeat\
    \ loop\n            divisor = 2 * divisor;\n        }\n\n        // Add the remaining\
    \ factors to primeFactors\n        while (n != 1) {\n            primeFactors.add(n\
    \ % 2);\n            n = n / 2;\n        }\n\n        return primeFactors;\n \
    \   }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArithmeticException: / by zero\n\
    \tat Problem.factorize(tmpt74i2twr.java:28)\n\tat Problem.main(tmpt74i2twr.java:54)\n"
  stdout: ''
  timestamp: 1660011465
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long i = 2;\n\
    \        while(i < n) {\n            while((n % i) == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n            i += 2;\n        }\n    \
    \    if(n > 1) factors.add(n);\n        return factors;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjeyufyw3.java:35)\n"
  stdout: ''
  timestamp: 1660011466
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> primes = new ArrayList<>();\n        ArrayList<Long>\
    \ factors = new ArrayList<>();\n        for (long i = 1; i <= n; i++) {\n    \
    \        if (n % i == 0) {\n                primes.add(i);\n                factors.add(i);\n\
    \                for (int j = i*i; j < n; j+=i) {\n                    if (n %\
    \ j == 0) {\n                        factors.add(j);\n                    }\n\
    \                }\n            }\n        }\n        Arrays.sort(factors);\n\
    \        primes.addAll(factors);\n        return primes;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp28wor1f_.java:25: error: incompatible types: possible lossy conversion\
    \ from long to int\n                for (int j = i*i; j < n; j+=i) {\n       \
    \                       ^\n/tmp/tmp28wor1f_.java:27: error: incompatible types:\
    \ int cannot be converted to Long\n                        factors.add(j);\n \
    \                                   ^\n/tmp/tmp28wor1f_.java:32: error: no suitable\
    \ method found for sort(ArrayList<Long>)\n        Arrays.sort(factors);\n    \
    \          ^\n    method Arrays.sort(int[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to int[])\n    method Arrays.sort(long[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to long[])\n    method Arrays.sort(short[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to short[])\n    method Arrays.sort(char[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to char[])\n    method Arrays.sort(byte[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to byte[])\n    method Arrays.sort(float[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to float[])\n    method Arrays.sort(double[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to double[])\n    method Arrays.sort(Object[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<? super T#1>) is\
    \ not applicable\n      (cannot infer type-variable(s) T#1\n        (actual and\
    \ formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messa"
  stdout: ''
  timestamp: 1660011465
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        int prime;\n        ArrayList<Long> factors = new ArrayList<>();\n\n\
    \        // Loop to find the factors and count them up to their total counts\n\
    \        for(int i = 1; i <= n; i++) {\n            // Prime factor calculations\n\
    \            if(n % i == 0) {\n                factors.add(i);\n             \
    \   factors.add(n/i);\n            }\n        }\n        return factors;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphi9wrmhw.java:26: error: incompatible types: int cannot be converted\
    \ to Long\n                factors.add(i);\n                            ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n1 error\n"
  stdout: ''
  timestamp: 1660011465
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        // To find\
    \ out prime factors we use sieve of Eratosthenes algorithm. \n        // First\
    \ we take an array of length n with all elements as true and mark all other elements\
    \ as false\n        boolean[] arr = new boolean[n + 1];\n        // Next we loop\
    \ through all the elements and mark them true or false as per the condition\n\
    \        for (int i = 0; i <= n; i++) {\n            if (arr[i] == true) {\n \
    \               // Here we find if i is prime or not if yes then add it to prime\
    \ factors arraylist\n                if (isPrime(i)) {\n                    factors.add(i);\n\
    \                }\n            }\n        }\n        return factors;\n    }\n\
    \    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpetyv5eq4.java:22: error: incompatible types: possible lossy conversion\
    \ from long to int\n        boolean[] arr = new boolean[n + 1];\n            \
    \                          ^\n/tmp/tmpetyv5eq4.java:27: error: cannot find symbol\n\
    \                if (isPrime(i)) {\n                    ^\n  symbol:   method\
    \ isPrime(int)\n  location: class Problem\n/tmp/tmpetyv5eq4.java:28: error: incompatible\
    \ types: int cannot be converted to Long\n                    factors.add(i);\n\
    \                                ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1660011466
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> result = new ArrayList<Long>();\n        ArrayList<Long>\
    \ factors = new ArrayList<Long>();\n        long factor = 1;\n        long limit\
    \ = (long) Math.sqrt(n);\n        for(long i=2;i<=limit;i++) {\n            if(n%i==0)\
    \ {\n                factor = n/i;\n                factors.add(factor);\n   \
    \             result.add(factor);\n                while(factors.contains(factor))\
    \ {\n                    factor += 1;\n                    result.add(factor);\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyn9504ra.java:37)\n"
  stdout: ''
  timestamp: 1660011466
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return array list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be array\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize((8l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
    \ (long)2l)))\n    // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        if (n < 2)\n            throw new IllegalArgumentException();\n     \
    \   ArrayList<Long> factors = new ArrayList<Long>();\n        long n = n;\n  \
    \      while (n % 2 == 0)\n            n = n/2;\n        long currentCount = 2;\n\
    \        while (n > 1) {\n            if (n % currentCount == 0)\n           \
    \     break;\n            currentCount++;\n            n = n/currentCount;\n \
    \       }\n        factors.add(currentCount);\n        long prevCount = currentCount;\n\
    \        while (n != 1) {\n            if (n % prevCount == 0) {\n           \
    \     factors.add(prevCount);\n                n = n/prevCount;\n            \
    \    prevCount = currentCount;\n            } else {\n                prevCount++;\n\
    \                n = n/prevCount;\n            }\n        }\n        if (n ==\
    \ 1)\n            factors.add(1);\n        return factors;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpca8bs_c_.java:22: error: variable n is already defined in method\
    \ factorize(long)\n        long n = n;\n             ^\n/tmp/tmpca8bs_c_.java:45:\
    \ error: incompatible types: int cannot be converted to Long\n            factors.add(1);\n\
    \                        ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011466
